{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../src/helpers/environment.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalValue } from \"../internal/global\";\r\nimport { safeGetLazy } from \"./safe_lazy\";\r\nimport { ILazyValue, _globalLazyTestHooks } from \"./lazy\";\r\n\r\nconst WINDOW = \"window\";\r\n\r\ndeclare let WorkerGlobalScope: any;\r\ndeclare let self: any;\r\n\r\nlet _cachedGlobal: ILazyValue<Window>;\r\n\r\nlet _cachedWindow: ILazyValue<Window>;\r\nlet _cachedDocument: ILazyValue<Document>;\r\nlet _cachedNavigator: ILazyValue<Navigator>;\r\nlet _cachedHistory: ILazyValue<History>;\r\nlet _isWebWorker: ILazyValue<boolean>;\r\nlet _isNode: ILazyValue<boolean>;\r\n\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the named global\r\n * value if available, will return `null` if the named global object is not available or if the runtime\r\n * throws an exception when attempting to access the global object.\r\n * Unlike {@link getInst} the value is cached after the first access, so if the global value changes after\r\n * the initial fetch the original cached value is still returned.\r\n * @since 0.9.5\r\n * @group Environment\r\n * @group Lazy\r\n * @group Safe\r\n * @param name The name of the global object to get.\r\n * @returns A new readonly {@link ILazyValue} instance which will lazily attempt to return the globally\r\n * available named instance.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = lazySafeGetInst(\"myGlobal\");\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * let promiseCls = lazySafeGetInst(\"Promise\");\r\n * // null if Promise is not supported in the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\nexport const lazySafeGetInst = <T>(name: string) : ILazyValue<T> => safeGetLazy(() => getInst<T>(name) || UNDEF_VALUE, UNDEF_VALUE);\r\n\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal\r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions. And this caches the lookup of the global as in some environments\r\n * this can be an expensive operation.\r\n * @group Environment\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n */\r\nexport const getGlobal = (useCached?: boolean): Window => {\r\n    (!_cachedGlobal || useCached === false || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedGlobal.b)) && (_cachedGlobal = safeGetLazy(_getGlobalValue, NULL_VALUE));\r\n\r\n    return _cachedGlobal.v;\r\n};\r\n\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @group Environment\r\n * @param name The globally named object\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = getInst(\"myGlobal\");\r\n * // cachedValue === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // getInst(\"myGlobal\") === \"Darkness\"\r\n *\r\n * let promiseCls = getInst(\"Promise\");\r\n * // May throw if the global is not supported by the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\nexport const getInst = <T>(name: string, useCached?: boolean): T => {\r\n    const gbl = (!_cachedGlobal || useCached === false) ? getGlobal(useCached) : _cachedGlobal.v;\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name] as T;\r\n    }\r\n\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === WINDOW && _cachedWindow) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        return <any>_cachedWindow.v as T;\r\n    }\r\n\r\n    return NULL_VALUE;\r\n};\r\n\r\n/**\r\n * Identify whether the runtime contains a `document` object\r\n * @group Environment\r\n * @returns - True if a `document` exists\r\n */\r\nexport const hasDocument = (): boolean => !!getDocument();\r\n\r\n/**\r\n * Return the global `document` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getDocument = (): Document => {\r\n    (!_cachedDocument || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedDocument.b)) && (_cachedDocument = lazySafeGetInst(\"document\"));\r\n\r\n    return _cachedDocument.v;\r\n};\r\n\r\n/**\r\n * Identify whether the runtime contains a `window` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasWindow = (): boolean => !!getWindow();\r\n\r\n/**\r\n * Return the global `window` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getWindow = (): Window => {\r\n    (!_cachedWindow || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedWindow.b)) && (_cachedWindow = lazySafeGetInst(WINDOW));\r\n\r\n    return _cachedWindow.v;\r\n};\r\n\r\n/**\r\n * Identify whether the runtimne contains a `navigator` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasNavigator = (): boolean => !!getNavigator();\r\n\r\n/**\r\n * Returns the global `navigator` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getNavigator = (): Navigator => {\r\n    (!_cachedNavigator || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedNavigator.b)) && (_cachedNavigator = lazySafeGetInst(\"navigator\"));\r\n\r\n    return _cachedNavigator.v;\r\n}\r\n\r\n/**\r\n * Identifies whether the runtime contains a `history` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasHistory = (): boolean => !!getHistory();\r\n\r\n/**\r\n * Returns the global `history` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getHistory = (): History | null => {\r\n    (!_cachedHistory || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedHistory.b)) && (_cachedHistory = lazySafeGetInst(\"history\"));\r\n\r\n    return _cachedHistory.v;\r\n};\r\n\r\n/**\r\n * Simple method to determine if we are running in a node environment\r\n * @group Environment\r\n * @returns True if you are\r\n */\r\nexport const isNode = (): boolean => {\r\n    !_isNode && (_isNode = safeGetLazy(() => !!(process && (process.versions||{}).node), false))\r\n\r\n    return _isNode.v;\r\n};\r\n\r\n/**\r\n * Helper to identify if you are running as a Dedicated, Shared or Service worker\r\n * @group Environment\r\n * @returns True if the environment you are in looks like a Web Worker\r\n */\r\nexport const isWebWorker = (): boolean => {\r\n    !_isWebWorker && (_isWebWorker = safeGetLazy(() => !!(self && self instanceof WorkerGlobalScope), false));\r\n\r\n    return _isWebWorker.v;\r\n};\r\n"]}