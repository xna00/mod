{"version":3,"file":"customError.js","sourceRoot":"","sources":["../../src/helpers/customError.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\nimport { CONSTRUCTOR, NAME, NULL_VALUE, PROTOTYPE } from \"../internal/constants\";\r\nimport { objCreate } from \"../object/create\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { objGetPrototypeOf } from \"../object/object\";\r\nimport { objSetPrototypeOf } from \"../object/set_proto\";\r\n\r\n/**\r\n * Defines the definition of the custom error constructor\r\n * Used by: {@link createCustomError}\r\n * @group Error\r\n */\r\nexport interface CustomErrorConstructor<T extends Error = Error> extends ErrorConstructor {\r\n    new(message?: string): T;\r\n    (message?: string): T;\r\n    readonly prototype: T;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nconst _createCustomError = <T>(name: string, d: any, b: any): T => {\r\n    _safeDefineName(d, name);\r\n    d = objSetPrototypeOf(d, b);\r\n    function __() {\r\n        this.constructor = d;\r\n        _safeDefineName(this, name);\r\n    }\r\n\r\n    d[PROTOTYPE] = b === NULL_VALUE ? objCreate(b) : ((__ as any)[PROTOTYPE] = b[PROTOTYPE], new (__ as any)());\r\n\r\n    return d;\r\n};\r\n\r\nconst _safeSetName = (baseClass: any, name: string) => {\r\n    try {\r\n        name && (baseClass[NAME] = name);\r\n        //name && (baseClass[PROTOTYPE][NAME] = name);\r\n    } catch(e) {\r\n        // Do nothing\r\n    }\r\n};\r\n\r\nconst _safeDefineName = (target: any, name: string) => {\r\n    try {\r\n        objDefine(target, NAME, { v: name, c: true, e: false });\r\n    } catch (e) {\r\n        // Do nothing\r\n    }\r\n};\r\n\r\n/**\r\n * Create a Custom Error class which may be used to throw custom errors.\r\n * @group Error\r\n * @param name - The name of the Custom Error\r\n * @param constructCb - [Optional] An optional callback function to call when a\r\n * new Customer Error instance is being created.\r\n * @param errorBase - [Optional] (since v0.9.6) The error class to extend for this class, defaults to Error.\r\n * @returns A new Error `class`\r\n * @example\r\n * ```ts\r\n * import { createCustomError, isError } from \"@nevware21/ts-utils\";\r\n *\r\n * // For an error that just contains a message\r\n * let myCustomErrorError = createCustomError(\"MessageError\");\r\n *\r\n * try {\r\n *     throw new myCustomErrorError(\"Error Message!\");\r\n * } catch(e) {\r\n *      // e.name === MessageError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // Or a more complex error object\r\n * interface MyCriticalErrorConstructor extends CustomErrorConstructor {\r\n *     new(message: string, file: string, line: number, col: number): MyCriticalError;\r\n *     (message: string, file: string, line: number, col: number): MyCriticalError;\r\n * }\r\n *\r\n * interface MyCriticalError extends Error {\r\n *     readonly errorId: number;\r\n *     readonly args: any[];        // Holds all of the arguments passed during construction\r\n * }\r\n *\r\n * let _totalErrors = 0;\r\n * let myCustomError = createCustomError<MyCriticalErrorConstructor>(\"CriticalError\", (self, args) => {\r\n *     _totalErrors++;\r\n *     self.errorId = _totalErrors;\r\n *     self.args = args;\r\n * });\r\n *\r\n * try {\r\n *     throw new myCustomError(\"Not Again!\");\r\n * } catch(e) {\r\n *      // e.name === CriticalError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // ----------------------------------------------------------\r\n * // Extending another custom error class\r\n * // ----------------------------------------------------------\r\n *\r\n * let AppError = createCustomError(\"ApplicationError\");\r\n * let theAppError = new appError();\r\n *\r\n * isError(theAppError);                    // true\r\n * theAppError instanceof Error;            // true\r\n * theAppError instanceof AppError;         // true\r\n *\r\n * let StartupError = createCustomError(\"StartupError\", null, AppError);\r\n * let theStartupError = new StartupError();\r\n *\r\n * isError(theStartupError);                // true\r\n * theStartupError instanceof Error;        // true\r\n * theStartupError instanceof AppError;     // true\r\n * theStartupError instanceof StartupError; // true\r\n * ```\r\n */\r\nexport function createCustomError<T extends ErrorConstructor = CustomErrorConstructor, B extends ErrorConstructor = ErrorConstructor>(\r\n    name: string,\r\n    constructCb?: ((self: any, args: IArguments) => void) | null,\r\n    errorBase?: B): T {\r\n\r\n    let theBaseClass = errorBase || Error;\r\n    let orgName = theBaseClass[PROTOTYPE][NAME];\r\n    let captureFn = Error.captureStackTrace;\r\n    return _createCustomError<T>(name, function (this: any) {\r\n        let _this = this;\r\n        try {\r\n            _safeSetName(theBaseClass, name);\r\n            let _self = fnApply(theBaseClass, _this, arrSlice(arguments)) || _this;\r\n            if (_self !== _this) {\r\n                // Looks like runtime error constructor reset the prototype chain, so restore it\r\n                let orgProto = objGetPrototypeOf(_this);\r\n                if (orgProto !== objGetPrototypeOf(_self)) {\r\n                    objSetPrototypeOf(_self, orgProto);\r\n                }\r\n            }\r\n\r\n            // Make sure we only capture our stack details\r\n            captureFn && captureFn(_self, _this[CONSTRUCTOR]);\r\n    \r\n            // Run the provided construction function\r\n            constructCb && constructCb(_self, arguments);\r\n    \r\n            return _self;\r\n        } finally {\r\n            _safeSetName(theBaseClass, orgName);\r\n        }\r\n    }, theBaseClass);\r\n}\r\n\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nlet _unsupportedError: CustomErrorConstructor;\r\n\r\n/**\r\n * Throw a custom `UnsupportedError` Error instance with the given message.\r\n * @group Error\r\n * @param message - The message to include in the exception\r\n * @example\r\n * ```ts\r\n * import { throwUnsupported } from \"@nevware21/ts-utils\";\r\n *\r\n * if (!window) {\r\n *     throwUnsupported(\"A window is needed for this operation\");\r\n * }\r\n * ```\r\n */\r\nexport function throwUnsupported(message?: string): never {\r\n    if (!_unsupportedError) {\r\n        // Lazily create the class\r\n        _unsupportedError = createCustomError(\"UnsupportedError\");\r\n    }\r\n\r\n    throw new _unsupportedError(message);\r\n}\r\n"]}