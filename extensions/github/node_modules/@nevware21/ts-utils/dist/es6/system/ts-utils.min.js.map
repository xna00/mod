{"version":3,"file":"ts-utils.min.js","sources":["../../../dist-es6/array/append.js","../../../dist-es6/iterator/array.js","../../../dist-es6/helpers/enum.js","../../../dist-es6/helpers/regexp.js","../../../dist-es6/iterator/create.js","../../../dist-es6/iterator/range.js","../../../dist-es6/timer/timeout.js","../../../dist-es6/helpers/extend.js","../../../dist-es6/helpers/encode.js","../../../dist-es6/helpers/number.js","../../../dist-es6/helpers/get_set_value.js","../../../dist-es6/helpers/perf.js","../../../dist-es6/helpers/value.js","../../../dist-es6/helpers/base.js","../../../dist-es6/symbol/symbol.js","../../../dist-es6/object/define.js","../../../dist-es6/polyfills/array.js","../../../dist-es6/polyfills/object.js","../../../dist-es6/timer/idle.js","../../../dist-es6/timer/interval.js","../../../dist-es6/helpers/lazy.js","../../../dist-es6/string/is_null_or.js","../../../dist-es6/string/conversion.js","../../../dist-es6/string/substring.js","../../../dist-es6/helpers/throw.js","../../../dist-es6/helpers/customError.js","../../../dist-es6/internal/constants.js","../../../dist-es6/helpers/safe_get.js","../../../dist-es6/object/get_own_prop_desc.js","../../../dist-es6/object/has_own_prop.js","../../../dist-es6/object/has_own.js","../../../dist-es6/object/for_each_key.js","../../../dist-es6/internal/map.js","../../../dist-es6/object/object.js","../../../dist-es6/symbol/well_known.js","../../../dist-es6/string/as_string.js","../../../dist-es6/internal/global.js","../../../dist-es6/helpers/diagnostics.js","../../../dist-es6/internal/unwrapFunction.js","../../../dist-es6/math/min_max.js","../../../dist-es6/string/slice.js","../../../dist-es6/string/starts_with.js","../../../dist-es6/polyfills/symbol.js","../../../dist-es6/helpers/safe_lazy.js","../../../dist-es6/helpers/environment.js","../../../dist-es6/iterator/iterator.js","../../../dist-es6/iterator/forOf.js","../../../dist-es6/funcs/fnApply.js","../../../dist-es6/array/forEach.js","../../../dist-es6/array/every.js","../../../dist-es6/array/indexOf.js","../../../dist-es6/array/map.js","../../../dist-es6/array/slice.js","../../../dist-es6/funcs/fnCall.js","../../../dist-es6/array/find.js","../../../dist-es6/array/from.js","../../../dist-es6/array/includes.js","../../../dist-es6/array/reduce.js","../../../dist-es6/array/some.js","../../../dist-es6/funcs/fnBind.js","../../../dist-es6/funcs/fnProxy.js","../../../dist-es6/funcs/readArgs.js","../../../dist-es6/object/create.js","../../../dist-es6/object/set_proto.js","../../../dist-es6/helpers/date.js","../../../dist-es6/polyfills/trim.js","../../../dist-es6/string/trim.js","../../../dist-es6/string/upper_lower.js","../../../dist-es6/math/floor.js","../../../dist-es6/math/trunc.js","../../../dist-es6/math/to_int.js","../../../dist-es6/string/repeat.js","../../../dist-es6/string/pad.js","../../../dist-es6/object/is_plain_object.js","../../../dist-es6/object/copy.js","../../../dist-es6/helpers/length.js","../../../dist-es6/polyfills/split.js","../../../dist-es6/string/split.js","../../../dist-es6/string/index_of.js","../../../dist-es6/string/ends_with.js","../../../dist-es6/string/includes.js","../../../dist-es6/timer/handler.js"],"sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isArray, isUndefined } from \"../helpers/base\";\r\nimport { isIterable, isIterator } from \"../iterator/iterator\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\n/**\r\n * Appends the `elms` to the `target` where the elms may be an array, a single object\r\n * or an iterator object\r\n * @group Array\r\n * @group Iterator\r\n * @example\r\n * ```ts\r\n * let theArray = arrAppend([], 1);\r\n * arrAppend(theArray, [ 2, 3, 4 ]);\r\n * arrAppend(theArray, [ \"a\", \"b\", \"c\" ]);\r\n * // theArray is now [ 1, 2, 3, 4, \"a\", \"b\", \"c\" ]\r\n * ```\r\n * @param target - The target array\r\n * @param elms - The item, array of items an iterable or iterator object of items to add to the target\r\n * @returns The passed in target array\r\n * @example\r\n * ```ts\r\n * // Adding a single value\r\n * arrAppend([], undefined);            // []\r\n * arrAppend([], 0);                    // [ 0 ]\r\n * arrAppend([1], undefined);           // [ 1 ]\r\n * arrAppend([1], 2);                   // [ 1, 2 ]\r\n *\r\n * // Adding an array\r\n * arrAppend([], [] as number[]);       // []\r\n * arrAppend([], [0]);                  // [ 0 ]\r\n * arrAppend([1], []);                  // [ 1 ]\r\n * arrAppend([1], [2]);                 // [ 1, 2 ]\r\n *\r\n * // Adding with an iterator\r\n * arrAppend([], ([] as number[]).values());    // []\r\n * arrAppend([], [0].values());         // [ 0 ]\r\n * arrAppend([1], [].keys());           // [ 1 ]\r\n * arrAppend([1], [2].values());        // [ 1, 2 ]\r\n * arrAppend([1], [2].keys());          // [ 1, 0 ] - 0 is from the index from the first element\r\n * ```\r\n */\r\nexport function arrAppend(target, elms) {\r\n    if (!isUndefined(elms) && target) {\r\n        if (isArray(elms)) {\r\n            // This is not just \"target.push(elms)\" but becomes effectively \"target.push(elms[0], elms[1], ...)\"\r\n            fnApply(target.push, target, elms);\r\n        }\r\n        else if (isIterator(elms) || isIterable(elms)) {\r\n            iterForOf(elms, (elm) => {\r\n                target.push(elm);\r\n            });\r\n        }\r\n        else {\r\n            target.push(elms);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n//# sourceMappingURL=append.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { LENGTH } from \"../internal/constants\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { createIterator } from \"./create\";\r\n/**\r\n * Create an iterator which is backed by the provided array, unlike a normal\r\n * array iterators where the array cannot be modified function creates\r\n * a shallow copy of the array using `slice()` so that you are free to modify\r\n * the original array.\r\n *\r\n * This will still return an iterator if the provided `values` is null or\r\n * undefined which will result in no entries.\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @param values - The source array to create an iterator from\r\n * @returns A new iterator\r\n * @example\r\n * ```ts\r\n * let cnt = 0;\r\n * let values = [];\r\n * iterForOf(createArrayIterator([10, 20, 5, 15]), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * ```\r\n */\r\nexport function createArrayIterator(values) {\r\n    let idx = -1;\r\n    let theValues = values ? values.slice() : [];\r\n    let len = theValues[LENGTH];\r\n    function _value() {\r\n        if (idx >= 0 && idx < len) {\r\n            return theValues[idx];\r\n        }\r\n    }\r\n    function _getNext() {\r\n        idx++;\r\n        return idx >= len;\r\n    }\r\n    let ctx = {\r\n        n: _getNext\r\n    };\r\n    objDefine(ctx, \"v\", { g: _value });\r\n    return createIterator(ctx);\r\n}\r\n//# sourceMappingURL=array.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _createKeyValueMap } from \"../internal/map\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\nimport { objDeepFreeze } from \"../object/object\";\r\n/**\r\n * Create a TypeScript style enum class which is a mapping that maps from the key -> value and the value -> key.\r\n * This is effectively the same as defining a non-constant enum, but this only repeats the \"Name\" of the enum value once.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const Animals = createEnum<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * Animals.Dog === 0;           // true\r\n * Animals[0] === \"Dog\";        // true\r\n * Animals[\"Dog\"] === 0;        // true\r\n * Animals.Cat === 1;           // true\r\n * Animals[1] === \"Cat\";        // true\r\n * Animals[\"Cat\"] === 1;        // true\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which looks and acts like a TypeScript Enum class.\r\n */\r\nexport function createEnum(values) {\r\n    return _createKeyValueMap(values, 1 /* eMapValues.Value */, 0 /* eMapValues.Key */, objDeepFreeze);\r\n}\r\n/**\r\n * Create a map object which contains both the property key and value which both map to the key,\r\n * E[key] => key and E[value] => key.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumKeyMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Dog\";         // true\r\n * animalMap[0] === \"Dog\";          // true\r\n * animalMap[\"Dog\"] === \"Dog\";      // true\r\n * animalMap.Cat === \"Cat\";         // true\r\n * animalMap[1] === \"Cat\";          // true\r\n * animalMap[\"Cat\"] === \"Cat\";      // true\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalType(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\nexport function createEnumKeyMap(values) {\r\n    return _createKeyValueMap(values, 0 /* eMapValues.Key */, 0 /* eMapValues.Key */, objDeepFreeze);\r\n}\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the resulting value,\r\n * E[key] => value and E[value] => value.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * }\r\n * const animalMap = createEnumValueMap<typeof Animal>({\r\n *    Dog: Animal.Dog,\r\n *    Cat: Animal.Cat,\r\n *    Butterfly: Animal.Butterfly,\r\n *    Bear: Animal.Bear\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === 0;     // true\r\n * animalMap[0] === 0;      // true\r\n * animalMap[\"Dog\"] === 0;  // true\r\n * animalMap.Cat === 1;     // true\r\n * animalMap[1] === 1;      // true\r\n * animalMap[\"Cat\"] === 1;  // true\r\n *\r\n * // Helper function to always return the \"Name\" of the type of animal\r\n * function getAnimalValue(type: string | number | Animal) {\r\n *     return animalMap[type];\r\n * }\r\n * ```\r\n\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type being mapped\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the value.\r\n */\r\nexport function createEnumValueMap(values) {\r\n    return _createKeyValueMap(values, 1 /* eMapValues.Value */, 1 /* eMapValues.Value */, objDeepFreeze);\r\n}\r\n/**\r\n * Create a map object which contains both the perperty key and value which both map to the requested\r\n * generic mapValue with a type of V, E[key] => mapValue and E[value] => mapValue.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * const enum Animal {\r\n *    Dog = 0,\r\n *    Cat = 1,\r\n *    Butterfly = 2,\r\n *    Bear = 3\r\n * };\r\n * // Creates a simple mapping to a string value\r\n * const animalFamilyMap = createValueMap<typeof Animal, string>({\r\n *    Dog: [ Animal.Dog, \"Canidae\"],\r\n *    Cat: [ Animal.Cat, \"Felidae\"],\r\n *    Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *    Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with an object that maps everything to the name\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is \"string\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"string\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"string\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"string\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"string\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"string\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the const enum type (eg. typeof Animal);\r\n * @typeParam V - Identifies the type of the mapping `string`; `number`; etc is not restructed to primitive types.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defiend mapped value.\r\n */\r\nexport function createSimpleMap(values) {\r\n    let mapClass = {};\r\n    objForEachKey(values, (key, value) => {\r\n        mapClass[key] = value[1];\r\n        mapClass[value[0]] = value[1];\r\n    });\r\n    return objDeepFreeze(mapClass);\r\n}\r\n/**\r\n * Create a strongly types map object which contains both the perperty key and value which both map\r\n * to the requested mapValue,\r\n * E[key] => mapValue and E[value] => mapValue.\r\n * - E = the const enum type (typeof Animal);\r\n * - V = Identifies the valid values for the keys, this should include both the enum numeric and string key of the type. The\r\n * resulting \"Value\" of each entry identifies the valid values withing the assignments.\r\n * @group Enum\r\n * @example\r\n * ```ts\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\",\r\n *     // Defined Named reference\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\",\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n * // You end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n *\r\n * or using an interface to define the direct string mappings\r\n *\r\n * interface IAnimalFamilyMap {\r\n *     Dog: \"Canidae\",\r\n *     Cat: \"Felidae\",\r\n *     Butterfly: \"Papilionidae\",\r\n *     Bear: \"Ursidae\"\r\n * }\r\n *\r\n * // Create a strongly types map\r\n * const animalFamilyMap = createTypeMap<typeof Animal, IAnimalFamilyMap & {\r\n *     // Defined the enum lookups\r\n *     [Animal.Dog]: \"Canidae\",\r\n *     [Animal.Cat]: \"Felidae\",\r\n *     [Animal.Butterfly]: \"Papilionidae\",\r\n *     [Animal.Bear]: \"Ursidae\"\r\n * }>({\r\n *     Dog: [ Animal.Dog, \"Canidae\"],\r\n *     Cat: [ Animal.Cat, \"Felidae\"],\r\n *     Butterfly: [ Animal.Butterfly, \"Papilionidae\"],\r\n *     Bear: [ Animal.Bear, \"Ursidae\"]\r\n * });\r\n *\r\n * // You also end up with a strongly types result for each value\r\n * animalMap.Dog === \"Canidae\";     // true with typeof animalMap.Dog is (const) \"Canidae\"\r\n * animalMap[0] === \"Canidae\";      // true with typeof animalMap[0] is \"Canidae\"\r\n * animalMap[\"Dog\"] === \"Canidae\";  // true with typeof animalMap[\"Dog\"] is \"Canidae\"\r\n * animalMap.Cat === \"Felidae\";     // true with typeof animalMap.Cat is \"Felidae\"\r\n * animalMap[1] === \"Felidae\";      // true with typeof animalMap[1] is \"Felidae\"\r\n * animalMap[\"Cat\"] === \"Felidae\";  // true with typeof animalMap[\"Cat\"] is \"Felidae\"\r\n * ```\r\n * @param values - The values to populate on the new object\r\n * @typeParam E - Identifies the enum type\r\n * @typeParam T - Identifies the return type that is being created via the mapping.\r\n * @returns A new frozen (immutable) object which contains a property for each key and value that returns the defined mapped value.\r\n */\r\nexport function createTypeMap(values) {\r\n    return createSimpleMap(values);\r\n}\r\n//# sourceMappingURL=enum.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { EMPTY } from \"../internal/constants\";\r\nimport { asString } from \"../string/as_string\";\r\nconst MATCH_ANY = \"(.*)\";\r\nconst MATCH_SINGLE = \"(.)\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal function to translate the string and create the Regular Expression\r\n * @param value - The value to be converted into a RegExp, if the value is not a\r\n * string it will coerced to a string.\r\n * @param escapeRgx - The escape regular expression to convert values to not convert\r\n * @param replaceFn - The function to call to perform any final conversion.\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `^` and `$` to incidate an entire match\r\n * @returns The new Regular Expression created from the provided value.\r\n */\r\nfunction _createRegExp(value, escapeRgx, replaceFn, ignoreCase, fullMatch) {\r\n    // eslint-disable-next-line security/detect-non-literal-regexp\r\n    return new RegExp((fullMatch ? \"^\" : EMPTY) + replaceFn(value.replace(escapeRgx, \"\\\\$1\")) + (fullMatch ? \"$\" : EMPTY), ignoreCase ? \"i\" : \"\");\r\n}\r\n/**\r\n * Create a simple wildcard regular expression from the string value, converting any embedded wildcard\r\n * `'*'` characters to match any character zero or more times (including folder seperators `'/'` or `'\\'`),\r\n * while escaping all other characters.\r\n * The supported matching values are\r\n * - `'*'` Matches any characters zero or more times (including folder seperators '`'/`' or `'\\'`)\r\n * @since 0.9.0\r\n * @group RegExp\r\n * @param value - The value to be converted into a RegExp, if the value is not a string it will coerced\r\n * to a string.\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive, Defaults\r\n * to false.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `'^'` and `'$'` to\r\n * incidate match the entire string only.\r\n * @returns The new Regular Expression created from the provided value.\r\n * @example\r\n * ```ts\r\n * let regex = createWildcardRegex(\"Hello*\");\r\n *\r\n * let matches = regex.exec(\"Hello\");\r\n * matches[0]; // \"Hello\";\r\n * matches[1]; // \"\"\r\n *\r\n * let matches = regex.exec(\"Hello Darkness\");\r\n * matches[0]; // \"Hello Darkness\"\r\n * matches[1]; // \" Darkness\"\r\n *\r\n * let matches = regex.exec(\"Darkness Hello\");\r\n * matches[0];  // \"Hello\"\r\n * matches[1]; // \"\"\r\n *\r\n * let regex.exec(\"Darkness Hello.\");\r\n * matches[0]; // \"Hello.\"\r\n * matches[1]; // \".\"\r\n * ```\r\n */\r\nexport function createWildcardRegex(value, ignoreCase, fullMatch) {\r\n    return _createRegExp(asString(value), /([-+|^$#.\\?{}()\\[\\]\\\\/\\\"\\'])/g, (value) => {\r\n        return value.replace(/\\*/g, MATCH_ANY);\r\n    }, !!ignoreCase, fullMatch);\r\n}\r\n/**\r\n * Create a simple filename style regular expression from the string value, converting any embedded\r\n * filename wildcard characters `'*'` and `'?'`.\r\n * If the source string contains folder seperators both `'/'` and `'\\'` are treated as synonomous.\r\n * Each wildcard match will be captured as it's own group.\r\n * The supported matching values are\r\n * - `'*'` Matches any characters zero or more times (including folder seperators '`'/`' or `'\\'`)\r\n * - `'?'` Matches any single character once only (including folder seperators `'/'` or `'\\'`)\r\n * - `'/'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n * - `'\\'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n *\r\n * @since 0.9.0\r\n * @group RegExp\r\n * @param value - The string value to converted\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive, Defaults\r\n * to false.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `'^'` and `'$'` to\r\n * incidate match the entire string only.\r\n * @returns The new Regular Expression created from the provided value.\r\n * @example\r\n * ```ts\r\n * let regex = createFilenameRegex(\"*.txt\");\r\n *\r\n * lat matches = regex.exec(\"Hello\");\r\n * matches; // null\r\n *\r\n * let matches = regex.exec(\"ug.txt\");\r\n * matches[0]; // \"ug.txt\"\r\n * matches[1]; // \"ug\"\r\n *\r\n * let matches = regex.exec(\" ug.txt \");\r\n * matches[0]; // \" ug.txt\"\r\n * matches[1]; // \" ug\"\r\n *\r\n * let matches = regex.exec(\"C:\\\\temp\\\\ug.txt\");\r\n * matches[0]; // \"C:\\\\temp\\\\ug.txt\"\r\n * matches[1]; // \"C:\\\\temp\\\\ug\"\r\n *\r\n * let matches = regex.exec(\"/var/log/ug.txt\");\r\n * matches[0]; // \"/var/log/ug.txt\"\r\n * matches[1]; // \"/var/log/ug\"\r\n * ```\r\n */\r\nexport function createFilenameRegex(value, ignoreCase, fullMatch) {\r\n    return _createRegExp(asString(value), /([-+|^$#.{}()\\\\\\/\\[\\]\\\"\\'])/g, (value) => {\r\n        return value.replace(/(\\\\\\\\|\\\\\\/|\\*|\\?)/g, function (_all, g1) {\r\n            if (g1 == \"\\\\/\" || g1 == \"\\\\\\\\\") {\r\n                return \"[\\\\\\\\\\\\/]{1}\";\r\n            }\r\n            return g1 == \"*\" ? MATCH_ANY : MATCH_SINGLE;\r\n        });\r\n    }, !!ignoreCase, fullMatch);\r\n}\r\n/**\r\n * Create a simple glob style regular expression from the string value, converting `'**'`, `'*'` and `'?'`\r\n * characters. Unlike {@link createFilenameRegex} the `'*'` and `'?'` will NOT match folder seperator\r\n * characters `'/'` and `'\\'`.\r\n * If the source string contains folder seperators both `'/'` and `'\\'` are treated as synonomous\r\n * Each wildcard match will be captured as it's own group.\r\n * The supported matching values are\r\n * - `'**'` Matches any characters zero or more times include folder seperators `'/'` or `'\\'`\r\n * - `'*'` Matches any characters zero or more times, except `'/'` or `'\\'`\r\n * - `'?'` Matches any single character once only, except `'/'` or `'\\'`\r\n * - `'/'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n * - `'\\'` Matches either `'/'` or `'\\'` character, not captured as a group\r\n *\r\n * @since 0.9.0\r\n * @group RegExp\r\n * @param value - The string value to converted.\r\n * @param ignoreCase - Flag to indicate whether the regular expression should be case-sensitive, Defaults\r\n * to false.\r\n * @param fullMatch - Flag to identify whether the RegExp should be wrapped with `'^'` and `'$'` to\r\n * incidate match the entire string only.\r\n * @returns The new Regular Expression created from the provided value.\r\n * @example\r\n * ```ts\r\n * let regex = makeGlobRegex(\"src\\\\**\\\\*.ts\");\r\n *\r\n * let matches = regex.exec(\"Hello\");\r\n * matches; // null\r\n *\r\n * let matches = regex.exec(\"Src/index.ts\");\r\n * matches; // null - Specify the ignoreCase if you want this to match\r\n *\r\n * let matches = regex.exec(\"src/index.ts\");\r\n * matches[0]; // \"src/index.ts\"\r\n * matches[1]; // undefined;\r\n * matches[2]; // \"index\"\r\n *\r\n * let matches = regex.exec(\"src\\\\index.ts\");\r\n * matches[0]; // \"src\\\\index.ts\"\r\n * matches[1]; // undefined;\r\n * matches[2]; // \"index\"\r\n *\r\n * let matches = regex.exec(\"src/helpers/regexp.ts\");\r\n * matches[0]; // \"src/helpers/regexp.ts\"\r\n * matches[1]; // \"helpers/\"\r\n * matches[2]; // \"regexp\"\r\n *\r\n * let matches = regex.exec(\"src\\\\helpers/regexp.ts\");\r\n * matches[0]; // \"src\\\\helpers/regexp.ts\"\r\n * matches[1]; // \"helpers/\"\r\n * matches[2]; // \"regexp\"\r\n *\r\n * let matches = regex.exec(\" src/index.tsx \");\r\n * matches[0]; // \"src/index.ts\"\r\n * matches[1]; // undefined\r\n * matches[2]; // \"index\"\r\n *\r\n * let matches = regex.exec(\" src/helpers/regexp.ts. \");\r\n * matches[0]; // \"src/helpers/regexp.ts\"\r\n * matches[1]; // \"helpers/\"\r\n * matches[2]; // \"regexp\"]);\r\n * ```\r\n */\r\nexport function makeGlobRegex(value, ignoreCase, fullMatch) {\r\n    return _createRegExp(asString(value), /([-+|^$#.{}()\\\\\\/\\[\\]\\\"\\'])/g, (value) => {\r\n        //\"**\\/*\\.txt\"\r\n        return value.replace(/(\\*\\*\\\\[\\\\\\/]|\\\\\\\\|\\\\\\/|\\*\\*|\\*|\\?)/g, function (_all, g1) {\r\n            if (g1 == \"**\\\\/\" || g1 == \"**\\\\\\\\\") {\r\n                return \"(.*[\\\\\\\\\\\\/])*\";\r\n            }\r\n            if (g1 === \"\\\\/\" || g1 == \"\\\\\\\\\") {\r\n                return \"[\\\\\\\\\\\\/]{1}\";\r\n            }\r\n            if (g1 === \"**\") {\r\n                return MATCH_ANY;\r\n            }\r\n            return g1 === \"*\" ? \"([^\\\\\\\\\\\\/]*)\" : \"([^\\\\\\\\\\\\/]{1})\";\r\n        });\r\n    }, !!ignoreCase, fullMatch);\r\n}\r\n//# sourceMappingURL=regexp.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { DONE, VALUE } from \"../internal/constants\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\n/**\r\n * Create an iterable which conforms to the `Iterable` protocol, it uses the provided `ctx` to\r\n * create an `Iterator` via {@link createIterator}.\r\n *\r\n * @see [Iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol)\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the type that will be returned by the iterator\r\n * @param ctx - The context used to manage the iteration over the items.\r\n * @returns A new Iterable instance\r\n * @example\r\n * ```ts\r\n * let current = 0;\r\n * let next = 1;\r\n * let done = false;\r\n * let fibCtx: CreateIteratorContext<number> = {\r\n *     n: function() {\r\n *         fibCtx.v = current;\r\n *         current = next;\r\n *         next = fibCtx.v + next;\r\n *\r\n *         // Return not done\r\n *         return false;\r\n *     },\r\n *     r: function(value) {\r\n *         done = true;\r\n *         return value;\r\n *     }\r\n * };\r\n *\r\n * let values: number[] = [];\r\n * iterForOf(createIterable(fibCtx), (value) => {\r\n *     values.push(value);\r\n *     if (values.length === 10) {\r\n *         return -1;\r\n *     }\r\n * });\r\n *\r\n * // Done is true\r\n * // done === true\r\n * // Values: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\r\n * ```\r\n */\r\nexport function createIterable(ctx) {\r\n    return makeIterable({}, ctx);\r\n}\r\n/**\r\n * Adds or replaces an iterable implementation that conforms to the `Iterable` protocol to the target instance, it\r\n * uses the provided `ctx` to create an `Iterator` via {@link createIterator}.\r\n *\r\n * @see [Iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol)\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the target type\r\n * @typeParam I - Identifies the type that will be returned by the iterator\r\n * @param ctx - The context used to manage the iteration over the items.\r\n * @returns A new Iterable instance\r\n * @example\r\n * ```ts\r\n * let current = 0;\r\n * let next = 1;\r\n * let done = false;\r\n * let fibCtx: CreateIteratorContext<number> = {\r\n *     n: function() {\r\n *         fibCtx.v = current;\r\n *         current = next;\r\n *         next = fibCtx.v + next;\r\n *\r\n *         // Return not done, so it will just continue\r\n *         return false;\r\n *     }\r\n * };\r\n *\r\n * let values: number[] = [];\r\n * let theIterable: Iterable<T> = makeIterable({}, fibCtx);\r\n *\r\n * iterForOf(theIterable, (value) => {\r\n *     values.push(value);\r\n *     if (values.length === 10) {\r\n *         return -1;\r\n *     }\r\n * });\r\n *\r\n * // Values: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\r\n * ```\r\n */\r\nexport function makeIterable(target, ctx) {\r\n    let itSymbol = getKnownSymbol(3 /* WellKnownSymbols.iterator */);\r\n    function _createIterator() {\r\n        return createIterator(ctx);\r\n    }\r\n    target[itSymbol] = _createIterator;\r\n    return target;\r\n}\r\n/**\r\n * Create an iterator which conforms to the `Iterator` protocol, it uses the provided `ctx` to\r\n * managed moving to the `next`.\r\n *\r\n * @see [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol)\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the type that will be returned by the iterator\r\n * @param ctx - The context used to manage the iteration over the items.\r\n * @returns A new Iterator instance\r\n * @example\r\n * ```ts\r\n * let idx = -1;\r\n * let theValues = [ 5, 10, 15, 20, 25, 30 ];\r\n *\r\n * function getNextFn() {\r\n *     idx++;\r\n *     let isDone = idx >= theValues.length;\r\n *     if (!isDone) {\r\n *         // this is passed as the current iterator\r\n *         // so you can directly assign the next \"value\" that will be returned\r\n *         this.v = theValues[idx];\r\n *     }\r\n *\r\n *     return isDone;\r\n * }\r\n *\r\n * let theIterator = createIterator<number>({ n: getNextFn });\r\n *\r\n * let values: number[] = [];\r\n * iterForOf(theIterator, (value) => {\r\n *     values.push(value);\r\n * });\r\n *\r\n * // Values: [5, 10, 15, 20, 25, 30 ]\r\n * ```\r\n */\r\nexport function createIterator(ctx) {\r\n    let isDone = false;\r\n    function _value() {\r\n        return ctx.v;\r\n    }\r\n    function _next() {\r\n        isDone = isDone || (ctx.n ? ctx.n(arguments) : true);\r\n        let result = {\r\n            [DONE]: isDone\r\n        };\r\n        if (!isDone) {\r\n            objDefine(result, VALUE, { g: _value });\r\n        }\r\n        return result;\r\n    }\r\n    function _return(value) {\r\n        isDone = true;\r\n        return {\r\n            [DONE]: true,\r\n            [VALUE]: ctx.r && ctx.r(value)\r\n        };\r\n    }\r\n    function _throw(e) {\r\n        isDone = true;\r\n        return {\r\n            [DONE]: true,\r\n            [VALUE]: ctx.t && ctx.t(e)\r\n        };\r\n    }\r\n    let theIterator = {\r\n        next: _next\r\n    };\r\n    if (ctx.r) {\r\n        theIterator.return = _return;\r\n    }\r\n    if (ctx.t) {\r\n        theIterator.throw = _throw;\r\n    }\r\n    return theIterator;\r\n}\r\n//# sourceMappingURL=create.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined } from \"../helpers/base\";\r\nimport { UNDEF_VALUE } from \"../internal/constants\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { createIterator } from \"./create\";\r\n/**\r\n * Create a simple range iterator which will return an iterator that increments it's value from\r\n * `start` to `end` by the `step`.\r\n * - If `end` is omitted, null or undefined the value will be set to `start`\r\n * - If the `step` value is omitted, null, undefined or zero then it will default to 1 if end > start otherwise -1.\r\n *\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @param start - The initial value of the numeric iterator\r\n * @param end - The inclusive maximum (or minimum when moving backwards) value of the iterator.\r\n * @param step - The step size for each iteration, may be positive or negative. Defaults to 1 when\r\n * start <= end and -1 when start > end. Zero is treated as not provided.\r\n * @returns A new iterator which will return a numeric value between start and end at step intervals\r\n * @example\r\n * ```ts\r\n * let cnt = 0;\r\n * iterForOf(createRangeIterator(0, -1, 1), (value) => {\r\n *     // Will never get called as -1 < 0\r\n * });\r\n *\r\n * cnt = 0;\r\n * let values: number[] = [];\r\n * iterForOf(createRangeIterator(1, 1), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 1\r\n * // values: [ 1 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(10, null as any), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 1\r\n * // values: [ 10 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(-10, undefined as any), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 1\r\n * // values: [ -10 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(5, 20, 5), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 4\r\n * // values: [ 5, 10, 15, 20 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(20, 5, -5), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 4\r\n * // values: [ 20, 15, 10, 5 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(20, 15), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 6\r\n * // values: [ 20, 19, 18, 17, 16, 15 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(-1, 1), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 3;\r\n * // values: [ -1, 0, 1 ]\r\n *\r\n * cnt = 0;\r\n * values = [];\r\n * iterForOf(createRangeIterator(1, -1), (value) => {\r\n *     cnt++;\r\n *     values.push(value);\r\n * });\r\n * // cnt === 3;\r\n * // values: [ 1, 0, -1 ]\r\n * ```\r\n */\r\nexport function createRangeIterator(start, end, step) {\r\n    let nextValue = start;\r\n    let theValue = UNDEF_VALUE;\r\n    if (isNullOrUndefined(end)) {\r\n        end = start;\r\n    }\r\n    let theStep = step || ((start <= end) ? 1 : -1);\r\n    function _value() {\r\n        return theValue;\r\n    }\r\n    function _getNext() {\r\n        let isDone = false;\r\n        if (theStep > 0) {\r\n            isDone = nextValue > end;\r\n        }\r\n        else {\r\n            isDone = nextValue < end;\r\n        }\r\n        if (!isDone) {\r\n            theValue = nextValue;\r\n            nextValue += theStep;\r\n        }\r\n        return isDone;\r\n    }\r\n    let ctx = {\r\n        n: _getNext\r\n    };\r\n    objDefine(ctx, \"v\", { g: _value });\r\n    return createIterator(ctx);\r\n}\r\n//# sourceMappingURL=range.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\nimport { isArray } from \"../helpers/base\";\r\nimport { UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _createTimerHandler } from \"./handler\";\r\nfunction _createTimeoutWith(self, startTimer, overrideFn, theArgs) {\r\n    let isArr = isArray(overrideFn);\r\n    let len = isArr ? overrideFn.length : 0;\r\n    let setFn = (len > 0 ? overrideFn[0] : (!isArr ? overrideFn : UNDEF_VALUE)) || setTimeout;\r\n    let clearFn = (len > 1 ? overrideFn[1] : UNDEF_VALUE) || clearTimeout;\r\n    let timerFn = theArgs[0];\r\n    theArgs[0] = function () {\r\n        handler.dn();\r\n        fnApply(timerFn, self, arrSlice(arguments));\r\n    };\r\n    let handler = _createTimerHandler(startTimer, (timerId) => {\r\n        if (timerId) {\r\n            if (timerId.refresh) {\r\n                timerId.refresh();\r\n                return timerId;\r\n            }\r\n            fnApply(clearFn, self, [timerId]);\r\n        }\r\n        return fnApply(setFn, self, theArgs);\r\n    }, function (timerId) {\r\n        fnApply(clearFn, self, [timerId]);\r\n    });\r\n    return handler.h;\r\n}\r\nexport function scheduleTimeout(callback, timeout) {\r\n    return _createTimeoutWith(this, true, UNDEF_VALUE, arrSlice(arguments));\r\n}\r\nexport function scheduleTimeoutWith(overrideFn, callback, timeout) {\r\n    return _createTimeoutWith(this, true, overrideFn, arrSlice(arguments, 1));\r\n}\r\nexport function createTimeout(callback, timeout) {\r\n    return _createTimeoutWith(this, false, UNDEF_VALUE, arrSlice(arguments));\r\n}\r\nexport function createTimeoutWith(overrideFn, callback, timeout) {\r\n    return _createTimeoutWith(this, false, overrideFn, arrSlice(arguments, 1));\r\n}\r\n//# sourceMappingURL=timeout.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { objCopyProps, objDeepCopy } from \"../object/copy\";\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nfunction _doExtend(target, theArgs) {\r\n    arrForEach(theArgs, (theArg) => {\r\n        objCopyProps(target, theArg);\r\n    });\r\n    return target;\r\n}\r\nexport function deepExtend(target, obj1, obj2, obj3, obj4, obj5, obj6) {\r\n    return _doExtend(objDeepCopy(target) || {}, arrSlice(arguments));\r\n}\r\nexport function objExtend(target, obj1, obj2, obj3, obj4, obj5, obj6) {\r\n    return _doExtend(target || {}, arrSlice(arguments));\r\n}\r\n//# sourceMappingURL=extend.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { strCamelCase } from \"../string/conversion\";\r\nimport { strPadStart } from \"../string/pad\";\r\nimport { strUpper } from \"../string/upper_lower\";\r\nimport { isNumber, isString, isUndefined } from \"./base\";\r\nimport { dumpObj } from \"./diagnostics\";\r\nimport { getLazy } from \"./lazy\";\r\nconst DBL_QUOTE = \"\\\"\";\r\nconst INVALID_JS_NAME = /([^\\w\\d_$])/g;\r\nlet _htmlEntityCache;\r\n/**\r\n * Validates that the string name conforms to the JS IdentifierName specification and if not\r\n * normalizes the name so that it would. This method does not identify or change any keywords\r\n * meaning that if you pass in a known keyword the same value will be returned.\r\n * @since 0.9.0\r\n * @group Conversion\r\n * @group Value\r\n * @param jsName - The string value to validate\r\n * @param camelCase - Optionally (see [1]) convert into CamelCase with the leading character either\r\n * - `true` => lowercase\r\n * - 'false' => uppercase\r\n * - undefined => not converted\r\n * @return The original string name, if it conforms to the JS naming convention otherwise an encoded version.\r\n *\r\n * > **[1]**: Camel casing the name will remove all non-word characters from the result\r\n * so you will NOT end up with any leading, embedded or trailing `_` characters which may cause\r\n * duplicate results for different string values.\r\n * @example\r\n * ```ts\r\n * normalizeJsName(\"HelloDarkness\"); // \"HelloDarkness\"\r\n * normalizeJsName(\"Hello Darkness\"); // \"Hello_Darkness\"\r\n * normalizeJsName(\"hello Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello.Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello-Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"hello_Darkness\"); // \"hello_Darkness\"\r\n * normalizeJsName(\"abc-123\"); // \"abc_123\"\r\n * normalizeJsName(\"0abc0\"); // \"0abc0\"\r\n * normalizeJsName(\"\\\"HelloDarkness\\\"\"); // \"_HelloDarkness_\"\r\n * normalizeJsName(\"\\\"Hello Darkness\\\"\"); // \"_Hello_Darkness_\"\r\n * normalizeJsName(\"\\\"hello Darkness\\\"\"); // \"_hello_Darkness_\"\r\n * normalizeJsName(\"\\\"hello Darkness\\\"\"); // \"_hello_Darkness_\"\r\n * normalizeJsName(\"\\\"hello .,#[]Darkness\\\"\"); // \"_hello______Darkness_\"\r\n *\r\n * normalizeJsName(\"HelloDarkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"Hello Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello.Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello-Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello_Darkness\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"abc-123\", true); // \"abc123\"\r\n * normalizeJsName(\"0abc0\", true); // \"0abc0\"\r\n * normalizeJsName(\"\\\"HelloDarkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"\\\"Hello Darkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello \\\"Darkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"hello \\\"Darkness\\\"\", true); // \"helloDarkness\"\r\n * normalizeJsName(\"\\\"hello .,#[]Darkness\\\"\", true); // \"helloDarkness\"\r\n * ```\r\n */\r\nexport function normalizeJsName(jsName, camelCase) {\r\n    let result = asString(jsName).replace(INVALID_JS_NAME, \"_\");\r\n    return !isUndefined(camelCase) ? strCamelCase(result, !camelCase) : result;\r\n}\r\n/**\r\n * Encode the value into a JSON string, if the provided value is a string this will encode\r\n * any character that is not an alpha, numeric, space or some special characters as `\\uXXXX`\r\n * and will always be returned wrapped in double quotes `\"xxx\"`, if the value is any other\r\n * object it will be encoded using JSON.stringify() and if there is an exception encoding\r\n * with JSON.stringify() it will return the exception as a string using {@link dumpObj}().\r\n * @since 0.9.0\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The value to be encoded as JSON\r\n * @param format - Identifies whether the JSON value should be formatted when an object\r\n * - `true` - Format with 4 spaces\r\n * - 'number' - The number of spaces to format with\r\n * - `false` (or not Truthy) - Do not format*\r\n * @returns A JSON encoded string representation of the value.\r\n * @example\r\n * ```ts\r\n * // String values\r\n * encodeAsJson(\"abc.123\"); // \"\\\"abc.123\\\"\"\r\n * encodeAsJson(\"321-abc\"); // \"\\\"321-abc\\\"\"\r\n * encodeAsJson(\"Hello darkness, my \\\"old\\\" friend...\"); // \"\\\"Hello darkness, my \\\\\\\"old\\\\\\\" friend...\\\"\"\r\n * encodeAsJson(\"Hello: Darkness\"); // \"\\\"Hello: Darkness\\\"\"\r\n * encodeAsJson(\"Hello\\\\u003A Darkness\"); // \"\\\"Hello\\\\\\\\u003A Darkness\\\"\"\r\n * encodeAsJson(\"`!@#$%^&*()_-+=[]{}:;'<>?\"); // \"\\\"\\\\u0060!@#$%^&*()_-+=[]{}:;\\\\u0027<>?\\\"\"\r\n * encodeAsJson(\"0\"); // \"\\\"0\\\"\"\r\n * encodeAsJson(\"1\"); // \"\\\"1\\\"\"\r\n *\r\n * encodeAsJson([]); // \"[]\"\r\n * encodeAsJson([\"A\"]); // \"[\\\"A\\\"]\"\r\n * encodeAsJson([0]); // \"[0]\"\r\n * encodeAsJson([false]); // \"[false]\"\r\n * encodeAsJson(new Array(1)); // \"[null]\"\r\n * encodeAsJson(true); // \"true\",\r\n * encodeAsJson(false); // \"false\"\r\n *\r\n * encodeAsJson({}); // \"{}\"\r\n * encodeAsJson({ Hello: \"Darkness\" }); // \"{\\\"Hello\\\":\\\"Darkness\\\"}\");\r\n * ```\r\n */\r\nexport function encodeAsJson(value, format) {\r\n    let result;\r\n    if (isString(value)) {\r\n        // encode if a character is not an alpha, numeric, space or some special characters\r\n        result = DBL_QUOTE + value.replace(/[^\\w .,\\-!@#$%\\^&*\\(\\)_+={}\\[\\]:;|<>?]/g, (match) => {\r\n            if (match === DBL_QUOTE || match === \"\\\\\") {\r\n                return \"\\\\\" + match;\r\n            }\r\n            var hex = match.charCodeAt(0).toString(16);\r\n            return \"\\\\u\" + strPadStart(strUpper(hex), 4, \"0\");\r\n        }) + DBL_QUOTE;\r\n    }\r\n    else {\r\n        try {\r\n            result = JSON.stringify(value, NULL_VALUE, format ? (isNumber(format) ? format : 4) : UNDEF_VALUE);\r\n        }\r\n        catch (e) {\r\n            // Unable to convert to JSON\r\n            result = DBL_QUOTE + dumpObj(e) + DBL_QUOTE;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Encode the provided string to a safe HTML form, converting the base `&`, `<`, `>`, `\\\"` and `'`\r\n * characters into their HTML encoded representations\r\n * @since 0.9.0\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The string value to be converted into a HTML safe form\r\n * @returns The converted string as HTML\r\n * @example\r\n * ```ts\r\n * encodeAsHtml(\"HelloDarkness\"); // \"HelloDarkness\"\r\n * encodeAsHtml(\"Hello Darkness\"); // \"Hello Darkness\"\r\n * encodeAsHtml(\"hello.Darkness\"); // \"hello.Darkness\"\r\n * encodeAsHtml(\"hello-Darkness\"); // \"hello-Darkness\"\r\n * encodeAsHtml(\"hello_Darkness\"); // \"hello_Darkness\"\r\n * encodeAsHtml(\"abc-123\"); // \"abc-123\"\r\n * encodeAsHtml(\"0abc0\"); // \"0abc0\"\r\n * encodeAsHtml(\"\\\"HelloDarkness\\\"\"); // \"&quot;HelloDarkness&quot;\"\r\n * encodeAsHtml(\"\\\"Hello Darkness\\\"\"); // \"&quot;Hello Darkness&quot;\"\r\n * encodeAsHtml(\"\\\"hello Darkness\\\"\"); // \"&quot;hello Darkness&quot;\"\r\n * encodeAsHtml(\"\\\"hello Darkness\\\"\"); // \"&quot;hello Darkness&quot;\"\r\n * encodeAsHtml(\"\\\"hello .,#<[]>Darkness\\\"\"); // \"&quot;hello .,#&lt;[]&gt;Darkness&quot;\"\r\n * encodeAsHtml(\"<script src=\\\"javascript:alert('Hello');\\\"></script>\"); // \"&lt;script src=&quot;javascript:alert(&#39;Hello&#39;);&quot;&gt;&lt;/script&gt;\"\r\n * ```\r\n */\r\nexport function encodeAsHtml(value) {\r\n    !_htmlEntityCache && (_htmlEntityCache = getLazy(() => {\r\n        return {\r\n            \"&\": \"amp\",\r\n            \"<\": \"lt\",\r\n            \">\": \"gt\",\r\n            [DBL_QUOTE]: \"quot\",\r\n            \"'\": \"#39\"\r\n        };\r\n    }));\r\n    return asString(value).replace(/[&<>\"']/g, match => \"&\" + _htmlEntityCache.v[match] + \";\");\r\n}\r\n//# sourceMappingURL=encode.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined, isNumber } from \"./base\";\r\n/**\r\n * Helper to obtain the integer value using base 10 conversion from a string,\r\n * also handles `null`, `undefined` and `Nan` cases which will all return the\r\n * default value.\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The string or numeric value to get the integer value from\r\n * @param defValue - The default value if unsuccessful\r\n * @returns The default or parsed value.\r\n */\r\nexport function getIntValue(value, defValue) {\r\n    if (!isNullOrUndefined(value)) {\r\n        if (isNumber(value)) {\r\n            return value;\r\n        }\r\n        let theValue = parseInt(value, 10);\r\n        return isNaN(theValue) ? defValue : theValue;\r\n    }\r\n    return defValue;\r\n}\r\n//# sourceMappingURL=number.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { isNullOrUndefined } from \"./base\";\r\nimport { strSplit } from \"../string/split\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\n/**\r\n * Get the named value from the target object where the path may be presented by a string which\r\n * contains \".\" characters to separate the nested objects of the heirarchy / path to the value.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The source object that contains the value\r\n * @param path - The path identifing the location where the value should be located\r\n * @param defValue - If the final value or any intervening object in the heirarchy is not present\r\n * the default value will be returned\r\n * @returns The value located based on the path or the defaule value\r\n * @example\r\n * ```ts\r\n * let theValue = {\r\n *   Hello: {\r\n *      Darkness: {\r\n *          my: \"old\"\r\n *      }\r\n *   },\r\n *   friend: \"I've\",\r\n *   come: {\r\n *      to: {\r\n *          see: \"you\"\r\n *      }\r\n *   }\r\n * };\r\n *\r\n * let value = getValueByKey(theValue, \"Hello.Darkness.my\", \"friend\");\r\n * // value === \"my\"\r\n *\r\n * let value = getValueByKey(theValue, \"My.Old\", \"friend\");\r\n * // value === \"friend\"\r\n *\r\n * let value = getValueByKey(theValue, \"come.to\", \"friend\");\r\n * // value === { see: \"you\" }\r\n *\r\n * let value = getValueByKey(theValue, \"friend\", \"friend\");\r\n * // value === \"I've\"\r\n * ```\r\n */\r\nexport function getValueByKey(target, path, defValue) {\r\n    if (!path || !target) {\r\n        return defValue;\r\n    }\r\n    let parts = strSplit(path, \".\");\r\n    let cnt = parts.length;\r\n    for (let lp = 0; lp < cnt && !isNullOrUndefined(target); lp++) {\r\n        target = target[parts[lp]];\r\n    }\r\n    return (!isNullOrUndefined(target) ? target : defValue);\r\n}\r\n/**\r\n * Get the named value from the target object where the path is represented by the string iterator\r\n * or iterable to separate the nested objects of the heirarchy / path to the value. If the target\r\n * does not contain the full path the iterator will not be completed.\r\n *\r\n * The order of processing of the iterator is not reset if you add or remove elements to the iterator,\r\n * the actual behavior will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The source object that contains the value\r\n * @param iter - The iter identifying the path of the final key value\r\n * @param defValue - If the final value or any intervening object in the heirarchy is not present\r\n * the default value will be returned\r\n * @returns The value located based on the path or the defaule value\r\n * @example\r\n * ```ts\r\n * let theValue = {\r\n *   Hello: {\r\n *      Darkness: {\r\n *          my: \"old\"\r\n *      }\r\n *   },\r\n *   friend: \"I've\",\r\n *   come: {\r\n *      to: {\r\n *          see: \"you\"\r\n *      }\r\n *   }\r\n * };\r\n *\r\n * let value = getValueByKey(theValue, [\"Hello\", \"Darkness\", \"my\"], \"friend\");\r\n * // value === \"my\"\r\n *\r\n * let value = getValueByKey(theValue, [\"My\", \"Old\"], \"friend\");\r\n * // value === \"friend\"\r\n *\r\n * let value = getValueByKey(theValue, [\"come\", \"to\"], \"friend\");\r\n * // value === { see: \"you\" }\r\n *\r\n * let value = getValueByKey(theValue, [\"friend\"], \"friend\");\r\n * // value === \"I've\"\r\n * ```\r\n */\r\nexport function getValueByIter(target, iter, defValue) {\r\n    if (!iter || !target) {\r\n        return defValue;\r\n    }\r\n    iterForOf(iter, (value) => {\r\n        if (isNullOrUndefined(target)) {\r\n            return -1;\r\n        }\r\n        target = target[value];\r\n    });\r\n    return (!isNullOrUndefined(target) ? target : defValue);\r\n}\r\n/**\r\n * Set the named value on the target object where the path may be presented by a string which\r\n * contains \".\" characters to separate the nested objects of the heirarchy / path to the value.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The target object\r\n * @param path - The path identifying the location of the final key value\r\n * @param value - The value to set\r\n * @example\r\n * ```ts\r\n * let theValue = { };\r\n * setValueByKey(theValue, \"Hello.Darkness.my\", \"old\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } } }\r\n * setValueByKey(theValue, \"friend\", \"I've\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\" }\r\n * setValueByKey(theValue, \"come.to.see\", \"you\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\", come: { to : { see: \"you\" } } }\r\n * ```\r\n */\r\nexport function setValueByKey(target, path, value) {\r\n    if (target && path) {\r\n        let parts = strSplit(path, \".\");\r\n        let lastKey = parts.pop();\r\n        arrForEach(parts, (key) => {\r\n            if (isNullOrUndefined(target[key])) {\r\n                // Add an empty object / map\r\n                target[key] = {};\r\n            }\r\n            target = target[key];\r\n        });\r\n        target[lastKey] = value;\r\n    }\r\n}\r\n/**\r\n * Set the named value on the target object where the path is represented by the string iterator\r\n * or iterable to separate the nested objects of the heirarchy / path to the value.\r\n *\r\n * The order of processing of the iterator is not reset if you add or remove elements to the iterator,\r\n * the actual behavior will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @since 0.9.1\r\n * @group Value\r\n * @param target - The target object\r\n * @param iter - The iter identifying the path of the final key value\r\n * @param value - The value to set\r\n * @example\r\n * ```ts\r\n * let theValue = { };\r\n * setValueByIter(theValue, [\"Hello\", \"Darkness\", \"my\"], \"old\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } } }\r\n * setValueByIter(theValue, [\"friend\"], \"I've\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\" }\r\n * setValueByIter(theValue, [\"come\", \"to\", \"see\"], \"you\");\r\n * // Resulting Object: { Hello: { Darkness: { my: \"old\" } }, friend: \"I've\", come: { to : { see: \"you\" } } }\r\n * ```\r\n */\r\nexport function setValueByIter(target, iter, value) {\r\n    if (target && iter) {\r\n        let lastKey;\r\n        iterForOf(iter, (key) => {\r\n            if (lastKey) {\r\n                if (isNullOrUndefined(target[lastKey])) {\r\n                    // Add an empty object / map\r\n                    target[lastKey] = {};\r\n                }\r\n                target = target[lastKey];\r\n            }\r\n            lastKey = key;\r\n        });\r\n        target[lastKey] = value;\r\n    }\r\n}\r\n//# sourceMappingURL=get_set_value.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { utcNow } from \"./date\";\r\nimport { lazySafeGetInst } from \"./environment\";\r\nimport { _globalLazyTestHooks } from \"./lazy\";\r\nlet _perf;\r\n/**\r\n * Identify whether the runtimne contains a `performance` object\r\n *\r\n * @since 0.4.4\r\n * @group Environment\r\n * @returns\r\n */\r\nexport function hasPerformance() {\r\n    return !!getPerformance();\r\n}\r\n/**\r\n * Returns the global `performance` Object if available, which can be used to\r\n * gather performance information about the current document. It serves as the\r\n * point of exposure for the Performance Timeline API, the High Resolution Time\r\n * API, the Navigation Timing API, the User Timing API, and the Resource Timing API.\r\n *\r\n * @since 0.4.4\r\n * @group Environment\r\n * @returns The global performance object if available.\r\n */\r\nexport function getPerformance() {\r\n    (!_perf || (!_perf.b && _globalLazyTestHooks && _globalLazyTestHooks.lzy)) && (_perf = lazySafeGetInst(\"performance\"));\r\n    return _perf.v;\r\n}\r\n/**\r\n * Returns the number of milliseconds that has elapsed since the time origin, if\r\n * the runtime does not support the `performance` API it will fallback to return\r\n * the number of milliseconds since the unix epoch.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns The number of milliseconds as a `DOMHighResTimeStamp` double value or\r\n * an integer depending on the runtime.\r\n * @example\r\n * ```ts\r\n * let now = perfNow();\r\n * ```\r\n */\r\nexport function perfNow() {\r\n    let perf = getPerformance();\r\n    if (perf && perf.now) {\r\n        return perf.now();\r\n    }\r\n    return utcNow();\r\n}\r\n/**\r\n * Return the number of milliseconds that have elapsed since the provided `startTime`\r\n * the `startTime` MUST be obtained from {@link perfNow} to ensure the correct elapsed\r\n * value is returned.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param startTime - The startTime obtained from `perfNow`\r\n * @returns The number of milliseconds that have elapsed since the startTime.\r\n * @example\r\n * ```ts\r\n * let start = perfNow();\r\n * // Do some work\r\n * let totalTime = elapsedTime(start);\r\n * ```\r\n */\r\nexport function elapsedTime(startTime) {\r\n    return perfNow() - startTime;\r\n}\r\n//# sourceMappingURL=perf.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { isArray, isBoolean, isDate, isFunction, isNullOrUndefined, isObject, isTruthy } from \"./base\";\r\nimport { objKeys } from \"../object/object\";\r\nimport { LENGTH } from \"../internal/constants\";\r\nfunction _checkLength(value, props) {\r\n    let result;\r\n    arrForEach(props, (prop) => {\r\n        if (prop in value) {\r\n            let propValue = value[prop];\r\n            result = (isFunction(propValue) ? propValue() : propValue) > 0;\r\n            return -1;\r\n        }\r\n    });\r\n    return result;\r\n}\r\nfunction _hasValue(value, depth) {\r\n    let result = value === false || value === 0;\r\n    if (!result && !isNullOrUndefined(value)) {\r\n        if (isArray(value)) {\r\n            result = value[LENGTH] > 0;\r\n        }\r\n        else if (isDate(value)) {\r\n            result = !isNaN(value.getTime());\r\n        }\r\n        else if (isBoolean(value)) {\r\n            return true;\r\n        }\r\n        else if (isObject(value)) {\r\n            try {\r\n                let chkValue = _checkLength(value, [LENGTH, \"byteLength\", \"size\", \"count\"]);\r\n                if (isBoolean(chkValue)) {\r\n                    return chkValue;\r\n                }\r\n                if (isFunction(value.valueOf) && depth < 5) {\r\n                    return _hasValue(value.valueOf(), ++depth);\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Best effort to try calling functions and lookup properties\r\n            }\r\n            return !!objKeys(value)[LENGTH];\r\n        }\r\n        else {\r\n            result = isTruthy(value);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Return whether the value appears to have any `value`, this helper returns true for\r\n * - value is not null, undefined or string value of \"undefined\"\r\n * - value === false\r\n * - value === 0\r\n * - An array with a length >= 1\r\n * - A valid Date\r\n * - If object has a `length` property or function and the returned value.length or value.length() !== 0\r\n * - If object has a `byteLength` property or function and the returned value.byteLength or value.byteLength() !== 0\r\n * - If object has a `size` property or function and the returned value.size or value.size() !== 0\r\n * - If object has a `valueOf` function then the returned value hasValue(value.valueOf()) to a maximum recursion of 5 levels\r\n * - If object with at least 1 key of it's own property (hasOwnProperty)\r\n * - else if isTruthy (empty string, etc)\r\n * @group Value Check\r\n * @param value - The value to be checked\r\n * @example\r\n * ```ts\r\n * // False\r\n * hasValue(null);                              // false\r\n * hasValue(undefined);                         // false\r\n * hasValue(\"undefined\");                       // false (Special Case)\r\n * hasValue(\"\");                                // false -- use: !strIsNullOrEmpty(\"\")\r\n * hasValue([]);                                // false\r\n * hasValue(/[a-z]/g);                          // false\r\n * hasValue(new RegExp(\"\"));                    // false\r\n * hasValue(new ArrayBuffer(0));                // false\r\n * hasValue(new Error(\"Test Error\"));           // false\r\n * hasValue(new TypeError(\"Test TypeError\"));   // false\r\n * hasValue(new TestError(\"Test TestError\"));   // false\r\n * hasValue(Promise.reject());                  // false\r\n * hasValue(Promise.resolve());                 // false\r\n * hasValue(new Promise(() => {}));             // false\r\n * hasValue({});                                // false\r\n * hasValue(Object.create(null));               // false\r\n * hasValue(polyObjCreate(null));               // false\r\n *\r\n * // Objects with length / size property or function\r\n * hasValue({ length: 0 });                     // false\r\n * hasValue({ length: () => 0 });               // false\r\n * hasValue({ byteLength: 0 });                 // false\r\n * hasValue({ byteLength: () => 0 });           // false\r\n * hasValue({ size: 0 });                       // false\r\n * hasValue({ size: () => 0 });                 // false\r\n * hasValue({ count: 0 });                      // false\r\n * hasValue({ count: undefined as any });       // false\r\n * hasValue({ count: null as any });            // false\r\n * hasValue({ count: () => 0 });                // false\r\n * hasValue({ count: () => undefined as any }); // false\r\n * hasValue({ count: () => null as any });      // false\r\n * hasValue({ valueOf: () => undefined as any});// false\r\n * hasValue({ valueOf: () => null as any });    // false\r\n\r\n * // True\r\n * hasValue(\"null\");                    // true\r\n * hasValue(\"0\");                       // true\r\n * hasValue(\"1\");                       // true\r\n * hasValue(\"aa\");                      // true\r\n * hasValue(new Date());                // true\r\n * hasValue(0);                         // true\r\n * hasValue(1);                         // true\r\n * hasValue(_dummyFunction);            // true\r\n * hasValue([\"A\"]);                     // true\r\n * hasValue([0]);                       // true\r\n * hasValue([false]);                   // true\r\n * hasValue(new Array(1));              // true\r\n * hasValue(true);                      // true\r\n * hasValue(false);                     // true\r\n * hasValue(\"true\");                    // true\r\n * hasValue(\"false\");                   // true\r\n * hasValue((/[a-z]/g).exec(\"hello\"));  // true\r\n * hasValue(new ArrayBuffer(1));        // true\r\n * hasValue(_dummyError());             // true\r\n * hasValue(_simplePromise());          // true\r\n * hasValue(_simplePromiseLike());      // true\r\n *\r\n * // Boolean objects\r\n * hasValue(new Boolean(true));         // true\r\n * hasValue(new Boolean(false));        // true\r\n * hasValue(new Boolean(\"true\"));       // true\r\n * hasValue(new Boolean(\"false\"));      // true\r\n * hasValue(new Boolean(\"0\"));          // true\r\n * hasValue(new Boolean(0));            // true\r\n * hasValue(new Boolean(\"1\"));          // true\r\n * hasValue(new Boolean(1));            // true\r\n *\r\n * // Boolean values\r\n * hasValue(Boolean(true));             // true\r\n * hasValue(Boolean(false));            // true\r\n * hasValue(Boolean(\"true\"));           // true\r\n * hasValue(Boolean(\"false\"));          // true\r\n * hasValue(Boolean(\"0\"));              // true\r\n * hasValue(Boolean(0));                // true\r\n * hasValue(Boolean(\"1\"));              // true\r\n * hasValue(Boolean(1));                // true\r\n\r\n * // Objects with length / size property or function\r\n * hasValue({ length: 1 });             // true\r\n * hasValue({ length: () => 1 });       // true\r\n * hasValue({ byteLength: 1 });         // true\r\n * hasValue({ byteLength: () => 1 });   // true\r\n * hasValue({ size: 1 });               // true\r\n * hasValue({ size: () => 1 });         // true\r\n * hasValue({ count: 1 });              // true\r\n * hasValue({ count: () => 1 });        // true\r\n * hasValue({ valueOf: () => 0 });      // true\r\n * hasValue({ valueOf: () => 1 });      // true\r\n * ```\r\n */\r\nexport function hasValue(value) {\r\n    return _hasValue(value, 0);\r\n}\r\n//# sourceMappingURL=value.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrCls, BOOLEAN, FUNCTION, NULL_VALUE, NUMBER, OBJECT, ObjProto, STRING, UNDEFINED, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { safeGet } from \"./safe_get\";\r\nconst PRIMITIVE_TYPES = [STRING, NUMBER, BOOLEAN, UNDEFINED, \"symbol\", \"bigint\"];\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the provided type.\r\n * @param theType - The type to match against the `typeof value`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\nexport function _createIs(theType) {\r\n    return function (value) {\r\n        return typeof value === theType;\r\n    };\r\n}\r\n/**\r\n * @ignore\r\n * @internal\r\n * Create and returns a function that will return `true` if the argument passed\r\n * to it matches the object type specified based on {@link objToString}.\r\n * @param - The object name to match for the `objToString(value)`\r\n * @returns A function which takes a single argument and returns a boolean\r\n */\r\nexport function _createObjIs(theName) {\r\n    const theType = \"[object \" + theName + \"]\";\r\n    return function (value) {\r\n        return !!(value && objToString(value) === theType);\r\n    };\r\n}\r\n/**\r\n * The `objToString()` method returns a string representing the object. This explicitly\r\n * always calls the `Object.prototype.toString()` method.\r\n *\r\n * An object's toString() method is most commonly invoked when that object undergoes:\r\n * - explicit type conversion to a string (for example, String(myObject))\r\n * - implicit type coercion into a string (for example, myObject + \"hello world\")\r\n *\r\n * @group Object\r\n * @param value - The object to be converted into a string\r\n * @returns A string representation of the object\r\n * @example\r\n * ```ts\r\n * objToString(new Date()); // [object Date]\r\n * objToString(new String()); // [object String]\r\n *\r\n * // Math has its Symbol.toStringTag\r\n * objToString(Math); // [object Math]\r\n *\r\n * objToString(undefined); // [object Undefined]\r\n * objToString(null); // [object Null]\r\n * ```\r\n */\r\nexport function objToString(value) {\r\n    return ObjProto.toString.call(value);\r\n}\r\n/**\r\n * Validate if the provided value object is of the expected type\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @param theType - The expected type name as a string\r\n * @returns `true` if the value matches the provided type\r\n */\r\nexport function isTypeof(value, theType) {\r\n    return typeof value === theType;\r\n}\r\n/**\r\n * Checks if the provided value is undefined or contains the string value \"undefined\",\r\n * if you want to consider the string value as undefined see {@link isStrictUndefined}\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns true if the value is undefined or \"undefined\", otherwise false\r\n * @example\r\n * ```ts\r\n * isUndefined(undefined);              // true\r\n * isUndefined(\"undefined\");            // true\r\n *\r\n * isUndefined(null);                   // false\r\n * isUndefined(\"null\");                 // false\r\n * isUndefined(\"1\");                    // false\r\n * isUndefined(\"aa\");                   // false\r\n * isUndefined(new Date());             // false\r\n * isUndefined(1);                      // false\r\n * isUndefined(\"\");                     // false\r\n * isUndefined(_dummyFunction);         // false\r\n * isUndefined([]);                     // false\r\n * isUndefined(new Array(1));           // false\r\n * isUndefined(true);                   // false\r\n * isUndefined(false);                  // false\r\n * isUndefined(\"true\");                 // false\r\n * isUndefined(\"false\");                // false\r\n * isUndefined(new Boolean(true));      // false\r\n * isUndefined(new Boolean(false));     // false\r\n * isUndefined(new Boolean(\"true\"));    // false\r\n * isUndefined(new Boolean(\"false\"));   // false\r\n * isUndefined(Boolean(true));          // false\r\n * isUndefined(Boolean(false));         // false\r\n * isUndefined(Boolean(\"true\"));        // false\r\n * isUndefined(Boolean(\"false\"));       // false\r\n * isUndefined(new RegExp(\"\"));         // false\r\n * isUndefined(new ArrayBuffer(0));     // false\r\n * isUndefined(new Error(\"Test Error\"));// false\r\n * isUndefined(new TypeError(\"Test TypeError\"));    // false\r\n * isUndefined(new TestError(\"Test TestError\"));    // false\r\n * isUndefined(_dummyError());          // false\r\n * isUndefined(Promise.reject());       // false\r\n * isUndefined(Promise.resolve());      // false\r\n * isUndefined(new Promise(() => {}));  // false\r\n * isUndefined(_simplePromise());       // false\r\n * isUndefined(_simplePromiseLike());   // false\r\n * isUndefined(Object.create(null));    // false\r\n * isUndefined(polyObjCreate(null));    // false\r\n * ```\r\n */\r\nexport function isUndefined(value) {\r\n    return typeof value === UNDEFINED || value === UNDEFINED;\r\n}\r\n/**\r\n * Checks if the provided value is undefined, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns true if the typeof value === UNDEFINED\r\n * @example\r\n * ```ts\r\n * isStrictUndefined(undefined);    // true\r\n *\r\n * isStrictUndefined(null);         // false\r\n * isStrictUndefined(\"null\");       // false\r\n * isStrictUndefined(\"undefined\");  // false\r\n * isStrictUndefined(\"1\");          // false\r\n * isStrictUndefined(\"aa\");         // false\r\n * isStrictUndefined(new Date());   // false\r\n * isStrictUndefined(0);            // false\r\n * isStrictUndefined(1);            // false\r\n * isStrictUndefined(\"\");           // false\r\n * ```\r\n */\r\nexport function isStrictUndefined(arg) {\r\n    return !isDefined(arg);\r\n}\r\n/**\r\n * Checks if the provided value is null, undefined or contains the string value of \"undefined\".\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns `true` if the value is `null` or `undefined`\r\n * @example\r\n * ```ts\r\n * isNullOrUndefined(null);         // true\r\n * isNullOrUndefined(undefined);    // true\r\n * isNullOrUndefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isNullOrUndefined(value);        // true\r\n *\r\n * isNullOrUndefined(\"\");           // false\r\n * isNullOrUndefined(0);            // false\r\n * isNullOrUndefined(new Date());   // false\r\n * isNullOrUndefined(true);         // false\r\n * isNullOrUndefined(false);        // false\r\n * ```\r\n */\r\nexport function isNullOrUndefined(value) {\r\n    return value === NULL_VALUE || isUndefined(value);\r\n}\r\n/**\r\n * Checks if the provided value is null, undefined only, a string value of \"undefined\" is NOT considered\r\n * to be undefined.\r\n * @group Type Identity\r\n * @group Value Check\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isStrictNullOrUndefined(null);         // true\r\n * isStrictNullOrUndefined(undefined);    // true\r\n * isStrictNullOrUndefined(\"undefined\");  // false\r\n *\r\n * let value = null;\r\n * isStrictNullOrUndefined(value);        // true\r\n * let value = undefined;\r\n * isStrictNullOrUndefined(value);        // true\r\n *\r\n * isStrictNullOrUndefined(\"\");           // false\r\n * isStrictNullOrUndefined(0);            // false\r\n * isStrictNullOrUndefined(new Date());   // false\r\n * isStrictNullOrUndefined(true);         // false\r\n * isStrictNullOrUndefined(false);        // false\r\n * ```\r\n */\r\nexport function isStrictNullOrUndefined(value) {\r\n    return value === NULL_VALUE || !isDefined(value);\r\n}\r\n/**\r\n * Checks if the passed value is defined, which means it has any value and is not undefined.\r\n * A string value of \"undefined\" is considered to be defined.\r\n * @group Value Check\r\n * @param arg - The value to check\r\n * @returns true if arg has a value (is not === undefined)\r\n * @example\r\n * ```ts\r\n * isDefined(null);         // false\r\n * isDefined(undefined);    // false\r\n * isDefined(\"undefined\");  // true\r\n *\r\n * let value = null;\r\n * isDefined(value);        // false\r\n * let value = undefined;\r\n * isDefined(value);        // false\r\n *\r\n * isDefined(\"\");           // true\r\n * isDefined(0);            // true\r\n * isDefined(new Date());   // true\r\n * isDefined(true);         // true\r\n * isDefined(false);        // true\r\n * ```\r\n */\r\nexport function isDefined(arg) {\r\n    return !!arg || arg !== UNDEF_VALUE;\r\n}\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 7 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - null\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @param value - The value to check whether it's a primitive value\r\n * @example\r\n * ```ts\r\n * isPrimitive(null);                   // true\r\n * isPrimitive(undefined);              // true\r\n * isPrimitive(\"null\");                 // true\r\n * isPrimitive(\"undefined\");            // true\r\n * isPrimitive(\"1\");                    // true\r\n * isPrimitive(\"aa\");                   // true\r\n * isPrimitive(1);                      // true\r\n * isPrimitive(Number(2));              // true\r\n * isPrimitive(\"\");                     // true\r\n * isPrimitive(String(\"\"));             // true\r\n * isPrimitive(true);                   // true\r\n * isPrimitive(false);                  // true\r\n * isPrimitive(\"true\");                 // true\r\n * isPrimitive(\"false\");                // true\r\n * isPrimitive(BigInt(42));             // true\r\n * isPrimitive(Symbol.for(\"Hello\"));    // true\r\n *\r\n * isPrimitive(new String(\"aa\"));       // false\r\n * isPrimitive(new Date());             // false\r\n * isPrimitive(_dummyFunction);         // false\r\n * isPrimitive([]);                     // false\r\n * isPrimitive(new Array(1));           // false\r\n * isPrimitive(new Boolean(true));      // false\r\n * isPrimitive(new Boolean(false));     // false\r\n * isPrimitive(new Boolean(\"true\"));    // false\r\n * isPrimitive(new Boolean(\"false\"));   // false\r\n * ```\r\n */\r\nexport const isPrimitive = (value) => {\r\n    return value === NULL_VALUE || isPrimitiveType(typeof value);\r\n};\r\n/**\r\n * Identifies whether the provided value is a JavaScript [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\r\n * which is when is it not an object and has no methods or properties. There are 6 primitive data types:\r\n * - string\r\n * - number\r\n * - bigint\r\n * - boolean\r\n * - undefined\r\n * - symbol\r\n *\r\n * Most of the time, a primitive value is represented directly at the lowest level of the language implementation.\r\n *\r\n * All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself\r\n * with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value\r\n * can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer\r\n * utilities to mutate primitive values.\r\n * @since 0.9.6\r\n * @group Type Identity\r\n * @param theType - The type as a string value to be checked whther it's a primitive type, this should be the value\r\n * returned from `typeof value`.\r\n * @example\r\n * ```ts\r\n * isPrimitiveType(null);                   // false\r\n * isPrimitiveType(undefined);              // false\r\n * isPrimitiveType(\"null\");                 // false\r\n * isPrimitiveType(\"undefined\");            // false\r\n * isPrimitiveType(\"1\");                    // false\r\n * isPrimitiveType(\"aa\");                   // false\r\n * isPrimitiveType(1);                      // false\r\n * isPrimitiveType(Number(2));              // false\r\n * isPrimitiveType(\"\");                     // false\r\n * isPrimitiveType(String(\"\"));             // false\r\n * isPrimitiveType(true);                   // false\r\n * isPrimitiveType(false);                  // false\r\n * isPrimitiveType(\"true\");                 // false\r\n * isPrimitiveType(\"false\");                // false\r\n * isPrimitiveType(BigInt(42));             // false\r\n * isPrimitiveType(Symbol.for(\"Hello\"));    // false\r\n *\r\n * isPrimitiveType(\"string\");               // true\r\n * isPrimitiveType(\"number\");               // true\r\n * isPrimitiveType(\"boolean\");              // true\r\n * isPrimitiveType(\"undefined\");            // true\r\n * isPrimitiveType(\"symbol\");               // true\r\n * isPrimitiveType(\"bigint\");               // true\r\n * ```\r\n */\r\nexport const isPrimitiveType = (theType) => {\r\n    return theType !== OBJECT && PRIMITIVE_TYPES.indexOf(theType) !== -1;\r\n};\r\n/**\r\n * Checks to see if the past value is a string value\r\n * @group Type Identity\r\n * @group String\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * isString(\"\");            // true\r\n * isString(\"null\");        // true\r\n * isString(\"undefined\");   // true\r\n * isString(String(\"\"));    // true\r\n *\r\n * isString(null);          // false\r\n * isString(undefined);     // false\r\n * isString(0);             // false\r\n * ```\r\n */\r\nexport const isString = _createIs(STRING);\r\n/**\r\n * Checks to see if the past value is a function value\r\n * @group Type Identity\r\n * @param value - The value to check\r\n * @returns\r\n * @example\r\n * ```ts\r\n * function myFunction() { }\r\n * isFunction(null);            // false\r\n * isFunction(undefined);       // false\r\n * isFunction(\"null\");          // false\r\n * isFunction(\"undefined\");     // false\r\n * isFunction(\"1\");             // false\r\n * isFunction(\"aa\");            // false\r\n * isFunction(new Date());      // false\r\n * isFunction(1);               // false\r\n * isFunction(\"\");              // false\r\n * isFunction(myFunction);      // true\r\n * isFunction([]);              // false\r\n * isFunction(new Array(1));    // false\r\n * ```\r\n */\r\nexport const isFunction = _createIs(FUNCTION);\r\n/**\r\n * Checks to see if the past value is an object value\r\n * @group Type Identity\r\n * @group Object\r\n * @typeParam T - The object type, defaults to any\r\n * @param value - The value to check\r\n * @returns\r\n */\r\nexport function isObject(value) {\r\n    if (!value && isNullOrUndefined(value)) {\r\n        return false;\r\n    }\r\n    return !!value && typeof value === OBJECT;\r\n}\r\n/**\r\n * Checks if the type of value is an Array.\r\n *\r\n * @group Type Identity\r\n * @group Array\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Array, false otherwise.\r\n * @example\r\n * ```ts\r\n * import { isArray, isObject } from \"@nevware21/ts-utils\";\r\n *\r\n * function performAction(value: any) {\r\n *     if (isArray(value) || isObject(value)) {\r\n *         // Do something\r\n *     } else {\r\n *         // Do something else\r\n *     }\r\n * }\r\n * ```\r\n */\r\nexport const isArray = ArrCls.isArray;\r\n/**\r\n * Check if an object is of type Date\r\n * @group Type Identity\r\n * @example\r\n * ```ts\r\n * import { isDate } from \"@nevware21/ts-utils\";\r\n *\r\n * let _theDate = null;\r\n *\r\n * function getSetDate(newDate?: any) {\r\n *     _theDate = isDate(newDate) ? newDate : new Date();\r\n *\r\n *     return _theDate;\r\n * }\r\n * ```\r\n */\r\nexport const isDate = _createObjIs(\"Date\");\r\n/**\r\n * Checks if the type of value is a number.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nexport const isNumber = _createIs(NUMBER);\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nexport const isBoolean = _createIs(BOOLEAN);\r\n/**\r\n * Determines if a value is a regular expression object.\r\n * @group Type Identity\r\n * @param {*} value Reference to check.\r\n * @returns {boolean} True if `value` is a `RegExp`.\r\n */\r\nexport const isRegExp = _createObjIs(\"RegExp\");\r\n/**\r\n * Checks if the type of value is a File object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a File, false otherwise.\r\n */\r\nexport const isFile = _createObjIs(\"File\");\r\n/**\r\n * Checks if the type of value is a FormData object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a FormData, false otherwise.\r\n */\r\nexport const isFormData = _createObjIs(\"FormData\");\r\n/**\r\n * Checks if the type of value is a Blob object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Blob, false otherwise.\r\n */\r\nexport const isBlob = _createObjIs(\"Blob\");\r\n/**\r\n * Checks if the type of value is a ArrayBuffer object.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a ArrayBuffer, false otherwise.\r\n */\r\nexport const isArrayBuffer = _createObjIs(\"ArrayBuffer\");\r\n/**\r\n * Checks if the type of value is a Error object.\r\n * @group Type Identity\r\n * @group Error\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Error, false otherwise.\r\n */\r\nexport const isError = _createObjIs(\"Error\");\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a PromiseLike, false otherwise.\r\n */\r\nexport function isPromiseLike(value) {\r\n    return !!value && isFunction(value.then);\r\n}\r\n/**\r\n * Checks if the type of value is a PromiseLike instance (contains a then function).\r\n * This is an alias for {@link isPromiseLike}.\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a PromiseLike, false otherwise.\r\n */\r\nexport const isThenable = isPromiseLike;\r\n/**\r\n * Checks if the type of value is a Promise instance (contains then and catch functions).\r\n * @group Type Identity\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a Promise, false otherwise.\r\n */\r\nexport function isPromise(value) {\r\n    return isPromiseLike(value) && isFunction(value.catch);\r\n}\r\n/**\r\n * Checks if the type of value does not evaluate to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is not truthy, false otherwise.\r\n */\r\nexport function isNotTruthy(value) {\r\n    return !value || !safeGet(() => (value && (0 + value)), value);\r\n}\r\n/**\r\n * Checks if the type of value evaluates to true value, handling some special\r\n * case usages of Boolean(true/false) and new Boolean(true/false).\r\n * @group Value Check\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is not truthy, false otherwise.\r\n */\r\nexport function isTruthy(value) {\r\n    // Objects created with no prototype (Object.create(null)) cannot be converted to primitives\r\n    // Which causes this code to throw, additionally just using !! also fails for Boolean objects\r\n    // !!(new Boolean(false)) evaluates to true\r\n    return !(!value || safeGet(() => !(value && (0 + value)), !value));\r\n    //return !(!value || !(value && (0 + value)));\r\n}\r\n//# sourceMappingURL=base.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, SYMBOL, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { polyGetKnownSymbol, polyNewSymbol, polySymbolFor, polySymbolKeyFor } from \"../polyfills/symbol\";\r\nimport { _wellKnownSymbolMap } from \"./well_known\";\r\nimport { _createIs } from \"../helpers/base\";\r\nimport { _globalLazyTestHooks } from \"../helpers/lazy\";\r\nimport { safeGetLazy } from \"../helpers/safe_lazy\";\r\nimport { lazySafeGetInst } from \"../helpers/environment\";\r\nlet _symbol;\r\nlet _symbolFor;\r\nlet _symbolKeyFor;\r\nfunction _getSymbolValue(name) {\r\n    return safeGetLazy(function () {\r\n        return (_symbol.v ? _symbol.v[name] : UNDEF_VALUE);\r\n    }, UNDEF_VALUE);\r\n}\r\n/**\r\n * Checks if the type of value is a symbol.\r\n * @group Symbol\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a symbol, false otherwise.\r\n */\r\nexport const isSymbol = _createIs(\"symbol\");\r\n/**\r\n * Helper to identify whether the runtime support the Symbols either via native or an installed polyfill\r\n * @group Symbol\r\n * @returns true if Symbol's are support otherwise false\r\n */\r\nexport function hasSymbol() {\r\n    return !!getSymbol();\r\n}\r\n/**\r\n * If Symbols are supported then attempt to return the named Symbol\r\n * @group Symbol\r\n * @returns The value of the named Symbol (if available)\r\n */\r\nexport function getSymbol() {\r\n    let resetCache = !_symbol || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_symbol.b);\r\n    resetCache && (_symbol = lazySafeGetInst(SYMBOL));\r\n    (!_symbolFor || resetCache) && (_symbolFor = _getSymbolValue(\"for\"));\r\n    (!_symbolKeyFor || resetCache) && (_symbolKeyFor = _getSymbolValue(\"keyFor\"));\r\n    return _symbol.v;\r\n}\r\n/**\r\n * If Symbols are supported then get the property of the global Symbol, if Symbol's are\r\n * not supported and noPoly is true it returns null. Used to access the well known symbols.\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @param noPoly - Flag indicating whether to return a polyfill if symbols are not supported.\r\n * @returns The value of the property if present\r\n * @example\r\n * ```ts\r\n * // If Symbol is supported in the runtime\r\n * getKnownSymbol(\"toStringTag\") === Symbol.toStringTag;                // true\r\n * getKnownSymbol(WellKnownSymbols.toStringTag) === Symbol.toStringTag; // true\r\n * ```\r\n */\r\nexport function getKnownSymbol(name, noPoly) {\r\n    let knownName = _wellKnownSymbolMap[name];\r\n    // Cause lazy symbol to get initialized\r\n    (!_symbol || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return _symbol.v ? _symbol.v[knownName || name] : (!noPoly ? polyGetKnownSymbol(name) : UNDEF_VALUE);\r\n}\r\n/**\r\n * Returns a new unique Symbol value. If noPoly is true and symbols are not supported\r\n * then this will return null.\r\n * @group Symbol\r\n * @param description Description of the new Symbol object.\r\n * @param noPoly - Flag indicating whether to return a polyfil if symbols are not supported.\r\n * @returns The new symbol\r\n */\r\nexport function newSymbol(description, noPoly) {\r\n    // Cause lazy _symbol to get initialized\r\n    (!_symbol || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return _symbol.v ? _symbol.v(description) : (!noPoly ? polyNewSymbol(description) : NULL_VALUE);\r\n}\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key. This will always return a polyfill if symbols\r\n * are not supported.\r\n * @group Symbol\r\n * @param key key to search for.\r\n */\r\nexport function symbolFor(key) {\r\n    // Cause lazy symbol to get initialized\r\n    (!_symbolFor || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return (_symbolFor.v || polySymbolFor)(key);\r\n}\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined. This will always attempt to lookup the polyfill\r\n * implementation if symbols are not supported\r\n * @group Symbol\r\n * @param sym Symbol to find the key for.\r\n */\r\nexport function symbolKeyFor(sym) {\r\n    // Cause lazy symbol to get initialized\r\n    (!_symbolKeyFor || (_globalLazyTestHooks.lzy && !_symbol.b)) && getSymbol();\r\n    return (_symbolKeyFor.v || polySymbolKeyFor)(sym);\r\n}\r\n//# sourceMappingURL=symbol.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjClass, VALUE } from \"../internal/constants\";\r\nimport { isFunction, isUndefined } from \"../helpers/base\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Mapping from ObjDefinePropDescriptor key to PropertyDescriptor key\r\n */\r\nconst propMap = {\r\n    e: \"enumerable\",\r\n    c: \"configurable\",\r\n    v: VALUE,\r\n    w: \"writable\",\r\n    g: \"get\",\r\n    s: \"set\"\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to convert ObjDefinePropDescriptor into PropertyDescriptor\r\n * @param value - The prop descriptor to convert\r\n * @returns\r\n */\r\nfunction _createProp(value) {\r\n    let prop = {};\r\n    prop[propMap[\"c\"]] = true;\r\n    prop[propMap[\"e\"]] = true;\r\n    if (value.l) {\r\n        // Asign a getter function to return the value when requested\r\n        prop.get = () => value.l.v;\r\n        // If it has a setter then expose it as well\r\n        let desc = objGetOwnPropertyDescriptor(value.l, \"v\");\r\n        if (desc && desc.set) {\r\n            prop.set = (newValue) => {\r\n                value.l.v = newValue;\r\n            };\r\n        }\r\n    }\r\n    objForEachKey(value, (key, value) => {\r\n        prop[propMap[key]] = isUndefined(value) ? prop[propMap[key]] : value;\r\n    });\r\n    return prop;\r\n}\r\n/**\r\n * Defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\r\n * This is a wrapper for [Object.defineProperty](https://developer.mozilla.org/en-US/docs/web/javascript/reference/global_objects/object/defineproperty)\r\n *\r\n * This method allows a precise addition to or modification of a property on an object. Normal property addition through\r\n * assignment creates properties which show up during property enumeration (for...in loop or objKeys method), whose\r\n * values may be changed, and which may be deleted. This method allows these extra details to be changed from their\r\n * defaults. By default, properties added using objDefineProp() are not writable, not enumerable, and not configurable.\r\n *\r\n * Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data\r\n * descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property\r\n * described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both.\r\n *\r\n * This is an alias for Object.defineProperty\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name or Symbol of the property to be defined or modified.\r\n * @param descriptor - The descriptor for the property being defined or modified.\r\n */\r\nexport const objDefineProp = ObjClass[\"defineProperty\"];\r\n/**\r\n * The objDefineProperties() method defines new or modifies existing properties directly on an object, returning the object.\r\n * This is a wrapper for [Object.defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param props - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns\r\n */\r\nexport const objDefineProperties = ObjClass[\"defineProperties\"];\r\n/**\r\n * Try to define a get object property accessor for the target object, if a function is past as the value this will\r\n * be assumed to be a getter function and NOT the value.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineGet} or {@link objDefineAccessors}\r\n * as it provides a deterministic way for identifying whether the value is a value or a function rather than wrapping any\r\n * function value in another function.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param value - The value or a function that returns the value\r\n * @param configurable - Can the value be changed, defaults to true.\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineGet(target, key, value, configurable, enumerable) {\r\n    return objDefineProp(target, key, _createProp({\r\n        e: enumerable,\r\n        c: configurable,\r\n        [isFunction(value) ? \"g\" : \"v\"]: value\r\n    }));\r\n}\r\n/**\r\n * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with\r\n * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded\r\n * and executed in an ES3 container, providing basic IE8 compatibility.\r\n * @deprecated It is recommended that you use {@link objDefine} instead {@link objDefineAccessors} as this internally creates\r\n * the {@link ObjDefinePropDescriptor} definition based on your provided arguments. And only using a minimum set of functions\r\n * reduces your overall bundle size.\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param prop - The name of the property to be defined or modified.\r\n * @param getProp - The getter function to wire against the getter.\r\n * @param setProp - The setter function to wire against the setter.\r\n * @param configurable - Can the value be changed, defaults to true\r\n * @param enumerable - Should this get property be enumerable, defaults to true.\r\n * @returns The object that was passed to the function\r\n */\r\nexport function objDefineAccessors(target, prop, getProp, setProp, configurable, enumerable) {\r\n    let desc = {\r\n        e: enumerable,\r\n        c: configurable\r\n    };\r\n    if (getProp) {\r\n        desc.g = getProp;\r\n    }\r\n    if (setProp) {\r\n        desc.s = setProp;\r\n    }\r\n    return objDefineProp(target, prop, _createProp(desc));\r\n}\r\n/**\r\n * The objDefine() method defines a new or modifies an existing single property accessors for the target object based\r\n * on the configuration defined for the propDesc argument of type {@link ObjDefinePropDescriptor}. This will call\r\n * {@link objDefineProp} after creating the required PropertyDescriptor populating defaults for the propDesc values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProp.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define the property.\r\n * @param key - The name of the property to be defined or modified\r\n * @param propDesc - An object which defines the Property Descriptor mappings for the mapping.\r\n * @returns The target object.\r\n */\r\nexport function objDefine(target, key, propDesc) {\r\n    return objDefineProp(target, key, _createProp(propDesc));\r\n}\r\n/**\r\n * The objDefineProps() method defines new or modifies existing properties directly for the target object using the keys\r\n * and configuration from the propDescMap argument. This will call {@link objDefineProperties} after creating the required\r\n * PropertyDescriptorMap from the propDescMap values.\r\n * Note, the default values (true) for `configurable` and `enumerable` are different from the defaults provided by objDefineProperties.\r\n * @since 0.6.0\r\n * @group Object\r\n * @param target - The object on which to define or modify properties.\r\n * @param propDescMap - An object whose keys represent the names of properties to be defined or modified and whose values are\r\n * objects describing those properties. Each value in props must be either a data descriptor or an accessor descriptor;\r\n * it cannot be both (see {@link ObjDefinePropDescriptorMap} for more details).\r\n * @returns The target object.\r\n */\r\nexport function objDefineProps(target, propDescMap) {\r\n    let props = {};\r\n    objForEachKey(propDescMap, (key, value) => {\r\n        props[key] = _createProp(value);\r\n    });\r\n    return objDefineProperties(target, props);\r\n}\r\n//# sourceMappingURL=define.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { arrIndexOf } from \"../array/indexOf\";\r\nimport { arrMap } from \"../array/map\";\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnCall } from \"../funcs/fnCall\";\r\nimport { isArray, isNullOrUndefined, objToString } from \"../helpers/base\";\r\nimport { LENGTH } from \"../internal/constants\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\n/**\r\n * Polyfill support function for Array.isArray\r\n * @group Polyfill\r\n * @group Array\r\n * @param value - The value to be checked\r\n * @returns true if the value is an array otherwise false.\r\n */\r\nexport function polyIsArray(value) {\r\n    if (isNullOrUndefined(value)) {\r\n        return false;\r\n    }\r\n    return objToString(value) === \"[object Array]\";\r\n}\r\n/**\r\n * The polyArrIncludes() method determines whether an array includes a certain value among its\r\n * entries, returning true or false as appropriate.\r\n * Note: The polyfill does not handle NaN correctly.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group Polyfill\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The value to search for\r\n * @param fromIndex - The optional Zero-based index at which to start searching, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex < 0, fromIndex + array.length\r\n * is used. However, the array is still searched from front to back in this case.\r\n * - If fromIndex < -array.length or fromIndex is omitted, 0 is used, causing the entire array to be searched.\r\n * - If fromIndex >= array.length, the array is not searched and false is returned.\r\n * @returns A boolean value which is true if the value searchElement is found within the array (or the part of\r\n * the array indicated by the index fromIndex, if specified).\r\n */\r\nexport function polyArrIncludes(theArray, searchElement, fromIndex) {\r\n    return arrIndexOf(theArray, searchElement, fromIndex) !== -1;\r\n}\r\n/**\r\n * The polyArrFind() method returns the first element in the provided array that satisfies\r\n * the provided testing function. If no values satisfy the testing function, undefined\r\n * is returned.\r\n * - If you need the index of the found element in the array, use {@link arrFindIndex}.\r\n * - If you need to find the index of a value, use arrIndexOf(). (It's similar to {@link arrFindIndex}, but checks\r\n * each element for equality with the value instead of using a testing function.)\r\n * - If you need to find if a value exists in an array, use arrIncludes(). Again, it checks each element for\r\n * equality with the value instead of using a testing function.\r\n * - If you need to find if any element satisfies the provided testing function, use {@link arrSome}.\r\n *\r\n * The polyArrFind() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array in ascending-index order, until `callbackFn` returns a truthy value. polyArrFind() then returns that\r\n * element and stops iterating through the array. If callbackFn never returns a truthy value, polyArrFind() returns\r\n * undefined.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in\r\n * sparse arrays behave the same as undefined.\r\n *\r\n * polyArrFind() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of `callbackFn`. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to polyArrFind() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by callbackFn, its value passed to the\r\n * `callbackFn` will be the value at the time that element gets visited. Deleted elements are visited as if they\r\n * were undefined.\r\n * @since 0.8.0\r\n * @group Polyfill\r\n * @group Array\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @return The first element in the array that satisfies the provided testing function. Otherwise, undefined\r\n * is returned.\r\n * @example\r\n * ```ts\r\n * const inventory = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 },\r\n * ];\r\n *\r\n * function isCherries(fruit) {\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * console.log(polyArrFind(inventory, isCherries));\r\n * // { name: 'cherries', quantity: 5 }\r\n *\r\n * function isPrime(element, index, array) {\r\n *   let start = 2;\r\n *   while (start <= Math.sqrt(element)) {\r\n *     if (element % start++ < 1) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return element > 1;\r\n * }\r\n *\r\n * console.log(polyArrFind([4, 6, 8, 12], isPrime)); // undefined, not found\r\n * console.log(polyArrFind([4, 5, 8, 12], isPrime)); // 5\r\n * ```\r\n */\r\nexport function polyArrFind(theArray, callbackFn, thisArg) {\r\n    let result;\r\n    let idx = polyArrFindIndex(theArray, callbackFn, thisArg);\r\n    return idx !== -1 ? theArray[idx] : result;\r\n}\r\n/**\r\n * The polyArrFindIndex() method returns the index of the first element in an array that satisfies the provided testing\r\n * function. If no elements satisfy the testing function, -1 is returned.\r\n *\r\n * The polyArrFindIndex() is an iterative method. It calls a provided callbackFn function once for each element in an\r\n * array in ascending-index order, until callbackFn returns a truthy value. polyArrFindIndex() then returns the index\r\n * of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, polyArrFindIndex()\r\n * returns -1.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse\r\n * arrays behave the same as undefined.\r\n *\r\n * polyArrFindIndex() does not mutate the array on which it is called, but the function provided as `callbackFn` can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to polyArrFindIndex() began.\r\n * - Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\r\n * If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Polyfill\r\n * @group Array\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The index of the first element in the array that passes the test. Otherwise, -1.\r\n * @example\r\n * ```ts\r\n * ```\r\n */\r\nexport function polyArrFindIndex(theArray, callbackFn, thisArg) {\r\n    let result = -1;\r\n    arrForEach(theArray, (value, index) => {\r\n        if (fnCall(callbackFn, thisArg | theArray, value, index, theArray)) {\r\n            result = index;\r\n            return -1;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * The polyArrFindLast() method iterates the array in reverse order and returns the value of the first element that\r\n * satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned.\r\n * - If you need the index of the found element in the array, use {@link arrFindLastIndex}.\r\n * - If you need to find the index of a value, use arrLastIndexOf(). (It's similar to {@link arrFindLastIndex}, but checks\r\n * each element for equality with the value instead of using a testing function.)\r\n * - If you need to find if a value exists in an array, use arrIncludes(). Again, it checks each element for\r\n * equality with the value instead of using a testing function.\r\n * - If you need to find if any element satisfies the provided testing function, use {@link arrSome}.\r\n *\r\n * The polyArrFindLast() method is an iterative method. It calls a provided callbackFn function once for each element\r\n * in an array in descending-index order, until callbackFn returns a truthy value. polyArrFindLast() then returns that\r\n * element and stops iterating through the array. If `callbackFn` never returns a truthy value, polyArrFindLast() returns\r\n * undefined.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse\r\n * arrays behave the same as undefined.\r\n *\r\n * polyArrFindLast() does not mutate the array on which it is called, but the function provided as `callbackFn` can.\r\n * Note, however, that the length of the array is saved before the first invocation of `callbackFn`. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to polyArrFindLast() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Polyfill\r\n * @group Array\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The last element in the array that satisfies the provided testing function. Otherwise, undefined\r\n * is returned.\r\n * @example\r\n * ```ts\r\n * const inventory = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 },\r\n * ];\r\n *\r\n * function isCherries(fruit) {\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * console.log(polyArrFindLast(inventory, isCherries));\r\n * // { name: 'cherries', quantity: 5 }\r\n *\r\n * function isPrime(element, index, array) {\r\n *   let start = 2;\r\n *   while (start <= Math.sqrt(element)) {\r\n *     if (element % start++ < 1) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return element > 1;\r\n * }\r\n *\r\n * console.log(polyArrFindLast([4, 6, 8, 12], isPrime)); // undefined, not found\r\n * console.log(polyArrFindLast([4, 5, 7, 12], isPrime)); // 7\r\n * ```\r\n */\r\nexport function polyArrFindLast(theArray, callbackFn, thisArg) {\r\n    let result;\r\n    let idx = polyArrFindLastIndex(theArray, callbackFn, thisArg);\r\n    return idx !== -1 ? theArray[idx] : result;\r\n}\r\n/**\r\n * The polyArrFindLastIndex() method iterates the array in reverse order and returns the index of the first element that\r\n * satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.\r\n *\r\n * The polyArrFindLastIndex() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array in descending-index order, until callbackFn returns a truthy value. polyArrFindLastIndex() then returns the\r\n * index of that element and stops iterating through the array. If callbackFn never returns a truthy value, returns -1.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse arrays\r\n * behave the same as undefined.\r\n *\r\n * polyArrFindLastIndex() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to polyArrFindLastIndex() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the callbackFn\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Polyfill\r\n * @group Array\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The index of the last (highest-index) element in the array that passes the test. Otherwise -1 if\r\n * no matching element is found.\r\n */\r\nexport function polyArrFindLastIndex(theArray, callbackFn, thisArg) {\r\n    let result = -1;\r\n    let len = theArray[LENGTH] >>> 0;\r\n    for (let idx = len - 1; idx >= 0; idx--) {\r\n        if (idx in theArray && fnCall(callbackFn, thisArg | theArray, theArray[idx], idx, theArray)) {\r\n            result = idx;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The polyArrFrom creates an new shallow-copied array from an array-like object or an iterable.\r\n * @since 0.9.7\r\n * @group Polyfill\r\n * @group ArrayLike\r\n * @group Array\r\n * @group Iterator\r\n * @typeParam T - Identifies the element type of the array-like or iterable.\r\n * @typeParam U - Identifies returned type of the array\r\n * @param theValue - An array-like object or iterable to convert to an array.\r\n * @param mapfn - A {@link ArrFromMapFn | mapping function} to call on every element of the array. If provided, every\r\n * value to be added to the array is first passed through this map function, and the return\r\n * value is added to the array instead. The function is called with the following arguments:\r\n * @param thisArg Value of 'this' used to invoke the mapfn.\r\n * @example\r\n * ```ts\r\n * polyArrFrom(\"Hello\");\r\n * // [ \"H\", \"e\", \"l\", \"l\", \"o\" ]\r\n *\r\n * polyArrFrom(new Set([\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]));\r\n * // [\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]\r\n *\r\n * let map = new Map([\r\n *   [ 1, \"Hello\" ],\r\n *   [ 2, \"Darkness\" ],\r\n *   [ 3, \"my\" ],\r\n *   [ 4, \"old\" ],\r\n *   [ 5, \"friend\"]\r\n * ]);\r\n *\r\n * polyArrFrom(map.values());\r\n * // [\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]\r\n *\r\n * polyArrFrom(map.keys());\r\n * // [ 1, 2, 3, 4, 5 ]\r\n *\r\n * polyArrFrom(map.entries());\r\n * // [ [ 1, \"Hello\" ], [ 2, \"Darkness\" ], [ 3, \"my\" ], [ 4, \"old\" ], [ 5, \"friend\"] ]\r\n *\r\n * polyArrFrom(map, ([ key, value ]) => ({ [key]: value }));\r\n * // [ {\"1\": \"Hello\"}, {\"2\": \"Darkness\"}, {\"3\": \"my\"}, {\"4\": \"old\"}, {\"5\": \"friend\"} ]\r\n * ```\r\n */\r\nexport function polyArrFrom(theValue, mapFn, thisArg) {\r\n    if (isArray(theValue)) {\r\n        let result = arrSlice(theValue);\r\n        return mapFn ? arrMap(result, mapFn, thisArg) : result;\r\n    }\r\n    let result = [];\r\n    iterForOf(theValue, (value, cnt) => {\r\n        return result.push(mapFn ? fnCall(mapFn, thisArg, value, cnt) : value);\r\n    });\r\n    return result;\r\n}\r\n//# sourceMappingURL=array.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isObject } from \"../helpers/base\";\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\nimport { objHasOwn } from \"../object/has_own\";\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object. This helper exists to avoid adding a polyfil for older browsers\r\n * that do not define Object.keys eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.keys implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Polyfill\r\n * @group Object\r\n * @param obj Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n */\r\nexport function polyObjKeys(obj) {\r\n    if (!isObject(obj) || obj === NULL_VALUE) {\r\n        throw new TypeError(\"polyObjKeys called on non-object\");\r\n    }\r\n    const result = [];\r\n    for (const prop in obj) {\r\n        if (objHasOwn(obj, prop)) {\r\n            result.push(prop);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Returns an array of key/values of the enumerable properties of an object\r\n * @since 0.9.7\r\n * @group Polyfill\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value Object that contains the properties and methods.\r\n * @example\r\n * ```ts\r\n * polyObjEntries({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ [ \"Hello\", \"Darkness\" ], [ \"my\", \"old\"], [ \"friend\", \".\" ] ]\r\n *\r\n * // Array-like object\r\n * polyObjEntries({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\r\n *\r\n * // Array-like object with random key ordering\r\n * polyObjEntries({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]*\r\n * ```\r\n */\r\nexport function polyObjEntries(value) {\r\n    let result = [];\r\n    objForEachKey(value, (key, value) => {\r\n        result.push([key, value]);\r\n    });\r\n    return result;\r\n}\r\n/**\r\n * Returns an array of key/values of the enumerable properties of an object\r\n * @since 0.9.7\r\n * @group Polyfill\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value Object that contains the properties and methods.\r\n * @example\r\n * ```ts\r\n * polyObjValues({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ \"Darkness\", \"old\", \".\" ]\r\n *\r\n * // Array-like object\r\n * polyObjValues({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ 'a', 'b', 'c']\r\n *\r\n * // Array-like object with random key ordering\r\n * polyObjValues({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ 'b', 'c', 'a']\r\n * ```\r\n */\r\nexport function polyObjValues(value) {\r\n    let result = [];\r\n    objForEachKey(value, (key, value) => {\r\n        result.push(value);\r\n    });\r\n    return result;\r\n}\r\n//# sourceMappingURL=object.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isDefined, isUndefined } from \"../helpers/base\";\r\nimport { elapsedTime, perfNow } from \"../helpers/perf\";\r\nimport { safeGetLazy } from \"../helpers/safe_lazy\";\r\nimport { _createTimerHandler } from \"./handler\";\r\nimport { scheduleTimeout } from \"./timeout\";\r\nlet _hasIdleCallback;\r\nlet _defaultIdleTimeout = 100;\r\nlet _maxExecutionTime = 50;\r\n/**\r\n * Identifies if the runtime supports the `requestIdleCallback` API.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n * @group Environment\r\n *\r\n * @returns True if the runtime supports `requestIdleCallback` otherwise false.\r\n * @example\r\n * ```ts\r\n * let nativeIdleTimeouts = hasIdleCallback();\r\n * // true === idle timeouts are supported by the runtime otherwise false and the {@linke scheduleIdleCallback}\r\n * will use `setTimeout` instead.\r\n * ```\r\n */\r\nexport function hasIdleCallback() {\r\n    !_hasIdleCallback && (_hasIdleCallback = safeGetLazy(() => isDefined(requestIdleCallback), false));\r\n    return !!(_hasIdleCallback.v ? requestIdleCallback : false);\r\n}\r\n/**\r\n * Set the idle timeout fallback timeout which is used when the runtime does not support `requestIdleCallback`\r\n * the default idle timeout will be used for the scheduled timer. Defaults to 100ms\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param timeout - The time in milliseconds that the timer should wait before calling the idle function.\r\n */\r\nexport function setDefaultIdleTimeout(timeout) {\r\n    _defaultIdleTimeout = timeout;\r\n}\r\n/**\r\n * Set the idle timeout fallback simulated maximum execution time, used when the runtime doesn't\r\n * support `requestIdleTimeout` to simulate the [IdleDeadline](https://w3c.github.io/requestidlecallback/#dom-idledeadline)\r\n * `timeRemaining` value.\r\n * This value is used as the base time of the [IdleDeadline.timeRemaining](https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/timeRemaining)\r\n * less the start time the callback was called. Defaults to 50ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param maxTime - The maximum execution time in milliseconds.\r\n */\r\nexport function setDefaultMaxExecutionTime(maxTime) {\r\n    _maxExecutionTime = maxTime;\r\n}\r\n/**\r\n * Queues a function to be called during a browser's idle periods. This enables developers to\r\n * perform background and low priority work on the main event loop, without impacting latency-critical\r\n * events such as animation and input response. Functions are generally called in first-in-first-out\r\n * order; however, callbacks which have a timeout specified may be called out-of-order if necessary\r\n * in order to run them before the timeout elapses.\r\n *\r\n * You can call scheduledleCallback() within an idle callback function to schedule another callback to\r\n * take place no sooner than the next pass through the event loop.\r\n *\r\n * If the runtime does not support the [requestIdleCallback](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\r\n * it will fallback to use `setTimeout` with either the provided timeout or the current default idle\r\n * timeout, which can be set via {@link setDefaultIdleTimeout}. It will always supply a deadline which\r\n * indicates that the request timed out.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @param callback - A reference to a function that should be called in the near future, when the\r\n * event loop is idle. The callback function is passed an [IdleDeadline](https://w3c.github.io/requestidlecallback/#dom-idledeadline)\r\n * object describing the amount of time available and whether or not the callback has been run because\r\n * the timeout period expired.\r\n * @param options - Contains optional configuration parameters. Currently only one property is defined:\r\n * `timeout` If the number of milliseconds represented by this parameter has elapsed and the callback\r\n * has not already been called, then a task to execute the callback is queued in the event loop (even\r\n * if doing so risks causing a negative performance impact). timeout must be a positive value or it\r\n * is ignored.\r\n * @returns A handle which can be used to cancel the callback by passing it into the `cancelIdleCallback()`\r\n * method.\r\n * @example\r\n * ```ts\r\n * let idleCalled = false;\r\n * let idleTimedOut = false;\r\n * let theIdleTimer = scheduleIdleCallback((idleDeadline: IdleDeadline) => {\r\n *     // This callback will be called when the system is idle (via requestIdleCallback) or after the provided timeout 100ms\r\n *     idleCalled = true;\r\n *     idleTimedOut = idleDeadline?.didTimeout;\r\n *     while ((idleDeadline.timeRemaining() > 0 || deadline.didTimeout)) {\r\n *         // Do some background operations while there is time remaining or we timed out\r\n *         // Unlike interval timers this callback will NOT be called again unless you call \"refresh\"\r\n *         // to restart it or create a new idle timer\r\n *     }\r\n * }, 100);\r\n *\r\n * // Instead of calling cancelIdleCallback() with the returned value from requestIdleCallback() the returned\r\n * // handler instance can be used instead to cancel the idle timer\r\n * theIdleTimer.cancel();\r\n * theIdleTimer.enabled;    // false\r\n *\r\n * // You can start the timer via enabled\r\n * theIdleTimer.enabled = true;\r\n *\r\n * // You can also \"restart\" the timer, whether it has previously triggered not not via the `refresh()`\r\n * theIdleTimer.refresh();\r\n * ```\r\n */\r\nexport function scheduleIdleCallback(callback, options) {\r\n    function _createDeadline(timedOut) {\r\n        let startTime = perfNow();\r\n        return {\r\n            didTimeout: timedOut,\r\n            timeRemaining: () => {\r\n                return _maxExecutionTime - elapsedTime(startTime);\r\n            }\r\n        };\r\n    }\r\n    if (hasIdleCallback()) {\r\n        let handler = _createTimerHandler(true, (idleId) => {\r\n            idleId && cancelIdleCallback(idleId);\r\n            return requestIdleCallback((deadline) => {\r\n                handler.dn();\r\n                callback(deadline || _createDeadline(false));\r\n            }, options);\r\n        }, (idleId) => {\r\n            cancelIdleCallback(idleId);\r\n        });\r\n        return handler.h;\r\n    }\r\n    let timeout = (options || {}).timeout;\r\n    if (isUndefined(timeout)) {\r\n        timeout = _defaultIdleTimeout;\r\n    }\r\n    return scheduleTimeout(() => {\r\n        callback(_createDeadline(true));\r\n    }, timeout);\r\n}\r\n//# sourceMappingURL=idle.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\nimport { _createTimerHandler } from \"./handler\";\r\nexport function scheduleInterval(callback, timeout) {\r\n    let self = this;\r\n    let theArguments = arrSlice(arguments);\r\n    let handler = _createTimerHandler(true, (intervalId) => {\r\n        intervalId && clearInterval(intervalId);\r\n        return fnApply(setInterval, self, theArguments);\r\n    }, (intervalId) => {\r\n        fnApply(clearInterval, self, [intervalId]);\r\n    });\r\n    return handler.h;\r\n}\r\n//# sourceMappingURL=interval.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalConfig } from \"../internal/global\";\r\nimport { objDefineProp } from \"../object/define\";\r\n/**\r\n * @internal\r\n * Internal flag which is set by the public {@link setBypassLazyCache}, should not be externally exported\r\n */\r\nexport let _globalLazyTestHooks;\r\nlet _fetchLazyTestHooks = function () {\r\n    _globalLazyTestHooks = _getGlobalConfig();\r\n    _fetchLazyTestHooks = NULL_VALUE;\r\n};\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally.\r\n * @since 0.4.5\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns A new readonly {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getLazy(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * ```\r\n */\r\nexport function getLazy(cb) {\r\n    let lazyValue = {};\r\n    _fetchLazyTestHooks && _fetchLazyTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = cb();\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                objDefineProp(lazyValue, \"v\", {\r\n                    value: result\r\n                });\r\n                if (lazyValue.b) {\r\n                    delete lazyValue.b;\r\n                }\r\n            }\r\n            if (_globalLazyTestHooks.lzy && lazyValue.b !== _globalLazyTestHooks.lzy) {\r\n                lazyValue.b = _globalLazyTestHooks.lzy;\r\n            }\r\n            return result;\r\n        }\r\n    });\r\n    return lazyValue;\r\n}\r\n/**\r\n * Test Hook function used to cause the internal caching of objects to be bypassed, this should never\r\n * be enabled for production as it has additional performance impact caused by the repetitive creation\r\n * of the lazy wrappers.\r\n * @group Lazy\r\n * @since 0.5.0\r\n * @param newValue - When `true` will cause all new lazy implementations to bypass the cached lookup.\r\n */\r\nexport function setBypassLazyCache(newValue) {\r\n    _fetchLazyTestHooks && _fetchLazyTestHooks();\r\n    _globalLazyTestHooks.lzy = newValue;\r\n}\r\n/**\r\n * Create and return a writable {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally. The\r\n * value may be set as many times as required, if the callback has not been called when you set the value\r\n * it will never get called.\r\n * @since 0.9.4\r\n * @group Lazy\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @returns A new writable {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = getWritableLazy(() => callSomeExpensiveFunction());\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * // Setting the value\r\n * let cachedValue = getWritableLazy(() => callSomeExpensiveFunction());\r\n * let theValue = \"new Value\";\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will set the value to be set explicitly and the callback\r\n *     // will now never occur and the result will be cached\r\n *     cachedValue.v = theValue;\r\n * }\r\n *\r\n * // Accessing the value again will cause the previously set value to be returned.\r\n * theValue === cachedValue.v;  // true\r\n * ```\r\n */\r\nexport function getWritableLazy(cb) {\r\n    let lazyValue = {};\r\n    _fetchLazyTestHooks && _fetchLazyTestHooks();\r\n    lazyValue.b = _globalLazyTestHooks.lzy;\r\n    let _setValue = (newValue) => {\r\n        // Just replace the value\r\n        objDefineProp(lazyValue, \"v\", {\r\n            value: newValue,\r\n            writable: true\r\n        });\r\n        if (lazyValue.b) {\r\n            delete lazyValue.b;\r\n        }\r\n    };\r\n    objDefineProp(lazyValue, \"v\", {\r\n        configurable: true,\r\n        get: function () {\r\n            let result = cb();\r\n            if (!_globalLazyTestHooks.lzy) {\r\n                // Just replace the value\r\n                _setValue(result);\r\n            }\r\n            if (_globalLazyTestHooks.lzy && lazyValue.b !== _globalLazyTestHooks.lzy) {\r\n                lazyValue.b = _globalLazyTestHooks.lzy;\r\n            }\r\n            return result;\r\n        },\r\n        set: _setValue\r\n    });\r\n    return lazyValue;\r\n}\r\n//# sourceMappingURL=lazy.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined, isString } from \"../helpers/base\";\r\nimport { EMPTY } from \"../internal/constants\";\r\n/**\r\n * This method checks if the string `value` is null, undefined, an empty string or only contains\r\n * whiltespace `\\t \\r \\n \\f \\v` characters.\r\n * @group String\r\n * @param value - The string value to be checked.\r\n * @returns `true` if the string is null, undefined an empty string or contains only whitespace characters.\r\n */\r\nexport function strIsNullOrWhiteSpace(value) {\r\n    if (isString(value)) {\r\n        return value.replace(/[\\s\\t\\r\\n\\f]+/g, EMPTY) === EMPTY;\r\n    }\r\n    return isNullOrUndefined(value);\r\n}\r\n/**\r\n * Checks whether the passed `value` is null, undefined or an empty string.\r\n * @group String\r\n * @param value - The string value to be checked.\r\n * @returns `true` if the string is null, undefined or an empty string.\r\n */\r\nexport function strIsNullOrEmpty(value) {\r\n    if (isString(value)) {\r\n        return value === EMPTY;\r\n    }\r\n    return isNullOrUndefined(value);\r\n}\r\n//# sourceMappingURL=is_null_or.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { EMPTY } from \"../internal/constants\";\r\nimport { asString } from \"./as_string\";\r\nimport { strTrim } from \"./trim\";\r\nimport { strLower, strUpper } from \"./upper_lower\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal function to escape and convert the case\r\n * @param value - The value to be converted\r\n * @param newPrefix - The new prefix to add between matches\r\n * @param upperWord - Identify whether to uppercase the match\r\n * @returns The converted string\r\n */\r\nfunction _convertCase(value, newPrefix, upperWord) {\r\n    return strTrim(asString(value)).replace(/((_|\\W)+(\\w){0,1}|([a-z])([A-Z]))/g, (_match, _g1, _g2, wordStart, upperPrefix, upperLetter) => {\r\n        let convertMatch = wordStart || upperLetter || EMPTY;\r\n        if (upperWord) {\r\n            convertMatch = strUpper(convertMatch);\r\n        }\r\n        return (upperPrefix || EMPTY) + newPrefix + convertMatch;\r\n    });\r\n}\r\n/**\r\n * Convert the provided value to a `Letter Cased` string, where the start of each word is\r\n * capitalized, all non-word character and spaces are retained.\r\n * If the value is not a string it will be converted.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Conversion\r\n * @param value - The value to be converted to letter case\r\n * @returns The Letter Cased version of the provided value\r\n * @example\r\n * ```ts\r\n * strLetterCase(null);             // \"Null\"\r\n * strLetterCase(undefined);        // \"Undefined\"\r\n * strLetterCase(\"hello darkness\"); // \"Hello Darkness\"\r\n * strLetterCase(\"hello_darkness\"); // \"Hello_Darkness\"\r\n * strLetterCase(\"_hello_darkness\"); // \"_Hello_Darkness\"\r\n * strLetterCase(\"hello darkness, my old friend.\"); // \"Hello Darkness; // My Old Friend.\"\r\n * ```\r\n */\r\nexport function strLetterCase(value) {\r\n    return asString(value).replace(/(_|\\b)\\w/g, strUpper);\r\n}\r\n/**\r\n * Convert the provided value to `camelCased` string, you can optionally specifify whether the\r\n * first caracter is upper cased (lowercase by default)from kebab `-` or snake `_` case.\r\n * All whitespace characters are removed\r\n * If the value is not a string it will be converted.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Conversion\r\n * @param value - The value to be converted to camelCased string\r\n * @param upperFirst - Optionally, uppercase the first character of the first word, so when `true`\r\n * this will produce a Pascal Cased result.\r\n * @returns The `camelCased` version of the provided value.\r\n * @example\r\n * ```ts\r\n * strCamelCase(null);                  // \"null\"\r\n * strCamelCase(undefined);             // \"undefined\"\r\n * strCamelCase(\"hello darkness\");      // \"helloDarkness\"\r\n * strCamelCase(\"hello_darkness\");      // \"helloDarkness\"\r\n * strCamelCase(\"_hello_darkness\");     // \"helloDarkness\"\r\n * strCamelCase(\"hello-darkness\");      // \"helloDarkness\"\r\n * strCamelCase(\"-hello-darkness\");     // \"helloDarkness\"\r\n * strCamelCase(\"hello darkness, my old friend.\"); // \"helloDarknessMyOldFriend\"\r\n *\r\n * // Uppercase first character\r\n * strCamelCase(\"hello darkness\", true); // \"HelloDarkness\"\r\n * strCamelCase(\"hello_darkness\", true); // \"HelloDarkness\"\r\n * strCamelCase(\"_hello_darkness\", true); // \"HelloDarkness\"\r\n * strCamelCase(\"hello-darkness\", true); // \"HelloDarkness\"\r\n * strCamelCase(\"-hello-darkness\", true); // \"HelloDarkness\"\r\n * strCamelCase(\"hello darkness, my old friend.\", true); // \"HelloDarknessMyOldFriend\"\r\n * ```\r\n */\r\nexport function strCamelCase(value, upperFirst) {\r\n    let result = _convertCase(value, \"\", true);\r\n    return result.replace(/^\\w/, upperFirst ? strUpper : strLower);\r\n}\r\n/**\r\n * Convert the provided value to `kebab-cased` string, you can optionally specify whther the result\r\n * is all uppercased by passing `true` as the optional `scream` argument, otherwise the entire result\r\n * will be lowercased.\r\n * If the value is not a string it will be converted.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Conversion\r\n * @param value - The value to be converted to kebab-case string\r\n * @param scream - Optionally return the result as UpperCase (Screaming).\r\n * @returns The `kebab-cased` version of the provided value\r\n * @example\r\n * ```ts\r\n * strKebabCase(null);              // \"null\"\r\n * strKebabCase(undefined);         // \"undefined\"\r\n * strKebabCase(\"hello darkness\");  // \"hello-darkness\"\r\n * strKebabCase(\"hello_darkness\");  // \"hello-darkness\"\r\n * strKebabCase(\"_hello_darkness\"); // \"-hello-darkness\"\r\n * strKebabCase(\"hello darkness, my old friend.\"); // \"hello-darkness-my-old-friend-\"\r\n *\r\n * // Add optional SCREAM flag\r\n * strKebabCase(\"hello darkness\", true);    // \"HELLO-DARKNESS\"\r\n * strKebabCase(\"hello_darkness\", true);    // \"HELLO-DARKNESS\"\r\n * strKebabCase(\"_hello_darkness\", true);   // \"-HELLO-DARKNESS\"\r\n * strKebabCase(\"hello darkness, my old friend.\", true); // \"HELLO-DARKNESS-MY-OLD-FRIEND-\"\r\n * ```\r\n */\r\nexport function strKebabCase(value, scream) {\r\n    let result = _convertCase(value, \"-\");\r\n    return (scream ? strUpper : strLower)(result);\r\n}\r\n/**\r\n * Convert the provided value to `snake_cased` string, you can optionally specify whther the result\r\n * is all uppercased by passing `true` as the optional `scream` argument, otherwise the entire result\r\n * will be lowercased.\r\n * If the value is not a string it will be converted.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Conversion\r\n * @param value - The value to be converted to `snake_cased` string\r\n * @param scream - Optionally return the result as UpperCase (Screaming).\r\n * @returns The `snake-cased` version of the provided value\r\n * @example\r\n * ```ts\r\n * strSnakeCase(null);              // \"null\"\r\n * strSnakeCase(undefined);         // \"undefined\"\r\n * strSnakeCase(\"hello darkness\");  // \"hello_darkness\"\r\n * strSnakeCase(\"hello_darkness\");  // \"hello_darkness\"\r\n * strSnakeCase(\"_hello_darkness\"); // \"_hello_darkness\"\r\n * strSnakeCase(\"hello-darkness\");  // \"hello_darkness\"\r\n * strSnakeCase(\"-hello-darkness\"); // \"_hello_darkness\"\r\n * strSnakeCase(\"hello darkness, my old friend.\"); // \"hello_darkness_my_old_friend_\"\r\n *\r\n * // Use optional Scream flag\r\n * strSnakeCase(\"hello darkness\", true);    // \"HELLO_DARKNESS\"\r\n * strSnakeCase(\"hello_darkness\", true);    // \"HELLO_DARKNESS\"\r\n * strSnakeCase(\"_hello_darkness\", true);   // \"_HELLO_DARKNESS\"\r\n * strSnakeCase(\"hello-darkness\", true);    // \"HELLO_DARKNESS\"\r\n * strSnakeCase(\"-hello-darkness\", true);   // \"_HELLO_DARKNESS\"\r\n * strSnakeCase(\"hello darkness, my old friend.\", true); // \"HELLO_DARKNESS_MY_OLD_FRIEND_\"\r\n * ```\r\n */\r\nexport function strSnakeCase(value, scream) {\r\n    let result = _convertCase(value, \"_\");\r\n    return (scream ? strUpper : strLower)(result);\r\n}\r\n//# sourceMappingURL=conversion.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined, isUndefined } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { EMPTY, LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction, _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { mathMax } from \"../math/min_max\";\r\nimport { strSlice } from \"./slice\";\r\n/**\r\n * The `strSubstring()` method returns the part of the string between the start and end indexes, or to the end of the string.\r\n *\r\n * `strSubstring()` extracts characters from indexStart up to but not including indexEnd. In particular:\r\n * - If `indexEnd` is omitted, strSubstring() extracts characters to the end of the string.\r\n * - If `indexStart` is equal to indexEnd, strSubstring() returns an empty string.\r\n * - If `indexStart` is greater than indexEnd, then the effect of strSubstring() is as if the two arguments were swapped; see example below.\r\n *\r\n * Any argument value that is less than 0 or greater than `value.length` is treated as if it were 0 and `value.length`, respectively.\r\n *\r\n * Any argument value that is NaN is treated as if it were 0.\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param indexStart - The index of the first character to include in the returned substring.\r\n * @param indexEnd - The index of the first character to exclude from the returned substring.\r\n * @return A new string containing the specified part of the given string\r\n * @example\r\n * ```ts\r\n * const anyString = 'Nevware21';\r\n * // Displays 'N'\r\n * console.log(strSubstring(anyString, 0, 1));\r\n * console.log(strSubstring(anyString, 1, 0));\r\n *\r\n * // Displays 'Nevwar'\r\n * console.log(strSubstring(anyString, 0, 6));\r\n *\r\n * // Displays 'are21'\r\n * console.log(strSubstring(anyString, 4));\r\n *\r\n * // Displays 'are'\r\n * console.log(strSubstring(anyString, 4, 7));\r\n *\r\n * // Displays '21'\r\n * console.log(strSubstring(anyString, 7, 4));\r\n *\r\n * // Displays 'Nevware'\r\n * console.log(strSubstring(anyString, 0, 7));\r\n *\r\n * // Displays 'Nevware21'\r\n * console.log(strSubstring(anyString, 0, 10));\r\n * ```\r\n */\r\nexport const strSubstring = _unwrapFunction(\"substring\", StrProto);\r\n/**\r\n * The strSubstr() method returns a portion of the string, starting at the specified index and extending for a given\r\n * number of characters afterwards.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param start - The index of the first character to include in the returned substring.\r\n * @param length - The number of characters to extract.\r\n * @returns A new string containing the specified part of the given string.\r\n */\r\nexport const strSubstr = _unwrapFunctionWithPoly(\"substr\", StrProto, polyStrSubstr);\r\n/**\r\n * The polyStrSubstr() method returns a portion of the string, starting at the specified index and extending for a given\r\n * number of characters afterwards.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @group Polyfill\r\n * @param value - The string value to return the substring from.\r\n * @param start - The index of the first character to include in the returned substring.\r\n * @param length - The number of characters to extract.\r\n * @returns A new string containing the specified part of the given string.\r\n */\r\nexport function polyStrSubstr(value, start, length) {\r\n    if (isNullOrUndefined(value)) {\r\n        throwTypeError(\"'polyStrSubstr called with invalid \" + dumpObj(value));\r\n    }\r\n    if (length < 0) {\r\n        return EMPTY;\r\n    }\r\n    // If start is omitted or undefined, its treated as zero\r\n    start = start || 0;\r\n    if (start < 0) {\r\n        start = mathMax(start + value[LENGTH], 0);\r\n    }\r\n    if (isUndefined(length)) {\r\n        return strSlice(value, start);\r\n    }\r\n    return strSlice(value, start, start + length);\r\n}\r\n/**\r\n * Returns a substring of the string starting from the left.\r\n *\r\n * `strLeft()` extracts the number of characters from left of the string up to the count. In particular:\r\n * - If `count` is less than zero, strLeft() returns an empty string.\r\n * - If `count` is less than `value.length', strLeft() returns a new string with the `count` number of characters from the left of the string.\r\n * - If `count` is greater than `value.length`, then the value original value is returned.\r\n *\r\n * Any argument value that is NaN is treated as if it were 0.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param count - The number of characters to extract\r\n * @returns The substring based on the count number of characters from the right\r\n * @example\r\n * ```ts\r\n * strLeft(\"Nevware21\", -1); // \"\"\r\n * strLeft(\"Nevware21\", 0); // \"\"\r\n * strLeft(\"Nevware21\", 1); // \"N\"\r\n * strLeft(\"Nevware21\", 3); // \"Nev\"\r\n * strLeft(\"Nevware21\", 21); // \"Nevware21\"\r\n * ```\r\n */\r\nexport function strLeft(value, count) {\r\n    return strSubstring(value, 0, count);\r\n}\r\n/**\r\n * Returns a substring of the string starting from the right.\r\n *\r\n * `strRight()` extracts the number of characters from right of the string up to the count. In particular:\r\n * - If `count` is less than zero, strRight() returns an empty string.\r\n * - If `count` is less than `value.length', strRight() returns a new string with the `count` number of characters from the right of the string.\r\n * - If `count` is greater than `value.length`, then the value original value is returned.\r\n *\r\n * Any argument value that is NaN is treated as if it were 0.\r\n *\r\n * @since 0.4.2\r\n * @group String\r\n * @param value - The string value to return the substring from.\r\n * @param count - The number of characters to extract\r\n * @returns The substring based on the count number of characters from the right\r\n * @example\r\n * ```ts\r\n * strRight(\"Nevware21\", -1); // \"\"\r\n * strRight(\"Nevware21\", 0); // \"\"\r\n * strRight(\"Nevware21\", 1); // \"1\"\r\n * strRight(\"Nevware21\", 3); // \"e21\"\r\n * strRight(\"Nevware21\", 21); // \"Nevware21\"\r\n * ```\r\n */\r\nexport function strRight(value, count) {\r\n    let len = value[LENGTH];\r\n    if (count <= 0) {\r\n        return EMPTY;\r\n    }\r\n    return len > count ? strSubstring(value, len - count) : value;\r\n}\r\n//# sourceMappingURL=substring.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * Throw an error exception with the specified optional message\r\n * @group Error\r\n * @param message\r\n */\r\nexport function throwError(message) {\r\n    throw new Error(message);\r\n}\r\n/**\r\n * Throw a type error with the specified optional message\r\n * @group Error\r\n * @param message\r\n */\r\nexport function throwTypeError(message) {\r\n    throw new TypeError(message);\r\n}\r\n/**\r\n * Throw a RangeError with the specified optional message\r\n * @group Error\r\n * @param message\r\n */\r\nexport function throwRangeError(message) {\r\n    throw new RangeError(message);\r\n}\r\n//# sourceMappingURL=throw.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { fnApply } from \"../funcs/fnApply\";\r\nimport { CONSTRUCTOR, NAME, NULL_VALUE, PROTOTYPE } from \"../internal/constants\";\r\nimport { objCreate } from \"../object/create\";\r\nimport { objDefine } from \"../object/define\";\r\nimport { objGetPrototypeOf } from \"../object/object\";\r\nimport { objSetPrototypeOf } from \"../object/set_proto\";\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nconst _createCustomError = (name, d, b) => {\r\n    _safeDefineName(d, name);\r\n    d = objSetPrototypeOf(d, b);\r\n    function __() {\r\n        this.constructor = d;\r\n        _safeDefineName(this, name);\r\n    }\r\n    d[PROTOTYPE] = b === NULL_VALUE ? objCreate(b) : (__[PROTOTYPE] = b[PROTOTYPE], new __());\r\n    return d;\r\n};\r\nconst _safeSetName = (baseClass, name) => {\r\n    try {\r\n        name && (baseClass[NAME] = name);\r\n        //name && (baseClass[PROTOTYPE][NAME] = name);\r\n    }\r\n    catch (e) {\r\n        // Do nothing\r\n    }\r\n};\r\nconst _safeDefineName = (target, name) => {\r\n    try {\r\n        objDefine(target, NAME, { v: name, c: true, e: false });\r\n    }\r\n    catch (e) {\r\n        // Do nothing\r\n    }\r\n};\r\n/**\r\n * Create a Custom Error class which may be used to throw custom errors.\r\n * @group Error\r\n * @param name - The name of the Custom Error\r\n * @param constructCb - [Optional] An optional callback function to call when a\r\n * new Customer Error instance is being created.\r\n * @param errorBase - [Optional] (since v0.9.6) The error class to extend for this class, defaults to Error.\r\n * @returns A new Error `class`\r\n * @example\r\n * ```ts\r\n * import { createCustomError, isError } from \"@nevware21/ts-utils\";\r\n *\r\n * // For an error that just contains a message\r\n * let myCustomErrorError = createCustomError(\"MessageError\");\r\n *\r\n * try {\r\n *     throw new myCustomErrorError(\"Error Message!\");\r\n * } catch(e) {\r\n *      // e.name === MessageError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // Or a more complex error object\r\n * interface MyCriticalErrorConstructor extends CustomErrorConstructor {\r\n *     new(message: string, file: string, line: number, col: number): MyCriticalError;\r\n *     (message: string, file: string, line: number, col: number): MyCriticalError;\r\n * }\r\n *\r\n * interface MyCriticalError extends Error {\r\n *     readonly errorId: number;\r\n *     readonly args: any[];        // Holds all of the arguments passed during construction\r\n * }\r\n *\r\n * let _totalErrors = 0;\r\n * let myCustomError = createCustomError<MyCriticalErrorConstructor>(\"CriticalError\", (self, args) => {\r\n *     _totalErrors++;\r\n *     self.errorId = _totalErrors;\r\n *     self.args = args;\r\n * });\r\n *\r\n * try {\r\n *     throw new myCustomError(\"Not Again!\");\r\n * } catch(e) {\r\n *      // e.name === CriticalError\r\n *      // isError(e) === true;\r\n *      // Object.prototype.toString.call(e) === \"[object Error]\";\r\n * }\r\n *\r\n * // ----------------------------------------------------------\r\n * // Extending another custom error class\r\n * // ----------------------------------------------------------\r\n *\r\n * let AppError = createCustomError(\"ApplicationError\");\r\n * let theAppError = new appError();\r\n *\r\n * isError(theAppError);                    // true\r\n * theAppError instanceof Error;            // true\r\n * theAppError instanceof AppError;         // true\r\n *\r\n * let StartupError = createCustomError(\"StartupError\", null, AppError);\r\n * let theStartupError = new StartupError();\r\n *\r\n * isError(theStartupError);                // true\r\n * theStartupError instanceof Error;        // true\r\n * theStartupError instanceof AppError;     // true\r\n * theStartupError instanceof StartupError; // true\r\n * ```\r\n */\r\nexport function createCustomError(name, constructCb, errorBase) {\r\n    let theBaseClass = errorBase || Error;\r\n    let orgName = theBaseClass[PROTOTYPE][NAME];\r\n    let captureFn = Error.captureStackTrace;\r\n    return _createCustomError(name, function () {\r\n        let _this = this;\r\n        try {\r\n            _safeSetName(theBaseClass, name);\r\n            let _self = fnApply(theBaseClass, _this, arrSlice(arguments)) || _this;\r\n            if (_self !== _this) {\r\n                // Looks like runtime error constructor reset the prototype chain, so restore it\r\n                let orgProto = objGetPrototypeOf(_this);\r\n                if (orgProto !== objGetPrototypeOf(_self)) {\r\n                    objSetPrototypeOf(_self, orgProto);\r\n                }\r\n            }\r\n            // Make sure we only capture our stack details\r\n            captureFn && captureFn(_self, _this[CONSTRUCTOR]);\r\n            // Run the provided construction function\r\n            constructCb && constructCb(_self, arguments);\r\n            return _self;\r\n        }\r\n        finally {\r\n            _safeSetName(theBaseClass, orgName);\r\n        }\r\n    }, theBaseClass);\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n */\r\nlet _unsupportedError;\r\n/**\r\n * Throw a custom `UnsupportedError` Error instance with the given message.\r\n * @group Error\r\n * @param message - The message to include in the exception\r\n * @example\r\n * ```ts\r\n * import { throwUnsupported } from \"@nevware21/ts-utils\";\r\n *\r\n * if (!window) {\r\n *     throwUnsupported(\"A window is needed for this operation\");\r\n * }\r\n * ```\r\n */\r\nexport function throwUnsupported(message) {\r\n    if (!_unsupportedError) {\r\n        // Lazily create the class\r\n        _unsupportedError = createCustomError(\"UnsupportedError\");\r\n    }\r\n    throw new _unsupportedError(message);\r\n}\r\n//# sourceMappingURL=customError.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n// These constants are currently NOT exported directly, we may export them later associated with a frozen namespace (maybe)\r\n// For now do NOT expect that we will export these values.\r\nexport const UNDEF_VALUE = undefined;\r\nexport const NULL_VALUE = null;\r\nexport const EMPTY = \"\";\r\nexport const BOOLEAN = \"boolean\";\r\nexport const FUNCTION = \"function\";\r\nexport const NUMBER = \"number\";\r\nexport const OBJECT = \"object\";\r\nexport const PROTOTYPE = \"prototype\";\r\nexport const __PROTO__ = \"__proto__\";\r\nexport const STRING = \"string\";\r\nexport const UNDEFINED = \"undefined\";\r\nexport const CONSTRUCTOR = \"constructor\";\r\nexport const SYMBOL = \"Symbol\";\r\nexport const POLYFILL_TAG = \"_polyfill\";\r\nexport const INDEX_OF = \"indexOf\";\r\nexport const LAST_INDEX_OF = \"lastIndexOf\";\r\nexport const LENGTH = \"length\";\r\nexport const DONE = \"done\";\r\nexport const VALUE = \"value\";\r\nexport const NAME = \"name\";\r\nexport const SLICE = \"slice\";\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjClass = Object;\r\n/**\r\n * @ignore\r\n */\r\nexport const ObjProto = ObjClass[PROTOTYPE];\r\n/**\r\n * @ignore\r\n */\r\nexport const StrCls = String;\r\n/**\r\n * @ignore\r\n */\r\nexport const StrProto = StrCls[PROTOTYPE];\r\n/**\r\n * @ignore\r\n */\r\nexport const MathCls = Math;\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrCls = Array;\r\n/**\r\n * @ignore\r\n */\r\nexport const ArrProto = ArrCls[PROTOTYPE];\r\n//# sourceMappingURL=constants.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * Function to safely execute a callback function, if the function throws the provided default\r\n * value will be returned.\r\n * @since 0.9.5\r\n * @group Safe\r\n * @param cb - Callback function be wrapped with an exception\r\n * @param defValue - The default value to return when an exception is thrown\r\n * @returns The result of the callback function or the default if an exception occurred calling the callback\r\n * function.\r\n * @example\r\n * ```ts\r\n * let theExpression = \"{ invalid: json value\";\r\n *\r\n * let result = safeGet(() => {\r\n *     return JSON.parse(theExpression);\r\n * }, {});\r\n *\r\n * // result === {};\r\n * ```\r\n */\r\nexport function safeGet(cb, defValue) {\r\n    let result = defValue;\r\n    try {\r\n        result = cb();\r\n    }\r\n    catch (e) {\r\n        // Do nothing\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=safe_get.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjClass } from \"../internal/constants\";\r\n/**\r\n * The objGetOwnPropertyDescriptor() method returns an object describing the configuration of a specific property on\r\n * a given object (that is, one directly present on an object and not in the object's prototype chain). The object\r\n * returned is mutable but mutating it has no effect on the original property's configuration.\r\n * @since 0.4.3\r\n * @group Object\r\n * @param target - Object that contains the property.\r\n * @param prop - Name of the property.\r\n * @returns A property descriptor of the given property if it exists on the object, otherwise undefined.\r\n *\r\n * @example\r\n * ```ts\r\n * o = {};\r\n * objDefineProp(o, 'qux', {\r\n *   value: 8675309,\r\n *   writable: false,\r\n *   enumerable: false\r\n * });\r\n * d = objGetOwnPropertyDescriptor(o, 'qux');\r\n * // d is {\r\n * //   value: 8675309,\r\n * //   writable: false,\r\n * //   enumerable: false,\r\n * //   configurable: false\r\n * // }\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // TypeError: \"foo\" is not an object  // ES5 code\r\n *\r\n * objGetOwnPropertyDescriptor('foo', 0);\r\n * // Object returned by ES2015 code: {\r\n * //   configurable: false,\r\n * //   enumerable: true,\r\n * //   value: \"f\",\r\n * //   writable: false\r\n * // }\r\n * ```\r\n * Note: In ES5, if the first argument to this method is not an object (a primitive), then it will cause a TypeError. In ES2015, a non-object first argument will be coerced to an object at first.\r\n */\r\nexport const objGetOwnPropertyDescriptor = ObjClass.getOwnPropertyDescriptor;\r\n//# sourceMappingURL=get_own_prop_desc.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjProto } from \"../internal/constants\";\r\n/**\r\n * The objHasOwnProperty() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n *\r\n * The objHasOwnProperty() method returns true if the specified property is a direct\r\n * property of the object — even if the value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in\r\n * operator, this method does not check for the specified property in the object's\r\n * prototype chain.\r\n *\r\n * The method can be called on most JavaScript objects, because most objects descend\r\n * from Object, and hence inherit its methods. For example Array is an Object, so you\r\n * can use objHasOwnProperty() method to check whether an index exists:\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwnProperty(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwnProperty(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwnProperty(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport function objHasOwnProperty(obj, prop) {\r\n    return obj && ObjProto.hasOwnProperty.call(obj, prop);\r\n}\r\n//# sourceMappingURL=has_own_prop.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ObjClass } from \"../internal/constants\";\r\nimport { objGetOwnPropertyDescriptor } from \"./get_own_prop_desc\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\n/**\r\n * The objHasOwn() method returns a boolean indicating whether the object\r\n * has the specified property as its own property (as opposed to inheriting it).\r\n * If the property is inherited, or does not exist, the method returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over {@link objHasOwnProperty} () because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * objHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * objHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * objHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport const objHasOwn = ObjClass[\"hasOwn\"] || polyObjHasOwn;\r\n/**\r\n * The polyObjHasOwn() method is a polyfill for {@link objHasOwn} when the native\r\n * [Object.hasOwnreturns](https://caniuse.com/?search=hasOwn) is not supported, it returns a\r\n * boolean indicating whether the object has the specified property as its own property (as\r\n * opposed to inheriting it). If the property is inherited, or does not exist, the method\r\n * returns false.\r\n *\r\n * The objHasOwn() method returns true if the specified property is a direct property\r\n * of the object — even if the property value is null or undefined. The method returns\r\n * false if the property is inherited, or has not been declared at all. Unlike the in operator,\r\n * this method does not check for the specified property in the object's prototype chain.\r\n *\r\n * It is recommended over objHasOwnProperty() because it works for objects created using\r\n * objCreate(null) and with objects that have overridden the inherited hasOwnProperty() method.\r\n * While it is possible to workaround these problems by calling Object.prototype.hasOwnProperty()\r\n * on an external object, Object.hasOwn() is more intuitive.\r\n *\r\n * @since 0.4.3\r\n * @group Object\r\n * @group Polyfill\r\n * @param obj - The object being evaluated\r\n * @param prop - The String or Symbol of the property to test\r\n * @returns `true` if the object has the specified property as own property; otherwise `false`\r\n * @example\r\n * ```ts\r\n * let example = {};\r\n * polyObjHasOwn(example, 'prop');   // false\r\n *\r\n * example.prop = 'exists';\r\n * polyObjHasOwn(example, 'prop');   // true - 'prop' has been defined\r\n *\r\n * example.prop = null;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of null\r\n *\r\n * example.prop = undefined;\r\n * polyObjHasOwn(example, 'prop');   // true - own property exists with value of undefined\r\n * ```\r\n */\r\nexport function polyObjHasOwn(obj, prop) {\r\n    return objHasOwnProperty(obj, prop) || !!objGetOwnPropertyDescriptor(obj, prop);\r\n}\r\n//# sourceMappingURL=has_own.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isObject } from \"../helpers/base\";\r\nimport { objHasOwn } from \"./has_own\";\r\n/**\r\n * Calls the provided `callbackFn` function once for each key in an object. This is equivelent to `arrForEach(Object.keys(theObject), callbackFn)` or\r\n * if not using the array helper `Object.keys(theObject).forEach(callbackFn)` except that this helper avoid creating a temporary of the object\r\n * keys before iterating over them and like the `arrForEach` helper you CAN stop or break the iteration by returning -1 from the `callbackFn` function.\r\n * @group Object\r\n * @typeParam T - The object type\r\n * @param callbackfn  A function that accepts up to two arguments, the key name and the current value of the property represented by the key.\r\n * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the object will be used as the this value.\r\n * @example\r\n * ```ts\r\n * function performAction<T>(target: T, source: any) {\r\n *    if (!isNullOrUndefined(source)) {\r\n *        objForEachKey(source, (key, value) => {\r\n *            // Set the target with a reference to the same value with the same name\r\n *            target[key] = value;\r\n *        });\r\n *    }\r\n *\r\n *    return target;\r\n * }\r\n * ```\r\n */\r\nexport function objForEachKey(theObject, callbackfn, thisArg) {\r\n    if (theObject && isObject(theObject)) {\r\n        for (const prop in theObject) {\r\n            if (objHasOwn(theObject, prop)) {\r\n                if (callbackfn.call(thisArg || theObject, prop, theObject[prop]) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=for_each_key.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { objForEachKey } from \"../object/for_each_key\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal Helper function to create a key and value mapped representation of the values\r\n * @param values - The source values\r\n * @param keyType - Identifies the value to populate against the key\r\n * @param valueType - Identifies the value to populate against the value\r\n * @param completeFn - The function to call to complete the map (used to freeze the instance)\r\n * @returns\r\n */\r\nexport function _createKeyValueMap(values, keyType, valueType, completeFn) {\r\n    let theMap = {};\r\n    objForEachKey(values, (key, value) => {\r\n        theMap[key] = keyType ? value : key;\r\n        theMap[value] = valueType ? value : key;\r\n    });\r\n    return completeFn(theMap);\r\n}\r\n//# sourceMappingURL=map.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { isArray, isObject } from \"../helpers/base\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nimport { polyObjEntries, polyObjValues } from \"../polyfills/object\";\r\nconst _objFreeze = ObjClass[\"freeze\"];\r\nconst _doNothing = (value) => value;\r\nconst _getProto = (value) => value[__PROTO__] || NULL_VALUE;\r\n/**\r\n * The `objAssign()` method copies all enumerable own properties from one or more source objects\r\n * to a target object. It returns the modified target object.\r\n *\r\n * Properties in the target object are overwritten by properties in the sources if they have the\r\n * same key. Later sources' properties overwrite earlier ones.\r\n *\r\n * The objAssign() method only copies enumerable and own properties from a source object to a\r\n * target object. It uses `Get` on the source and `Set` on the target, so it will invoke\r\n * [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) and\r\n * [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set).\r\n * Therefore it assigns properties, versus copying or defining new properties. This may make it\r\n * unsuitable for merging new properties into a prototype if the merge sources contain getters.\r\n *\r\n * For copying property definitions (including their enumerability) into prototypes, use\r\n * {@link objGetOwnPropertyDescriptor} and {@link objDefineProp} instead.\r\n *\r\n * Both String and Symbol properties are copied.\r\n *\r\n * In case of an error, for example if a property is non-writable, a TypeError is raised, and\r\n * the target object is changed if any properties are added before the error is raised.\r\n * @group Object\r\n * @example\r\n * ```ts\r\n * const obj = { a: 1 };\r\n * const copy = objAssign({}, obj);\r\n * console.log(copy); // { a: 1 }\r\n *\r\n * const o1 = { a: 1 };\r\n * const o2 = { b: 2 };\r\n * const o3 = { c: 3 };\r\n *\r\n * const obj = objAssign(o1, o2, o3);\r\n * console.log(obj); // { a: 1, b: 2, c: 3 }\r\n * console.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\r\n * ```\r\n */\r\nexport const objAssign = ObjClass[\"assign\"];\r\n/**\r\n * The `objKeys()` method returns an array of a given object's own enumerable property names, iterated in\r\n * the same order that a normal loop would.\r\n *\r\n * objKeys() returns an array whose elements are strings corresponding to the enumerable properties found\r\n * directly upon object. The ordering of the properties is the same as that given by looping over the\r\n * properties of the object manually.\r\n * @group Object\r\n * @param value - The object to obtain a copy of the keys from\r\n * @returns An array of the properties names for the value object.\r\n * @example\r\n * ```ts\r\n * // simple array\r\n * const arr = ['a', 'b', 'c'];\r\n * console.log(objKeys(arr)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object\r\n * const obj = { 0: 'a', 1: 'b', 2: 'c' };\r\n * console.log(objKeys(obj)); // console: ['0', '1', '2']\r\n *\r\n * // array-like object with random key ordering\r\n * const anObj = { 100: 'a', 2: 'b', 7: 'c' };\r\n * console.log(objKeys(anObj)); // console: ['2', '7', '100']\r\n *\r\n * // getFoo is a property which isn't enumerable\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(objKeys(myObj)); // console: ['foo']\r\n * ```\r\n */\r\nexport function objKeys(value) {\r\n    if (!isObject(value) || value === NULL_VALUE) {\r\n        throwTypeError(\"objKeys called on non-object\");\r\n    }\r\n    return ObjClass.keys(value);\r\n}\r\n/**\r\n * Perform a deep freeze on the object and all of it's contained values / properties by recursively calling\r\n * `objFreeze()` on all enumerable properties of the object and on each property returned.\r\n * @group Object\r\n * @param value - the object to be completly frozen.\r\n * @returns The originally passed in object.\r\n */\r\nexport function objDeepFreeze(value) {\r\n    if (_objFreeze) {\r\n        objForEachKey(value, (key, value) => {\r\n            if (isArray(value) || isObject(value)) {\r\n                _objFreeze(value);\r\n            }\r\n        });\r\n    }\r\n    return objFreeze(value);\r\n}\r\n/**\r\n * The `objFreeze()` method freezes an object. A frozen object can no longer be changed; freezing an object\r\n * prevents new properties from being added to it, existing properties from being removed, prevents changing the\r\n * enumerability, configurability, or writability of existing properties, and prevents the values of existing\r\n * properties from being changed. In addition, freezing an object also prevents its prototype from being changed.\r\n * `objFreeze()` returns the same object that was passed in.\r\n *\r\n * Nothing can be added to or removed from the properties set of a frozen object. Any attempt to do so will fail,\r\n * either silently or by throwing a TypeError exception (most commonly, but not exclusively, when in strict mode).\r\n *\r\n * For data properties of a frozen object, values cannot be changed, the writable and configurable attributes are\r\n * set to false. Accessor properties (getters and setters) work the same (and still give the illusion that you are\r\n * changing the value). Note that values that are objects can still be modified, unless they are also frozen. As\r\n * an object, an array can be frozen; after doing so, its elements cannot be altered and no elements can be added\r\n * to or removed from the array.\r\n *\r\n * `objFreeze()` returns the same object that was passed into the function. It does not create a frozen copy.\r\n * @group Object\r\n * @param value - The object to freeze.\r\n * @returns The object that was passed to the function.\r\n */\r\nexport const objFreeze = _objFreeze || _doNothing;\r\n/**\r\n * The `objSeal()` method seals an object, preventing new properties from being added to it and marking all\r\n * existing properties as non-configurable. Values of present properties can still be changed as long as they\r\n * are writable.\r\n * @group Object\r\n * @param value - The object which should be sealed.\r\n * @returns The object being sealed.\r\n */\r\nexport const objSeal = ObjClass[\"seal\"] || _doNothing;\r\n/**\r\n * The objGetPrototypeOf() method returns the prototype (i.e. the value of the internal `Prototype` property)\r\n * of the specified value.\r\n * @since 0.4.4\r\n * @group Object\r\n * @param value - The object whose prototype is to be returned, which may be null.\r\n */\r\nexport const objGetPrototypeOf = ObjClass[\"getPrototypeOf\"] || _getProto;\r\n/**\r\n * Returns an array of key/values of the enumerable properties of an object\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value Object that contains the properties and methods.\r\n * @example\r\n * ```ts\r\n * objEntries({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ [ \"Hello\", \"Darkness\" ], [ \"my\", \"old\"], [ \"friend\", \".\" ] ]\r\n *\r\n * // Array-like object\r\n * objEntries({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ ['0', 'a'], ['1', 'b'], ['2', 'c'] ]\r\n *\r\n * // Array-like object with random key ordering\r\n * objEntries({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ ['2', 'b'], ['7', 'c'], ['100', 'a'] ]*\r\n * ```\r\n */\r\nexport const objEntries = ObjClass.entries || polyObjEntries;\r\n/**\r\n * The objValues() returns an array whose elements are values of enumerable string-keyed properties found\r\n * directly upon object. This is the same as iterating with a for...in loop, except that a for...in loop\r\n * enumerates properties in the prototype chain as well. The order of the array returned by objValues()\r\n * is the same as that provided by a for...in loop.\r\n *\r\n * If you need the property keys, use objKeys() instead. If you need both the property keys and values, use objEntries() instead.\r\n * @since 0.9.7\r\n * @group Object\r\n * @group ArrayLike\r\n * @param value - The object that contains the properties and methods.\r\n * @returns An array containing the given object's own enumerable string-keyed property values.\r\n * @example\r\n * ```ts\r\n * objValues({ Hello: \"Darkness\", my: \"old\", friend: \".\" });\r\n * // [ \"Darkness\", \"old\", \".\" ]\r\n *\r\n * // Array-like object\r\n * objValues({ 0: \"a\", 1: \"b\", 2: \"c\" }));\r\n * // [ 'a', 'b', 'c']\r\n *\r\n * // Array-like object with random key ordering\r\n * objValues({ 100: \"a\", 2: \"b\", 7: \"c\" });\r\n * // [ 'b', 'c', 'a']\r\n * ```\r\n */\r\nexport const objValues = ObjClass.values || polyObjValues;\r\n//# sourceMappingURL=object.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { createEnumKeyMap } from \"../helpers/enum\";\r\n/**\r\n * @ignore\r\n * @internal\r\n */\r\nexport const _wellKnownSymbolMap = createEnumKeyMap({\r\n    asyncIterator: 0 /* WellKnownSymbols.asyncIterator */,\r\n    hasInstance: 1 /* WellKnownSymbols.hasInstance */,\r\n    isConcatSpreadable: 2 /* WellKnownSymbols.isConcatSpreadable */,\r\n    iterator: 3 /* WellKnownSymbols.iterator */,\r\n    match: 4 /* WellKnownSymbols.match */,\r\n    matchAll: 5 /* WellKnownSymbols.matchAll */,\r\n    replace: 6 /* WellKnownSymbols.replace */,\r\n    search: 7 /* WellKnownSymbols.search */,\r\n    species: 8 /* WellKnownSymbols.species */,\r\n    split: 9 /* WellKnownSymbols.split */,\r\n    toPrimitive: 10 /* WellKnownSymbols.toPrimitive */,\r\n    toStringTag: 11 /* WellKnownSymbols.toStringTag */,\r\n    unscopables: 12 /* WellKnownSymbols.unscopables */\r\n});\r\n//# sourceMappingURL=well_known.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { StrCls } from \"../internal/constants\";\r\n/**\r\n * The asString() method returns a string representing the value by\r\n * explicitly using `String(`value`)`.\r\n *\r\n * @since 0.4.3\r\n * @group String\r\n * @group Conversion\r\n * @group Value\r\n * @param value - The value to get a string representation of\r\n * @example\r\n * ```ts\r\n * const arr = [ 1, 2, 3];\r\n * asString(arr);       // \"1,2,3\"\r\n * asString(null);      // \"null\"\r\n * asString(undefined); // \"undefined\"\r\n * asString(42);        // \"42\"\r\n * asString(Symbol.for(\"Hello\"));   // \"Symbol(Hello)\"\r\n * ```\r\n */\r\nexport const asString = StrCls;\r\n//# sourceMappingURL=as_string.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { UNDEFINED } from \"./constants\";\r\nconst GLOBAL_CONFIG_KEY = \"__tsUtils$gblCfg\";\r\nlet _globalCfg;\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper to get the current global value\r\n * @returns\r\n */\r\nexport function _getGlobalValue() {\r\n    let result;\r\n    if (typeof globalThis !== UNDEFINED) {\r\n        result = globalThis;\r\n    }\r\n    if (!result && typeof self !== UNDEFINED) {\r\n        result = self;\r\n    }\r\n    if (!result && typeof window !== UNDEFINED) {\r\n        result = window;\r\n    }\r\n    if (!result && typeof global !== UNDEFINED) {\r\n        result = global;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Gets/Sets the named value from the global config store, this is used to share configuration across\r\n * multiple modules. Primarily used for poly symbol and test hooks.\r\n * @returns The globally registered value.\r\n */\r\nexport function _getGlobalConfig() {\r\n    if (!_globalCfg) {\r\n        let gbl = _getGlobalValue() || {};\r\n        _globalCfg = gbl[GLOBAL_CONFIG_KEY] = gbl[GLOBAL_CONFIG_KEY] || {};\r\n    }\r\n    return _globalCfg;\r\n}\r\n//# sourceMappingURL=global.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { EMPTY, NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { isError, isNumber, objToString } from \"./base\";\r\n/**\r\n * Returns string representation of an object suitable for diagnostics logging.\r\n * @group Error\r\n * @group Diagnostic\r\n * @param object - The object to be converted to a diagnostic string value\r\n * @param format - Identifies whether the JSON value should be formated\r\n * - `true` - Format with 4 spaces\r\n * - 'number' - The number of spaces to format with\r\n * - `false` (or not Truthy) - Do not format\r\n */\r\nexport function dumpObj(object, format) {\r\n    let propertyValueDump = EMPTY;\r\n    if (isError(object)) {\r\n        propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\r\n    }\r\n    else {\r\n        try {\r\n            propertyValueDump = JSON.stringify(object, NULL_VALUE, format ? (isNumber(format) ? format : 4) : UNDEF_VALUE);\r\n        }\r\n        catch (e) {\r\n            // Unable to convert object (probably circular)\r\n            propertyValueDump = \" - \" + dumpObj(e, format);\r\n        }\r\n    }\r\n    return objToString(object) + \": \" + propertyValueDump;\r\n}\r\n//# sourceMappingURL=diagnostics.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { ArrProto, SLICE } from \"./constants\";\r\nconst _arrSlice = ArrProto[SLICE];\r\nconst _throwMissingFunction = (funcName, thisArg) => {\r\n    throwTypeError(\"'\" + asString(funcName) + \"' not defined for \" + dumpObj(thisArg));\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to run the named function on the passed first argument, this does not support polyfill\r\n * or prototype fallback, so the function must exist on the provided first argument.\r\n * If the first argument is null, undefined or the function does not exist an exception will be thrown\r\n * by the runtime\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapInstFunction = (funcName) => {\r\n    return function (thisArg) {\r\n        return thisArg[funcName].apply(thisArg, _arrSlice.call(arguments, 1));\r\n    };\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapFunction = (funcName, clsProto) => {\r\n    let clsFn = clsProto && clsProto[funcName];\r\n    return function (thisArg) {\r\n        let theFunc = (thisArg && thisArg[funcName]) || clsFn;\r\n        if (theFunc) {\r\n            return theFunc.apply(thisArg, _arrSlice.call(arguments, 1));\r\n        }\r\n        _throwMissingFunction(funcName, thisArg);\r\n    };\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to convert an expanded function back into an instance `this` function call\r\n * @param funcName - The function name to call on the first argument passed to the wrapped function\r\n * @param clsProto - The Class or class prototype to fallback to if the instance doesn't have the function.\r\n * @param polyFunc - The function to call if not available on the thisArg, act like the polyfill\r\n * @returns A function which will call the funcName against the first passed argument and pass on the remaining arguments\r\n */\r\nexport const _unwrapFunctionWithPoly = (funcName, clsProto, polyFunc) => {\r\n    let clsFn = clsProto && clsProto[funcName];\r\n    return function (thisArg) {\r\n        let theFunc = (thisArg && thisArg[funcName]) || clsFn;\r\n        if (theFunc || polyFunc) {\r\n            let theArgs = arguments;\r\n            return (theFunc || polyFunc).apply(thisArg, theFunc ? _arrSlice.call(theArgs, 1) : theArgs);\r\n        }\r\n        _throwMissingFunction(funcName, thisArg);\r\n    };\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to lookup and return the named property from the first argument (which becomes the this)\r\n *\r\n * @since 0.4.2\r\n * @typeParam T - The type of the object which contains the propName\r\n * @param propName - The property name\r\n * @returns The value of the property\r\n */\r\nexport function _unwrapProp(propName) {\r\n    return function (thisArg) {\r\n        return thisArg[propName];\r\n    };\r\n}\r\n//# sourceMappingURL=unwrapFunction.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { MathCls } from \"../internal/constants\";\r\n/**\r\n * The mathMin() function returns the lowest-valued number passed into it, or NaN if any\r\n * parameter isn't a number and can't be converted into one.\r\n *\r\n * If no arguments are given, the result is Infinity.\r\n *\r\n * If at least one of arguments cannot be converted to a number, the result is NaN.\r\n *\r\n * @since 0.4.2\r\n * @group Math\r\n * @param values - Zero or more numbers among which the lowest value will be selected and returned.\r\n * @returns The smallest of the given numbers. If any one or more of the parameters cannot\r\n * be converted into a number, NaN is returned. The result is Infinity if no parameters are provided.\r\n * @example\r\n * ```ts\r\n * const x = 10, y = -20;\r\n * const z = Math.min(x, y); // -20\r\n * ```\r\n */\r\nexport const mathMin = MathCls.min;\r\n/**\r\n * The `mathMax()` function returns the largest of the zero or more numbers given as input\r\n * parameters, or NaN if any parameter isn't a number and can't be converted into one.\r\n *\r\n * If no arguments are given, the result is -Infinity.\r\n *\r\n * If at least one of arguments cannot be converted to a number, the result is NaN.\r\n *\r\n * @since 0.4.2\r\n * @group Math\r\n * @param values - Zero or more numbers among which the largest value will be selected and returned.\r\n * @returns The largest of the given numbers. If any one or more of the parameters cannot be\r\n * converted into a number, NaN is returned. The result is -Infinity if no parameters are provided.\r\n * @example\r\n * ```ts\r\n * mathMax(10, 20);   //  20\r\n * mathMax(-10, -20); // -10\r\n * mathMax(-10, 20);  //  20\r\n * ```\r\n */\r\nexport const mathMax = MathCls.max;\r\n//# sourceMappingURL=min_max.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { SLICE, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The `strSlice()` method extracts a section of a string and returns it as a new string, without\r\n * modifying the original string.\r\n * `strSlice()` extracts the text from one string and returns a new string. Changes to the text in one\r\n * string do not affect the other string.\r\n * `strSlice()` extracts up to but not including endIndex. str.slice(1, 4) extracts the second character\r\n * through the fourth character (characters indexed 1, 2, and 3).\r\n * As an example, strSlice(2, -1) extracts the third character through the second to last character\r\n * in the string.\r\n * @group String\r\n * @param value - The value to haveextract a number\r\n * @param beginIndex - The zero-based index at which to begin extraction.\r\n * If `beginIndex` is negative, `strSlice()` begins extraction from `value.length + beginIndex`.\r\n * (E.g. `strSlice(\"test\", -2)` returns \"st\")\r\n * If `beginIndex` is omitted, undefined, or cannot be converted to a number (using Number(`beginIndex`)),\r\n * strSlice() begins extraction from the beginning of the string. (E.g. `strSlice(\"test\")` returns \"test\")\r\n * If `beginIndex` is greater than or equal to `value.length`, an empty string is returned.\r\n * (E.g. `strSlice(\"test\", 4)` returns \"\")\r\n * @param endIndex - The index of the first character to exclude from the returned substring.\r\n * If `endIndex` is omitted, undefined, or cannot be converted to a number (using Number(`endIndex`))\r\n * strSlice() extracts to the end of the string. (E.g. `strSlice(\"test\", 2)` returns \"st\")\r\n * If `endIndex` is greater than `value.length`, strSlice() also extracts to the end of the string.\r\n * (E.g. strSlice(\"test\", 2, 10)` returns \"st\")\r\n * If `endIndex` is negative, `strSlice()` treats it as `value.length + endIndex`. (E.g, if `endIndex`\r\n * is -2, it is treated as `value.length - 2` and `strSlice(\"test\", 1, -2)` returns \"e\") .\r\n * If `endIndex` represents a position that is before the one represented by startIndex, `strSlice()`\r\n * returns \"\". (E.g `strSlice(\"test\", 2, -10)`, strSlice(\"test\", -1, -2)` or `strSlice(\"test\", 3, 2)`).\r\n * @returns A new string containing the extracted section of the string.\r\n */\r\nexport const strSlice = _unwrapFunction(SLICE, StrProto);\r\n//# sourceMappingURL=slice.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isString } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { asString } from \"./as_string\";\r\nimport { strSubstring } from \"./substring\";\r\n/**\r\n * This method lets you determine whether or not a string begins with another string. This method is case-sensitive.\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the start of the string\r\n * @param position - [Optional] The position in this string at which to begin searching for `searchString`.\r\n * Defaults to 0\r\n * @returns `true` if the given characters are found at the beginning of the string; otherwise, `false`.\r\n */\r\nexport const strStartsWith = _unwrapFunctionWithPoly(\"startsWith\", StrProto, polyStrStartsWith);\r\n/**\r\n * This method lets you determine whether or not a string begins with another string. This method is case-sensitive.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the start of the string\r\n * @param position - [Optional] The position in this string at which to begin searching for `searchString`.\r\n * Defaults to 0\r\n * @returns `true` if the given characters are found at the beginning of the string; otherwise, `false`.\r\n */\r\nexport function polyStrStartsWith(value, searchString, position) {\r\n    if (!isString(value)) {\r\n        throwTypeError(\"'\" + dumpObj(value) + \"' is not a string\");\r\n    }\r\n    let searchValue = isString(searchString) ? searchString : asString(searchString);\r\n    let chkLen = searchValue[LENGTH];\r\n    let pos = position > 0 ? position : 0;\r\n    return strSubstring(value, pos, pos + chkLen) === searchValue;\r\n}\r\n//# sourceMappingURL=starts_with.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _wellKnownSymbolMap } from \"../symbol/well_known\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { POLYFILL_TAG, SYMBOL } from \"../internal/constants\";\r\nimport { objHasOwn } from \"../object/has_own\";\r\nimport { asString } from \"../string/as_string\";\r\nimport { _getGlobalConfig } from \"../internal/global\";\r\nimport { strStartsWith } from \"../string/starts_with\";\r\nimport { objKeys } from \"../object/object\";\r\nconst UNIQUE_REGISTRY_ID = \"_urid\";\r\nlet _polySymbols;\r\nfunction _globalSymbolRegistry() {\r\n    if (!_polySymbols) {\r\n        let gblCfg = _getGlobalConfig();\r\n        _polySymbols = gblCfg.gblSym = gblCfg.gblSym || { k: {}, s: {} };\r\n    }\r\n    return _polySymbols;\r\n}\r\nlet _wellKnownSymbolCache = {};\r\n/**\r\n * Returns a new (polyfill) Symbol object for the provided description that's guaranteed to be unique.\r\n * Symbols are often used to add unique property keys to an object that won't collide with keys any\r\n * other code might add to the object, and which are hidden from any mechanisms other code will\r\n * typically use to access the object. That enables a form of weak encapsulation, or a weak form of\r\n * information hiding.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param description - The description of the symbol\r\n * @returns A new polyfill version of a Symbol object\r\n */\r\nexport function polyNewSymbol(description) {\r\n    let theSymbol = {\r\n        description: asString(description),\r\n        toString: () => SYMBOL + \"(\" + description + \")\"\r\n    };\r\n    // Tag the symbol so we know it a polyfill\r\n    theSymbol[POLYFILL_TAG] = true;\r\n    return theSymbol;\r\n}\r\n/**\r\n * Returns a Symbol object from the global symbol registry matching the given key if found.\r\n * Otherwise, returns a new symbol with this key.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param key key to search for.\r\n */\r\nexport function polySymbolFor(key) {\r\n    let registry = _globalSymbolRegistry();\r\n    if (!objHasOwn(registry.k, key)) {\r\n        let newSymbol = polyNewSymbol(key);\r\n        let regId = objKeys(registry.s).length;\r\n        newSymbol[UNIQUE_REGISTRY_ID] = () => regId + \"_\" + newSymbol.toString();\r\n        registry.k[key] = newSymbol;\r\n        registry.s[newSymbol[UNIQUE_REGISTRY_ID]()] = asString(key);\r\n    }\r\n    return registry.k[key];\r\n}\r\n/**\r\n * Returns a key from the global symbol registry matching the given Symbol if found.\r\n * Otherwise, returns a undefined.\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param sym Symbol to find the key for.\r\n */\r\nexport function polySymbolKeyFor(sym) {\r\n    if (!sym || !sym.toString || !strStartsWith(sym.toString(), SYMBOL)) {\r\n        throwTypeError(sym + \" is not a symbol\");\r\n    }\r\n    const regId = sym[POLYFILL_TAG] && sym[UNIQUE_REGISTRY_ID] && sym[UNIQUE_REGISTRY_ID]();\r\n    return regId ? _globalSymbolRegistry().s[regId] : undefined;\r\n}\r\n/**\r\n * Returns the polyfill version of a well-known global symbol, this will only return\r\n * known values.\r\n * @example\r\n * ```ts\r\n * // Always returns the polyfill version, even if Symbols are supported in the runtime\r\n * polyGetKnownSymbol(\"toStringTag\") === polyGetKnownSymbol(\"toStringTag\");                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) === polyGetKnownSymbol(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== Symbol.toStringTag;                // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== Symbol.toStringTag; // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polySymbolFor(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polySymbolFor(\"toStringTag\"); // true\r\n * polyGetKnownSymbol(\"toStringTag\") !== polyNewSymbol(\"toStringTag\");      // true\r\n * polyGetKnownSymbol(WellKnownSymbols.toStringTag) !== polyNewSymbol(\"toStringTag\"); // true\r\n * ```\r\n * @group Polyfill\r\n * @group Symbol\r\n * @param name - The property name to return (if it exists) for Symbol\r\n * @returns The value of the property if present\r\n */\r\nexport function polyGetKnownSymbol(name) {\r\n    let result;\r\n    let knownName = _wellKnownSymbolMap[name];\r\n    if (knownName) {\r\n        result = _wellKnownSymbolCache[knownName] = _wellKnownSymbolCache[knownName] || polyNewSymbol(SYMBOL + \".\" + knownName);\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=symbol.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getLazy } from \"./lazy\";\r\nimport { safeGet } from \"./safe_get\";\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the value returned\r\n * by the callback function. The callback function will only be called once, multiple access of the value\r\n * does not cause re-execution of the callback as the result from the first call is cached internally.\r\n * If the callback throws the default value will be returned.\r\n * @since 0.9.5\r\n * @group Lazy\r\n * @group Safe\r\n * @param cb - The callback function to fetch the value to be lazily evaluated and cached\r\n * @param defValue - The default value to return when an exception is thrown\r\n * @returns A new readonly {@link ILazyValue} instance which wraps the callback and will be used to cache\r\n * the result of the callback\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * let cachedValue = safeGetLazy(() => callSomeExpensiveFunctionWhichMightThrow(), \"someDefaultValue\");\r\n * let theValue;\r\n *\r\n * // Just checking if there is an object still does not cause the evaluation\r\n * if (cachedValue) {\r\n *     // This will cause the evaluation to occur and the result will be cached\r\n *     theValue = cachedValue.v;\r\n * }\r\n *\r\n * // Accessing the value again will not cause the re-evaluation to occur, it will just return the same\r\n * // result value again.\r\n * theValue === cachedValue.v;  // true\r\n *\r\n * ```\r\n */\r\nexport function safeGetLazy(cb, defValue) {\r\n    return getLazy(() => safeGet(cb, defValue));\r\n}\r\n//# sourceMappingURL=safe_lazy.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { _getGlobalValue } from \"../internal/global\";\r\nimport { safeGetLazy } from \"./safe_lazy\";\r\nimport { _globalLazyTestHooks } from \"./lazy\";\r\nconst WINDOW = \"window\";\r\nlet _cachedGlobal;\r\nlet _cachedWindow;\r\nlet _cachedDocument;\r\nlet _cachedNavigator;\r\nlet _cachedHistory;\r\nlet _isWebWorker;\r\nlet _isNode;\r\n/**\r\n * Create and return an readonly {@link ILazyValue} instance which will cache and return the named global\r\n * value if available, will return `null` if the named global object is not available or if the runtime\r\n * throws an exception when attempting to access the global object.\r\n * Unlike {@link getInst} the value is cached after the first access, so if the global value changes after\r\n * the initial fetch the original cached value is still returned.\r\n * @since 0.9.5\r\n * @group Environment\r\n * @group Lazy\r\n * @group Safe\r\n * @param name The name of the global object to get.\r\n * @returns A new readonly {@link ILazyValue} instance which will lazily attempt to return the globally\r\n * available named instance.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = lazySafeGetInst(\"myGlobal\");\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // cachedValue.v === \"Hello\"\r\n *\r\n * let promiseCls = lazySafeGetInst(\"Promise\");\r\n * // null if Promise is not supported in the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\nexport const lazySafeGetInst = (name) => safeGetLazy(() => getInst(name) || UNDEF_VALUE, UNDEF_VALUE);\r\n/**\r\n * Returns the current global scope object, for a normal web page this will be the current\r\n * window, for a Web Worker this will be current worker global scope via \"self\". The internal\r\n * implementation returns the first available instance object in the following order\r\n * - globalThis (New standard)\r\n * - self (Will return the current window instance for supported browsers)\r\n * - window (fallback for older browser implementations)\r\n * - global (NodeJS standard)\r\n * - <null> (When all else fails)\r\n * While the return type is a Window for the normal case, not all environments will support all\r\n * of the properties or functions. And this caches the lookup of the global as in some environments\r\n * this can be an expensive operation.\r\n * @group Environment\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n */\r\nexport const getGlobal = (useCached) => {\r\n    (!_cachedGlobal || useCached === false || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedGlobal.b)) && (_cachedGlobal = safeGetLazy(_getGlobalValue, NULL_VALUE));\r\n    return _cachedGlobal.v;\r\n};\r\n/**\r\n * Return the named global object if available, will return null if the object is not available.\r\n * @group Environment\r\n * @param name The globally named object\r\n * @param useCached - [Optional] used for testing to bypass the cached lookup, when `true` this will\r\n * cause the cached global to be reset.\r\n * @example\r\n * ```ts\r\n * // This does not cause the evaluation to occur\r\n * window.myGlobal = \"Hello\";\r\n * let cachedValue = getInst(\"myGlobal\");\r\n * // cachedValue === \"Hello\"\r\n *\r\n * window.myGlobal = \"Darkness\";\r\n * // getInst(\"myGlobal\") === \"Darkness\"\r\n *\r\n * let promiseCls = getInst(\"Promise\");\r\n * // May throw if the global is not supported by the runtime\r\n * // otherwise the Promise class.\r\n * ```\r\n */\r\nexport const getInst = (name, useCached) => {\r\n    const gbl = (!_cachedGlobal || useCached === false) ? getGlobal(useCached) : _cachedGlobal.v;\r\n    if (gbl && gbl[name]) {\r\n        return gbl[name];\r\n    }\r\n    // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window\r\n    if (name === WINDOW && _cachedWindow) {\r\n        // tslint:disable-next-line: no-angle-bracket-type-assertion\r\n        return _cachedWindow.v;\r\n    }\r\n    return NULL_VALUE;\r\n};\r\n/**\r\n * Identify whether the runtime contains a `document` object\r\n * @group Environment\r\n * @returns - True if a `document` exists\r\n */\r\nexport const hasDocument = () => !!getDocument();\r\n/**\r\n * Return the global `document` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getDocument = () => {\r\n    (!_cachedDocument || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedDocument.b)) && (_cachedDocument = lazySafeGetInst(\"document\"));\r\n    return _cachedDocument.v;\r\n};\r\n/**\r\n * Identify whether the runtime contains a `window` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasWindow = () => !!getWindow();\r\n/**\r\n * Return the global `window` instance.\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getWindow = () => {\r\n    (!_cachedWindow || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedWindow.b)) && (_cachedWindow = lazySafeGetInst(WINDOW));\r\n    return _cachedWindow.v;\r\n};\r\n/**\r\n * Identify whether the runtimne contains a `navigator` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasNavigator = () => !!getNavigator();\r\n/**\r\n * Returns the global `navigator` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getNavigator = () => {\r\n    (!_cachedNavigator || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedNavigator.b)) && (_cachedNavigator = lazySafeGetInst(\"navigator\"));\r\n    return _cachedNavigator.v;\r\n};\r\n/**\r\n * Identifies whether the runtime contains a `history` object\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const hasHistory = () => !!getHistory();\r\n/**\r\n * Returns the global `history` instance\r\n * @group Environment\r\n * @returns\r\n */\r\nexport const getHistory = () => {\r\n    (!_cachedHistory || (_globalLazyTestHooks && _globalLazyTestHooks.lzy && !_cachedHistory.b)) && (_cachedHistory = lazySafeGetInst(\"history\"));\r\n    return _cachedHistory.v;\r\n};\r\n/**\r\n * Simple method to determine if we are running in a node environment\r\n * @group Environment\r\n * @returns True if you are\r\n */\r\nexport const isNode = () => {\r\n    !_isNode && (_isNode = safeGetLazy(() => !!(process && (process.versions || {}).node), false));\r\n    return _isNode.v;\r\n};\r\n/**\r\n * Helper to identify if you are running as a Dedicated, Shared or Service worker\r\n * @group Environment\r\n * @returns True if the environment you are in looks like a Web Worker\r\n */\r\nexport const isWebWorker = () => {\r\n    !_isWebWorker && (_isWebWorker = safeGetLazy(() => !!(self && self instanceof WorkerGlobalScope), false));\r\n    return _isWebWorker.v;\r\n};\r\n//# sourceMappingURL=environment.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { isFunction, isStrictNullOrUndefined } from \"../helpers/base\";\r\n/**\r\n * Checks if the type of value looks like an iterator instance (contains a next function).\r\n *\r\n * @since 0.4.0\r\n * @group Type Identity\r\n * @group Iterator\r\n * @typeParam T - Identifies the return type of the iterator defaults to any\r\n * @param value - The value to be checked\r\n * @returns {boolean} True if the value is an Iterator, otherwise false\r\n * @example\r\n * ```ts\r\n * isIterator(null);        // false\r\n * isIterator(undefined);   // false\r\n * isIterator(\"null\");      // false (Strings are iterable but not iterators)\r\n * isIterator([]);          // false (Arrays are iterable but not iterators)\r\n * isIterator({\r\n *     next: function() { return true }\r\n * });                      // true, iterators must contain a \"next\" function\r\n * ```\r\n */\r\nexport function isIterator(value) {\r\n    return !!value && isFunction(value.next);\r\n}\r\n/**\r\n * Checks if the value looks like it is iterable, contains a [symbol.iterator].\r\n *\r\n * @since 0.4.0\r\n * @group Type Identity\r\n * @group Iterator\r\n * @typeParam T - Identifies the return type of the iterator\r\n * @param value - The value to be checked\r\n * @returns {boolean} True if the value is an Iterable, otherwise false\r\n * @example\r\n * ```ts\r\n * isIterable(null);        // false\r\n * isIterable(undefined);   // false\r\n * isIterable(\"null\");      // true (Strings are iterable)\r\n * isIterable([]);          // true (Arrays are iterable)\r\n * ```\r\n */\r\nexport function isIterable(value) {\r\n    return !isStrictNullOrUndefined(value) && isFunction(value[getKnownSymbol(3 /* WellKnownSymbols.iterator */)]);\r\n}\r\n//# sourceMappingURL=iterator.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getLazy } from \"../helpers/lazy\";\r\nimport { DONE, VALUE } from \"../internal/constants\";\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\nimport { isIterator } from \"./iterator\";\r\nlet _iterSymbol;\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in the iterator or iterator returned by\r\n * the iterable and processed in the same order as returned by the iterator. As with the {@link arrForEach}\r\n * you CAN stop / break the iteration by returning -1 from the`callbackFn` function.\r\n *\r\n * The order of processing is not reset if you add or remove elements to the iterator, the actual behavior\r\n * will depend on the iterator imeplementation.\r\n *\r\n * If the passed `iter` is both an Iterable<T> and Iterator<T> the Iterator<T> interface takes preceedence.\r\n * @remarks\r\n * If Symbols are NOT supported then the iterable MUST be using the same polyFill for the well know symbols,\r\n * if you are targetting a mixed environment you SHOULD either\r\n * - only use the polyfill Symbol's provided by this library\r\n * - ensure that you add any symbol polyfills BEFORE these utilities\r\n * iterForOf expects a `synchronous` function.\r\n * iterForOf does not wait for promises. Make sure you are aware of the implications while using\r\n * promises (or async functions) as forEach callback.\r\n *\r\n * @since 0.4.2\r\n * @group Iterator\r\n * @typeParam T - Identifies the element type of the iterator\r\n * @param callbackfn A `synchronous` function that accepts up to three arguments. iterForOf calls the\r\n * callbackfn function one time for each element returned by the iterator.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is\r\n * omitted, null or undefined the iterator will be used as the this value.\r\n * @throws Any exception thrown while processing the iterator\r\n * @example\r\n * ```ts\r\n * const items = {\r\n *     'item1': 'value1',\r\n *     'item2': 'value2',\r\n *     'item3': 'value3\r\n * };\r\n * const copyItems = [];\r\n *\r\n * iterForOf(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n * ```\r\n */\r\nexport function iterForOf(iter, callbackfn, thisArg) {\r\n    if (iter) {\r\n        if (!isIterator(iter)) {\r\n            !_iterSymbol && (_iterSymbol = getLazy(() => getKnownSymbol(3 /* WellKnownSymbols.iterator */)));\r\n            iter = iter[_iterSymbol.v] ? iter[_iterSymbol.v]() : null;\r\n        }\r\n        if (isIterator(iter)) {\r\n            let err;\r\n            let iterResult;\r\n            try {\r\n                let count = 0;\r\n                while (!(iterResult = iter.next())[DONE]) {\r\n                    if (callbackfn.call(thisArg || iter, iterResult[VALUE], count, iter) === -1) {\r\n                        break;\r\n                    }\r\n                    count++;\r\n                }\r\n            }\r\n            catch (failed) {\r\n                err = { e: failed };\r\n                if (iter.throw) {\r\n                    iterResult = null;\r\n                    iter.throw(err);\r\n                }\r\n            }\r\n            finally {\r\n                try {\r\n                    if (iterResult && !iterResult[DONE]) {\r\n                        iter.return && iter.return(iterResult);\r\n                    }\r\n                }\r\n                finally {\r\n                    if (err) {\r\n                        // eslint-disable-next-line no-unsafe-finally\r\n                        throw err.e;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=forOf.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _unwrapInstFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The `fnApply` function calls the specified `fn` function with the given `thisArg` as the `this` value,\r\n * and the optional `argArray` arguments provided as an array (or an Array-Like Object).\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnApply()`, you can assign an arbitrary value as this when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * You can also use any kind of object which is ArrayLike as the second parameter. In practice, this means\r\n * that it needs to have a length property, and integer (\"index\") properties in the range (0..length - 1).\r\n * For example, you could use a NodeList, or a custom object like `{ 'length': 2, '0': 'eat', '1': 'bananas' }`.\r\n * You can also use `arguments`.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param argArray - An array-like object, specifying the arguments with which `fn` should be called, or `null` or\r\n * `undefined` if no arguments should be provided to the function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnApply(Math.max, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 168\r\n *\r\n * let min = fnApply(Math.min, null, [ 21, 42, 84, 168, 7, 3 ]);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnApply(module1.getX, module2); // 42\r\n * fnApply(module1.log, module2, [ \"friend\" ]); // my friend : 42\r\n * ```\r\n */\r\nexport const fnApply = _unwrapInstFunction(\"apply\");\r\n//# sourceMappingURL=fnApply.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { LENGTH } from \"../internal/constants\";\r\n/**\r\n * Calls the provided `callbackFn` function once for each element in an array in ascending index order. It is not invoked for index properties\r\n * that have been deleted or are uninitialized. And unlike the ES6 forEach() you CAN stop or break the iteration by returning -1 from the\r\n * `callbackFn` function.\r\n *\r\n * The range (number of elements) processed by arrForEach() is set before the first call to the `callbackFn`. Any elements added beyond the range\r\n * or elements which as assigned to indexes already processed will not be visited by the `callbackFn`.\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the element type of the array\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackfn A `synchronous` function that accepts up to three arguments. arrForEach calls the callbackfn function one time for each element in the array.\r\n * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, null or undefined\r\n * the array will be used as the this value.\r\n * @remarks\r\n * arrForEach expects a `synchronous` function.\r\n * arrForEach does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as forEach callback.\r\n * @example\r\n * ```ts\r\n * const items = ['item1', 'item2', 'item3'];\r\n * const copyItems = [];\r\n *\r\n * // before using for loop\r\n * for (let i = 0; i < items.length; i++) {\r\n *   copyItems.push(items[i]);\r\n * }\r\n *\r\n * // before using forEach()\r\n * items.forEach((item) => {\r\n *   copyItems.push(item);\r\n * });\r\n *\r\n * // after\r\n * arrForEach(items, (item) => {\r\n *   copyItems.push(item);\r\n *   // May return -1 to abort the iteration\r\n * });\r\n *\r\n * // Also supports input as an array like object\r\n * const items = { length: 3, 0: 'item1', 1: 'item2', 2: 'item3' };\r\n * ```\r\n */\r\nexport function arrForEach(theArray, callbackfn, thisArg) {\r\n    if (theArray) {\r\n        const len = theArray[LENGTH] >>> 0;\r\n        for (let idx = 0; idx < len; idx++) {\r\n            if (idx in theArray) {\r\n                if (callbackfn.call(thisArg || theArray, theArray[idx], idx, theArray) === -1) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=forEach.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrEvery() method is an iterative method. It calls a provided callbackFn function once for\r\n * each element in an array, until the callbackFn returns a falsy value. If such an element is found,\r\n * arrEvery() immediately returns false and stops iterating through the array. Otherwise, if callbackFn\r\n * returns a truthy value for all elements, every() returns true.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return `true` if the callbackFn returns a `truthy` value for every array elements. Otherwise `false`.\r\n * @example\r\n * ```ts\r\n * function isBigEnough<T>(element: T, index: number, array: T[]) {\r\n *   return element >= 10;\r\n * }\r\n *\r\n * arrEvery([12, 5, 8, 130, 44], isBigEnough);   // false\r\n * arrEvery([12, 54, 18, 130, 44], isBigEnough); // true\r\n *\r\n * const isSubset = <T>(array1: T[], array2: T[]) => arrEvery(array2, (element) => arrIncludes(array1, element));\r\n *\r\n * isSubset([1, 2, 3, 4, 5, 6, 7], [5, 7, 6]);  // true\r\n * isSubset([1, 2, 3, 4, 5, 6, 7], [5, 8, 7]);  // false\r\n *\r\n * arrEvery([1, , 3], (x) => x !== undefined);  // true\r\n * arrEvery([2, , 2], (x) => x === 2);          // true\r\n *\r\n * // Array Like combinations\r\n * isSubset([1, 2, 3, 4, 5, 6, 7], { length: 3, 0: 5, 1: 7, 2: 6}); // true\r\n * isSubset([1, 2, 3, 4, 5, 6, 7], { length: 3, 0: 5, 1: 8, 2: 7}); // false\r\n *\r\n * isSubset({ length: 7, 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7 }, [ 5, 7, 6 ]); // true\r\n * isSubset({ length: 7, 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7 }, [5, 8, 7]); // false\r\n *\r\n * isSubset({ length: 7, 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7 }, { length: 3, 0: 5, 1: 7, 2: 6}); // true\r\n * isSubset({ length: 7, 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7 }, { length: 3, 0: 5, 1: 8, 2: 7}); // false\r\n * ```\r\n */\r\nexport const arrEvery = _unwrapFunction(\"every\", ArrProto);\r\n/**\r\n * The arrFilter() method creates a shallow copy of a portion of a given array, filtered down to just the elements\r\n * from the given array that pass the test implemented by the provided function.\r\n *\r\n * The filter() method is an iterative method. It calls a provided callbackFn function once for each element in an\r\n * array, and constructs a new array of all the values for which callbackFn returns a truthy value. Array elements\r\n * which do not pass the callbackFn test are not included in the new array.\r\n *\r\n * `callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots in\r\n * sparse arrays.\r\n *\r\n * The arrFilter() method is a copying method. It does not alter this but instead returns a shallow copy that contains\r\n * the same elements as the ones from the original array (with some filtered out). However, the function provided as\r\n * callbackFn can mutate the array. Note, however, that the length of the array is saved before the first invocation\r\n * of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFilter()\r\n * began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by callbackFn, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are not visited.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of the elements.\r\n * @typeParam E - Identifies a more specific instance of the base array type.\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return A shallow copy of a portion of the given array, filtered down to just the elements from the given\r\n * array that pass the test implemented by the provided function. If no elements pass the test, an empty array\r\n * will be returned.\r\n * @example\r\n * ```ts\r\n * function isBigEnough<T>(value: T) {\r\n *   return value >= 10;\r\n * }\r\n *\r\n * const filtered = arrFilter([12, 5, 8, 130, 44], isBigEnough);\r\n * // filtered is [12, 130, 44]\r\n *\r\n * const arrayLikeFiltered = arrFilter({ length: 5, 0: 12, 1: 5, 2: 8, 3: 130, 4: 44}, isBigEnough);\r\n * // arrayLikeFiltered is [12, 130, 44]\r\n *\r\n * const array = [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n *\r\n * function isPrime(num) {\r\n *   for (let i = 2; num > i; i++) {\r\n *     if (num % i === 0) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return num > 1;\r\n * }\r\n *\r\n * console.log(arrFilter(array, isPrime)); // [2, 3, 5, 7, 11, 13]\r\n * ```\r\n */\r\nexport const arrFilter = _unwrapFunction(\"filter\", ArrProto);\r\n//# sourceMappingURL=every.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto, INDEX_OF, LAST_INDEX_OF } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrIndexOf() method returns the first index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator).\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - The index to start the search at. If the index is greater than or equal to\r\n * the array's length, -1 is returned, which means the array will not be searched. If the provided\r\n * index value is a negative number, it is taken as the offset from the end of the array.\r\n * Note: if the provided index is negative, the array is still searched from front to back. If the\r\n * provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched).\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const array = [2, 9, 9];\r\n * arrIndexOf(array, 2);     // 0\r\n * arrIndexOf(array, 7);     // -1\r\n * arrIndexOf(array, 9, 2);  // 2\r\n * arrIndexOf(array, 2, -1); // -1\r\n * arrIndexOf(array, 2, -3); // 0\r\n *\r\n * let indices: number[] = [];\r\n * const array = ['a', 'b', 'a', 'c', 'a', 'd'];\r\n * const element = 'a';\r\n * let idx = arrIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrIndexOf(array, element, idx + 1);\r\n * }\r\n * console.log(indices);\r\n * // [0, 2, 4]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrIndexOf(arrayLike, \"potato\"); // 0\r\n * arrIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrIndexOf(arrayLike, \"chillies\"); 2\r\n * arrIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrIndexOf = _unwrapFunction(INDEX_OF, ArrProto);\r\n/**\r\n * The arrLastIndexOf() method returns the last index at which a given element can be found in the array,\r\n * or -1 if it is not present.\r\n * `arrLastIndexOf()` compares searchElement to elements of the Array using strict equality (the same\r\n * method used by the === or triple-equals operator). [NaN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)\r\n * values are never compared as equal, so arrLastIndexOf() always returns -1 when searchElement is NaN.\r\n *\r\n * The arrLastIndexOf() method skips empty slots in sparse arrays.\r\n *\r\n * The arrLastIndexOf() method is generic. It only expects the this value to have a length property and integer-keyed properties.\r\n *\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The element to locate in the array.\r\n * @param fromIndex - Zero-based index at which to start searching backwards, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex < 0, fromIndex + array.length is used.\r\n * - If fromIndex < -array.length, the array is not searched and -1 is returned. You can think of it conceptually\r\n * as starting at a nonexistent position before the beginning of the array and going backwards from there. There\r\n * are no array elements on the way, so searchElement is never found.\r\n * - If fromIndex >= array.length or fromIndex is omitted, array.length - 1 is used, causing the entire array to\r\n * be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements.\r\n * @return The first index of the element in the array; -1 if not found.\r\n * @example\r\n * ```ts\r\n * const numbers = [2, 5, 9, 2];\r\n * arrLastIndexOf(numbers, 2); // 3\r\n * arrLastIndexOf(numbers, 7); // -1\r\n * arrLastIndexOf(numbers, 2, 3); // 3\r\n * arrLastIndexOf(numbers, 2, 2); // 0\r\n * arrLastIndexOf(numbers, 2, -2); // 0\r\n * arrLastIndexOf(numbers, 2, -1); // 3\r\n *\r\n * let indices: number[] = [];\r\n * const array = [\"a\", \"b\", \"a\", \"c\", \"a\", \"d\"];\r\n * const element = \"a\";\r\n * let idx = arrLastIndexOf(array, element);\r\n * while (idx !== -1) {\r\n *   indices.push(idx);\r\n *   idx = arrLastIndexOf(array, element, idx ? idx - 1 : -(array.length + 1));\r\n * }\r\n * console.log(indices);\r\n * // [4, 2, 0]\r\n *\r\n * function updateVegetablesCollection (veggies, veggie) {\r\n *     if (arrLastIndexOf(veggies, veggie) === -1) {\r\n *         veggies.push(veggie);\r\n *         console.log('New veggies collection is : ' + veggies);\r\n *     } else {\r\n *         console.log(veggie + ' already exists in the veggies collection.');\r\n *     }\r\n * }\r\n *\r\n * let veggies = ['potato', 'tomato', 'chillies', 'green-pepper'];\r\n *\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // New veggies collection is : potato,tomato,chillies,green-pepper,spinach\r\n * updateVegetablesCollection(veggies, 'spinach');\r\n * // spinach already exists in the veggies collection.\r\n *\r\n * // Array Like\r\n * let arrayLike = {\r\n *   length: 3,\r\n *   0: \"potato\",\r\n *   1: \"tomato\",\r\n *   2: \"chillies\",\r\n *   3: \"green-pepper\"  // Not checked as index is > length\r\n * };\r\n *\r\n * arrLastIndexOf(arrayLike, \"potato\"); // 0\r\n * arrLastIndexOf(arrayLike, \"tomato\"); // 1\r\n * arrLastIndexOf(arrayLike, \"chillies\"); 2\r\n * arrLastIndexOf(arrayLike, \"green-pepper\"); // -1\r\n * ```\r\n */\r\nexport const arrLastIndexOf = _unwrapFunction(LAST_INDEX_OF, ArrProto);\r\n//# sourceMappingURL=indexOf.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrMap() method creates a new array populated with the results of calling a provided function on every\r\n * element in the calling array.\r\n *\r\n * `arrMap` calls a provided callbackFn function once for each element in an array, in order, and constructs\r\n * a new array from the results. callbackFn is invoked only for indexes of the array which have assigned\r\n * values (including undefined).\r\n *\r\n * It is not called for missing elements of the array; that is:\r\n * - indexes that have never been set;\r\n * - indexes which have been deleted.\r\n *\r\n * @since 0.3.3\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of the array elements\r\n * @typeParam R - Identifies the type of the elements returned by the callback function, defaults to T.\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn - The function that is called for evetn element of `theArray`.\r\n * @param thisArg - The value to use as the `this` when executing the `callbackFn`.\r\n * @example\r\n * ```ts\r\n * const numbers = [1, 4, 9];\r\n * const roots = arrMap(numbers, (num) => Math.sqrt(num));\r\n *\r\n * // roots is now     [1, 2, 3]\r\n * // numbers is still [1, 4, 9]\r\n *\r\n * const kvArray = [{ key: 1, value: 10 },\r\n *                  { key: 2, value: 20 },\r\n *                  { key: 3, value: 30 }];\r\n *\r\n * const reformattedArray = arrMap(kvArray, ({ key, value}) => ({ [key]: value }));\r\n *\r\n * // reformattedArray is now [{1: 10}, {2: 20}, {3: 30}],\r\n *\r\n * // kvArray is still:\r\n * // [{key: 1, value: 10},\r\n * //  {key: 2, value: 20},\r\n * //  {key: 3, value: 30}]\r\n *\r\n * // Also supports Array Like objects with same output\r\n * const kvArray = {\r\n *   length: 3,\r\n *   0: { key: 1, value: 10 },\r\n *   1: { key: 2, value: 20 },\r\n *   2: { key: 3, value: 30 }\r\n * };\r\n * ```\r\n */\r\nexport const arrMap = _unwrapFunction(\"map\", ArrProto);\r\n//# sourceMappingURL=map.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto, SLICE } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrSlice() method returns a shallow copy of a portion of an array into a new array object\r\n * selected from start to end (end not included) where start and end represent the index of items\r\n * in that array. The original array will not be modified.\r\n *\r\n * The `arrSlice()` method is a copying method. It does not alter this but instead returns a shallow\r\n * copy that contains some of the same elements as the ones from the original array.\r\n *\r\n * The `arrSlice()` method preserves empty slots. If the sliced portion is sparse, the returned arra\r\n * is sparse as well.\r\n *\r\n * The `arrSlice()` method is generic. It only expects the this value to have a length property and\r\n * integer-keyed properties.\r\n *\r\n * For both start and end, a negative index can be used to indicate an offset from the end of the array.\r\n * For example, -2 refers to the second to last element of the array.\r\n * @since 0.9.3\r\n * @group Array\r\n * @group ArrayLike\r\n * @param start Zero-based index at which to start extraction, converted to an integer.\r\n * - Negative index counts back from the end of the array — if start < 0, start + array.length is used.\r\n * - If start < -array.length or start is omitted, 0 is used.\r\n * - If start >= array.length, nothing is extracted.\r\n * @param end Zero-based index at which to end extraction, converted to an integer. slice() extracts\r\n * up to but not including end.\r\n * - Negative index counts back from the end of the array — if end < 0, end + array.length is used.\r\n * - If end < -array.length, 0 is used.\r\n * - If end >= array.length or end is omitted, array.length is used, causing all elements until the\r\n * end to be extracted.\r\n * - If end is positioned before or at start after normalization, nothing is extracted.\r\n * @example\r\n * ```ts\r\n * const lyrics = [\"Hello\", \"Darkness\", \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\", \"talk\" ];\r\n *\r\n * arrSlice(lyrics);        // [ \"Hello\", \"Darkness\", \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\", \"talk\" ]\r\n * arrSlice(lyrics, 1, 3);  // [ \"Darkness\", \"my\" ]\r\n * arrSlicw(lyrics, 2);     // [ \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\", \"talk\" ]\r\n * arrSlice(lyrics, 2, 4);  // [ \"my\", \"old\" ]\r\n * arrSlice(lyrics, 1, 5);  // [ \"Darkness\", \"my\", \"old\", \"friend.\" ]\r\n * arrSlice(lyrics, -2);    // [ \"to\", \"talk\" ]\r\n * arrSlice(lyrics, 2, -1); // [ \"my\", \"old\", \"friend.\", \"I've\", \"come\", \"to\" ]\r\n * ```\r\n */\r\nexport const arrSlice = _unwrapFunction(SLICE, ArrProto);\r\n//# sourceMappingURL=slice.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _unwrapInstFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The `fnCall` function calls the function with the given `thisArg` as the `this` value and with\r\n * al of the `_args` provided as it's `arguments.\r\n *\r\n * > This is almost identical to `fnApply`, except that the function arguments are passed to `fnCall`\r\n * individually as a list, while with `fnApply` that are combined into a single array argument.\r\n *\r\n * Normally, when calling a function, the value of `this` inside the function is the object that the\r\n * function was accessed on. With `fnCall()`, you can pass an arbitrary value as the `this` when calling an\r\n * existing function, without first attaching the function to the object as a property. This allows you\r\n * to use methods of one object as generic utility functions.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n *\r\n * @param fn - The function to be called\r\n * @param thisArg - The value of `this` provided for the call to `fn`. If the function is not in strict mode,\r\n * `null` and `undefined` will be replaced with the global object, and primitive values will be converted to objects.\r\n * @param _args - The zero or more arguments to be passed to the `fn` function.\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * // min / max number in an array\r\n * let max = fnCall(Math.max, null, 21, 42, 84, 168, 7, 3);\r\n * // 168\r\n *\r\n * let min = fnCall(Math.min, null, 21, 42, 84, 168, 7, 3);\r\n * // 3\r\n *\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * // Call the function of module1 with module2 as it's this\r\n * fnCall(module1.getX, module2); // 42\r\n * fnCall(module1.log, module2, \"friend\"); // my friend : 42\r\n * ```\r\n */\r\nexport const fnCall = _unwrapInstFunction(\"call\");\r\n//# sourceMappingURL=fnCall.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { polyArrFind, polyArrFindIndex, polyArrFindLast, polyArrFindLastIndex } from \"../polyfills/array\";\r\n/**\r\n * The arrFind() method returns the first element in the provided array that satisfies\r\n * the provided testing function. If no values satisfy the testing function, undefined\r\n * is returned.\r\n * - If you need the index of the found element in the array, use {@link arrFindIndex}.\r\n * - If you need to find the index of a value, use arrIndexOf(). (It's similar to {@link arrFindIndex}, but\r\n * checks each element for equality with the value instead of using a testing function.)\r\n * - If you need to find if a value exists in an array, use {@link arrIncludes}. Again, it checks each element for\r\n * equality with the value instead of using a testing function.\r\n * - If you need to find if any element satisfies the provided testing function, use {@link arrSome}.\r\n *\r\n * The arrFind() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array in ascending-index order, until `callbackFn` returns a truthy value. arrFind() then returns that\r\n * element and stops iterating through the array. If callbackFn never returns a truthy value, arrFind() returns\r\n * undefined.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in\r\n * sparse arrays behave the same as undefined.\r\n *\r\n * arrFind() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of `callbackFn`. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFind() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by callbackFn, its value passed to the\r\n * `callbackFn` will be the value at the time that element gets visited. Deleted elements are visited as if they\r\n * were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The first element in the array that satisfies the provided testing function. Otherwise, undefined\r\n * is returned.\r\n * @example\r\n * ```ts\r\n * const inventory = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 },\r\n * ];\r\n *\r\n * function isCherries(fruit) {\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * console.log(arrFind(inventory, isCherries));\r\n * // { name: 'cherries', quantity: 5 }\r\n *\r\n * function isPrime(element, index, array) {\r\n *   let start = 2;\r\n *   while (start <= Math.sqrt(element)) {\r\n *     if (element % start++ < 1) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return element > 1;\r\n * }\r\n *\r\n * console.log(arrFind([4, 6, 8, 12], isPrime)); // undefined, not found\r\n * console.log(arrFind([4, 5, 8, 12], isPrime)); // 5\r\n *\r\n * // Array Like\r\n * console.log(arrFind({ length: 4, 0: 4, 1: 6, 2: 8, 3: 12 }, isPrime)); // undefined, not found\r\n * console.log(arrFind({ length: 4:, 0: 4, 1: 5, 2: 8, 3: 12 }, isPrime)); // 5\r\n * ```\r\n */\r\nexport const arrFind = _unwrapFunctionWithPoly(\"find\", ArrProto, polyArrFind);\r\n/**\r\n * The arrFindIndex() method returns the index of the first element in an array that satisfies the provided testing\r\n * function. If no elements satisfy the testing function, -1 is returned.\r\n *\r\n * The arrFindIndex() is an iterative method. It calls a provided callbackFn function once for each element in an\r\n * array in ascending-index order, until callbackFn returns a truthy value. arrFindIndex() then returns the index\r\n * of that element and stops iterating through the array. If `callbackFn` never returns a truthy value, arrFindIndex()\r\n * returns -1.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse\r\n * arrays behave the same as undefined.\r\n *\r\n * arrFindIndex() does not mutate the array on which it is called, but the function provided as `callbackFn` can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFindIndex() began.\r\n * - Changes to already-visited indexes do not cause `callbackFn` to be invoked on them again.\r\n * If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The index of the first element in the array that passes the test. Otherwise, -1.\r\n * @example\r\n * ```ts\r\n * const inventory: Array<{ name: string, quantity: number}> = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 }\r\n * ];\r\n *\r\n * function isCherries(fruit: { name: string, quantity: number}) {\r\n *   return fruit.name === \"cherries\";\r\n *  }\r\n *\r\n * arrFindIndex(inventory, isCherries); // 2\r\n *\r\n * function isPrime(element: number) {\r\n *   if (element % 2 === 0 || element < 2) {\r\n *     return false;\r\n *   }\r\n *\r\n *   for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\r\n *     if (element % factor === 0) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return true;\r\n * }\r\n *\r\n * arrFindIndex([4, 6, 8, 9, 12], isPrime) // -1\r\n * arrFindIndex([4, 6, 7, 9, 12], isPrime) // 2\r\n *\r\n * // Array Like\r\n * arrFindIndex({ length: 5, 0: 4, 1: 6, 2: 8, 3: 9, 4: 12 }, isPrime) // -1\r\n * arrFindIndex({ length: 5:, 0: 4, 1: 6, 2: 7, 3: 9, 4: 12 }, isPrime) // 2\r\n * ```\r\n */\r\nexport const arrFindIndex = _unwrapFunctionWithPoly(\"findIndex\", ArrProto, polyArrFindIndex);\r\n/**\r\n * The arrFindLast() method iterates the array in reverse order and returns the value of the first element that\r\n * satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned.\r\n * - If you need the index of the found element in the array, use arrFindLastIndex().\r\n * - If you need to find the index of a value, use arrLastIndexOf(). (It's similar to arrFindLastIndex(), but checks\r\n * each element for equality with the value instead of using a testing function.)\r\n * - If you need to find if a value exists in an array, use {@link arrIncludes}. Again, it checks each element for\r\n * equality with the value instead of using a testing function.\r\n * - If you need to find if any element satisfies the provided testing function, use {@link arrSome}.\r\n *\r\n * The arrFindLast() method is an iterative method. It calls a provided callbackFn function once for each element\r\n * in an array in descending-index order, until callbackFn returns a truthy value. arrFindLast() then returns that\r\n * element and stops iterating through the array. If `callbackFn` never returns a truthy value, arrFindLast() returns\r\n * undefined.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse\r\n * arrays behave the same as undefined.\r\n *\r\n * arrFindLast() does not mutate the array on which it is called, but the function provided as `callbackFn` can.\r\n * Note, however, that the length of the array is saved before the first invocation of `callbackFn`. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFindLast() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the `callbackFn`\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The last element in the array that satisfies the provided testing function. Otherwise, undefined\r\n * is returned.\r\n * @example\r\n * ```ts\r\n * const inventory = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 },\r\n * ];\r\n *\r\n * function isCherries(fruit) {\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * console.log(arrFindLast(inventory, isCherries));\r\n * // { name: 'cherries', quantity: 5 }\r\n *\r\n * function isPrime(element, index, array) {\r\n *   let start = 2;\r\n *   while (start <= Math.sqrt(element)) {\r\n *     if (element % start++ < 1) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return element > 1;\r\n * }\r\n *\r\n * console.log(arrFindLast([4, 6, 8, 12], isPrime)); // undefined, not found\r\n * console.log(arrFindLast([4, 5, 7, 12], isPrime)); // 7\r\n *\r\n * // Array Like\r\n * console.log(arrFindLast({ length: 4, 0: 4, 1: 6, 2: 8, 3: 12 }, isPrime)); // undefined, not found\r\n * console.log(arrFindLast({ length: 4, 0: 4, 1: 5, 2: 7, 3: 12 }, isPrime)); // 7\r\n * ```\r\n */\r\nexport const arrFindLast = _unwrapFunctionWithPoly(\"findLast\", ArrProto, polyArrFindLast);\r\n/**\r\n * The arrFindLastIndex() method iterates the array in reverse order and returns the index of the first element that\r\n * satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.\r\n *\r\n * The arrFindLastIndex() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array in descending-index order, until callbackFn returns a truthy value. arrFindLastIndex() then returns the\r\n * index of that element and stops iterating through the array. If callbackFn never returns a truthy value, returns -1.\r\n *\r\n * `callbackFn` is invoked for every index of the array, not just those with assigned values. Empty slots in sparse arrays\r\n * behave the same as undefined.\r\n *\r\n * arrFindLastIndex() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrFindLastIndex() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the callbackFn\r\n * will be the value at the time that element gets visited. Deleted elements are visited as if they were undefined.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return The index of the last (highest-index) element in the array that passes the test. Otherwise -1 if\r\n * no matching element is found.\r\n * @example\r\n * ```ts\r\n * const inventory: Array<{ name: string, quantity: number}> = [\r\n *   { name: \"apples\", quantity: 2 },\r\n *   { name: \"bananas\", quantity: 0 },\r\n *   { name: \"cherries\", quantity: 5 }\r\n * ];\r\n *\r\n * let called = 0;\r\n * function isCherries(fruit: { name: string, quantity: number}) {\r\n *   called++;\r\n *   return fruit.name === \"cherries\";\r\n * }\r\n *\r\n * arrFindLastIndex(inventory, isCherries)' // 2\r\n * // called === 1\r\n *\r\n * called = 0;\r\n * function isPrime(element: number) {\r\n *   called++;\r\n *   if (element % 2 === 0 || element < 2) {\r\n *     return false;\r\n *   }\r\n *   for (let factor = 3; factor <= Math.sqrt(element); factor += 2) {\r\n *     if (element % factor === 0) {\r\n *       return false;\r\n *     }\r\n *   }\r\n *   return true;\r\n * }\r\n *\r\n * arrFindLastIndex([4, 6, 8, 9, 12], isPrime); // -1\r\n * // called === 5\r\n *\r\n * called = 0;\r\n * arrFindLastIndex([4, 6, 7, 9, 12], isPrime); // 2\r\n * // called === 3\r\n *\r\n * // Array Like\r\n * called = 0;\r\n * arrFindLastIndex({ length: 5: 0: 4, 1: 6, 2: 8, 3: 9, 4: 12 }, isPrime); // -1\r\n * // called === 5\r\n *\r\n * called = 0;\r\n * arrFindLastIndex({ length: 5: 0: 4, 1: 6, 2: 7, 3: 9, 4: 12 }, isPrime); // 2\r\n * // called === 3\r\n\r\n * ```\r\n */\r\nexport const arrFindLastIndex = _unwrapFunctionWithPoly(\"findLastIndex\", ArrProto, polyArrFindLastIndex);\r\n//# sourceMappingURL=find.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrCls } from \"../internal/constants\";\r\nimport { polyArrFrom } from \"../polyfills/array\";\r\n/**\r\n * Creates an new shallow-copied array from an array-like object or an iterable.\r\n * @since 0.9.7\r\n * @group ArrayLike\r\n * @group Array\r\n * @group Iterator\r\n * @typeParam T - Identifies the element type of the array-like or iterable.\r\n * @typeParam U - Identifies returned type of the array\r\n * @param theValue - An array-like object or iterable to convert to an array.\r\n * @param mapfn - A {@link ArrFromMapFn | mapping function} to call on every element of the array. If provided, every\r\n * value to be added to the array is first passed through this map function, and the return\r\n * value is added to the array instead. The function is called with the following arguments:\r\n * @param thisArg Value of 'this' used to invoke the mapfn.\r\n * @example\r\n * ```ts\r\n * arrFrom(\"Hello\");\r\n * // [ \"H\", \"e\", \"l\", \"l\", \"o\" ]\r\n *\r\n * arrFrom(new Set([\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]));\r\n * // [\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]\r\n *\r\n * let map = new Map([\r\n *   [ 1, \"Hello\" ],\r\n *   [ 2, \"Darkness\" ],\r\n *   [ 3, \"my\" ],\r\n *   [ 4, \"old\" ],\r\n *   [ 5, \"friend\"]\r\n * ]);\r\n *\r\n * arrFrom(map.values());\r\n * // [\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]\r\n *\r\n * arrFrom(map.keys());\r\n * // [ 1, 2, 3, 4, 5 ]\r\n *\r\n * arrFrom(map.entries());\r\n * // [ [ 1, \"Hello\" ], [ 2, \"Darkness\" ], [ 3, \"my\" ], [ 4, \"old\" ], [ 5, \"friend\"] ]\r\n *\r\n * // With a Mapping function\r\n * const map = new Map([\r\n *   [ 1, \"Hello\" ],\r\n *   [ 2, \"Darkness\" ],\r\n *   [ 3, \"my\" ],\r\n *   [ 4, \"old\" ],\r\n *   [ 5, \"friend\"]\r\n * ]);\r\n *\r\n * arrFrom(map, ([ key, value ]) => ({ [key]: value }));\r\n * // [ {\"1\": \"Hello\"}, {\"2\": \"Darkness\"}, {\"3\": \"my\"}, {\"4\": \"old\"}, {\"5\": \"friend\"} ]\r\n * ```\r\n */\r\nexport const arrFrom = ArrCls.from || polyArrFrom;\r\n//# sourceMappingURL=from.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { polyArrIncludes } from \"../polyfills/array\";\r\n/**\r\n * The arrIncludes() method determines whether an array includes a certain value among its\r\n * entries, returning true or false as appropriate.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The value to search for\r\n * @param fromIndex - The optional Zero-based index at which to start searching, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex < 0, fromIndex + array.length\r\n * is used. However, the array is still searched from front to back in this case.\r\n * - If fromIndex < -array.length or fromIndex is omitted, 0 is used, causing the entire array to be searched.\r\n * - If fromIndex >= array.length, the array is not searched and false is returned.\r\n * @returns A boolean value which is true if the value searchElement is found within the array (or the part of\r\n * the array indicated by the index fromIndex, if specified).\r\n * @example\r\n * ```ts\r\n * arrIncludes([1, 2, 3], 2);       // true\r\n * arrIncludes([1, 2, 3], 4);       // false\r\n * arrIncludes([1, 2, 3], 3, 3);    // false\r\n * arrIncludes([1, 2, 3], 3, -1);   // true\r\n * arrIncludes([1, 2, NaN], NaN);   // true\r\n * arrIncludes([\"1\", \"2\", \"3\"], 3 as any); // false\r\n *\r\n * // Array Like\r\n * arrIncludes({ length: 3, 0: 1, 1: 2, 2: 3 }, 2);       // true\r\n * arrIncludes({ length: 3, 0: 1, 1: 2, 2: 3 }, 4);       // false\r\n * arrIncludes({ length: 3, 0: 1, 1: 2, 2: 3 }, 3, 3);    // false\r\n * arrIncludes({ length: 3, 0: 1, 1: 2, 2: 3 }, 3, -1);   // true\r\n * arrIncludes({ length: 3, 0: 1, 1: 2, 2: NaN }, NaN);   // true\r\n * arrIncludes({ length: 3, 0: \"1\", 1: \"2\", 2: \"3\" }, 3 as any); // false\r\n * ```\r\n */\r\nexport const arrIncludes = _unwrapFunctionWithPoly(\"includes\", ArrProto, polyArrIncludes);\r\n/**\r\n * The arrContains() method determines whether an array contains a certain value among its\r\n * entries, returning true or false as appropriate.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param searchElement - The value to search for\r\n * @param fromIndex - The optional Zero-based index at which to start searching, converted to an integer.\r\n * - Negative index counts back from the end of the array — if fromIndex < 0, fromIndex + array.length\r\n * is used. However, the array is still searched from front to back in this case.\r\n * - If fromIndex < -array.length or fromIndex is omitted, 0 is used, causing the entire array to be searched.\r\n * - If fromIndex >= array.length, the array is not searched and false is returned.\r\n * @returns A boolean value which is true if the value searchElement is found within the array (or the part of\r\n * the array indicated by the index fromIndex, if specified).\r\n * @example\r\n * ```ts\r\n * arrContains([1, 2, 3], 2);       // true\r\n * arrContains([1, 2, 3], 4);       // false\r\n * arrContains([1, 2, 3], 3, 3);    // false\r\n * arrContains([1, 2, 3], 3, -1);   // true\r\n * arrContains([1, 2, NaN], NaN);   // true\r\n * arrContains([\"1\", \"2\", \"3\"], 3 as any); // false\r\n *\r\n * // Array Like\r\n * arrContains({ length: 3, 0: 1, 1: 2, 2: 3 }, 2);       // true\r\n * arrContains({ length: 3, 0: 1, 1: 2, 2: 3 }, 4);       // false\r\n * arrContains({ length: 3, 0: 1, 1: 2, 2: 3 }, 3, 3);    // false\r\n * arrContains({ length: 3, 0: 1, 1: 2, 2: 3 }, 3, -1);   // true\r\n * arrContains({ length: 3, 0: 1, 1: 2, 2: NaN }, NaN);   // true\r\n * arrContains({ length: 3, 0: \"1\", 1: \"2\", 2: \"3\" }, 3 as any); // false\r\n * ```\r\n */\r\nexport const arrContains = arrIncludes;\r\n//# sourceMappingURL=includes.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrReduce() method executes a user-supplied \"reducer\" callback function on each element of the array,\r\n * in order, passing in the return value from the calculation on the preceding element. The final result of\r\n * running the reducer across all elements of the array is a single value.\r\n *\r\n * The first time that the callback is run there is no \"return value of the previous calculation\". If supplied,\r\n * an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial\r\n * value and iteration starts from the next element (index 1 instead of index 0).\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the type of array elements\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n * @returns The value that results from running the \"reducer\" callback function to completion over the entire array.\r\n * @example\r\n * ```ts\r\n * const getMax = (a: number, b: number) => Math.max(a, b);\r\n *\r\n * // callback is invoked for each element in the array starting at index 0\r\n * arrReduce([1, 100], getMax, 50); // 100\r\n * arrReduce([    50], getMax, 10); // 50\r\n *\r\n * // callback is invoked once for element at index 1\r\n * arrReduce([1, 100], getMax);     // 100\r\n *\r\n * // callback is not invoked\r\n * arrReduce([    50], getMax);     // 50\r\n * arrReduce([      ], getMax, 1);  // 1\r\n *\r\n * arrReduce([      ], getMax);     // throws TypeError\r\n *\r\n * // Also supports Array like objects\r\n * arrReduce({ length: 2, 0: 1, 1: 100 }, getMax, 50); // 100\r\n * arrReduce({ length: 1, 0: 50 }, getMax, 10); // 50\r\n *\r\n * // callback is invoked once for element at index 1\r\n * arrReduce({ length: 2, 0: 1, 1: 100 }, getMax);     // 100\r\n *\r\n * // callback is not invoked\r\n * arrReduce({ length: 1, 0: 50 }, getMax);     // 50\r\n * arrReduce({ length: 0 }, getMax, 1);  // 1\r\n  * ```\r\n */\r\nexport const arrReduce = _unwrapFunction(\"reduce\", ArrProto);\r\n//# sourceMappingURL=reduce.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { ArrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The arrSome() method tests whether at least one element in the array passes the test implemented by the\r\n * provided function. It returns true if, in the array, it finds an element for which the provided function\r\n * returns true; otherwise it returns false. It doesn't modify the array.\r\n *\r\n * The arrSome() method is an iterative method. It calls a provided `callbackFn` function once for each element\r\n * in an array, until the `callbackFn` returns a truthy value. If such an element is found, arrSome() immediately\r\n * returns true and stops iterating through the array. Otherwise, if callbackFn returns a falsy value for all\r\n * elements, some() returns false.\r\n *\r\n * arrSome() acts like the \"there exists\" quantifier in mathematics. In particular, for an empty array, it\r\n * returns false for any condition.\r\n *\r\n * `callbackFn` is invoked only for array indexes which have assigned values. It is not invoked for empty slots\r\n * in sparse arrays.\r\n *\r\n * arrSome() does not mutate the array on which it is called, but the function provided as callbackFn can.\r\n * Note, however, that the length of the array is saved before the first invocation of callbackFn. Therefore:\r\n * - `callbackFn` will not visit any elements added beyond the array's initial length when the call to arrSome() began.\r\n * - Changes to already-visited indexes do not cause callbackFn to be invoked on them again.\r\n * - If an existing, yet-unvisited element of the array is changed by `callbackFn`, its value passed to the\r\n * `callbackFn` will be the value at the time that element gets visited. Deleted elements are not visited.\r\n * - The arrSome() method is generic. It only expects the this value to have a length property and integer-keyed properties.\r\n * @since 0.8.0\r\n * @group Array\r\n * @group ArrayLike\r\n * @typeParam T - Identifies the base type of array elements\r\n * @typeParam E - Identifies a more specific instance of the base array type\r\n * @param theArray - The array or array like object of elements to be searched.\r\n * @param callbackFn A function that accepts up to three arguments of type {@link ArrPredicateCallbackFn} or\r\n * {@link ArrPredicateCallbackFn2}. The predicate function is called for each element in the thArray until\r\n * the predicate returns a value which is coercible to the Boolean value false, or until the end of the array.\r\n * @param thisArg - A value to use as this when executing callbackFn. Defaults to the array if not provided.\r\n * @return `true` if the callback function returns a truthy value for at least one element in the array.\r\n * Otherwise, `false`.\r\n */\r\nexport const arrSome = _unwrapFunction(\"some\", ArrProto);\r\n//# sourceMappingURL=some.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { _unwrapInstFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * Creates a new function that when called will set the value of `thisArg` as the `this` keyword\r\n * value whrn calling the provided `fn` instance, and all of the arguments passed to the new\r\n * function will be passed along to the original provided instance.\r\n * @param fn - The function instance to be called\r\n * @param thisArg - The value to be used as the `this` when calling the `fn`\r\n * @returns The value returned by the original `fn` after executing with the provided `thisArg`.\r\n * @since 0.9.8\r\n * @group Function\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * console.log(module1.getX()); // 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     x: 42\r\n * };\r\n *\r\n * module2.getX = fnBind(module1.getX, module2);\r\n * module2.getX(); // 42\r\n *\r\n * // It can also be used to proxy to the original function from the new one\r\n * module2.getX = fnBind(module1.getX, module1);\r\n * module2.getX(); // 21\r\n * ```\r\n */\r\nexport const fnBind = _unwrapInstFunction(\"bind\");\r\n//# sourceMappingURL=fnBind.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { isArray, isFunction } from \"../helpers/base\";\r\nimport { fnApply } from \"./fnApply\";\r\nimport { fnBind } from \"./fnBind\";\r\n/**\r\n * Create a deferred proxy function which will call the named function of the result of the hostFn, this enables\r\n * creating bound functions which when called call the proxy the function to a different host (this) instance.\r\n *\r\n * This is different from `fnBind` which is provided with the concrete function and `this` instances, while the proxy\r\n * will lazily obtain the `this` and the function is obtained by looking up the named function from the returned\r\n * host (`this`) instance.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n * @param hostFn - A function to get the current host and thisArg that will be called\r\n * @param funcName - The name of the function to call on the host\r\n * @returns The result of calling the function with the specified `this` value and arguments.\r\n * @example\r\n * ```ts\r\n * const module1 = {\r\n *     prefix: \"Hello\",\r\n *     x: 21,\r\n *     getX() {\r\n *         return this.x;\r\n *     },\r\n *     log(value: string) {\r\n *         return this.prefix + \" \" + value + \" : \" + this.x\r\n *     }\r\n * };\r\n *\r\n * // The 'this' parameter of 'getX' is bound to 'module'.\r\n * module1.getX(); // 21\r\n * module1.log(\"Darkness\"); // Hello Darkness : 21\r\n *\r\n * // Create a new function 'boundGetX' with the 'this' parameter bound to 'module'.\r\n * let module2 = {\r\n *     prefix: \"my\",\r\n *     x: 42\r\n * };\r\n *\r\n * let getHost = () => {\r\n *     return module1;\r\n * };\r\n *\r\n * let deferredFn = createFnDeferredProxy(getHost, \"getX\");\r\n *\r\n * deferredFn();   // 21\r\n *\r\n * module2.defX = deferredFn;\r\n *\r\n * module2.defX();  // 21\r\n * ```\r\n */\r\nexport const createFnDeferredProxy = (hostFn, funcName) => {\r\n    return function () {\r\n        // Capture the original arguments passed to the method\r\n        var theArgs = arrSlice(arguments);\r\n        let theHost = hostFn();\r\n        return fnApply(theHost[funcName], theHost, theArgs);\r\n    };\r\n};\r\n/**\r\n * Creates proxy functions on the target which internally will call the source version with all arguments passed to the target method.\r\n *\r\n * @since 0.9.8\r\n * @group Function\r\n * @param target - The target object to be assigned with the source properties and functions\r\n * @param host - The host instance or a function to return the host instance which contains the\r\n * functions and will be assigned as the `this` for the function being called.\r\n * @param funcDefs - An array of function definitions on how each named function will be\r\n * proxied onto the target.\r\n * @return The original target after all proxies have been assigned\r\n * @example\r\n * ```ts\r\n * let test = {\r\n *     x: 21,\r\n *     func1() {\r\n *         return this.x;\r\n *     }\r\n * };\r\n *\r\n * test.func1();        // 21\r\n * let newTarget = createProxyFuncs({} as any, test, [\r\n *     { n: \"func1\" },\r\n *     { n: \"func1\", as: \"aliasFn\" }\r\n * ]);\r\n *\r\n * newTarget.func1();   // 21\r\n * newTarget.aliasFn();   // 21\r\n *\r\n * newTarget.x = 42;\r\n *\r\n * // The return is still using the `this.x` from the original `test` as it's proxied\r\n * newTarget.func1();   // 21\r\n * newTarget.aliasFn();   // 21\r\n *\r\n * let getHostFn = () => {\r\n *    return test;\r\n * };\r\n *\r\n * newTarget = createProxyFuncs({} as any, getHostFn, [\r\n *     { n: \"func1\" },\r\n *     { n: \"func1\", as: \"aliasFn\" }\r\n * ]);\r\n *\r\n * newTarget.func1();   // 21\r\n * newTarget.aliasFn();   // 21\r\n *\r\n * newTarget.x = 42;\r\n *\r\n * // The return is still using the `this.x` from the original `test` as it's proxied\r\n * newTarget.func1();   // 21\r\n * newTarget.aliasFn();   // 21\r\n * ```\r\n */\r\nexport const createProxyFuncs = (target, host, funcDefs) => {\r\n    if (target && host && isArray(funcDefs)) {\r\n        let isDeferred = isFunction(host);\r\n        arrForEach(funcDefs, (funcDef) => {\r\n            let targetName = (funcDef.as || funcDef.n);\r\n            if (funcDef.rp === false && target[targetName]) {\r\n                return;\r\n            }\r\n            target[targetName] = isDeferred ?\r\n                createFnDeferredProxy(host, funcDef.n) :\r\n                fnBind(host[funcDef.n], host);\r\n        });\r\n    }\r\n    return target;\r\n};\r\n//# sourceMappingURL=fnProxy.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrSlice } from \"../array/slice\";\r\nimport { LENGTH, UNDEF_VALUE } from \"../internal/constants\";\r\nimport { iterForOf } from \"../iterator/forOf\";\r\nimport { objHasOwn } from \"../object/has_own\";\r\nimport { getKnownSymbol, hasSymbol } from \"../symbol/symbol\";\r\nimport { getLazy } from \"../helpers/lazy\";\r\nlet _iterSymbol;\r\n/**\r\n * Read the arguments from the provided array, iterator /  or generator function\r\n * When processing an Iterable and a negative start or end is provided the entire\r\n * iterator will be processed into an array before applying the start / end restrictions\r\n * and when undefined or >= 0 any iterator will not be fully processed.\r\n * @param theArgs - The arguments to process, may be ArrayLike or an Iterable\r\n * @param start Zero-based index at which to start extraction, converted to an integer.\r\n * - Negative index counts back from the end of the array or iteration\r\n * - if start < 0, start + (array.length || iterator.count) is used.\r\n * - If start < -array.length or start is omitted, 0 is used.\r\n * - If start >= array.length, nothing is extracted.\r\n * @param end Zero-based index at which to end extraction, converted to an integer. readArgs() extracts\r\n * up to but not including end.\r\n * - Negative index counts back from the end of the array — if end < 0, end + array.length is used.\r\n * - If end < -array.length, 0 is used.\r\n * - If end >= array.length or end is omitted, array.length is used, causing all elements until the\r\n * end to be extracted.\r\n * - If end is positioned before or at start after normalization, nothing is extracted.\r\n * @returns A new array with the extracted elements\r\n * @example\r\n * ```ts\r\n * function myFunc<T>(firstArg: T, ...otherArgs) {\r\n *    // Read all of the arguments\r\n *    let allArgs = readArgs(arguments);\r\n *\r\n *    // Get all of the arguments after the first\r\n *    let optArgs = readArgs(arguments, 1);\r\n * }\r\n *\r\n * myFunc(\"Hello\");\r\n * myFunc(\"Hello\", \"Darkness\", \"my\", \"old\", \"friend\", \".\");\r\n *\r\n * function* myGenerator() {\r\n *   yield \"Hello\";\r\n *   yield \"Darkness\";\r\n *   yield \"my\";\r\n *   yield \"old\";\r\n *   yield \"friend\";\r\n * }\r\n *\r\n * function* myGenerator2() {\r\n *   yield \"I've\";\r\n *   yield \"come\";\r\n *   yield \"to\";\r\n *   yield \"talk\";\r\n *   yield \"with\";\r\n *   yield \"you\";\r\n *   yield \"again\";\r\n * }\r\n *\r\n * readArgs(myGenerator());\r\n * // [ \"Hello\", \"Darkness\", \"my\", \"old\", \"friend\"]);\r\n *\r\n * readArgs(myGenerator(), 1);\r\n * // [ \"Darkness\", \"my\", \"old\", \"friend\"]);\r\n *\r\n * readArgs(myGenerator2());\r\n * // [ \"I've\", \"come\", \"to\", \"talk\", \"with\", \"you\", \"again\" ]);\r\n *\r\n * readArgs(myGenerator2(), 0, -2);\r\n * // [ \"I've\", \"come\", \"to\", \"talk\", \"with\" ]);\r\n *\r\n * readArgs(myGenerator2(), -3, -2);\r\n * // [ \"with\" ]);\r\n\r\n * ```\r\n */\r\nexport const readArgs = (theArgs, start, end) => {\r\n    if (!_iterSymbol) {\r\n        _iterSymbol = getLazy(() => hasSymbol() && getKnownSymbol(3 /* WellKnownSymbols.iterator */));\r\n    }\r\n    if (!objHasOwn(theArgs, LENGTH)) {\r\n        // Does not contain a length property so lets check if it's an iterable\r\n        // IArgument is both ArrayLike and an iterable, so prefering to treat it as\r\n        // an array for performance\r\n        let iterFn = _iterSymbol.v && theArgs[_iterSymbol.v];\r\n        if (iterFn) {\r\n            let values = [];\r\n            let from = (start === UNDEF_VALUE || start < 0) ? 0 : start;\r\n            let to = end < 0 || start < 0 ? UNDEF_VALUE : end;\r\n            iterForOf(iterFn.call(theArgs), (value, cnt) => {\r\n                if (to !== UNDEF_VALUE && cnt >= to) {\r\n                    return -1;\r\n                }\r\n                if (cnt >= from) {\r\n                    values.push(value);\r\n                }\r\n            });\r\n            if ((start === UNDEF_VALUE || start >= 0) && (end === UNDEF_VALUE || end >= 0)) {\r\n                return values;\r\n            }\r\n            theArgs = values;\r\n        }\r\n    }\r\n    return arrSlice(theArgs, start, end);\r\n};\r\n//# sourceMappingURL=readArgs.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { FUNCTION, ObjClass, OBJECT, PROTOTYPE } from \"../internal/constants\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nconst _objCreate = ObjClass[\"create\"];\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Object\r\n * @param obj Object to use as a prototype. May be null\r\n */\r\nexport const objCreate = _objCreate || polyObjCreate;\r\n/**\r\n * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil\r\n * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.\r\n * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations\r\n * @group Polyfill\r\n * @group Object\r\n * @param obj Object to use as a prototype. May be null\r\n */\r\nexport function polyObjCreate(obj) {\r\n    if (!obj) {\r\n        return {};\r\n    }\r\n    let type = typeof obj;\r\n    if (type !== OBJECT && type !== FUNCTION) {\r\n        throw new TypeError(\"Prototype must be an Object or function: \" + dumpObj(obj));\r\n    }\r\n    function tempFunc() { }\r\n    tempFunc[PROTOTYPE] = obj;\r\n    return new tempFunc();\r\n}\r\n//# sourceMappingURL=create.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getLazy } from \"../helpers/lazy\";\r\nimport { ObjClass, __PROTO__ } from \"../internal/constants\";\r\nimport { objForEachKey } from \"./for_each_key\";\r\nlet _isProtoArray;\r\n/**\r\n * The objSetPrototypeOf() method sets the prototype (i.e., the internal [Prototype] property) of a specified\r\n * object to another object or null.\r\n * @group Object\r\n * @param obj - The object which is to have it's prototype set.\r\n * @param proto - The object's new prototype (an object or null)\r\n * @returns The specified object.\r\n */\r\nexport function objSetPrototypeOf(obj, proto) {\r\n    let fn = ObjClass[\"setPrototypeOf\"] ||\r\n        // tslint:disable-next-line: only-arrow-functions\r\n        function (d, b) {\r\n            !_isProtoArray && (_isProtoArray = getLazy(() => ({ [__PROTO__]: [] } instanceof Array)));\r\n            _isProtoArray.v ? d[__PROTO__] = b : objForEachKey(b, (key, value) => d[key] = value);\r\n        };\r\n    return fn(obj, proto);\r\n}\r\n//# sourceMappingURL=set_proto.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n/**\r\n * Return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of dateNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n * @example\r\n * ```ts\r\n * let now = utcNow();\r\n * ```\r\n */\r\nexport function utcNow() {\r\n    return (Date.now || polyUtcNow)();\r\n}\r\n/**\r\n * Polyfill fallback to return the number of milliseconds that have elapsed since January 1, 1970 00:00:00 UTC.\r\n *\r\n * To offer protection against timing attacks and fingerprinting, the precision of dateNow()\r\n * might get rounded depending on browser settings. In Firefox, the privacy.reduceTimerPrecision\r\n * preference is enabled by default and defaults to 20µs in Firefox 59; in 60 it will be 2ms.\r\n *\r\n * @since 0.4.4\r\n * @group Timer\r\n * @group Polyfill\r\n *\r\n * @returns A Number representing the milliseconds elapsed since the UNIX epoch.\r\n  * @example\r\n * ```ts\r\n * let now = polyUtcNow();\r\n * ```\r\n*/\r\nexport function polyUtcNow() {\r\n    return new Date().getTime();\r\n}\r\n//# sourceMappingURL=date.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { EMPTY } from \"../internal/constants\";\r\nfunction _createTrimFn(exp) {\r\n    return function _doTrim(value) {\r\n        if (isNullOrUndefined(value)) {\r\n            throwTypeError(\"strTrim called [\" + dumpObj(value) + \"]\");\r\n        }\r\n        if (value && value.replace) {\r\n            value = value.replace(exp, EMPTY);\r\n        }\r\n        return value;\r\n    };\r\n}\r\n/**\r\n * The trim() method removes whitespace from both ends of a string and returns a new string,\r\n * without modifying the original string. Whitespace in this context is all the whitespace\r\n * characters (space, tab, no-break space, etc.) and all the line terminator characters\r\n * (LF, CR, etc.).\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The string value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from both its beginning and end.\r\n * If neither the beginning or end of str has any whitespace, a new string is still returned (essentially\r\n * a copy of str), with no exception being thrown.\r\n * To return a new string with whitespace trimmed from just one end, use `strTrimStart()` or `strTrimEnd()`.\r\n */\r\nexport const polyStrTrim = _createTrimFn(/^\\s+|(?=\\s)\\s+$/g);\r\n/**\r\n * The `polyStrTrimStart()` method removes whitespace from the beginning of a string.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its beginning (left side).\r\n * If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const polyStrTrimStart = _createTrimFn(/^\\s+/g);\r\n/**\r\n * The `polyStrTrimEnd()` method removes whitespace from the end of a string.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its end (right side).\r\n * If the end of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const polyStrTrimEnd = _createTrimFn(/(?=\\s)\\s+$/g);\r\n//# sourceMappingURL=trim.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { polyStrTrim, polyStrTrimEnd, polyStrTrimStart } from \"../polyfills/trim\";\r\n/**\r\n * The trim() method removes whitespace from both ends of a string and returns a new string,\r\n * without modifying the original string. Whitespace in this context is all the whitespace\r\n * characters (space, tab, no-break space, etc.) and all the line terminator characters\r\n * (LF, CR, etc.).\r\n * @group String\r\n * @param value - The string value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from both its beginning and end.\r\n * If neither the beginning or end of str has any whitespace, a new string is still returned (essentially\r\n * a copy of str), with no exception being thrown.\r\n * To return a new string with whitespace trimmed from just one end, use `strTrimStart()` or `strTrimEnd()`.\r\n */\r\nexport const strTrim = _unwrapFunctionWithPoly(\"trim\", StrProto, polyStrTrim);\r\n/**\r\n * The `strTrimStart()` method removes whitespace from the beginning of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its beginning (left side).\r\n * If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimStart = _unwrapFunctionWithPoly(\"trimStart\", StrProto, polyStrTrimStart);\r\n/**\r\n * Alias for `strTrimStart()` method removes whitespace from the beginning of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its beginning (left side).\r\n * If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimLeft = strTrimStart;\r\n/**\r\n * The `strTrimEnd()` method removes whitespace from the end of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its end (right side).\r\n * If the end of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimEnd = _unwrapFunctionWithPoly(\"trimEnd\", StrProto, polyStrTrimEnd);\r\n/**\r\n * Alias for `strTrimEnd()` method removes whitespace from the end of a string.\r\n * @group String\r\n * @param value - The value to be trimmed.\r\n * @returns A new string representing str stripped of whitespace from its end (right side).\r\n * If the end of str has no whitespace, a new string is still returned (essentially a copy of str),\r\n * with no exception being thrown.\r\n */\r\nexport const strTrimRight = strTrimEnd;\r\n//# sourceMappingURL=trim.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The strUpper() method returns the calling string value converted to uppercase.\r\n * (the value will be converted to a string if it isn't one).\r\n * @since 0.9.0\r\n * @group String\r\n * @group Conversion\r\n * @param value - The string value to be converted to uppercase.\r\n * @return A new string representing the calling string converted to upper case.\r\n * @throws TypeError - When called on null or undefined.\r\n * @example\r\n * ```ts\r\n * strUpper(\"Hello\");       // HELLO\r\n * strUpper(\"darkness\");    // DARKNESS\r\n *\r\n * strUpper(null);          // Throws TypeError\r\n * strUpper(undefined);     // Throws TypeError\r\n * ```\r\n */\r\nexport const strUpper = _unwrapFunction(\"toUpperCase\", StrProto);\r\n/**\r\n * The strLower() method returns the value of the string converted to lower case.\r\n * strLower() does not affect the value of the string str itself.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Conversion\r\n * @return A new string representing the calling string converted to lower case.\r\n * @throws TypeError - When called on null or undefined.\r\n * @example\r\n * ```ts\r\n * strLower(\"Hello\");       // hello\r\n * strLower(\"darkness\");    // darkness\r\n *\r\n * strLower(null);          // Throws TypeError\r\n * strLower(undefined);     // Throws TypeError\r\n * ```\r\n */\r\nexport const strLower = _unwrapFunction(\"toLowerCase\", StrProto);\r\n//# sourceMappingURL=upper_lower.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { MathCls } from \"../internal/constants\";\r\n/**\r\n * The `mathFloor()` function returns the largest integer less than or equal to a given number.\r\n * @group Math\r\n * @param x - A number\r\n * @returns A number representing the largest integer less than or equal to the specified number.\r\n */\r\nexport const mathFloor = MathCls.floor;\r\n/**\r\n * The `mathCeil()` function always rounds a number up to the next largest integer.\r\n * @group Math\r\n * @param x - A number\r\n * @returns The smallest integer greater than or equal to the given number.\r\n */\r\nexport const mathCeil = MathCls.ceil;\r\n//# sourceMappingURL=floor.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { MathCls } from \"../internal/constants\";\r\nimport { mathCeil, mathFloor } from \"./floor\";\r\nconst _mathTrunc = MathCls.trunc;\r\n/**\r\n * The `mathTrunc()` function returns the integer part of a number by removing any fractional digits.\r\n * Unlike the other three Math methods: Math.floor(), Math.ceil() and Math.round(), the way `mathTrunc()`\r\n * works is very simple. It truncates (cuts off) the dot and the digits to the right of it, no matter\r\n * whether the argument is a positive or negative number.\r\n * The argument passed to this method will be converted to number type implicitly.\r\n * @group Math\r\n * @param value - The value to be truncated\r\n * @returns The integer path of the given number\r\n */\r\nexport const mathTrunc = _mathTrunc ? _mathTrunc : polyMathTrunc;\r\n/**\r\n * The `mathTrunc()` function returns the integer part of a number by removing any fractional digits.\r\n * Unlike the other three Math methods: Math.floor(), Math.ceil() and Math.round(), the way `mathTrunc()`\r\n * works is very simple. It truncates (cuts off) the dot and the digits to the right of it, no matter\r\n * whether the argument is a positive or negative number.\r\n * The argument passed to this method will be converted to number type implicitly.\r\n * @group Polyfill\r\n * @group Math\r\n * @param value - The value to be truncated\r\n * @returns The integer path of the given number\r\n */\r\nexport function polyMathTrunc(value) {\r\n    let theValue = +value;\r\n    return (theValue > 0 ? mathFloor : mathCeil)(theValue);\r\n}\r\n//# sourceMappingURL=trunc.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwRangeError } from \"../helpers/throw\";\r\nimport { mathTrunc } from \"./trunc\";\r\n/**\r\n * Convert the provided value to an integer\r\n * @group Math\r\n * @param value - The value to be converted to an integer.\r\n * @param throwInfinity - [Optional] Throws RangeError if value is Infinity, defaults to false\r\n * @returns The value converted to an integer\r\n */\r\nexport function mathToInt(value, throwInfinity) {\r\n    let result = +value;\r\n    if (result == Infinity && throwInfinity) {\r\n        throwRangeError(\"invalid value [\" + dumpObj(value) + \"]\");\r\n    }\r\n    return result !== result || result === 0 ? 0 : mathTrunc(result);\r\n}\r\n//# sourceMappingURL=to_int.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined, isString } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwRangeError, throwTypeError } from \"../helpers/throw\";\r\nimport { EMPTY, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { mathToInt } from \"../math/to_int\";\r\nimport { asString } from \"./as_string\";\r\n/**\r\n * The `strRepeat()` method constructs and returns a new string which contains the\r\n * specified number of copies of the string on which it was called, concatenated\r\n * together.\r\n * @group String\r\n * @param value - The value to be repeated\r\n * @param count - An integer between 0 and +Infinity, indicating the number of times to repeat the string.\r\n * @returns A new string containing the specified number of copies of the given string.\r\n * @throws RangeError: repeat count must be non-negative.\r\n * @throws RangeError: repeat count must be less than infinity and not overflow maximum string size.\r\n */\r\nexport const strRepeat = _unwrapFunctionWithPoly(\"repeat\", StrProto, polyStrRepeat);\r\n/**\r\n * The `strRepeat()` method constructs and returns a new string which contains the\r\n * specified number of copies of the string on which it was called, concatenated\r\n * together.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be repeated\r\n * @param count - An integer between 0 and +Infinity, indicating the number of times to repeat the string.\r\n * @returns A new string containing the specified number of copies of the given string.\r\n * @throws RangeError: repeat count must be non-negative.\r\n * @throws RangeError: repeat count must be less than infinity and not overflow maximum string size.\r\n */\r\nexport function polyStrRepeat(value, count) {\r\n    if (isNullOrUndefined(value)) {\r\n        throwTypeError(\"can't convert [\" + dumpObj(value) + \"]\");\r\n    }\r\n    count = mathToInt(count, true);\r\n    if (count < 0) {\r\n        throwRangeError(\"invalid count must be >= 0 && < Infinity\");\r\n    }\r\n    let pad = isString(value) ? value : asString(value);\r\n    let result = EMPTY;\r\n    for (; count > 0; (count >>>= 1) && (pad += pad)) {\r\n        if (count & 1) {\r\n            result += pad;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=repeat.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isNullOrUndefined } from \"../helpers/base\";\r\nimport { EMPTY, LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { mathCeil } from \"../math/floor\";\r\nimport { mathToInt } from \"../math/to_int\";\r\nimport { asString } from \"./as_string\";\r\nimport { strRepeat } from \"./repeat\";\r\nimport { strSubstring } from \"./substring\";\r\nfunction _padValue(value, targetLength, padString) {\r\n    let result = EMPTY;\r\n    targetLength = mathToInt(targetLength, true);\r\n    targetLength >>= 0;\r\n    let len = value[LENGTH];\r\n    if (len < targetLength) {\r\n        result = isNullOrUndefined(padString) ? \" \" : asString(padString);\r\n        targetLength = targetLength - len;\r\n        if (targetLength > result[LENGTH]) {\r\n            result = strRepeat(result, mathCeil(targetLength / result[LENGTH]));\r\n        }\r\n        if (result[LENGTH] > targetLength) {\r\n            result = strSubstring(result, 0, targetLength);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * The `strPadStart()` method pads the current string with another string (multiple times, if needed)\r\n * until the resulting string reaches the given length. The padding is applied from the start of the\r\n * current string. This will use any native implementation if available, but will fall back to the\r\n * provided polyfill for runtimes that don't support [padStart](https://caniuse.com/?search=padStart)\r\n * @group String\r\n * @param value - The value to be padded\r\n * @param targetLength - The length of the resulting string once the current str has been padded.\r\n * If the value is less than str.length, then str is returned as-is.\r\n * @param padString - The string to pad the current str with. If padString is too long to stay within\r\n * the targetLength, it will be truncated from the end. The default value is the unicode \"space\"\r\n * character (U+0020).\r\n */\r\nexport const strPadStart = _unwrapFunctionWithPoly(\"padStart\", StrProto, polyStrPadStart);\r\n/**\r\n * The `strPadEnd()` method pads the current string with a given string (repeated, if needed) so that\r\n * the resulting string reaches a given length. The padding is applied from the end of the current string.\r\n * @group String\r\n * @param value - The value to be padded\r\n * @param targetLength - The length of the resulting string once the current `value`` has been padded. If\r\n * the `targetLength` is lower than `value.length`, the current string will be returned as-is.\r\n * @param padString - The string to pad the current `value` with. If padString is too long to stay within\r\n * `targetLength`, it will be truncated: for left-to-right languages the left-most part and for right-to-left\r\n * languages the right-most will be applied. The default value for this parameter is \" \" (U+0020).\r\n * @returns A String of the specified targetLength with the padString applied at the end of the current str.\r\n */\r\nexport const strPadEnd = _unwrapFunctionWithPoly(\"padEnd\", StrProto, polyStrPadEnd);\r\n/**\r\n * The `strPadStart()` method pads the current string with another string (multiple times, if needed)\r\n * until the resulting string reaches the given length. The padding is applied from the start of the\r\n * current string. Provided for runtimes that don't support see [padStart](https://caniuse.com/?search=padStart)\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be padded\r\n * @param targetLength - The length of the resulting string once the current str has been padded.\r\n * If the value is less than str.length, then str is returned as-is.\r\n * @param padString - The string to pad the current str with. If padString is too long to stay within\r\n * the targetLength, it will be truncated from the end. The default value is the unicode \"space\"\r\n * character (U+0020).\r\n */\r\nexport function polyStrPadStart(value, targetLength, padString) {\r\n    return _padValue(value, targetLength, padString) + value;\r\n}\r\n/**\r\n * The `strPadEnd()` method pads the current string with a given string (repeated, if needed) so that\r\n * the resulting string reaches a given length. The padding is applied from the end of the current string.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be padded\r\n * @param targetLength - The length of the resulting string once the current `value`` has been padded. If\r\n * the `targetLength` is lower than `value.length`, the current string will be returned as-is.\r\n * @param padString - The string to pad the current `value` with. If padString is too long to stay within\r\n * `targetLength`, it will be truncated. The default value for this parameter is \" \" (U+0020).\r\n * @returns A String of the specified targetLength with the padString applied at the end of the current str.\r\n */\r\nexport function polyStrPadEnd(value, targetLength, padString) {\r\n    return value + _padValue(value, targetLength, padString);\r\n}\r\n//# sourceMappingURL=pad.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { fnCall } from \"../funcs/fnCall\";\r\nimport { getWindow, hasWindow } from \"../helpers/environment\";\r\nimport { CONSTRUCTOR, FUNCTION, ObjClass, OBJECT, PROTOTYPE } from \"../internal/constants\";\r\nimport { objHasOwnProperty } from \"./has_own_prop\";\r\nimport { objGetPrototypeOf } from \"./object\";\r\n// Use to cache the result of Object.cont\r\nlet _fnToString;\r\nlet _objCtrFnString;\r\nlet _gblWindow;\r\n/**\r\n * Checks to see if the past value is a plain object (not a class/array) value.\r\n * Object are considered to be \"plain\" if they are created with no prototype `Object.create(null)`\r\n * or by using the Object global (native) function, all other \"objects\" ar\r\n * @since 0.4.4\r\n * @group Type Identity\r\n * @group Object\r\n * @param value - The value to check\r\n * @returns true if `value` is a normal plain object\r\n * @example\r\n * ```ts\r\n * console.log(isPlainObject({ 0: 'a', 1: 'b', 2: 'c' }));      // true\r\n * console.log(isPlainObject({ 100: 'a', 2: 'b', 7: 'c' }));    // true\r\n * console.log(isPlainObject(objCreate(null)));                 // true\r\n *\r\n * const myObj = objCreate({}, {\r\n *   getFoo: {\r\n *     value() { return this.foo; }\r\n *   }\r\n * });\r\n * myObj.foo = 1;\r\n * console.log(isPlainObject(myObj));                   // true\r\n *\r\n * console.log(isPlainObject(['a', 'b', 'c']));         // false\r\n * console.log(isPlainObject(new Date()));              // false\r\n * console.log(isPlainObject(new Error(\"An Error\")));   // false\r\n * console.log(isPlainObject(null));                    // false\r\n * console.log(isPlainObject(undefined));               // false\r\n * console.log(isPlainObject(\"null\"));                  // false\r\n * console.log(isPlainObject(\"undefined\"));             // false\r\n * console.log(isPlainObject(\"1\"));                     // false\r\n * console.log(isPlainObject(\"aa\"));                    // false\r\n * ```\r\n */\r\nexport function isPlainObject(value) {\r\n    if (!value || typeof value !== OBJECT) {\r\n        return false;\r\n    }\r\n    if (!_gblWindow) {\r\n        // Lazily cache the current global window value and default it to \"true\" (so we bypass this check in the future)\r\n        _gblWindow = hasWindow() ? getWindow() : true;\r\n    }\r\n    let result = false;\r\n    if (value !== _gblWindow) {\r\n        if (!_objCtrFnString) {\r\n            // Lazily caching what the runtime reports as the object function constructor (as a string)\r\n            // Using an current function lookup to find what this runtime calls a \"native\" function\r\n            _fnToString = Function[PROTOTYPE].toString;\r\n            _objCtrFnString = fnCall(_fnToString, ObjClass);\r\n        }\r\n        try {\r\n            let proto = objGetPrototypeOf(value);\r\n            // No prototype so looks like an object created with Object.create(null)\r\n            result = !proto;\r\n            if (!result) {\r\n                if (objHasOwnProperty(proto, CONSTRUCTOR)) {\r\n                    proto = proto[CONSTRUCTOR];\r\n                }\r\n                result = proto && typeof proto === FUNCTION && _fnToString.call(proto) === _objCtrFnString;\r\n            }\r\n        }\r\n        catch (ex) {\r\n            // Something went wrong, so it's not an object we are playing with\r\n        }\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=is_plain_object.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { arrForEach } from \"../array/forEach\";\r\nimport { fnCall } from \"../funcs/fnCall\";\r\nimport { isArray, isDate, isNullOrUndefined, isPrimitiveType } from \"../helpers/base\";\r\nimport { FUNCTION, NULL_VALUE, OBJECT } from \"../internal/constants\";\r\nimport { objDefine } from \"./define\";\r\nimport { isPlainObject } from \"./is_plain_object\";\r\n/**\r\n * @internal\r\n * @ignore\r\n * Generic Object deep copy handler which creates a new plain object and copies enumerable properties from\r\n * the source to the new target plain object. The source object does not have to be a plain object.\r\n * @param details - The details object for the current property being copied\r\n * @returns true if the handler processed the field.\r\n */\r\nconst _defaultDeepCopyHandler = (details) => {\r\n    // Make sure we at least copy plain objects\r\n    details.value && plainObjDeepCopyHandler(details);\r\n    // Always return true so that the iteration completes\r\n    return true;\r\n};\r\n/**\r\n * @internal\r\n * @ignore\r\n * The ordered default deep copy handlers\r\n */\r\nconst defaultDeepCopyHandlers = [\r\n    arrayDeepCopyHandler,\r\n    plainObjDeepCopyHandler,\r\n    functionDeepCopyHandler,\r\n    dateDeepCopyHandler\r\n];\r\n/**\r\n * @internal\r\n * @ignore\r\n * Helper function used for detecting and handling recursive properties\r\n * @param visitMap - The current map of objects that have been visited\r\n * @param source - The value (object) to be copied\r\n * @param newPath - The new access path from the origin to the current property\r\n * @param cb - The callback function to call if the current object has not already been processed.\r\n * @returns The new deep copied property, may be incomplete as the object is recursive and is still in the process of being copied\r\n */\r\nfunction _getSetVisited(visitMap, source, newPath, cb) {\r\n    let theEntry;\r\n    arrForEach(visitMap, (entry) => {\r\n        if (entry.k === source) {\r\n            theEntry = entry;\r\n            return -1;\r\n        }\r\n    });\r\n    if (!theEntry) {\r\n        // Add the target to the visit map so that deep nested objects refer to the single instance\r\n        // Even if we have not finished processing it yet.\r\n        theEntry = { k: source, v: source };\r\n        visitMap.push(theEntry);\r\n        // Now call the copy callback so that it populates the target\r\n        cb(theEntry);\r\n    }\r\n    return theEntry.v;\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper which performs the recursive deep copy\r\n * @param visitMap - The current map of objects that have been visited\r\n * @param value - The value being copied\r\n * @param ctx - The current copy context\r\n * @param key - [Optional] the current `key` for the value from the source object\r\n * @returns The new deep copied instance of the value.\r\n */\r\nfunction _deepCopy(visitMap, value, ctx, key) {\r\n    let userHandler = ctx.handler;\r\n    let newPath = ctx.path ? (key ? ctx.path.concat(key) : ctx.path) : [];\r\n    let newCtx = {\r\n        handler: ctx.handler,\r\n        src: ctx.src,\r\n        path: newPath\r\n    };\r\n    const theType = typeof value;\r\n    let isPlain = false;\r\n    let isPrim = false;\r\n    if (value && theType === OBJECT) {\r\n        isPlain = isPlainObject(value);\r\n    }\r\n    else {\r\n        isPrim = value === NULL_VALUE || isPrimitiveType(theType);\r\n    }\r\n    let details = {\r\n        type: theType,\r\n        isPrim: isPrim,\r\n        isPlain: isPlain,\r\n        value: value,\r\n        result: value,\r\n        path: newPath,\r\n        origin: ctx.src,\r\n        copy: (source, newKey) => {\r\n            return _deepCopy(visitMap, source, newKey ? newCtx : ctx, newKey);\r\n        },\r\n        copyTo: (target, source) => {\r\n            return _copyProps(visitMap, target, source, newCtx);\r\n        }\r\n    };\r\n    if (!details.isPrim) {\r\n        return _getSetVisited(visitMap, value, newPath, (newEntry) => {\r\n            // Use an accessor to set the new value onto the new entry\r\n            objDefine(details, \"result\", {\r\n                g: function () {\r\n                    return newEntry.v;\r\n                },\r\n                s: function (newValue) {\r\n                    newEntry.v = newValue;\r\n                }\r\n            });\r\n            let idx = 0;\r\n            let handler = userHandler;\r\n            while (!fnCall(handler || (idx < defaultDeepCopyHandlers.length ? defaultDeepCopyHandlers[idx++] : _defaultDeepCopyHandler), ctx, details)) {\r\n                handler = NULL_VALUE;\r\n            }\r\n        });\r\n    }\r\n    // Allow the user handler to override the provided value\r\n    if (userHandler && fnCall(userHandler, ctx, details)) {\r\n        return details.result;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * @internal\r\n * @ignore\r\n * Internal helper to copy all of the enumerable properties from the source object to the new target object\r\n * @param visitMap - The current map of objects that have been visited\r\n * @param target - The target object to copy the properties to.\r\n * @param source - The source object to copy the properties from.\r\n * @param ctx - The current deep copy context\r\n * @returns The populated target object\r\n */\r\nfunction _copyProps(visitMap, target, source, ctx) {\r\n    if (!isNullOrUndefined(source)) {\r\n        // Copy all properties (not just own properties)\r\n        for (const key in source) {\r\n            // Perform a deep copy of the object\r\n            target[key] = _deepCopy(visitMap, source[key], ctx, key);\r\n        }\r\n    }\r\n    return target;\r\n}\r\n/**\r\n * Object helper to copy all of the enumerable properties from the source object to the target, the\r\n * properties are copied via {@link objDeepCopy}. Automatic handling of recursive properties was added in v0.4.4\r\n * @group Object\r\n * @param target - The target object to populated\r\n * @param source - The source object to copy the properties from\r\n * @param handler - An optional callback that lets you provide / overide the deep cloning (Since 0.4.4)\r\n * @returns The target object\r\n * @example\r\n * ```ts\r\n * let a: any = { a: 1 };\r\n * let b: any = { b: 2, d: new Date(), e: new TestClass(\"Hello Darkness\") };\r\n * a.b = b;        // { a: 1, b: { b: 2} }\r\n * b.a = a;        // { a: 1, b: { b: 2, a: { a: 1, { b: 2, a: ... }}}}\r\n *\r\n * function copyHandler(details: IObjDeepCopyHandlerDetails) {\r\n *     // details.origin === a\r\n *     // details.path[] is the path to the current value\r\n *     if (details.value && isDate(details.value)) {\r\n *         // So for the date path === [ \"b\", \"d\" ] which represents\r\n *         // details.origin[\"b\"][\"d\"] === The Date\r\n *\r\n *         // Create a clone the Date object and set as the \"newValue\"\r\n *         details.value = new Date(details.value.getTime());\r\n *\r\n *         // Return true to indicate that we have \"handled\" the conversion\r\n *         // See objDeepCopy example for just reusing the original value (just don't replace details.value)\r\n *         return true;\r\n *     }\r\n *\r\n *     return false;\r\n * }\r\n *\r\n * let c: any = objCopyProps({}, a, copyHandler);\r\n *\r\n * assert.notEqual(a, c, \"check a and c are not the same\");\r\n * assert.ok(c !== c.b.a, \"The root object won't be the same for the target reference as are are copying properties to our target\");\r\n * assert.ok(c.b === c.b.a.b, \"Check that the 2 'b' references are the same object\");\r\n * assert.ok(c.b.a === c.b.a.b.a, \"Check that the 2 'a' references are the same object\");\r\n * assert.ok(c.b.d === c.b.a.b.d, \"Check that the 2 'd' references are the same object\");\r\n * assert.ok(isDate(c.b.d), \"The copied date is still real 'Date' instance\");\r\n * assert.notEqual(c.b.d, a.b.d, \"And the copied date is not the same as the original\");\r\n * assert.equal(c.b.d.getTime(), a.b.d.getTime(), \"But the dates are the same\");\r\n *\r\n * assert.ok(isObject(c.b.d), \"The copied date is now an object\");\r\n * ```\r\n */\r\nexport function objCopyProps(target, source, handler) {\r\n    let ctx = {\r\n        handler: handler,\r\n        src: source,\r\n        path: []\r\n    };\r\n    return _copyProps([], target, source, ctx);\r\n}\r\n/**\r\n * Performs a deep copy of the source object, this is designed to work with base (plain) objects, arrays and primitives\r\n * if the source object contains class objects they will either be not cloned or may be considered non-operational after\r\n * performing a deep copy. ie. This is performing a deep copy of the objects properties so that altering the copy will\r\n * not mutate the source object hierarchy.\r\n * Automatic handling of recursive properties was added in v0.4.4.\r\n * @group Object\r\n * @group Object - Deep Copy\r\n * @param source - The source object to be copied\r\n * @param handler - An optional callback that lets you provide / overide the deep cloning (Since 0.4.4)\r\n * @return A new object which contains a deep copy of the source properties\r\n * @example\r\n * ```ts\r\n * let a: any = { a: 1 };\r\n * let b: any = { b: 2, d: new Date(), e: new TestClass(\"Hello Darkness\") };\r\n * a.b = b;        // { a: 1, b: { b: 2} }\r\n * b.a = a;        // { a: 1, b: { b: 2, a: { a: 1, { b: 2, a: ... }}}}\r\n *\r\n * function copyHandler(details: IObjDeepCopyHandlerDetails) {\r\n *     // details.origin === a\r\n *     // details.path[] is the path to the current value\r\n *     if (details.value && isDate(details.value)) {\r\n *         // So for the date path === [ \"b\", \"d\" ] which represents\r\n *         // details.origin[\"b\"][\"d\"] === The Date\r\n *\r\n *         // Return true to indicate that we have \"handled\" the conversion\r\n *         // Which in this case will reuse the existing instance (as we didn't replace details.value)\r\n *         // See objCopyProps example for replacing the Date instance\r\n *         return true;\r\n *     }\r\n *\r\n *     return false;\r\n * }\r\n *\r\n * let c: any = objDeepCopy(a, copyHandler);\r\n *\r\n * assert.notEqual(a, c, \"check a and c are not the same\");\r\n * assert.ok(c === c.b.a, \"The root object won't be the same for the target reference\");\r\n * assert.ok(c.b === c.b.a.b, \"Check that the 2 'b' references are the same object\");\r\n * assert.ok(c.b.a === c.b.a.b.a, \"Check that the 2 'a' references are the same object\");\r\n * assert.ok(c.b.d === c.b.a.b.d, \"Check that the 2 'd' references are the same object\");\r\n * assert.ok(isDate(c.b.d), \"The copied date is still real 'Date' instance\");\r\n * assert.equal(c.b.d, a.b.d, \"And the copied date is the original date\");\r\n * assert.equal(c.b.d.getTime(), a.b.d.getTime(), \"But the dates are the same\");\r\n * assert.ok(isObject(c.b.d), \"The copied date is now an object\");\r\n * assert.ok(!isError(c.b.e), \"The copied error is no longer a real 'Error' instance\");\r\n * assert.ok(isObject(c.b.e), \"The copied error is now an object\");\r\n * assert.equal(42, c.b.e.value, \"Expect that the local property was copied\");\r\n * ```\r\n */\r\nexport function objDeepCopy(source, handler) {\r\n    let ctx = {\r\n        handler: handler,\r\n        src: source\r\n    };\r\n    return _deepCopy([], source, ctx);\r\n}\r\n/**\r\n * Deep copy handler to identify and copy arrays.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function arrayDeepCopyHandler(details) {\r\n    let value = details.value;\r\n    if (isArray(value)) {\r\n        // Assign the \"result\" value before performing any additional deep Copying, so any recursive object get a reference to this instance\r\n        let target = details.result = [];\r\n        target.length = value.length;\r\n        // Copying all properties as arrays can contain non-indexed based properties\r\n        details.copyTo(target, value);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Deep copy handler to identify and copy Date instances.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function dateDeepCopyHandler(details) {\r\n    let value = details.value;\r\n    if (isDate(value)) {\r\n        details.result = new Date(value.getTime());\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Deep copy handler to identify and copy functions. This handler just returns the original\r\n * function so the original function will be assigned to any new deep copied instance.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function functionDeepCopyHandler(details) {\r\n    if (details.type === FUNCTION) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Deep copy handler to identify and copy plain objects.\r\n * @since 0.4.4\r\n * @group Object - Deep Copy\r\n * @param details - The details object for the current property being copied\r\n * @returns `true` if the current value is a function otherwise `false`\r\n */\r\nexport function plainObjDeepCopyHandler(details) {\r\n    let value = details.value;\r\n    if (value && details.isPlain) {\r\n        // Assign the \"result\" value before performing any additional deep Copying, so any recursive object get a reference to this instance\r\n        let target = details.result = {};\r\n        details.copyTo(target, value);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n//# sourceMappingURL=copy.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { LENGTH } from \"../internal/constants\";\r\nimport { _unwrapProp } from \"../internal/unwrapFunction\";\r\n/**\r\n * Helper to return the length value of an object, this will return the value\r\n * of the \"length\" property. Generally used to return the length of a string or array.\r\n *\r\n * @since 0.4.2\r\n * @group Array\r\n * @group String\r\n * @group String\r\n * @group Array\r\n * @group Object\r\n * @param value - The value to return the length property from, must contain a `length` property\r\n * @example\r\n * ```ts\r\n * getLength(\"\");               // returns 0\r\n * getLength(\"Hello World\");    // returns 11\r\n * getLength([]);               // returns 0;\r\n * getLength([0, 1, 2, 3]);     // returns 4;\r\n * getLength({ length: 42});    // returns 42\r\n * getLength({ length: () => 53; }); // returns the function that if called would return 53\r\n * ```\r\n */\r\nexport const getLength = _unwrapProp(LENGTH);\r\n//# sourceMappingURL=length.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { getKnownSymbol } from \"../symbol/symbol\";\r\n/**\r\n * The `polyStrSymSplit()` splits a string into substrings using the [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n * method from the splitter object to provide custom behavior. It uses {@link getKnownSymbol}\r\n * to get the {@link WellKnownSymbols.split} symbol which will return the polyfill symbol value.\r\n * @since 0.9.1\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The string value to be split into substrings.\r\n * @param splitter - The object which contains a Symbol.split method, Omitting splitter or passing\r\n * an object that doesn't contain a Symbol.split causes it to return an array with the calling\r\n * string as a single element.\r\n * @param limit - A non-negative integer specifying a limit on the number of substrings to be\r\n * included in the array. If provided, splits the string at each occurrence of the specified\r\n * separator, but stops when limit entries have been placed in the array. Any leftover text is\r\n * not included in the array at all.\r\n * - The array may contain fewer entries than limit if the end of the string is reached before\r\n * the limit is reached.\r\n * - If limit is 0, [] is returned.\r\n * @return An Array of strings, split at each point where the separator occurs in the given string.\r\n * @example\r\n * ```ts\r\n * const splitByNumber = {\r\n *   [getKnownSymbol<typeof Symbol.split>(WellKnownSymbols.split)]: (str: string) => {\r\n *     let num = 1;\r\n *     let pos = 0;\r\n *     const result = [];\r\n *     while (pos < str.length) {\r\n *       const matchPos = strIndexOf(str, asString(num), pos);\r\n *       if (matchPos === -1) {\r\n *         result.push(strSubstring(str, pos));\r\n *         break;\r\n *       }\r\n *       result.push(strSubstring(str, pos, matchPos));\r\n *       pos = matchPos + asString(num).length;\r\n *       num++;\r\n *     }\r\n *     return result;\r\n *   }\r\n * };\r\n *\r\n * const myString = \"a1bc2c5d3e4f\";\r\n * console.log(polyStrSymSplit(myString, splitByNumber)); // [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]\r\n * ```\r\n */\r\nexport function polyStrSymSplit(value, splitter, limit) {\r\n    let splitFn = splitter && splitter[getKnownSymbol(9 /* WellKnownSymbols.split */)];\r\n    return splitFn ? splitFn(value, limit) : [value];\r\n}\r\n//# sourceMappingURL=split.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2023 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\nimport { polyStrSymSplit } from \"../polyfills/split\";\r\nimport { hasSymbol } from \"../symbol/symbol\";\r\n/**\r\n * The `strSplit()` splits a string into substrings using the pattern and divides a String\r\n * into an ordered list of substrings by searching for the pattern, puts these substrings\r\n * into an array, and returns the array.\r\n * @since 0.9.1\r\n * @group String\r\n * @param value - The string value to be split into substrings.\r\n * @param separator - The pattern describing where each split should occur. Can be undefined, a\r\n * string, or an object with a [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n * method (if supported) — the typical example being a regular expression. Omitting separator or\r\n * passing undefined causes strSplit() to return an array with the calling string as a single\r\n * element. All values that are not undefined or objects with a `@@split` method are coerced to strings.\r\n * @param limit - A non-negative integer specifying a limit on the number of substrings to be\r\n * included in the array. If provided, splits the string at each occurrence of the specified\r\n * separator, but stops when limit entries have been placed in the array. Any leftover text is\r\n * not included in the array at all.\r\n * - The array may contain fewer entries than limit if the end of the string is reached before\r\n * the limit is reached.\r\n * - If limit is 0, [] is returned.\r\n * @return An Array of strings, split at each point where the separator occurs in the given string.\r\n * @example\r\n * ```ts\r\n * strSplit(\"Oh brave new world that has such people in it.\", \" \");\r\n * // [ \"Oh\", \"brave\", \"new\", \"world\", \"that\", \"has\", \"such\", \"people\", \"in\", \"it.\" ]\r\n *\r\n * strSplit(\"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\", \",\");\r\n * // [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\r\n * ```\r\n */\r\nexport const strSplit = _unwrapFunction(\"split\", StrProto);\r\n/**\r\n * The `strSymSplit()` splits a string into substrings using the [`Symbol.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split)\r\n * method from the splitter object to provide custom behavior. If the runtime supports symbols\r\n * then the default runtime `split` method will be called, It will use {@link getKnownSymbol}\r\n * to get the {@link WellKnownSymbols.split} symbol which will return the runtime symbol or the\r\n * polyfill symbol when not supported by the runtime.\r\n * @since 0.9.1\r\n * @group String\r\n * @param value - The string value to be split into substrings.\r\n * @param splitter - The object which contains a Symbol.split method, Omitting splitter or passing\r\n * an object that doesn't contain a Symbol.split causes it to return an array with the calling\r\n * string as a single element.\r\n * @param limit - A non-negative integer specifying a limit on the number of substrings to be\r\n * included in the array. If provided, splits the string at each occurrence of the specified\r\n * separator, but stops when limit entries have been placed in the array. Any leftover text is\r\n * not included in the array at all.\r\n * - The array may contain fewer entries than limit if the end of the string is reached before\r\n * the limit is reached.\r\n * - If limit is 0, [] is returned.\r\n * @return An Array of strings, split at each point where the separator occurs in the given string.\r\n * @example\r\n * ```ts\r\n * const splitByNumber = {\r\n *   [Symbol.split]: (str: string) => {\r\n *     let num = 1;\r\n *     let pos = 0;\r\n *     const result = [];\r\n *     while (pos < str.length) {\r\n *       const matchPos = strIndexOf(str, asString(num), pos);\r\n *       if (matchPos === -1) {\r\n *         result.push(strSubstring(str, pos));\r\n *         break;\r\n *       }\r\n *       result.push(strSubstring(str, pos, matchPos));\r\n *       pos = matchPos + asString(num).length;\r\n *       num++;\r\n *     }\r\n *     return result;\r\n *   }\r\n * };\r\n *\r\n * const myString = \"a1bc2c5d3e4f\";\r\n * console.log(strSymSplit(myString, splitByNumber)); // [ \"a\", \"bc\", \"c5d\", \"e\", \"f\" ]\r\n * ```\r\n */\r\nexport const strSymSplit = hasSymbol() ? _unwrapFunction(\"split\", StrProto) : polyStrSymSplit;\r\n//# sourceMappingURL=split.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { INDEX_OF, LAST_INDEX_OF, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunction } from \"../internal/unwrapFunction\";\r\n/**\r\n * The `strIndexOf()` method, given two arguments: the string and a substring to search for, searches\r\n * the entire calling string, and returns the index of the first occurrence of the specified substring.\r\n * Given a thrid argument: a number, the method returns the first occurrence of the specified substring\r\n * at an index greater than or equal to the specified number.\r\n * @group String\r\n * @param value - The value to be checked for the seeach string\r\n * @param searchString - The substring to search for in the value\r\n * @param position - The starting position to search from\r\n * @example\r\n * ```ts\r\n * strIndexOf('hello world', '') // returns 0\r\n * strIndexOf('hello world', '', 0) // returns 0\r\n * strIndexOf('hello world', '', 3) // returns 3\r\n * strIndexOf('hello world', '', 8) // returns 8\r\n *\r\n * // However, if the thrid argument is greater than the length of the string\r\n * strIndexOf('hello world', '', 11) // returns 11\r\n * strIndexOf('hello world', '', 13) // returns 11\r\n * strIndexOf('hello world', '', 22) // returns 11\r\n *\r\n * strIndexOf('Blue Whale', 'Blue')      // returns  0\r\n * strIndexOf('Blue Whale', 'Blute')     // returns -1\r\n * strIndexOf('Blue Whale', 'Whale', 0)  // returns  5\r\n * strIndexOf('Blue Whale', 'Whale', 5)  // returns  5\r\n * strIndexOf('Blue Whale', 'Whale', 7)  // returns -1\r\n * strIndexOf('Blue Whale', '')          // returns  0\r\n * strIndexOf('Blue Whale', '', 9)       // returns  9\r\n * strIndexOf('Blue Whale', '', 10)      // returns 10\r\n * strIndexOf('Blue Whale', '', 11)      // returns 10\r\n * ```\r\n */\r\nexport const strIndexOf = _unwrapFunction(INDEX_OF, StrProto);\r\n/**\r\n * The `strLastIndexOf()` method, given two arguments: the string and a substring to search for, searches\r\n * the entire calling string, and returns the index of the last occurrence of the specified substring.\r\n * Given a third argument: a number, the method returns the last occurrence of the specified substring\r\n * at an index less than or equal to the specified number.\r\n * @group String\r\n * @param value - The value to be checked for the seeach string\r\n * @param searchString - The substring to search for in the value\r\n * @param position - The starting position to search from\r\n * @example\r\n * ```ts\r\n * strLastIndexOf('canal', 'a');     // returns 3\r\n * strLastIndexOf('canal', 'a', 2);  // returns 1\r\n * strLastIndexOf('canal', 'a', 0);  // returns -1\r\n * strLastIndexOf('canal', 'x');     // returns -1\r\n * strLastIndexOf('canal', 'c', -5); // returns 0\r\n * strLastIndexOf('canal', 'c', 0);  // returns 0\r\n * strLastIndexOf('canal', '');      // returns 5\r\n * strLastIndexOf('canal', '', 2);   // returns 2\r\n * ```\r\n */\r\nexport const strLastIndexOf = _unwrapFunction(LAST_INDEX_OF, StrProto);\r\n//# sourceMappingURL=index_of.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isString, isUndefined } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { LENGTH, StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { asString } from \"./as_string\";\r\nimport { strSubstring } from \"./substring\";\r\n/**\r\n * This method lets you determine whether or not a string ends with another string. This method is case-sensitive.\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the end of `value` string.\r\n * @param length - If provided, it is used as the length of `value`. Defaults to value.length.\r\n */\r\nexport const strEndsWith = _unwrapFunctionWithPoly(\"endsWith\", StrProto, polyStrEndsWith);\r\n/**\r\n * This method lets you determine whether or not a string ends with another string. This method is case-sensitive.\r\n * @group Polyfill\r\n * @group String\r\n * @param value - The value to be checked\r\n * @param searchString - The characters to be searched for at the end of `value` string.\r\n * @param length - If provided, it is used as the length of `value`. Defaults to value.length.\r\n */\r\nexport function polyStrEndsWith(value, searchString, length) {\r\n    if (!isString(value)) {\r\n        throwTypeError(\"'\" + dumpObj(value) + \"' is not a string\");\r\n    }\r\n    let searchValue = isString(searchString) ? searchString : asString(searchString);\r\n    let chkLen = searchValue[LENGTH];\r\n    let len = value[LENGTH];\r\n    let end = !isUndefined(length) && length < len ? length : len;\r\n    return strSubstring(value, end - chkLen, end) === searchValue;\r\n}\r\n//# sourceMappingURL=ends_with.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { isRegExp } from \"../helpers/base\";\r\nimport { dumpObj } from \"../helpers/diagnostics\";\r\nimport { throwTypeError } from \"../helpers/throw\";\r\nimport { StrProto } from \"../internal/constants\";\r\nimport { _unwrapFunctionWithPoly } from \"../internal/unwrapFunction\";\r\nimport { asString } from \"./as_string\";\r\nimport { strIndexOf } from \"./index_of\";\r\n/**\r\n * The strIncludes() method performs a __case-sensitive__ search to determine whether one string\r\n * may be found within another string, returning `true` or `false` as appropriate.\r\n *\r\n * This method lets you determine whether or not a string includes another string.\r\n * @since 0.9.0\r\n * @group String\r\n * @param value - The string value to be searched.\r\n * @param searchString - A string to be searched for within the value. Cannot be a regex. All\r\n * values that are not regexes are coerced to strings, so omitting it or passing undefined\r\n * causes `strIncludes()` to search for the string \"undefined\", which is rarely what you want.\r\n * @param position - The position within the string at which to begin searching for searchString. (Defaults to 0.)\r\n * @returns `true` if the search string is found anywhere within the given string value, including\r\n * when searchString is an empty string; otherwise, `false`.\r\n * @throws TypeError If searchString is a regex.\r\n */\r\nexport const strIncludes = _unwrapFunctionWithPoly(\"includes\", StrProto, polyStrIncludes);\r\n/**\r\n * The strContains() method performs a __case-sensitive__ search to determine whether one string\r\n * may be found within another string, returning `true` or `false` as appropriate.\r\n *\r\n * This method lets you determine whether or not a string includes another string.\r\n * @since 0.9.0\r\n * @group String\r\n * @param value - The string value to be searched.\r\n * @param searchString - A string to be searched for within the value. Cannot be a regex. All\r\n * values that are not regexes are coerced to strings, so omitting it or passing undefined\r\n * causes `strContains()` to search for the string \"undefined\", which is rarely what you want.\r\n * @param position - The position within the string at which to begin searching for searchString. (Defaults to 0.)\r\n * @returns `true` if the search string is found anywhere within the given string value, including\r\n * when searchString is an empty string; otherwise, `false`.\r\n * @throws TypeError If searchString is a regex.\r\n */\r\nexport const strContains = strIncludes;\r\n/**\r\n * The polyStrIncludes() method performs a case-sensitive search to determine whether one string\r\n * may be found within another string, returning `true` or `false` as appropriate.\r\n * @since 0.9.0\r\n * @group String\r\n * @group Polyfill\r\n * @param value - The string value to be searched.\r\n * @param searchString - A string to be searched for within the value. Cannot be a regex. All\r\n * values that are not regexes are coerced to strings, so omitting it or passing undefined\r\n * causes `strIncludes()` to search for the string \"undefined\", which is rarely what you want.\r\n * @param position - The position within the string at which to begin searching for searchString. (Defaults to 0.)\r\n * @returns `true` if the search string is found anywhere within the given string value, including\r\n * when searchString is an empty string; otherwise, `false`.\r\n * @throws TypeError If searchString is a regex.\r\n */\r\nexport function polyStrIncludes(value, searchString, position) {\r\n    if (isRegExp(searchString)) {\r\n        throwTypeError(\"'searchString' must not be a regular expression\" + dumpObj(searchString));\r\n    }\r\n    return strIndexOf(value, asString(searchString), position) !== -1;\r\n}\r\n//# sourceMappingURL=includes.js.map","/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\nimport { NULL_VALUE } from \"../internal/constants\";\r\nimport { objDefineProp } from \"../object/define\";\r\nconst REF = \"ref\";\r\nconst UNREF = \"un\" + REF;\r\nconst HAS_REF = \"hasRef\";\r\nconst ENABLED = \"enabled\";\r\n/**\r\n * @ignore\r\n * @internal\r\n * Internal function to create and manage an ITimerHandler implementation, the object returned from this function\r\n * it directly used / returned by the pulic functions used to create timers (idle, interval and timeout)\r\n * @param startTimer - Should the timer be started as part of creating the handler\r\n * @param refreshFn - The function used to create/start or refresh the timer\r\n * @param cancelFn - The function used to cancel the timer.\r\n * @returns The new ITimerHandler instance\r\n */\r\nexport function _createTimerHandler(startTimer, refreshFn, cancelFn) {\r\n    let ref = true;\r\n    let timerId = startTimer ? refreshFn(NULL_VALUE) : NULL_VALUE;\r\n    let theTimerHandler;\r\n    const _unref = () => {\r\n        ref = false;\r\n        timerId && timerId[UNREF] && timerId[UNREF]();\r\n        return theTimerHandler;\r\n    };\r\n    const _ref = () => {\r\n        ref = true;\r\n        timerId && timerId[REF] && timerId[REF]();\r\n        return theTimerHandler;\r\n    };\r\n    const _hasRef = () => {\r\n        if (timerId && timerId[HAS_REF]) {\r\n            return timerId[HAS_REF]();\r\n        }\r\n        return ref;\r\n    };\r\n    const _refresh = () => {\r\n        timerId = refreshFn(timerId);\r\n        if (!ref) {\r\n            _unref();\r\n        }\r\n        return theTimerHandler;\r\n    };\r\n    const _cancel = () => {\r\n        timerId && cancelFn(timerId);\r\n        timerId = NULL_VALUE;\r\n    };\r\n    const _setEnabled = (value) => {\r\n        !value && timerId && _cancel();\r\n        value && !timerId && _refresh();\r\n    };\r\n    theTimerHandler = {\r\n        cancel: _cancel,\r\n        refresh: _refresh,\r\n        [HAS_REF]: _hasRef,\r\n        [REF]: _ref,\r\n        [UNREF]: _unref,\r\n        [ENABLED]: false\r\n    };\r\n    objDefineProp(theTimerHandler, ENABLED, {\r\n        get: () => !!timerId,\r\n        set: _setEnabled\r\n    });\r\n    return {\r\n        h: theTimerHandler,\r\n        dn: () => {\r\n            timerId = NULL_VALUE;\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=handler.js.map"],"names":["target","elms","isUndefined","isArray","fnApply","push","isIterator","isIterable","iterForOf","elm","values","let","idx","theValues","slice","len","LENGTH","ctx","n","objDefine","g","createIterator","_createKeyValueMap","objDeepFreeze","value","ignoreCase","fullMatch","_createRegExp","asString","replace","_all","g1","MATCH_ANY","MATCH_SINGLE","makeIterable","start","end","step","nextValue","theValue","UNDEF_VALUE","theStep","isNullOrUndefined","isDone","callback","timeout","_createTimeoutWith","this","arrSlice","arguments","overrideFn","createSimpleMap","obj1","obj2","obj3","obj4","obj5","obj6","_doExtend","objDeepCopy","_htmlEntityCache","getLazy","&","<",">","DBL_QUOTE","'","match","v","format","result","isString","hex","charCodeAt","toString","strPadStart","strUpper","JSON","stringify","NULL_VALUE","isNumber","e","dumpObj","defValue","isNaN","parseInt","iter","path","parts","strSplit","cnt","length","lp","getPerformance","_hasValue","depth","isDate","getTime","isBoolean","isObject","chkValue","props","arrForEach","prop","propValue","isFunction","valueOf","objKeys","isTruthy","safeGet","isPromiseLike","catch","arg","isDefined","theType","description","noPoly","_symbol","_globalLazyTestHooks","lzy","b","getSymbol","polyNewSymbol","jsName","camelCase","INVALID_JS_NAME","strCamelCase","getProp","setProp","configurable","enumerable","desc","c","s","objDefineProp","_createProp","key","propDescMap","objForEachKey","objDefineProperties","objToString","obj","TypeError","objHasOwn","options","_createDeadline","timedOut","startTime","perfNow","didTimeout","timeRemaining","_maxExecutionTime","elapsedTime","hasIdleCallback","handler","_createTimerHandler","idleId","cancelIdleCallback","requestIdleCallback","dn","deadline","h","scheduleTimeout","_defaultIdleTimeout","self","theArguments","intervalId","clearInterval","setInterval","newValue","_fetchLazyTestHooks","maxTime","lastKey","pop","EMPTY","scream","_convertCase","strLower","count","strSubstring","_symbolFor","polySymbolFor","sym","_symbolKeyFor","polySymbolKeyFor","message","Error","_unsupportedError","createCustomError","undefined","BOOLEAN","FUNCTION","NUMBER","OBJECT","PROTOTYPE","__PROTO__","STRING","UNDEFINED","CONSTRUCTOR","SYMBOL","POLYFILL_TAG","INDEX_OF","LAST_INDEX_OF","DONE","VALUE","NAME","SLICE","ObjClass","Object","ObjProto","StrCls","String","StrProto","MathCls","Math","ArrCls","Array","ArrProto","cb","PRIMITIVE_TYPES","_createIs","_createObjIs","theName","call","isStrictNullOrUndefined","exports","isPrimitiveType","indexOf","isRegExp","isError","then","objGetOwnPropertyDescriptor","getOwnPropertyDescriptor","objHasOwnProperty","hasOwnProperty","polyObjHasOwn","theObject","callbackfn","thisArg","keyType","valueType","completeFn","theMap","throwTypeError","throwRangeError","RangeError","polyObjEntries","_objFreeze","_doNothing","keys","objFreeze","objGetPrototypeOf","createEnumKeyMap","mapClass","entries","_wellKnownSymbolMap","asyncIterator","hasInstance","isConcatSpreadable","iterator","matchAll","search","species","split","toPrimitive","toStringTag","unscopables","GLOBAL_CONFIG_KEY","_globalCfg","_getGlobalValue","globalThis","window","global","_getGlobalConfig","gbl","object","propertyValueDump","stack","name","_arrSlice","_throwMissingFunction","funcName","_unwrapInstFunction","apply","_unwrapFunction","clsProto","clsFn","theFunc","_unwrapFunctionWithPoly","polyFunc","theArgs","min","mathMax","max","strSlice","polyStrSubstr","strStartsWith","searchString","position","searchValue","chkLen","pos","UNIQUE_REGISTRY_ID","_polySymbols","_globalSymbolRegistry","gblCfg","gblSym","k","_wellKnownSymbolCache","theSymbol","registry","newSymbol","regId","polyGetKnownSymbol","knownName","propMap","w","l","get","set","propDesc","lazyValue","safeGetLazy","_cachedGlobal","_cachedWindow","_cachedDocument","_cachedNavigator","_cachedHistory","_isWebWorker","_isNode","lazySafeGetInst","getInst","getGlobal","useCached","getDocument","hasWindow","getWindow","getNavigator","getHistory","process","versions","node","WorkerGlobalScope","_getSymbolValue","hasSymbol","resetCache","getKnownSymbol","next","_iterSymbol","err","iterResult","failed","throw","return","theArray","arrIndexOf","arrMap","fnCall","polyArrIncludes","searchElement","fromIndex","polyArrFind","callbackFn","polyArrFindIndex","index","polyArrFindLast","polyArrFindLastIndex","polyArrFrom","mapFn","from","arrIncludes","fnBind","createFnDeferredProxy","hostFn","theHost","host","funcDefs","isDeferred","targetName","funcDef","as","rp","iterFn","to","_objCreate","objCreate","type","tempFunc","_isProtoArray","objSetPrototypeOf","proto","d","_createCustomError","__","constructor","_safeDefineName","_safeSetName","baseClass","constructCb","errorBase","theBaseClass","orgName","captureFn","captureStackTrace","_this","orgProto","_self","utcNow","Date","now","polyUtcNow","_createTrimFn","exp","polyStrTrim","polyStrTrimStart","polyStrTrimEnd","strTrim","propName","strTrimStart","strTrimEnd","newPrefix","upperWord","_match","_g1","_g2","wordStart","upperPrefix","upperLetter","convertMatch","upperFirst","mathFloor","floor","mathCeil","ceil","mathTrunc","trunc","mathToInt","throwInfinity","Infinity","strRepeat","pad","_padValue","targetLength","padString","_fnToString","_objCtrFnString","_gblWindow","isPlainObject","Function","ex","_defaultDeepCopyHandler","details","plainObjDeepCopyHandler","defaultDeepCopyHandlers","arrayDeepCopyHandler","functionDeepCopyHandler","dateDeepCopyHandler","_deepCopy","visitMap","userHandler","newPath","concat","newCtx","src","isPlain","isPrim","origin","copy","source","newKey","copyTo","_copyProps","_getSetVisited","theEntry","entry","newEntry","objCopyProps","theArg","_perf","perf","escapeRgx","replaceFn","RegExp","_value","theIterator","r","t","polyStrSymSplit","splitter","limit","splitFn","strIndexOf","strIncludes","polyStrIncludes","REF","UNREF","HAS_REF","ENABLED","startTimer","refreshFn","cancelFn","ref","timerId","theTimerHandler","_unref","_refresh","_cancel","cancel","refresh","isArr","setFn","setTimeout","clearFn","clearTimeout","timerFn","_hasIdleCallback"],"mappings":"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"}