{"version":3,"file":"safe_get.js","sourceRoot":"","sources":["../../src/helpers/safe_get.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAU,OAAO,CAAc,EAAW,EAAE,QAAW;IACzD,IAAI,MAAM,GAAG,QAAQ,CAAC;IACtB,IAAI;QACA,MAAM,GAAG,EAAE,EAAE,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACR,aAAa;KAChB;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-utils\r\n * https://github.com/nevware21/ts-utils\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Function to safely execute a callback function, if the function throws the provided default\r\n * value will be returned.\r\n * @since 0.9.5\r\n * @group Safe\r\n * @param cb - Callback function be wrapped with an exception\r\n * @param defValue - The default value to return when an exception is thrown\r\n * @returns The result of the callback function or the default if an exception occurred calling the callback\r\n * function.\r\n * @example\r\n * ```ts\r\n * let theExpression = \"{ invalid: json value\";\r\n *\r\n * let result = safeGet(() => {\r\n *     return JSON.parse(theExpression);\r\n * }, {});\r\n *\r\n * // result === {};\r\n * ```\r\n */\r\nexport function safeGet<T = boolean>(cb: () => T, defValue: T): T {\r\n    let result = defValue;\r\n    try {\r\n        result = cb();\r\n    } catch (e) {\r\n        // Do nothing\r\n    }\r\n\r\n    return result;\r\n}\r\n"]}