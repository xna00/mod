{"version":3,"sources":["../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/vscode-jsonrpc/lib/common/messages.js","../node_modules/vscode-jsonrpc/lib/common/linkedMap.js","../node_modules/vscode-jsonrpc/lib/common/disposable.js","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js","../node_modules/vscode-jsonrpc/lib/common/semaphore.js","../node_modules/vscode-jsonrpc/lib/common/messageReader.js","../node_modules/vscode-jsonrpc/lib/common/messageWriter.js","../node_modules/vscode-jsonrpc/lib/common/messageBuffer.js","../node_modules/vscode-jsonrpc/lib/common/connection.js","../node_modules/vscode-jsonrpc/lib/common/api.js","../node_modules/vscode-jsonrpc/lib/browser/ril.js","../node_modules/vscode-jsonrpc/lib/browser/main.js","../node_modules/vscode-jsonrpc/browser.js","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/vscode-languageserver-protocol/lib/common/messages.js","../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js","../node_modules/vscode-languageserver-protocol/lib/common/protocol.js","../node_modules/vscode-languageserver-protocol/lib/common/connection.js","../node_modules/vscode-languageserver-protocol/lib/common/api.js","../node_modules/vscode-languageserver-protocol/lib/browser/main.js","../node_modules/vscode-languageserver/lib/common/semanticTokens.js","../node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js","../node_modules/vscode-languageserver/lib/common/textDocuments.js","../node_modules/vscode-languageserver/lib/common/notebook.js","../node_modules/vscode-languageserver/lib/common/utils/is.js","../node_modules/vscode-languageserver/lib/common/utils/uuid.js","../node_modules/vscode-languageserver/lib/common/progress.js","../node_modules/vscode-languageserver/lib/common/configuration.js","../node_modules/vscode-languageserver/lib/common/workspaceFolder.js","../node_modules/vscode-languageserver/lib/common/callHierarchy.js","../node_modules/vscode-languageserver/lib/common/showDocument.js","../node_modules/vscode-languageserver/lib/common/fileOperations.js","../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js","../node_modules/vscode-languageserver/lib/common/typeHierarchy.js","../node_modules/vscode-languageserver/lib/common/inlineValue.js","../node_modules/vscode-languageserver/lib/common/foldingRange.js","../node_modules/vscode-languageserver/lib/common/inlayHint.js","../node_modules/vscode-languageserver/lib/common/diagnostic.js","../node_modules/vscode-languageserver/lib/common/moniker.js","../node_modules/vscode-languageserver/lib/common/server.js","../node_modules/vscode-languageserver/lib/common/api.js","../node_modules/vscode-languageserver-protocol/browser.js","../node_modules/vscode-languageserver/lib/browser/main.js","../node_modules/vscode-languageserver/browser.js","../../_build/default/jslib/builtin/+mlBytes.js","../../_build/default/jslib/builtin/+bigarray.js","../../_build/default/jslib/builtin/+marshal.js","../../_build/default/jslib/builtin/+unix.js","../../_build/default/jslib/builtin/+stdlib.js","../../_build/default/jslib/builtin/+sys.js","../../_build/default/jslib/builtin/+backtrace.js","../../_build/default/jslib/builtin/+jslib.js","../../_build/default/jslib/builtin/+fail.js","../../_build/default/jslib/builtin/+fs.js","../../_build/default/jslib/builtin/+fs_fake.js","../../_build/default/jslib/builtin/+int64.js","../../_build/default/jslib/builtin/+sync.js","../../_build/default/jslib/builtin/+nat.js","../../_build/default/jslib/builtin/+fs_node.js","../../_build/default/jslib/builtin/+bigstring.js","../../_build/default/jslib/builtin/+md5.js","../../_build/default/jslib/builtin/+ieee_754.js","../../_build/default/jslib/builtin/+obj.js","../../_build/default/jslib/builtin/+effect.js","../../_build/default/jslib/builtin/+array.js","../../_build/default/jslib/builtin/+domain.js","../../_build/default/jslib/builtin/+ints.js","../../_build/default/jslib/builtin/+hash.js","../../_build/default/jslib/builtin/+io.js","../../_build/default/jslib/builtin/+compare.js","../../_build/default/jslib/builtin/+runtime_events.js","../../_build/default/jslib/builtin/+zstd.js","../../_build/default/jslib/builtin/+weak.js","../../_build/default/jslib/builtin/+gc.js","../../_build/default/jslib/builtin/+format.js","../../_build/default/jslib/builtin/+graphics.js","../../_build/default/jslib/builtin/+jslib_js_of_ocaml.js","../../_build/default/jslib/builtin/+lexing.js","../../_build/default/jslib/builtin/+prng.js","../../_build/default/jslib/builtin/+parsing.js","../../_build/default/jslib/builtin/+str.js","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/camlinternalFormatBasics.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/stdlib.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/either.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/sys.ml.in","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/obj.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/type.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/atomic.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/camlinternalLazy.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/lazy.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/seq.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/option.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/result.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/bool.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/char.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/uchar.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/list.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/int.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/bytes.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/string.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/unit.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/marshal.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/array.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/float.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/int32.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/int64.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/nativeint.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/lexing.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/parsing.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/set.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/map.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/stack.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/queue.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/buffer.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/mutex.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/semaphore.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/domain.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/camlinternalFormat.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/printf.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/arg.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/printexc.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/fun.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/gc.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/digest.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/bigarray.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/random.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/hashtbl.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/weak.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/format.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/scanf.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/callback.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/camlinternalOO.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/camlinternalMod.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/ephemeron.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/filename.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/complex.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/in_channel.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/out_channel.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/effect.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ppx_deriving/runtime/ppx_deriving_runtime.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ppx_deriving_yojson/runtime/ppx_deriving_yojson_runtime.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/yojson/codec.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/yojson/common.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/yojson/lexer_utils.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml-compiler/runtime/jsoo_runtime__.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml-compiler/runtime/jsoo_runtime.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/js_of_ocaml__.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/import.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/js.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/dom.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/typed_array.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/file.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/dom_html.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/form.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/xmlHttpRequest.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/worker.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/webSockets.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/webGL.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/regexp.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/url.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/sys_js.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/resizeObserver.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/performanceObserver.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/mutationObserver.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/jstable.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/json.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/cSS.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/dom_events.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/dom_svg.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/eventSource.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/firebug.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/geolocation.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/intersectionObserver.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/js_of_ocaml/intl.ml","../../_build/default/jslib/workspace_root/parsing/token.ml","../../_build/default/jslib/workspace_root/parsing/location.ml","../../_build/default/jslib/workspace_root/parsing/asttypes.ml","../../_build/default/jslib/workspace_root/parsing/longident.ml","../../_build/default/jslib/workspace_root/parsing/syntax.ml","../../_build/default/jslib/workspace_root/parsing/lexer.ml","../../_build/default/jslib/workspace_root/parsing/parser_base.ml","../../_build/default/jslib/workspace_root/parsing/parser_jsx.ml","../../_build/default/jslib/workspace_root/parsing/parser.ml","../../_build/default/jslib/workspace_root/typing/ident.ml","../../_build/default/jslib/workspace_root/typing/path.ml","../../_build/default/jslib/workspace_root/typing/types.ml","../../_build/default/jslib/workspace_root/typing/subst.ml","../../_build/default/jslib/workspace_root/typing/env.ml","../../_build/default/jslib/workspace_root/typing/typed.ml","../../_build/default/jslib/workspace_root/typing/report.ml","../../_build/default/jslib/workspace_root/typing/scope.ml","../../_build/default/jslib/workspace_root/typing/predef.ml","../../_build/default/jslib/workspace_root/typing/infer.ml","../../_build/default/jslib/workspace_root/jslib/main.ml","../../_build/default/jslib/home/runner/work/mod/mod/_opam/lib/ocaml/std_exit.ml","../src/server.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js"],"sourcesContent":["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;\nconst is = require(\"./is\");\n/**\n * Predefined error codes.\n */\nvar ErrorCodes;\n(function (ErrorCodes) {\n    // Defined by JSON RPC\n    ErrorCodes.ParseError = -32700;\n    ErrorCodes.InvalidRequest = -32600;\n    ErrorCodes.MethodNotFound = -32601;\n    ErrorCodes.InvalidParams = -32602;\n    ErrorCodes.InternalError = -32603;\n    /**\n     * This is the start range of JSON RPC reserved error codes.\n     * It doesn't denote a real error code. No application error codes should\n     * be defined between the start and end range. For backwards\n     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`\n     * are left in the range.\n     *\n     * @since 3.16.0\n    */\n    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;\n    /** @deprecated use  jsonrpcReservedErrorRangeStart */\n    ErrorCodes.serverErrorStart = -32099;\n    /**\n     * An error occurred when write a message to the transport layer.\n     */\n    ErrorCodes.MessageWriteError = -32099;\n    /**\n     * An error occurred when reading a message from the transport layer.\n     */\n    ErrorCodes.MessageReadError = -32098;\n    /**\n     * The connection got disposed or lost and all pending responses got\n     * rejected.\n     */\n    ErrorCodes.PendingResponseRejected = -32097;\n    /**\n     * The connection is inactive and a use of it failed.\n     */\n    ErrorCodes.ConnectionInactive = -32096;\n    /**\n     * Error code indicating that a server received a notification or\n     * request before the server has received the `initialize` request.\n     */\n    ErrorCodes.ServerNotInitialized = -32002;\n    ErrorCodes.UnknownErrorCode = -32001;\n    /**\n     * This is the end range of JSON RPC reserved error codes.\n     * It doesn't denote a real error code.\n     *\n     * @since 3.16.0\n    */\n    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;\n    /** @deprecated use  jsonrpcReservedErrorRangeEnd */\n    ErrorCodes.serverErrorEnd = -32000;\n})(ErrorCodes || (exports.ErrorCodes = ErrorCodes = {}));\n/**\n * An error object return in a response in case a request\n * has failed.\n */\nclass ResponseError extends Error {\n    constructor(code, message, data) {\n        super(message);\n        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;\n        this.data = data;\n        Object.setPrototypeOf(this, ResponseError.prototype);\n    }\n    toJson() {\n        const result = {\n            code: this.code,\n            message: this.message\n        };\n        if (this.data !== undefined) {\n            result.data = this.data;\n        }\n        return result;\n    }\n}\nexports.ResponseError = ResponseError;\nclass ParameterStructures {\n    constructor(kind) {\n        this.kind = kind;\n    }\n    static is(value) {\n        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;\n    }\n    toString() {\n        return this.kind;\n    }\n}\nexports.ParameterStructures = ParameterStructures;\n/**\n * The parameter structure is automatically inferred on the number of parameters\n * and the parameter type in case of a single param.\n */\nParameterStructures.auto = new ParameterStructures('auto');\n/**\n * Forces `byPosition` parameter structure. This is useful if you have a single\n * parameter which has a literal type.\n */\nParameterStructures.byPosition = new ParameterStructures('byPosition');\n/**\n * Forces `byName` parameter structure. This is only useful when having a single\n * parameter. The library will report errors if used with a different number of\n * parameters.\n */\nParameterStructures.byName = new ParameterStructures('byName');\n/**\n * An abstract implementation of a MessageType.\n */\nclass AbstractMessageSignature {\n    constructor(method, numberOfParams) {\n        this.method = method;\n        this.numberOfParams = numberOfParams;\n    }\n    get parameterStructures() {\n        return ParameterStructures.auto;\n    }\n}\nexports.AbstractMessageSignature = AbstractMessageSignature;\n/**\n * Classes to type request response pairs\n */\nclass RequestType0 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 0);\n    }\n}\nexports.RequestType0 = RequestType0;\nclass RequestType extends AbstractMessageSignature {\n    constructor(method, _parameterStructures = ParameterStructures.auto) {\n        super(method, 1);\n        this._parameterStructures = _parameterStructures;\n    }\n    get parameterStructures() {\n        return this._parameterStructures;\n    }\n}\nexports.RequestType = RequestType;\nclass RequestType1 extends AbstractMessageSignature {\n    constructor(method, _parameterStructures = ParameterStructures.auto) {\n        super(method, 1);\n        this._parameterStructures = _parameterStructures;\n    }\n    get parameterStructures() {\n        return this._parameterStructures;\n    }\n}\nexports.RequestType1 = RequestType1;\nclass RequestType2 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 2);\n    }\n}\nexports.RequestType2 = RequestType2;\nclass RequestType3 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 3);\n    }\n}\nexports.RequestType3 = RequestType3;\nclass RequestType4 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 4);\n    }\n}\nexports.RequestType4 = RequestType4;\nclass RequestType5 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 5);\n    }\n}\nexports.RequestType5 = RequestType5;\nclass RequestType6 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 6);\n    }\n}\nexports.RequestType6 = RequestType6;\nclass RequestType7 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 7);\n    }\n}\nexports.RequestType7 = RequestType7;\nclass RequestType8 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 8);\n    }\n}\nexports.RequestType8 = RequestType8;\nclass RequestType9 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 9);\n    }\n}\nexports.RequestType9 = RequestType9;\nclass NotificationType extends AbstractMessageSignature {\n    constructor(method, _parameterStructures = ParameterStructures.auto) {\n        super(method, 1);\n        this._parameterStructures = _parameterStructures;\n    }\n    get parameterStructures() {\n        return this._parameterStructures;\n    }\n}\nexports.NotificationType = NotificationType;\nclass NotificationType0 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 0);\n    }\n}\nexports.NotificationType0 = NotificationType0;\nclass NotificationType1 extends AbstractMessageSignature {\n    constructor(method, _parameterStructures = ParameterStructures.auto) {\n        super(method, 1);\n        this._parameterStructures = _parameterStructures;\n    }\n    get parameterStructures() {\n        return this._parameterStructures;\n    }\n}\nexports.NotificationType1 = NotificationType1;\nclass NotificationType2 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 2);\n    }\n}\nexports.NotificationType2 = NotificationType2;\nclass NotificationType3 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 3);\n    }\n}\nexports.NotificationType3 = NotificationType3;\nclass NotificationType4 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 4);\n    }\n}\nexports.NotificationType4 = NotificationType4;\nclass NotificationType5 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 5);\n    }\n}\nexports.NotificationType5 = NotificationType5;\nclass NotificationType6 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 6);\n    }\n}\nexports.NotificationType6 = NotificationType6;\nclass NotificationType7 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 7);\n    }\n}\nexports.NotificationType7 = NotificationType7;\nclass NotificationType8 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 8);\n    }\n}\nexports.NotificationType8 = NotificationType8;\nclass NotificationType9 extends AbstractMessageSignature {\n    constructor(method) {\n        super(method, 9);\n    }\n}\nexports.NotificationType9 = NotificationType9;\nvar Message;\n(function (Message) {\n    /**\n     * Tests if the given message is a request message\n     */\n    function isRequest(message) {\n        const candidate = message;\n        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));\n    }\n    Message.isRequest = isRequest;\n    /**\n     * Tests if the given message is a notification message\n     */\n    function isNotification(message) {\n        const candidate = message;\n        return candidate && is.string(candidate.method) && message.id === void 0;\n    }\n    Message.isNotification = isNotification;\n    /**\n     * Tests if the given message is a response message\n     */\n    function isResponse(message) {\n        const candidate = message;\n        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);\n    }\n    Message.isResponse = isResponse;\n})(Message || (exports.Message = Message = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LRUCache = exports.LinkedMap = exports.Touch = void 0;\nvar Touch;\n(function (Touch) {\n    Touch.None = 0;\n    Touch.First = 1;\n    Touch.AsOld = Touch.First;\n    Touch.Last = 2;\n    Touch.AsNew = Touch.Last;\n})(Touch || (exports.Touch = Touch = {}));\nclass LinkedMap {\n    constructor() {\n        this[_a] = 'LinkedMap';\n        this._map = new Map();\n        this._head = undefined;\n        this._tail = undefined;\n        this._size = 0;\n        this._state = 0;\n    }\n    clear() {\n        this._map.clear();\n        this._head = undefined;\n        this._tail = undefined;\n        this._size = 0;\n        this._state++;\n    }\n    isEmpty() {\n        return !this._head && !this._tail;\n    }\n    get size() {\n        return this._size;\n    }\n    get first() {\n        return this._head?.value;\n    }\n    get last() {\n        return this._tail?.value;\n    }\n    has(key) {\n        return this._map.has(key);\n    }\n    get(key, touch = Touch.None) {\n        const item = this._map.get(key);\n        if (!item) {\n            return undefined;\n        }\n        if (touch !== Touch.None) {\n            this.touch(item, touch);\n        }\n        return item.value;\n    }\n    set(key, value, touch = Touch.None) {\n        let item = this._map.get(key);\n        if (item) {\n            item.value = value;\n            if (touch !== Touch.None) {\n                this.touch(item, touch);\n            }\n        }\n        else {\n            item = { key, value, next: undefined, previous: undefined };\n            switch (touch) {\n                case Touch.None:\n                    this.addItemLast(item);\n                    break;\n                case Touch.First:\n                    this.addItemFirst(item);\n                    break;\n                case Touch.Last:\n                    this.addItemLast(item);\n                    break;\n                default:\n                    this.addItemLast(item);\n                    break;\n            }\n            this._map.set(key, item);\n            this._size++;\n        }\n        return this;\n    }\n    delete(key) {\n        return !!this.remove(key);\n    }\n    remove(key) {\n        const item = this._map.get(key);\n        if (!item) {\n            return undefined;\n        }\n        this._map.delete(key);\n        this.removeItem(item);\n        this._size--;\n        return item.value;\n    }\n    shift() {\n        if (!this._head && !this._tail) {\n            return undefined;\n        }\n        if (!this._head || !this._tail) {\n            throw new Error('Invalid list');\n        }\n        const item = this._head;\n        this._map.delete(item.key);\n        this.removeItem(item);\n        this._size--;\n        return item.value;\n    }\n    forEach(callbackfn, thisArg) {\n        const state = this._state;\n        let current = this._head;\n        while (current) {\n            if (thisArg) {\n                callbackfn.bind(thisArg)(current.value, current.key, this);\n            }\n            else {\n                callbackfn(current.value, current.key, this);\n            }\n            if (this._state !== state) {\n                throw new Error(`LinkedMap got modified during iteration.`);\n            }\n            current = current.next;\n        }\n    }\n    keys() {\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]: () => {\n                return iterator;\n            },\n            next: () => {\n                if (this._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: current.key, done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    values() {\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]: () => {\n                return iterator;\n            },\n            next: () => {\n                if (this._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: current.value, done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    entries() {\n        const state = this._state;\n        let current = this._head;\n        const iterator = {\n            [Symbol.iterator]: () => {\n                return iterator;\n            },\n            next: () => {\n                if (this._state !== state) {\n                    throw new Error(`LinkedMap got modified during iteration.`);\n                }\n                if (current) {\n                    const result = { value: [current.key, current.value], done: false };\n                    current = current.next;\n                    return result;\n                }\n                else {\n                    return { value: undefined, done: true };\n                }\n            }\n        };\n        return iterator;\n    }\n    [(_a = Symbol.toStringTag, Symbol.iterator)]() {\n        return this.entries();\n    }\n    trimOld(newSize) {\n        if (newSize >= this.size) {\n            return;\n        }\n        if (newSize === 0) {\n            this.clear();\n            return;\n        }\n        let current = this._head;\n        let currentSize = this.size;\n        while (current && currentSize > newSize) {\n            this._map.delete(current.key);\n            current = current.next;\n            currentSize--;\n        }\n        this._head = current;\n        this._size = currentSize;\n        if (current) {\n            current.previous = undefined;\n        }\n        this._state++;\n    }\n    addItemFirst(item) {\n        // First time Insert\n        if (!this._head && !this._tail) {\n            this._tail = item;\n        }\n        else if (!this._head) {\n            throw new Error('Invalid list');\n        }\n        else {\n            item.next = this._head;\n            this._head.previous = item;\n        }\n        this._head = item;\n        this._state++;\n    }\n    addItemLast(item) {\n        // First time Insert\n        if (!this._head && !this._tail) {\n            this._head = item;\n        }\n        else if (!this._tail) {\n            throw new Error('Invalid list');\n        }\n        else {\n            item.previous = this._tail;\n            this._tail.next = item;\n        }\n        this._tail = item;\n        this._state++;\n    }\n    removeItem(item) {\n        if (item === this._head && item === this._tail) {\n            this._head = undefined;\n            this._tail = undefined;\n        }\n        else if (item === this._head) {\n            // This can only happened if size === 1 which is handle\n            // by the case above.\n            if (!item.next) {\n                throw new Error('Invalid list');\n            }\n            item.next.previous = undefined;\n            this._head = item.next;\n        }\n        else if (item === this._tail) {\n            // This can only happened if size === 1 which is handle\n            // by the case above.\n            if (!item.previous) {\n                throw new Error('Invalid list');\n            }\n            item.previous.next = undefined;\n            this._tail = item.previous;\n        }\n        else {\n            const next = item.next;\n            const previous = item.previous;\n            if (!next || !previous) {\n                throw new Error('Invalid list');\n            }\n            next.previous = previous;\n            previous.next = next;\n        }\n        item.next = undefined;\n        item.previous = undefined;\n        this._state++;\n    }\n    touch(item, touch) {\n        if (!this._head || !this._tail) {\n            throw new Error('Invalid list');\n        }\n        if ((touch !== Touch.First && touch !== Touch.Last)) {\n            return;\n        }\n        if (touch === Touch.First) {\n            if (item === this._head) {\n                return;\n            }\n            const next = item.next;\n            const previous = item.previous;\n            // Unlink the item\n            if (item === this._tail) {\n                // previous must be defined since item was not head but is tail\n                // So there are more than on item in the map\n                previous.next = undefined;\n                this._tail = previous;\n            }\n            else {\n                // Both next and previous are not undefined since item was neither head nor tail.\n                next.previous = previous;\n                previous.next = next;\n            }\n            // Insert the node at head\n            item.previous = undefined;\n            item.next = this._head;\n            this._head.previous = item;\n            this._head = item;\n            this._state++;\n        }\n        else if (touch === Touch.Last) {\n            if (item === this._tail) {\n                return;\n            }\n            const next = item.next;\n            const previous = item.previous;\n            // Unlink the item.\n            if (item === this._head) {\n                // next must be defined since item was not tail but is head\n                // So there are more than on item in the map\n                next.previous = undefined;\n                this._head = next;\n            }\n            else {\n                // Both next and previous are not undefined since item was neither head nor tail.\n                next.previous = previous;\n                previous.next = next;\n            }\n            item.next = undefined;\n            item.previous = this._tail;\n            this._tail.next = item;\n            this._tail = item;\n            this._state++;\n        }\n    }\n    toJSON() {\n        const data = [];\n        this.forEach((value, key) => {\n            data.push([key, value]);\n        });\n        return data;\n    }\n    fromJSON(data) {\n        this.clear();\n        for (const [key, value] of data) {\n            this.set(key, value);\n        }\n    }\n}\nexports.LinkedMap = LinkedMap;\nclass LRUCache extends LinkedMap {\n    constructor(limit, ratio = 1) {\n        super();\n        this._limit = limit;\n        this._ratio = Math.min(Math.max(0, ratio), 1);\n    }\n    get limit() {\n        return this._limit;\n    }\n    set limit(limit) {\n        this._limit = limit;\n        this.checkTrim();\n    }\n    get ratio() {\n        return this._ratio;\n    }\n    set ratio(ratio) {\n        this._ratio = Math.min(Math.max(0, ratio), 1);\n        this.checkTrim();\n    }\n    get(key, touch = Touch.AsNew) {\n        return super.get(key, touch);\n    }\n    peek(key) {\n        return super.get(key, Touch.None);\n    }\n    set(key, value) {\n        super.set(key, value, Touch.Last);\n        this.checkTrim();\n        return this;\n    }\n    checkTrim() {\n        if (this.size > this._limit) {\n            this.trimOld(Math.round(this._limit * this._ratio));\n        }\n    }\n}\nexports.LRUCache = LRUCache;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Disposable = void 0;\nvar Disposable;\n(function (Disposable) {\n    function create(func) {\n        return {\n            dispose: func\n        };\n    }\n    Disposable.create = create;\n})(Disposable || (exports.Disposable = Disposable = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;\nconst cancellation_1 = require(\"./cancellation\");\nvar CancellationState;\n(function (CancellationState) {\n    CancellationState.Continue = 0;\n    CancellationState.Cancelled = 1;\n})(CancellationState || (CancellationState = {}));\nclass SharedArraySenderStrategy {\n    constructor() {\n        this.buffers = new Map();\n    }\n    enableCancellation(request) {\n        if (request.id === null) {\n            return;\n        }\n        const buffer = new SharedArrayBuffer(4);\n        const data = new Int32Array(buffer, 0, 1);\n        data[0] = CancellationState.Continue;\n        this.buffers.set(request.id, buffer);\n        request.$cancellationData = buffer;\n    }\n    async sendCancellation(_conn, id) {\n        const buffer = this.buffers.get(id);\n        if (buffer === undefined) {\n            return;\n        }\n        const data = new Int32Array(buffer, 0, 1);\n        Atomics.store(data, 0, CancellationState.Cancelled);\n    }\n    cleanup(id) {\n        this.buffers.delete(id);\n    }\n    dispose() {\n        this.buffers.clear();\n    }\n}\nexports.SharedArraySenderStrategy = SharedArraySenderStrategy;\nclass SharedArrayBufferCancellationToken {\n    constructor(buffer) {\n        this.data = new Int32Array(buffer, 0, 1);\n    }\n    get isCancellationRequested() {\n        return Atomics.load(this.data, 0) === CancellationState.Cancelled;\n    }\n    get onCancellationRequested() {\n        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);\n    }\n}\nclass SharedArrayBufferCancellationTokenSource {\n    constructor(buffer) {\n        this.token = new SharedArrayBufferCancellationToken(buffer);\n    }\n    cancel() {\n    }\n    dispose() {\n    }\n}\nclass SharedArrayReceiverStrategy {\n    constructor() {\n        this.kind = 'request';\n    }\n    createCancellationTokenSource(request) {\n        const buffer = request.$cancellationData;\n        if (buffer === undefined) {\n            return new cancellation_1.CancellationTokenSource();\n        }\n        return new SharedArrayBufferCancellationTokenSource(buffer);\n    }\n}\nexports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Semaphore = void 0;\nconst ral_1 = require(\"./ral\");\nclass Semaphore {\n    constructor(capacity = 1) {\n        if (capacity <= 0) {\n            throw new Error('Capacity must be greater than 0');\n        }\n        this._capacity = capacity;\n        this._active = 0;\n        this._waiting = [];\n    }\n    lock(thunk) {\n        return new Promise((resolve, reject) => {\n            this._waiting.push({ thunk, resolve, reject });\n            this.runNext();\n        });\n    }\n    get active() {\n        return this._active;\n    }\n    runNext() {\n        if (this._waiting.length === 0 || this._active === this._capacity) {\n            return;\n        }\n        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());\n    }\n    doRunNext() {\n        if (this._waiting.length === 0 || this._active === this._capacity) {\n            return;\n        }\n        const next = this._waiting.shift();\n        this._active++;\n        if (this._active > this._capacity) {\n            throw new Error(`To many thunks active`);\n        }\n        try {\n            const result = next.thunk();\n            if (result instanceof Promise) {\n                result.then((value) => {\n                    this._active--;\n                    next.resolve(value);\n                    this.runNext();\n                }, (err) => {\n                    this._active--;\n                    next.reject(err);\n                    this.runNext();\n                });\n            }\n            else {\n                this._active--;\n                next.resolve(result);\n                this.runNext();\n            }\n        }\n        catch (err) {\n            this._active--;\n            next.reject(err);\n            this.runNext();\n        }\n    }\n}\nexports.Semaphore = Semaphore;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nconst semaphore_1 = require(\"./semaphore\");\nvar MessageReader;\n(function (MessageReader) {\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&\n            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);\n    }\n    MessageReader.is = is;\n})(MessageReader || (exports.MessageReader = MessageReader = {}));\nclass AbstractMessageReader {\n    constructor() {\n        this.errorEmitter = new events_1.Emitter();\n        this.closeEmitter = new events_1.Emitter();\n        this.partialMessageEmitter = new events_1.Emitter();\n    }\n    dispose() {\n        this.errorEmitter.dispose();\n        this.closeEmitter.dispose();\n    }\n    get onError() {\n        return this.errorEmitter.event;\n    }\n    fireError(error) {\n        this.errorEmitter.fire(this.asError(error));\n    }\n    get onClose() {\n        return this.closeEmitter.event;\n    }\n    fireClose() {\n        this.closeEmitter.fire(undefined);\n    }\n    get onPartialMessage() {\n        return this.partialMessageEmitter.event;\n    }\n    firePartialMessage(info) {\n        this.partialMessageEmitter.fire(info);\n    }\n    asError(error) {\n        if (error instanceof Error) {\n            return error;\n        }\n        else {\n            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);\n        }\n    }\n}\nexports.AbstractMessageReader = AbstractMessageReader;\nvar ResolvedMessageReaderOptions;\n(function (ResolvedMessageReaderOptions) {\n    function fromOptions(options) {\n        let charset;\n        let result;\n        let contentDecoder;\n        const contentDecoders = new Map();\n        let contentTypeDecoder;\n        const contentTypeDecoders = new Map();\n        if (options === undefined || typeof options === 'string') {\n            charset = options ?? 'utf-8';\n        }\n        else {\n            charset = options.charset ?? 'utf-8';\n            if (options.contentDecoder !== undefined) {\n                contentDecoder = options.contentDecoder;\n                contentDecoders.set(contentDecoder.name, contentDecoder);\n            }\n            if (options.contentDecoders !== undefined) {\n                for (const decoder of options.contentDecoders) {\n                    contentDecoders.set(decoder.name, decoder);\n                }\n            }\n            if (options.contentTypeDecoder !== undefined) {\n                contentTypeDecoder = options.contentTypeDecoder;\n                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);\n            }\n            if (options.contentTypeDecoders !== undefined) {\n                for (const decoder of options.contentTypeDecoders) {\n                    contentTypeDecoders.set(decoder.name, decoder);\n                }\n            }\n        }\n        if (contentTypeDecoder === undefined) {\n            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;\n            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);\n        }\n        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };\n    }\n    ResolvedMessageReaderOptions.fromOptions = fromOptions;\n})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));\nclass ReadableStreamMessageReader extends AbstractMessageReader {\n    constructor(readable, options) {\n        super();\n        this.readable = readable;\n        this.options = ResolvedMessageReaderOptions.fromOptions(options);\n        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);\n        this._partialMessageTimeout = 10000;\n        this.nextMessageLength = -1;\n        this.messageToken = 0;\n        this.readSemaphore = new semaphore_1.Semaphore(1);\n    }\n    set partialMessageTimeout(timeout) {\n        this._partialMessageTimeout = timeout;\n    }\n    get partialMessageTimeout() {\n        return this._partialMessageTimeout;\n    }\n    listen(callback) {\n        this.nextMessageLength = -1;\n        this.messageToken = 0;\n        this.partialMessageTimer = undefined;\n        this.callback = callback;\n        const result = this.readable.onData((data) => {\n            this.onData(data);\n        });\n        this.readable.onError((error) => this.fireError(error));\n        this.readable.onClose(() => this.fireClose());\n        return result;\n    }\n    onData(data) {\n        try {\n            this.buffer.append(data);\n            while (true) {\n                if (this.nextMessageLength === -1) {\n                    const headers = this.buffer.tryReadHeaders(true);\n                    if (!headers) {\n                        return;\n                    }\n                    const contentLength = headers.get('content-length');\n                    if (!contentLength) {\n                        this.fireError(new Error(`Header must provide a Content-Length property.\\n${JSON.stringify(Object.fromEntries(headers))}`));\n                        return;\n                    }\n                    const length = parseInt(contentLength);\n                    if (isNaN(length)) {\n                        this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));\n                        return;\n                    }\n                    this.nextMessageLength = length;\n                }\n                const body = this.buffer.tryReadBody(this.nextMessageLength);\n                if (body === undefined) {\n                    /** We haven't received the full message yet. */\n                    this.setPartialMessageTimer();\n                    return;\n                }\n                this.clearPartialMessageTimer();\n                this.nextMessageLength = -1;\n                // Make sure that we convert one received message after the\n                // other. Otherwise it could happen that a decoding of a second\n                // smaller message finished before the decoding of a first larger\n                // message and then we would deliver the second message first.\n                this.readSemaphore.lock(async () => {\n                    const bytes = this.options.contentDecoder !== undefined\n                        ? await this.options.contentDecoder.decode(body)\n                        : body;\n                    const message = await this.options.contentTypeDecoder.decode(bytes, this.options);\n                    this.callback(message);\n                }).catch((error) => {\n                    this.fireError(error);\n                });\n            }\n        }\n        catch (error) {\n            this.fireError(error);\n        }\n    }\n    clearPartialMessageTimer() {\n        if (this.partialMessageTimer) {\n            this.partialMessageTimer.dispose();\n            this.partialMessageTimer = undefined;\n        }\n    }\n    setPartialMessageTimer() {\n        this.clearPartialMessageTimer();\n        if (this._partialMessageTimeout <= 0) {\n            return;\n        }\n        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {\n            this.partialMessageTimer = undefined;\n            if (token === this.messageToken) {\n                this.firePartialMessage({ messageToken: token, waitingTime: timeout });\n                this.setPartialMessageTimer();\n            }\n        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);\n    }\n}\nexports.ReadableStreamMessageReader = ReadableStreamMessageReader;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst semaphore_1 = require(\"./semaphore\");\nconst events_1 = require(\"./events\");\nconst ContentLength = 'Content-Length: ';\nconst CRLF = '\\r\\n';\nvar MessageWriter;\n(function (MessageWriter) {\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&\n            Is.func(candidate.onError) && Is.func(candidate.write);\n    }\n    MessageWriter.is = is;\n})(MessageWriter || (exports.MessageWriter = MessageWriter = {}));\nclass AbstractMessageWriter {\n    constructor() {\n        this.errorEmitter = new events_1.Emitter();\n        this.closeEmitter = new events_1.Emitter();\n    }\n    dispose() {\n        this.errorEmitter.dispose();\n        this.closeEmitter.dispose();\n    }\n    get onError() {\n        return this.errorEmitter.event;\n    }\n    fireError(error, message, count) {\n        this.errorEmitter.fire([this.asError(error), message, count]);\n    }\n    get onClose() {\n        return this.closeEmitter.event;\n    }\n    fireClose() {\n        this.closeEmitter.fire(undefined);\n    }\n    asError(error) {\n        if (error instanceof Error) {\n            return error;\n        }\n        else {\n            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);\n        }\n    }\n}\nexports.AbstractMessageWriter = AbstractMessageWriter;\nvar ResolvedMessageWriterOptions;\n(function (ResolvedMessageWriterOptions) {\n    function fromOptions(options) {\n        if (options === undefined || typeof options === 'string') {\n            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };\n        }\n        else {\n            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };\n        }\n    }\n    ResolvedMessageWriterOptions.fromOptions = fromOptions;\n})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));\nclass WriteableStreamMessageWriter extends AbstractMessageWriter {\n    constructor(writable, options) {\n        super();\n        this.writable = writable;\n        this.options = ResolvedMessageWriterOptions.fromOptions(options);\n        this.errorCount = 0;\n        this.writeSemaphore = new semaphore_1.Semaphore(1);\n        this.writable.onError((error) => this.fireError(error));\n        this.writable.onClose(() => this.fireClose());\n    }\n    async write(msg) {\n        return this.writeSemaphore.lock(async () => {\n            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {\n                if (this.options.contentEncoder !== undefined) {\n                    return this.options.contentEncoder.encode(buffer);\n                }\n                else {\n                    return buffer;\n                }\n            });\n            return payload.then((buffer) => {\n                const headers = [];\n                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);\n                headers.push(CRLF);\n                return this.doWrite(msg, headers, buffer);\n            }, (error) => {\n                this.fireError(error);\n                throw error;\n            });\n        });\n    }\n    async doWrite(msg, headers, data) {\n        try {\n            await this.writable.write(headers.join(''), 'ascii');\n            return this.writable.write(data);\n        }\n        catch (error) {\n            this.handleError(error, msg);\n            return Promise.reject(error);\n        }\n    }\n    handleError(error, msg) {\n        this.errorCount++;\n        this.fireError(error, msg, this.errorCount);\n    }\n    end() {\n        this.writable.end();\n    }\n}\nexports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractMessageBuffer = void 0;\nconst CR = 13;\nconst LF = 10;\nconst CRLF = '\\r\\n';\nclass AbstractMessageBuffer {\n    constructor(encoding = 'utf-8') {\n        this._encoding = encoding;\n        this._chunks = [];\n        this._totalLength = 0;\n    }\n    get encoding() {\n        return this._encoding;\n    }\n    append(chunk) {\n        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;\n        this._chunks.push(toAppend);\n        this._totalLength += toAppend.byteLength;\n    }\n    tryReadHeaders(lowerCaseKeys = false) {\n        if (this._chunks.length === 0) {\n            return undefined;\n        }\n        let state = 0;\n        let chunkIndex = 0;\n        let offset = 0;\n        let chunkBytesRead = 0;\n        row: while (chunkIndex < this._chunks.length) {\n            const chunk = this._chunks[chunkIndex];\n            offset = 0;\n            column: while (offset < chunk.length) {\n                const value = chunk[offset];\n                switch (value) {\n                    case CR:\n                        switch (state) {\n                            case 0:\n                                state = 1;\n                                break;\n                            case 2:\n                                state = 3;\n                                break;\n                            default:\n                                state = 0;\n                        }\n                        break;\n                    case LF:\n                        switch (state) {\n                            case 1:\n                                state = 2;\n                                break;\n                            case 3:\n                                state = 4;\n                                offset++;\n                                break row;\n                            default:\n                                state = 0;\n                        }\n                        break;\n                    default:\n                        state = 0;\n                }\n                offset++;\n            }\n            chunkBytesRead += chunk.byteLength;\n            chunkIndex++;\n        }\n        if (state !== 4) {\n            return undefined;\n        }\n        // The buffer contains the two CRLF at the end. So we will\n        // have two empty lines after the split at the end as well.\n        const buffer = this._read(chunkBytesRead + offset);\n        const result = new Map();\n        const headers = this.toString(buffer, 'ascii').split(CRLF);\n        if (headers.length < 2) {\n            return result;\n        }\n        for (let i = 0; i < headers.length - 2; i++) {\n            const header = headers[i];\n            const index = header.indexOf(':');\n            if (index === -1) {\n                throw new Error(`Message header must separate key and value using ':'\\n${header}`);\n            }\n            const key = header.substr(0, index);\n            const value = header.substr(index + 1).trim();\n            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);\n        }\n        return result;\n    }\n    tryReadBody(length) {\n        if (this._totalLength < length) {\n            return undefined;\n        }\n        return this._read(length);\n    }\n    get numberOfBytes() {\n        return this._totalLength;\n    }\n    _read(byteCount) {\n        if (byteCount === 0) {\n            return this.emptyBuffer();\n        }\n        if (byteCount > this._totalLength) {\n            throw new Error(`Cannot read so many bytes!`);\n        }\n        if (this._chunks[0].byteLength === byteCount) {\n            // super fast path, precisely first chunk must be returned\n            const chunk = this._chunks[0];\n            this._chunks.shift();\n            this._totalLength -= byteCount;\n            return this.asNative(chunk);\n        }\n        if (this._chunks[0].byteLength > byteCount) {\n            // fast path, the reading is entirely within the first chunk\n            const chunk = this._chunks[0];\n            const result = this.asNative(chunk, byteCount);\n            this._chunks[0] = chunk.slice(byteCount);\n            this._totalLength -= byteCount;\n            return result;\n        }\n        const result = this.allocNative(byteCount);\n        let resultOffset = 0;\n        let chunkIndex = 0;\n        while (byteCount > 0) {\n            const chunk = this._chunks[chunkIndex];\n            if (chunk.byteLength > byteCount) {\n                // this chunk will survive\n                const chunkPart = chunk.slice(0, byteCount);\n                result.set(chunkPart, resultOffset);\n                resultOffset += byteCount;\n                this._chunks[chunkIndex] = chunk.slice(byteCount);\n                this._totalLength -= byteCount;\n                byteCount -= byteCount;\n            }\n            else {\n                // this chunk will be entirely read\n                result.set(chunk, resultOffset);\n                resultOffset += chunk.byteLength;\n                this._chunks.shift();\n                this._totalLength -= chunk.byteLength;\n                byteCount -= chunk.byteLength;\n            }\n        }\n        return result;\n    }\n}\nexports.AbstractMessageBuffer = AbstractMessageBuffer;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst messages_1 = require(\"./messages\");\nconst linkedMap_1 = require(\"./linkedMap\");\nconst events_1 = require(\"./events\");\nconst cancellation_1 = require(\"./cancellation\");\nvar CancelNotification;\n(function (CancelNotification) {\n    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');\n})(CancelNotification || (CancelNotification = {}));\nvar ProgressToken;\n(function (ProgressToken) {\n    function is(value) {\n        return typeof value === 'string' || typeof value === 'number';\n    }\n    ProgressToken.is = is;\n})(ProgressToken || (exports.ProgressToken = ProgressToken = {}));\nvar ProgressNotification;\n(function (ProgressNotification) {\n    ProgressNotification.type = new messages_1.NotificationType('$/progress');\n})(ProgressNotification || (ProgressNotification = {}));\nclass ProgressType {\n    constructor() {\n    }\n}\nexports.ProgressType = ProgressType;\nvar StarRequestHandler;\n(function (StarRequestHandler) {\n    function is(value) {\n        return Is.func(value);\n    }\n    StarRequestHandler.is = is;\n})(StarRequestHandler || (StarRequestHandler = {}));\nexports.NullLogger = Object.freeze({\n    error: () => { },\n    warn: () => { },\n    info: () => { },\n    log: () => { }\n});\nvar Trace;\n(function (Trace) {\n    Trace[Trace[\"Off\"] = 0] = \"Off\";\n    Trace[Trace[\"Messages\"] = 1] = \"Messages\";\n    Trace[Trace[\"Compact\"] = 2] = \"Compact\";\n    Trace[Trace[\"Verbose\"] = 3] = \"Verbose\";\n})(Trace || (exports.Trace = Trace = {}));\nvar TraceValues;\n(function (TraceValues) {\n    /**\n     * Turn tracing off.\n     */\n    TraceValues.Off = 'off';\n    /**\n     * Trace messages only.\n     */\n    TraceValues.Messages = 'messages';\n    /**\n     * Compact message tracing.\n     */\n    TraceValues.Compact = 'compact';\n    /**\n     * Verbose message tracing.\n     */\n    TraceValues.Verbose = 'verbose';\n})(TraceValues || (exports.TraceValues = TraceValues = {}));\n(function (Trace) {\n    function fromString(value) {\n        if (!Is.string(value)) {\n            return Trace.Off;\n        }\n        value = value.toLowerCase();\n        switch (value) {\n            case 'off':\n                return Trace.Off;\n            case 'messages':\n                return Trace.Messages;\n            case 'compact':\n                return Trace.Compact;\n            case 'verbose':\n                return Trace.Verbose;\n            default:\n                return Trace.Off;\n        }\n    }\n    Trace.fromString = fromString;\n    function toString(value) {\n        switch (value) {\n            case Trace.Off:\n                return 'off';\n            case Trace.Messages:\n                return 'messages';\n            case Trace.Compact:\n                return 'compact';\n            case Trace.Verbose:\n                return 'verbose';\n            default:\n                return 'off';\n        }\n    }\n    Trace.toString = toString;\n})(Trace || (exports.Trace = Trace = {}));\nvar TraceFormat;\n(function (TraceFormat) {\n    TraceFormat[\"Text\"] = \"text\";\n    TraceFormat[\"JSON\"] = \"json\";\n})(TraceFormat || (exports.TraceFormat = TraceFormat = {}));\n(function (TraceFormat) {\n    function fromString(value) {\n        if (!Is.string(value)) {\n            return TraceFormat.Text;\n        }\n        value = value.toLowerCase();\n        if (value === 'json') {\n            return TraceFormat.JSON;\n        }\n        else {\n            return TraceFormat.Text;\n        }\n    }\n    TraceFormat.fromString = fromString;\n})(TraceFormat || (exports.TraceFormat = TraceFormat = {}));\nvar SetTraceNotification;\n(function (SetTraceNotification) {\n    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');\n})(SetTraceNotification || (exports.SetTraceNotification = SetTraceNotification = {}));\nvar LogTraceNotification;\n(function (LogTraceNotification) {\n    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');\n})(LogTraceNotification || (exports.LogTraceNotification = LogTraceNotification = {}));\nvar ConnectionErrors;\n(function (ConnectionErrors) {\n    /**\n     * The connection is closed.\n     */\n    ConnectionErrors[ConnectionErrors[\"Closed\"] = 1] = \"Closed\";\n    /**\n     * The connection got disposed.\n     */\n    ConnectionErrors[ConnectionErrors[\"Disposed\"] = 2] = \"Disposed\";\n    /**\n     * The connection is already in listening mode.\n     */\n    ConnectionErrors[ConnectionErrors[\"AlreadyListening\"] = 3] = \"AlreadyListening\";\n})(ConnectionErrors || (exports.ConnectionErrors = ConnectionErrors = {}));\nclass ConnectionError extends Error {\n    constructor(code, message) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, ConnectionError.prototype);\n    }\n}\nexports.ConnectionError = ConnectionError;\nvar ConnectionStrategy;\n(function (ConnectionStrategy) {\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.func(candidate.cancelUndispatched);\n    }\n    ConnectionStrategy.is = is;\n})(ConnectionStrategy || (exports.ConnectionStrategy = ConnectionStrategy = {}));\nvar IdCancellationReceiverStrategy;\n(function (IdCancellationReceiverStrategy) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));\n    }\n    IdCancellationReceiverStrategy.is = is;\n})(IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));\nvar RequestCancellationReceiverStrategy;\n(function (RequestCancellationReceiverStrategy) {\n    function is(value) {\n        const candidate = value;\n        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));\n    }\n    RequestCancellationReceiverStrategy.is = is;\n})(RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));\nvar CancellationReceiverStrategy;\n(function (CancellationReceiverStrategy) {\n    CancellationReceiverStrategy.Message = Object.freeze({\n        createCancellationTokenSource(_) {\n            return new cancellation_1.CancellationTokenSource();\n        }\n    });\n    function is(value) {\n        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);\n    }\n    CancellationReceiverStrategy.is = is;\n})(CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));\nvar CancellationSenderStrategy;\n(function (CancellationSenderStrategy) {\n    CancellationSenderStrategy.Message = Object.freeze({\n        sendCancellation(conn, id) {\n            return conn.sendNotification(CancelNotification.type, { id });\n        },\n        cleanup(_) { }\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);\n    }\n    CancellationSenderStrategy.is = is;\n})(CancellationSenderStrategy || (exports.CancellationSenderStrategy = CancellationSenderStrategy = {}));\nvar CancellationStrategy;\n(function (CancellationStrategy) {\n    CancellationStrategy.Message = Object.freeze({\n        receiver: CancellationReceiverStrategy.Message,\n        sender: CancellationSenderStrategy.Message\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);\n    }\n    CancellationStrategy.is = is;\n})(CancellationStrategy || (exports.CancellationStrategy = CancellationStrategy = {}));\nvar MessageStrategy;\n(function (MessageStrategy) {\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.func(candidate.handleMessage);\n    }\n    MessageStrategy.is = is;\n})(MessageStrategy || (exports.MessageStrategy = MessageStrategy = {}));\nvar ConnectionOptions;\n(function (ConnectionOptions) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));\n    }\n    ConnectionOptions.is = is;\n})(ConnectionOptions || (exports.ConnectionOptions = ConnectionOptions = {}));\nvar ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"New\"] = 1] = \"New\";\n    ConnectionState[ConnectionState[\"Listening\"] = 2] = \"Listening\";\n    ConnectionState[ConnectionState[\"Closed\"] = 3] = \"Closed\";\n    ConnectionState[ConnectionState[\"Disposed\"] = 4] = \"Disposed\";\n})(ConnectionState || (ConnectionState = {}));\nfunction createMessageConnection(messageReader, messageWriter, _logger, options) {\n    const logger = _logger !== undefined ? _logger : exports.NullLogger;\n    let sequenceNumber = 0;\n    let notificationSequenceNumber = 0;\n    let unknownResponseSequenceNumber = 0;\n    const version = '2.0';\n    let starRequestHandler = undefined;\n    const requestHandlers = new Map();\n    let starNotificationHandler = undefined;\n    const notificationHandlers = new Map();\n    const progressHandlers = new Map();\n    let timer;\n    let messageQueue = new linkedMap_1.LinkedMap();\n    let responsePromises = new Map();\n    let knownCanceledRequests = new Set();\n    let requestTokens = new Map();\n    let trace = Trace.Off;\n    let traceFormat = TraceFormat.Text;\n    let tracer;\n    let state = ConnectionState.New;\n    const errorEmitter = new events_1.Emitter();\n    const closeEmitter = new events_1.Emitter();\n    const unhandledNotificationEmitter = new events_1.Emitter();\n    const unhandledProgressEmitter = new events_1.Emitter();\n    const disposeEmitter = new events_1.Emitter();\n    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;\n    function createRequestQueueKey(id) {\n        if (id === null) {\n            throw new Error(`Can't send requests with id null since the response can't be correlated.`);\n        }\n        return 'req-' + id.toString();\n    }\n    function createResponseQueueKey(id) {\n        if (id === null) {\n            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();\n        }\n        else {\n            return 'res-' + id.toString();\n        }\n    }\n    function createNotificationQueueKey() {\n        return 'not-' + (++notificationSequenceNumber).toString();\n    }\n    function addMessageToQueue(queue, message) {\n        if (messages_1.Message.isRequest(message)) {\n            queue.set(createRequestQueueKey(message.id), message);\n        }\n        else if (messages_1.Message.isResponse(message)) {\n            queue.set(createResponseQueueKey(message.id), message);\n        }\n        else {\n            queue.set(createNotificationQueueKey(), message);\n        }\n    }\n    function cancelUndispatched(_message) {\n        return undefined;\n    }\n    function isListening() {\n        return state === ConnectionState.Listening;\n    }\n    function isClosed() {\n        return state === ConnectionState.Closed;\n    }\n    function isDisposed() {\n        return state === ConnectionState.Disposed;\n    }\n    function closeHandler() {\n        if (state === ConnectionState.New || state === ConnectionState.Listening) {\n            state = ConnectionState.Closed;\n            closeEmitter.fire(undefined);\n        }\n        // If the connection is disposed don't sent close events.\n    }\n    function readErrorHandler(error) {\n        errorEmitter.fire([error, undefined, undefined]);\n    }\n    function writeErrorHandler(data) {\n        errorEmitter.fire(data);\n    }\n    messageReader.onClose(closeHandler);\n    messageReader.onError(readErrorHandler);\n    messageWriter.onClose(closeHandler);\n    messageWriter.onError(writeErrorHandler);\n    function triggerMessageQueue() {\n        if (timer || messageQueue.size === 0) {\n            return;\n        }\n        timer = (0, ral_1.default)().timer.setImmediate(() => {\n            timer = undefined;\n            processMessageQueue();\n        });\n    }\n    function handleMessage(message) {\n        if (messages_1.Message.isRequest(message)) {\n            handleRequest(message);\n        }\n        else if (messages_1.Message.isNotification(message)) {\n            handleNotification(message);\n        }\n        else if (messages_1.Message.isResponse(message)) {\n            handleResponse(message);\n        }\n        else {\n            handleInvalidMessage(message);\n        }\n    }\n    function processMessageQueue() {\n        if (messageQueue.size === 0) {\n            return;\n        }\n        const message = messageQueue.shift();\n        try {\n            const messageStrategy = options?.messageStrategy;\n            if (MessageStrategy.is(messageStrategy)) {\n                messageStrategy.handleMessage(message, handleMessage);\n            }\n            else {\n                handleMessage(message);\n            }\n        }\n        finally {\n            triggerMessageQueue();\n        }\n    }\n    const callback = (message) => {\n        try {\n            // We have received a cancellation message. Check if the message is still in the queue\n            // and cancel it if allowed to do so.\n            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {\n                const cancelId = message.params.id;\n                const key = createRequestQueueKey(cancelId);\n                const toCancel = messageQueue.get(key);\n                if (messages_1.Message.isRequest(toCancel)) {\n                    const strategy = options?.connectionStrategy;\n                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);\n                    if (response && (response.error !== undefined || response.result !== undefined)) {\n                        messageQueue.delete(key);\n                        requestTokens.delete(cancelId);\n                        response.id = toCancel.id;\n                        traceSendingResponse(response, message.method, Date.now());\n                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));\n                        return;\n                    }\n                }\n                const cancellationToken = requestTokens.get(cancelId);\n                // The request is already running. Cancel the token\n                if (cancellationToken !== undefined) {\n                    cancellationToken.cancel();\n                    traceReceivedNotification(message);\n                    return;\n                }\n                else {\n                    // Remember the cancel but still queue the message to\n                    // clean up state in process message.\n                    knownCanceledRequests.add(cancelId);\n                }\n            }\n            addMessageToQueue(messageQueue, message);\n        }\n        finally {\n            triggerMessageQueue();\n        }\n    };\n    function handleRequest(requestMessage) {\n        if (isDisposed()) {\n            // we return here silently since we fired an event when the\n            // connection got disposed.\n            return;\n        }\n        function reply(resultOrError, method, startTime) {\n            const message = {\n                jsonrpc: version,\n                id: requestMessage.id\n            };\n            if (resultOrError instanceof messages_1.ResponseError) {\n                message.error = resultOrError.toJson();\n            }\n            else {\n                message.result = resultOrError === undefined ? null : resultOrError;\n            }\n            traceSendingResponse(message, method, startTime);\n            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));\n        }\n        function replyError(error, method, startTime) {\n            const message = {\n                jsonrpc: version,\n                id: requestMessage.id,\n                error: error.toJson()\n            };\n            traceSendingResponse(message, method, startTime);\n            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));\n        }\n        function replySuccess(result, method, startTime) {\n            // The JSON RPC defines that a response must either have a result or an error\n            // So we can't treat undefined as a valid response result.\n            if (result === undefined) {\n                result = null;\n            }\n            const message = {\n                jsonrpc: version,\n                id: requestMessage.id,\n                result: result\n            };\n            traceSendingResponse(message, method, startTime);\n            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));\n        }\n        traceReceivedRequest(requestMessage);\n        const element = requestHandlers.get(requestMessage.method);\n        let type;\n        let requestHandler;\n        if (element) {\n            type = element.type;\n            requestHandler = element.handler;\n        }\n        const startTime = Date.now();\n        if (requestHandler || starRequestHandler) {\n            const tokenKey = requestMessage.id ?? String(Date.now()); //\n            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver)\n                ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey)\n                : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);\n            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {\n                cancellationSource.cancel();\n            }\n            if (requestMessage.id !== null) {\n                requestTokens.set(tokenKey, cancellationSource);\n            }\n            try {\n                let handlerResult;\n                if (requestHandler) {\n                    if (requestMessage.params === undefined) {\n                        if (type !== undefined && type.numberOfParams !== 0) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);\n                            return;\n                        }\n                        handlerResult = requestHandler(cancellationSource.token);\n                    }\n                    else if (Array.isArray(requestMessage.params)) {\n                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);\n                            return;\n                        }\n                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);\n                    }\n                    else {\n                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);\n                            return;\n                        }\n                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);\n                    }\n                }\n                else if (starRequestHandler) {\n                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);\n                }\n                const promise = handlerResult;\n                if (!handlerResult) {\n                    requestTokens.delete(tokenKey);\n                    replySuccess(handlerResult, requestMessage.method, startTime);\n                }\n                else if (promise.then) {\n                    promise.then((resultOrError) => {\n                        requestTokens.delete(tokenKey);\n                        reply(resultOrError, requestMessage.method, startTime);\n                    }, error => {\n                        requestTokens.delete(tokenKey);\n                        if (error instanceof messages_1.ResponseError) {\n                            replyError(error, requestMessage.method, startTime);\n                        }\n                        else if (error && Is.string(error.message)) {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\n                        }\n                        else {\n                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\n                        }\n                    });\n                }\n                else {\n                    requestTokens.delete(tokenKey);\n                    reply(handlerResult, requestMessage.method, startTime);\n                }\n            }\n            catch (error) {\n                requestTokens.delete(tokenKey);\n                if (error instanceof messages_1.ResponseError) {\n                    reply(error, requestMessage.method, startTime);\n                }\n                else if (error && Is.string(error.message)) {\n                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);\n                }\n                else {\n                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);\n                }\n            }\n        }\n        else {\n            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);\n        }\n    }\n    function handleResponse(responseMessage) {\n        if (isDisposed()) {\n            // See handle request.\n            return;\n        }\n        if (responseMessage.id === null) {\n            if (responseMessage.error) {\n                logger.error(`Received response message without id: Error is: \\n${JSON.stringify(responseMessage.error, undefined, 4)}`);\n            }\n            else {\n                logger.error(`Received response message without id. No further error information provided.`);\n            }\n        }\n        else {\n            const key = responseMessage.id;\n            const responsePromise = responsePromises.get(key);\n            traceReceivedResponse(responseMessage, responsePromise);\n            if (responsePromise !== undefined) {\n                responsePromises.delete(key);\n                try {\n                    if (responseMessage.error) {\n                        const error = responseMessage.error;\n                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));\n                    }\n                    else if (responseMessage.result !== undefined) {\n                        responsePromise.resolve(responseMessage.result);\n                    }\n                    else {\n                        throw new Error('Should never happen.');\n                    }\n                }\n                catch (error) {\n                    if (error.message) {\n                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);\n                    }\n                    else {\n                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);\n                    }\n                }\n            }\n        }\n    }\n    function handleNotification(message) {\n        if (isDisposed()) {\n            // See handle request.\n            return;\n        }\n        let type = undefined;\n        let notificationHandler;\n        if (message.method === CancelNotification.type.method) {\n            const cancelId = message.params.id;\n            knownCanceledRequests.delete(cancelId);\n            traceReceivedNotification(message);\n            return;\n        }\n        else {\n            const element = notificationHandlers.get(message.method);\n            if (element) {\n                notificationHandler = element.handler;\n                type = element.type;\n            }\n        }\n        if (notificationHandler || starNotificationHandler) {\n            try {\n                traceReceivedNotification(message);\n                if (notificationHandler) {\n                    if (message.params === undefined) {\n                        if (type !== undefined) {\n                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {\n                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);\n                            }\n                        }\n                        notificationHandler();\n                    }\n                    else if (Array.isArray(message.params)) {\n                        // There are JSON-RPC libraries that send progress message as positional params although\n                        // specified as named. So convert them if this is the case.\n                        const params = message.params;\n                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {\n                            notificationHandler({ token: params[0], value: params[1] });\n                        }\n                        else {\n                            if (type !== undefined) {\n                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {\n                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);\n                                }\n                                if (type.numberOfParams !== message.params.length) {\n                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);\n                                }\n                            }\n                            notificationHandler(...params);\n                        }\n                    }\n                    else {\n                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {\n                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);\n                        }\n                        notificationHandler(message.params);\n                    }\n                }\n                else if (starNotificationHandler) {\n                    starNotificationHandler(message.method, message.params);\n                }\n            }\n            catch (error) {\n                if (error.message) {\n                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);\n                }\n                else {\n                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);\n                }\n            }\n        }\n        else {\n            unhandledNotificationEmitter.fire(message);\n        }\n    }\n    function handleInvalidMessage(message) {\n        if (!message) {\n            logger.error('Received empty message.');\n            return;\n        }\n        logger.error(`Received message which is neither a response nor a notification message:\\n${JSON.stringify(message, null, 4)}`);\n        // Test whether we find an id to reject the promise\n        const responseMessage = message;\n        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {\n            const key = responseMessage.id;\n            const responseHandler = responsePromises.get(key);\n            if (responseHandler) {\n                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));\n            }\n        }\n    }\n    function stringifyTrace(params) {\n        if (params === undefined || params === null) {\n            return undefined;\n        }\n        switch (trace) {\n            case Trace.Verbose:\n                return JSON.stringify(params, null, 4);\n            case Trace.Compact:\n                return JSON.stringify(params);\n            default:\n                return undefined;\n        }\n    }\n    function traceSendingRequest(message) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {\n                data = `Params: ${stringifyTrace(message.params)}\\n\\n`;\n            }\n            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);\n        }\n        else {\n            logLSPMessage('send-request', message);\n        }\n    }\n    function traceSendingNotification(message) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose || trace === Trace.Compact) {\n                if (message.params) {\n                    data = `Params: ${stringifyTrace(message.params)}\\n\\n`;\n                }\n                else {\n                    data = 'No parameters provided.\\n\\n';\n                }\n            }\n            tracer.log(`Sending notification '${message.method}'.`, data);\n        }\n        else {\n            logLSPMessage('send-notification', message);\n        }\n    }\n    function traceSendingResponse(message, method, startTime) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose || trace === Trace.Compact) {\n                if (message.error && message.error.data) {\n                    data = `Error data: ${stringifyTrace(message.error.data)}\\n\\n`;\n                }\n                else {\n                    if (message.result) {\n                        data = `Result: ${stringifyTrace(message.result)}\\n\\n`;\n                    }\n                    else if (message.error === undefined) {\n                        data = 'No result returned.\\n\\n';\n                    }\n                }\n            }\n            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);\n        }\n        else {\n            logLSPMessage('send-response', message);\n        }\n    }\n    function traceReceivedRequest(message) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {\n                data = `Params: ${stringifyTrace(message.params)}\\n\\n`;\n            }\n            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);\n        }\n        else {\n            logLSPMessage('receive-request', message);\n        }\n    }\n    function traceReceivedNotification(message) {\n        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose || trace === Trace.Compact) {\n                if (message.params) {\n                    data = `Params: ${stringifyTrace(message.params)}\\n\\n`;\n                }\n                else {\n                    data = 'No parameters provided.\\n\\n';\n                }\n            }\n            tracer.log(`Received notification '${message.method}'.`, data);\n        }\n        else {\n            logLSPMessage('receive-notification', message);\n        }\n    }\n    function traceReceivedResponse(message, responsePromise) {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        if (traceFormat === TraceFormat.Text) {\n            let data = undefined;\n            if (trace === Trace.Verbose || trace === Trace.Compact) {\n                if (message.error && message.error.data) {\n                    data = `Error data: ${stringifyTrace(message.error.data)}\\n\\n`;\n                }\n                else {\n                    if (message.result) {\n                        data = `Result: ${stringifyTrace(message.result)}\\n\\n`;\n                    }\n                    else if (message.error === undefined) {\n                        data = 'No result returned.\\n\\n';\n                    }\n                }\n            }\n            if (responsePromise) {\n                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';\n                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);\n            }\n            else {\n                tracer.log(`Received response ${message.id} without active response promise.`, data);\n            }\n        }\n        else {\n            logLSPMessage('receive-response', message);\n        }\n    }\n    function logLSPMessage(type, message) {\n        if (!tracer || trace === Trace.Off) {\n            return;\n        }\n        const lspMessage = {\n            isLSPMessage: true,\n            type,\n            message,\n            timestamp: Date.now()\n        };\n        tracer.log(lspMessage);\n    }\n    function throwIfClosedOrDisposed() {\n        if (isClosed()) {\n            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');\n        }\n        if (isDisposed()) {\n            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');\n        }\n    }\n    function throwIfListening() {\n        if (isListening()) {\n            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');\n        }\n    }\n    function throwIfNotListening() {\n        if (!isListening()) {\n            throw new Error('Call listen() first.');\n        }\n    }\n    function undefinedToNull(param) {\n        if (param === undefined) {\n            return null;\n        }\n        else {\n            return param;\n        }\n    }\n    function nullToUndefined(param) {\n        if (param === null) {\n            return undefined;\n        }\n        else {\n            return param;\n        }\n    }\n    function isNamedParam(param) {\n        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';\n    }\n    function computeSingleParam(parameterStructures, param) {\n        switch (parameterStructures) {\n            case messages_1.ParameterStructures.auto:\n                if (isNamedParam(param)) {\n                    return nullToUndefined(param);\n                }\n                else {\n                    return [undefinedToNull(param)];\n                }\n            case messages_1.ParameterStructures.byName:\n                if (!isNamedParam(param)) {\n                    throw new Error(`Received parameters by name but param is not an object literal.`);\n                }\n                return nullToUndefined(param);\n            case messages_1.ParameterStructures.byPosition:\n                return [undefinedToNull(param)];\n            default:\n                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);\n        }\n    }\n    function computeMessageParams(type, params) {\n        let result;\n        const numberOfParams = type.numberOfParams;\n        switch (numberOfParams) {\n            case 0:\n                result = undefined;\n                break;\n            case 1:\n                result = computeSingleParam(type.parameterStructures, params[0]);\n                break;\n            default:\n                result = [];\n                for (let i = 0; i < params.length && i < numberOfParams; i++) {\n                    result.push(undefinedToNull(params[i]));\n                }\n                if (params.length < numberOfParams) {\n                    for (let i = params.length; i < numberOfParams; i++) {\n                        result.push(null);\n                    }\n                }\n                break;\n        }\n        return result;\n    }\n    const connection = {\n        sendNotification: (type, ...args) => {\n            throwIfClosedOrDisposed();\n            let method;\n            let messageParams;\n            if (Is.string(type)) {\n                method = type;\n                const first = args[0];\n                let paramStart = 0;\n                let parameterStructures = messages_1.ParameterStructures.auto;\n                if (messages_1.ParameterStructures.is(first)) {\n                    paramStart = 1;\n                    parameterStructures = first;\n                }\n                let paramEnd = args.length;\n                const numberOfParams = paramEnd - paramStart;\n                switch (numberOfParams) {\n                    case 0:\n                        messageParams = undefined;\n                        break;\n                    case 1:\n                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);\n                        break;\n                    default:\n                        if (parameterStructures === messages_1.ParameterStructures.byName) {\n                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);\n                        }\n                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));\n                        break;\n                }\n            }\n            else {\n                const params = args;\n                method = type.method;\n                messageParams = computeMessageParams(type, params);\n            }\n            const notificationMessage = {\n                jsonrpc: version,\n                method: method,\n                params: messageParams\n            };\n            traceSendingNotification(notificationMessage);\n            return messageWriter.write(notificationMessage).catch((error) => {\n                logger.error(`Sending notification failed.`);\n                throw error;\n            });\n        },\n        onNotification: (type, handler) => {\n            throwIfClosedOrDisposed();\n            let method;\n            if (Is.func(type)) {\n                starNotificationHandler = type;\n            }\n            else if (handler) {\n                if (Is.string(type)) {\n                    method = type;\n                    notificationHandlers.set(type, { type: undefined, handler });\n                }\n                else {\n                    method = type.method;\n                    notificationHandlers.set(type.method, { type, handler });\n                }\n            }\n            return {\n                dispose: () => {\n                    if (method !== undefined) {\n                        notificationHandlers.delete(method);\n                    }\n                    else {\n                        starNotificationHandler = undefined;\n                    }\n                }\n            };\n        },\n        onProgress: (_type, token, handler) => {\n            if (progressHandlers.has(token)) {\n                throw new Error(`Progress handler for token ${token} already registered`);\n            }\n            progressHandlers.set(token, handler);\n            return {\n                dispose: () => {\n                    progressHandlers.delete(token);\n                }\n            };\n        },\n        sendProgress: (_type, token, value) => {\n            // This should not await but simple return to ensure that we don't have another\n            // async scheduling. Otherwise one send could overtake another send.\n            return connection.sendNotification(ProgressNotification.type, { token, value });\n        },\n        onUnhandledProgress: unhandledProgressEmitter.event,\n        sendRequest: (type, ...args) => {\n            throwIfClosedOrDisposed();\n            throwIfNotListening();\n            let method;\n            let messageParams;\n            let token = undefined;\n            if (Is.string(type)) {\n                method = type;\n                const first = args[0];\n                const last = args[args.length - 1];\n                let paramStart = 0;\n                let parameterStructures = messages_1.ParameterStructures.auto;\n                if (messages_1.ParameterStructures.is(first)) {\n                    paramStart = 1;\n                    parameterStructures = first;\n                }\n                let paramEnd = args.length;\n                if (cancellation_1.CancellationToken.is(last)) {\n                    paramEnd = paramEnd - 1;\n                    token = last;\n                }\n                const numberOfParams = paramEnd - paramStart;\n                switch (numberOfParams) {\n                    case 0:\n                        messageParams = undefined;\n                        break;\n                    case 1:\n                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);\n                        break;\n                    default:\n                        if (parameterStructures === messages_1.ParameterStructures.byName) {\n                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);\n                        }\n                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));\n                        break;\n                }\n            }\n            else {\n                const params = args;\n                method = type.method;\n                messageParams = computeMessageParams(type, params);\n                const numberOfParams = type.numberOfParams;\n                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;\n            }\n            const id = sequenceNumber++;\n            let disposable;\n            if (token) {\n                disposable = token.onCancellationRequested(() => {\n                    const p = cancellationStrategy.sender.sendCancellation(connection, id);\n                    if (p === undefined) {\n                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);\n                        return Promise.resolve();\n                    }\n                    else {\n                        return p.catch(() => {\n                            logger.log(`Sending cancellation messages for id ${id} failed`);\n                        });\n                    }\n                });\n            }\n            const requestMessage = {\n                jsonrpc: version,\n                id: id,\n                method: method,\n                params: messageParams\n            };\n            traceSendingRequest(requestMessage);\n            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {\n                cancellationStrategy.sender.enableCancellation(requestMessage);\n            }\n            return new Promise(async (resolve, reject) => {\n                const resolveWithCleanup = (r) => {\n                    resolve(r);\n                    cancellationStrategy.sender.cleanup(id);\n                    disposable?.dispose();\n                };\n                const rejectWithCleanup = (r) => {\n                    reject(r);\n                    cancellationStrategy.sender.cleanup(id);\n                    disposable?.dispose();\n                };\n                const responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };\n                try {\n                    await messageWriter.write(requestMessage);\n                    responsePromises.set(id, responsePromise);\n                }\n                catch (error) {\n                    logger.error(`Sending request failed.`);\n                    // Writing the message failed. So we need to reject the promise.\n                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));\n                    throw error;\n                }\n            });\n        },\n        onRequest: (type, handler) => {\n            throwIfClosedOrDisposed();\n            let method = null;\n            if (StarRequestHandler.is(type)) {\n                method = undefined;\n                starRequestHandler = type;\n            }\n            else if (Is.string(type)) {\n                method = null;\n                if (handler !== undefined) {\n                    method = type;\n                    requestHandlers.set(type, { handler: handler, type: undefined });\n                }\n            }\n            else {\n                if (handler !== undefined) {\n                    method = type.method;\n                    requestHandlers.set(type.method, { type, handler });\n                }\n            }\n            return {\n                dispose: () => {\n                    if (method === null) {\n                        return;\n                    }\n                    if (method !== undefined) {\n                        requestHandlers.delete(method);\n                    }\n                    else {\n                        starRequestHandler = undefined;\n                    }\n                }\n            };\n        },\n        hasPendingResponse: () => {\n            return responsePromises.size > 0;\n        },\n        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {\n            let _sendNotification = false;\n            let _traceFormat = TraceFormat.Text;\n            if (sendNotificationOrTraceOptions !== undefined) {\n                if (Is.boolean(sendNotificationOrTraceOptions)) {\n                    _sendNotification = sendNotificationOrTraceOptions;\n                }\n                else {\n                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;\n                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;\n                }\n            }\n            trace = _value;\n            traceFormat = _traceFormat;\n            if (trace === Trace.Off) {\n                tracer = undefined;\n            }\n            else {\n                tracer = _tracer;\n            }\n            if (_sendNotification && !isClosed() && !isDisposed()) {\n                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });\n            }\n        },\n        onError: errorEmitter.event,\n        onClose: closeEmitter.event,\n        onUnhandledNotification: unhandledNotificationEmitter.event,\n        onDispose: disposeEmitter.event,\n        end: () => {\n            messageWriter.end();\n        },\n        dispose: () => {\n            if (isDisposed()) {\n                return;\n            }\n            state = ConnectionState.Disposed;\n            disposeEmitter.fire(undefined);\n            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');\n            for (const promise of responsePromises.values()) {\n                promise.reject(error);\n            }\n            responsePromises = new Map();\n            requestTokens = new Map();\n            knownCanceledRequests = new Set();\n            messageQueue = new linkedMap_1.LinkedMap();\n            // Test for backwards compatibility\n            if (Is.func(messageWriter.dispose)) {\n                messageWriter.dispose();\n            }\n            if (Is.func(messageReader.dispose)) {\n                messageReader.dispose();\n            }\n        },\n        listen: () => {\n            throwIfClosedOrDisposed();\n            throwIfListening();\n            state = ConnectionState.Listening;\n            messageReader.listen(callback);\n        },\n        inspect: () => {\n            // eslint-disable-next-line no-console\n            (0, ral_1.default)().console.log('inspect');\n        }\n    };\n    connection.onNotification(LogTraceNotification.type, (params) => {\n        if (trace === Trace.Off || !tracer) {\n            return;\n        }\n        const verbose = trace === Trace.Verbose || trace === Trace.Compact;\n        tracer.log(params.message, verbose ? params.verbose : undefined);\n    });\n    connection.onNotification(ProgressNotification.type, (params) => {\n        const handler = progressHandlers.get(params.token);\n        if (handler) {\n            handler(params.value);\n        }\n        else {\n            unhandledProgressEmitter.fire(params);\n        }\n    });\n    return connection;\n}\nexports.createMessageConnection = createMessageConnection;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n/// <reference path=\"../../typings/thenable.d.ts\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;\nexports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;\nconst messages_1 = require(\"./messages\");\nObject.defineProperty(exports, \"Message\", { enumerable: true, get: function () { return messages_1.Message; } });\nObject.defineProperty(exports, \"RequestType\", { enumerable: true, get: function () { return messages_1.RequestType; } });\nObject.defineProperty(exports, \"RequestType0\", { enumerable: true, get: function () { return messages_1.RequestType0; } });\nObject.defineProperty(exports, \"RequestType1\", { enumerable: true, get: function () { return messages_1.RequestType1; } });\nObject.defineProperty(exports, \"RequestType2\", { enumerable: true, get: function () { return messages_1.RequestType2; } });\nObject.defineProperty(exports, \"RequestType3\", { enumerable: true, get: function () { return messages_1.RequestType3; } });\nObject.defineProperty(exports, \"RequestType4\", { enumerable: true, get: function () { return messages_1.RequestType4; } });\nObject.defineProperty(exports, \"RequestType5\", { enumerable: true, get: function () { return messages_1.RequestType5; } });\nObject.defineProperty(exports, \"RequestType6\", { enumerable: true, get: function () { return messages_1.RequestType6; } });\nObject.defineProperty(exports, \"RequestType7\", { enumerable: true, get: function () { return messages_1.RequestType7; } });\nObject.defineProperty(exports, \"RequestType8\", { enumerable: true, get: function () { return messages_1.RequestType8; } });\nObject.defineProperty(exports, \"RequestType9\", { enumerable: true, get: function () { return messages_1.RequestType9; } });\nObject.defineProperty(exports, \"ResponseError\", { enumerable: true, get: function () { return messages_1.ResponseError; } });\nObject.defineProperty(exports, \"ErrorCodes\", { enumerable: true, get: function () { return messages_1.ErrorCodes; } });\nObject.defineProperty(exports, \"NotificationType\", { enumerable: true, get: function () { return messages_1.NotificationType; } });\nObject.defineProperty(exports, \"NotificationType0\", { enumerable: true, get: function () { return messages_1.NotificationType0; } });\nObject.defineProperty(exports, \"NotificationType1\", { enumerable: true, get: function () { return messages_1.NotificationType1; } });\nObject.defineProperty(exports, \"NotificationType2\", { enumerable: true, get: function () { return messages_1.NotificationType2; } });\nObject.defineProperty(exports, \"NotificationType3\", { enumerable: true, get: function () { return messages_1.NotificationType3; } });\nObject.defineProperty(exports, \"NotificationType4\", { enumerable: true, get: function () { return messages_1.NotificationType4; } });\nObject.defineProperty(exports, \"NotificationType5\", { enumerable: true, get: function () { return messages_1.NotificationType5; } });\nObject.defineProperty(exports, \"NotificationType6\", { enumerable: true, get: function () { return messages_1.NotificationType6; } });\nObject.defineProperty(exports, \"NotificationType7\", { enumerable: true, get: function () { return messages_1.NotificationType7; } });\nObject.defineProperty(exports, \"NotificationType8\", { enumerable: true, get: function () { return messages_1.NotificationType8; } });\nObject.defineProperty(exports, \"NotificationType9\", { enumerable: true, get: function () { return messages_1.NotificationType9; } });\nObject.defineProperty(exports, \"ParameterStructures\", { enumerable: true, get: function () { return messages_1.ParameterStructures; } });\nconst linkedMap_1 = require(\"./linkedMap\");\nObject.defineProperty(exports, \"LinkedMap\", { enumerable: true, get: function () { return linkedMap_1.LinkedMap; } });\nObject.defineProperty(exports, \"LRUCache\", { enumerable: true, get: function () { return linkedMap_1.LRUCache; } });\nObject.defineProperty(exports, \"Touch\", { enumerable: true, get: function () { return linkedMap_1.Touch; } });\nconst disposable_1 = require(\"./disposable\");\nObject.defineProperty(exports, \"Disposable\", { enumerable: true, get: function () { return disposable_1.Disposable; } });\nconst events_1 = require(\"./events\");\nObject.defineProperty(exports, \"Event\", { enumerable: true, get: function () { return events_1.Event; } });\nObject.defineProperty(exports, \"Emitter\", { enumerable: true, get: function () { return events_1.Emitter; } });\nconst cancellation_1 = require(\"./cancellation\");\nObject.defineProperty(exports, \"CancellationTokenSource\", { enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } });\nObject.defineProperty(exports, \"CancellationToken\", { enumerable: true, get: function () { return cancellation_1.CancellationToken; } });\nconst sharedArrayCancellation_1 = require(\"./sharedArrayCancellation\");\nObject.defineProperty(exports, \"SharedArraySenderStrategy\", { enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArraySenderStrategy; } });\nObject.defineProperty(exports, \"SharedArrayReceiverStrategy\", { enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArrayReceiverStrategy; } });\nconst messageReader_1 = require(\"./messageReader\");\nObject.defineProperty(exports, \"MessageReader\", { enumerable: true, get: function () { return messageReader_1.MessageReader; } });\nObject.defineProperty(exports, \"AbstractMessageReader\", { enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } });\nObject.defineProperty(exports, \"ReadableStreamMessageReader\", { enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } });\nconst messageWriter_1 = require(\"./messageWriter\");\nObject.defineProperty(exports, \"MessageWriter\", { enumerable: true, get: function () { return messageWriter_1.MessageWriter; } });\nObject.defineProperty(exports, \"AbstractMessageWriter\", { enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } });\nObject.defineProperty(exports, \"WriteableStreamMessageWriter\", { enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } });\nconst messageBuffer_1 = require(\"./messageBuffer\");\nObject.defineProperty(exports, \"AbstractMessageBuffer\", { enumerable: true, get: function () { return messageBuffer_1.AbstractMessageBuffer; } });\nconst connection_1 = require(\"./connection\");\nObject.defineProperty(exports, \"ConnectionStrategy\", { enumerable: true, get: function () { return connection_1.ConnectionStrategy; } });\nObject.defineProperty(exports, \"ConnectionOptions\", { enumerable: true, get: function () { return connection_1.ConnectionOptions; } });\nObject.defineProperty(exports, \"NullLogger\", { enumerable: true, get: function () { return connection_1.NullLogger; } });\nObject.defineProperty(exports, \"createMessageConnection\", { enumerable: true, get: function () { return connection_1.createMessageConnection; } });\nObject.defineProperty(exports, \"ProgressToken\", { enumerable: true, get: function () { return connection_1.ProgressToken; } });\nObject.defineProperty(exports, \"ProgressType\", { enumerable: true, get: function () { return connection_1.ProgressType; } });\nObject.defineProperty(exports, \"Trace\", { enumerable: true, get: function () { return connection_1.Trace; } });\nObject.defineProperty(exports, \"TraceValues\", { enumerable: true, get: function () { return connection_1.TraceValues; } });\nObject.defineProperty(exports, \"TraceFormat\", { enumerable: true, get: function () { return connection_1.TraceFormat; } });\nObject.defineProperty(exports, \"SetTraceNotification\", { enumerable: true, get: function () { return connection_1.SetTraceNotification; } });\nObject.defineProperty(exports, \"LogTraceNotification\", { enumerable: true, get: function () { return connection_1.LogTraceNotification; } });\nObject.defineProperty(exports, \"ConnectionErrors\", { enumerable: true, get: function () { return connection_1.ConnectionErrors; } });\nObject.defineProperty(exports, \"ConnectionError\", { enumerable: true, get: function () { return connection_1.ConnectionError; } });\nObject.defineProperty(exports, \"CancellationReceiverStrategy\", { enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } });\nObject.defineProperty(exports, \"CancellationSenderStrategy\", { enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } });\nObject.defineProperty(exports, \"CancellationStrategy\", { enumerable: true, get: function () { return connection_1.CancellationStrategy; } });\nObject.defineProperty(exports, \"MessageStrategy\", { enumerable: true, get: function () { return connection_1.MessageStrategy; } });\nconst ral_1 = require(\"./ral\");\nexports.RAL = ral_1.default;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst api_1 = require(\"../common/api\");\nclass MessageBuffer extends api_1.AbstractMessageBuffer {\n    constructor(encoding = 'utf-8') {\n        super(encoding);\n        this.asciiDecoder = new TextDecoder('ascii');\n    }\n    emptyBuffer() {\n        return MessageBuffer.emptyBuffer;\n    }\n    fromString(value, _encoding) {\n        return (new TextEncoder()).encode(value);\n    }\n    toString(value, encoding) {\n        if (encoding === 'ascii') {\n            return this.asciiDecoder.decode(value);\n        }\n        else {\n            return (new TextDecoder(encoding)).decode(value);\n        }\n    }\n    asNative(buffer, length) {\n        if (length === undefined) {\n            return buffer;\n        }\n        else {\n            return buffer.slice(0, length);\n        }\n    }\n    allocNative(length) {\n        return new Uint8Array(length);\n    }\n}\nMessageBuffer.emptyBuffer = new Uint8Array(0);\nclass ReadableStreamWrapper {\n    constructor(socket) {\n        this.socket = socket;\n        this._onData = new api_1.Emitter();\n        this._messageListener = (event) => {\n            const blob = event.data;\n            blob.arrayBuffer().then((buffer) => {\n                this._onData.fire(new Uint8Array(buffer));\n            }, () => {\n                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);\n            });\n        };\n        this.socket.addEventListener('message', this._messageListener);\n    }\n    onClose(listener) {\n        this.socket.addEventListener('close', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));\n    }\n    onError(listener) {\n        this.socket.addEventListener('error', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));\n    }\n    onEnd(listener) {\n        this.socket.addEventListener('end', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));\n    }\n    onData(listener) {\n        return this._onData.event(listener);\n    }\n}\nclass WritableStreamWrapper {\n    constructor(socket) {\n        this.socket = socket;\n    }\n    onClose(listener) {\n        this.socket.addEventListener('close', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));\n    }\n    onError(listener) {\n        this.socket.addEventListener('error', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));\n    }\n    onEnd(listener) {\n        this.socket.addEventListener('end', listener);\n        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));\n    }\n    write(data, encoding) {\n        if (typeof data === 'string') {\n            if (encoding !== undefined && encoding !== 'utf-8') {\n                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);\n            }\n            this.socket.send(data);\n        }\n        else {\n            this.socket.send(data);\n        }\n        return Promise.resolve();\n    }\n    end() {\n        this.socket.close();\n    }\n}\nconst _textEncoder = new TextEncoder();\nconst _ril = Object.freeze({\n    messageBuffer: Object.freeze({\n        create: (encoding) => new MessageBuffer(encoding)\n    }),\n    applicationJson: Object.freeze({\n        encoder: Object.freeze({\n            name: 'application/json',\n            encode: (msg, options) => {\n                if (options.charset !== 'utf-8') {\n                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);\n                }\n                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));\n            }\n        }),\n        decoder: Object.freeze({\n            name: 'application/json',\n            decode: (buffer, options) => {\n                if (!(buffer instanceof Uint8Array)) {\n                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);\n                }\n                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));\n            }\n        })\n    }),\n    stream: Object.freeze({\n        asReadableStream: (socket) => new ReadableStreamWrapper(socket),\n        asWritableStream: (socket) => new WritableStreamWrapper(socket)\n    }),\n    console: console,\n    timer: Object.freeze({\n        setTimeout(callback, ms, ...args) {\n            const handle = setTimeout(callback, ms, ...args);\n            return { dispose: () => clearTimeout(handle) };\n        },\n        setImmediate(callback, ...args) {\n            const handle = setTimeout(callback, 0, ...args);\n            return { dispose: () => clearTimeout(handle) };\n        },\n        setInterval(callback, ms, ...args) {\n            const handle = setInterval(callback, ms, ...args);\n            return { dispose: () => clearInterval(handle) };\n        },\n    })\n});\nfunction RIL() {\n    return _ril;\n}\n(function (RIL) {\n    function install() {\n        api_1.RAL.install(_ril);\n    }\n    RIL.install = install;\n})(RIL || (RIL = {}));\nexports.default = RIL;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;\nconst ril_1 = require(\"./ril\");\n// Install the browser runtime abstract.\nril_1.default.install();\nconst api_1 = require(\"../common/api\");\n__exportStar(require(\"../common/api\"), exports);\nclass BrowserMessageReader extends api_1.AbstractMessageReader {\n    constructor(port) {\n        super();\n        this._onData = new api_1.Emitter();\n        this._messageListener = (event) => {\n            this._onData.fire(event.data);\n        };\n        port.addEventListener('error', (event) => this.fireError(event));\n        port.onmessage = this._messageListener;\n    }\n    listen(callback) {\n        return this._onData.event(callback);\n    }\n}\nexports.BrowserMessageReader = BrowserMessageReader;\nclass BrowserMessageWriter extends api_1.AbstractMessageWriter {\n    constructor(port) {\n        super();\n        this.port = port;\n        this.errorCount = 0;\n        port.addEventListener('error', (event) => this.fireError(event));\n    }\n    write(msg) {\n        try {\n            this.port.postMessage(msg);\n            return Promise.resolve();\n        }\n        catch (error) {\n            this.handleError(error, msg);\n            return Promise.reject(error);\n        }\n    }\n    handleError(error, msg) {\n        this.errorCount++;\n        this.fireError(error, msg, this.errorCount);\n    }\n    end() {\n    }\n}\nexports.BrowserMessageWriter = BrowserMessageWriter;\nfunction createMessageConnection(reader, writer, logger, options) {\n    if (logger === undefined) {\n        logger = api_1.NullLogger;\n    }\n    if (api_1.ConnectionStrategy.is(options)) {\n        options = { connectionStrategy: options };\n    }\n    return (0, api_1.createMessageConnection)(reader, writer, logger, options);\n}\nexports.createMessageConnection = createMessageConnection;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ----------------------------------------------------------------------------------------- */\n'use strict';\n\nmodule.exports = require('./lib/browser/main');","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\nvar MessageDirection;\n(function (MessageDirection) {\n    MessageDirection[\"clientToServer\"] = \"clientToServer\";\n    MessageDirection[\"serverToClient\"] = \"serverToClient\";\n    MessageDirection[\"both\"] = \"both\";\n})(MessageDirection || (exports.MessageDirection = MessageDirection = {}));\nclass RegistrationType {\n    constructor(method) {\n        this.method = method;\n    }\n}\nexports.RegistrationType = RegistrationType;\nclass ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {\n    constructor(method) {\n        super(method);\n    }\n}\nexports.ProtocolRequestType0 = ProtocolRequestType0;\nclass ProtocolRequestType extends vscode_jsonrpc_1.RequestType {\n    constructor(method) {\n        super(method, vscode_jsonrpc_1.ParameterStructures.byName);\n    }\n}\nexports.ProtocolRequestType = ProtocolRequestType;\nclass ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {\n    constructor(method) {\n        super(method);\n    }\n}\nexports.ProtocolNotificationType0 = ProtocolNotificationType0;\nclass ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {\n    constructor(method) {\n        super(method, vscode_jsonrpc_1.ParameterStructures.byName);\n    }\n}\nexports.ProtocolNotificationType = ProtocolNotificationType;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\nfunction typedArray(value, check) {\n    return Array.isArray(value) && value.every(check);\n}\nexports.typedArray = typedArray;\nfunction objectLiteral(value) {\n    // Strictly speaking class instances pass this check as well. Since the LSP\n    // doesn't use classes we ignore this for now. If we do we need to add something\n    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n    return value !== null && typeof value === 'object';\n}\nexports.objectLiteral = objectLiteral;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImplementationRequest = void 0;\nconst messages_1 = require(\"./messages\");\n// @ts-ignore: to avoid inlining LocationLink as dynamic import\nlet __noDynamicImport;\n/**\n * A request to resolve the implementation locations of a symbol at a given text\n * document position. The request's parameter is of type {@link TextDocumentPositionParams}\n * the response is of type {@link Definition} or a Thenable that resolves to such.\n */\nvar ImplementationRequest;\n(function (ImplementationRequest) {\n    ImplementationRequest.method = 'textDocument/implementation';\n    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);\n})(ImplementationRequest || (exports.ImplementationRequest = ImplementationRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeDefinitionRequest = void 0;\nconst messages_1 = require(\"./messages\");\n// @ts-ignore: to avoid inlining LocatioLink as dynamic import\nlet __noDynamicImport;\n/**\n * A request to resolve the type definition locations of a symbol at a given text\n * document position. The request's parameter is of type {@link TextDocumentPositionParams}\n * the response is of type {@link Definition} or a Thenable that resolves to such.\n */\nvar TypeDefinitionRequest;\n(function (TypeDefinitionRequest) {\n    TypeDefinitionRequest.method = 'textDocument/typeDefinition';\n    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);\n})(TypeDefinitionRequest || (exports.TypeDefinitionRequest = TypeDefinitionRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.\n */\nvar WorkspaceFoldersRequest;\n(function (WorkspaceFoldersRequest) {\n    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';\n    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);\n})(WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));\n/**\n * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace\n * folder configuration changes.\n */\nvar DidChangeWorkspaceFoldersNotification;\n(function (DidChangeWorkspaceFoldersNotification) {\n    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';\n    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);\n})(DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigurationRequest = void 0;\nconst messages_1 = require(\"./messages\");\n//---- Get Configuration request ----\n/**\n * The 'workspace/configuration' request is sent from the server to the client to fetch a certain\n * configuration setting.\n *\n * This pull model replaces the old push model were the client signaled configuration change via an\n * event. If the server still needs to react to configuration changes (since the server caches the\n * result of `workspace/configuration` requests) the server should register for an empty configuration\n * change event and empty the cache if such an event is received.\n */\nvar ConfigurationRequest;\n(function (ConfigurationRequest) {\n    ConfigurationRequest.method = 'workspace/configuration';\n    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);\n})(ConfigurationRequest || (exports.ConfigurationRequest = ConfigurationRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to list all color symbols found in a given text document. The request's\n * parameter is of type {@link DocumentColorParams} the\n * response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n * that resolves to such.\n */\nvar DocumentColorRequest;\n(function (DocumentColorRequest) {\n    DocumentColorRequest.method = 'textDocument/documentColor';\n    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);\n})(DocumentColorRequest || (exports.DocumentColorRequest = DocumentColorRequest = {}));\n/**\n * A request to list all presentation for a color. The request's\n * parameter is of type {@link ColorPresentationParams} the\n * response is of type {@link ColorInformation ColorInformation[]} or a Thenable\n * that resolves to such.\n */\nvar ColorPresentationRequest;\n(function (ColorPresentationRequest) {\n    ColorPresentationRequest.method = 'textDocument/colorPresentation';\n    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);\n})(ColorPresentationRequest || (exports.ColorPresentationRequest = ColorPresentationRequest = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to provide folding ranges in a document. The request's\n * parameter is of type {@link FoldingRangeParams}, the\n * response is of type {@link FoldingRangeList} or a Thenable\n * that resolves to such.\n */\nvar FoldingRangeRequest;\n(function (FoldingRangeRequest) {\n    FoldingRangeRequest.method = 'textDocument/foldingRange';\n    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);\n})(FoldingRangeRequest || (exports.FoldingRangeRequest = FoldingRangeRequest = {}));\n/**\n * @since 3.18.0\n * @proposed\n */\nvar FoldingRangeRefreshRequest;\n(function (FoldingRangeRefreshRequest) {\n    FoldingRangeRefreshRequest.method = `workspace/foldingRange/refresh`;\n    FoldingRangeRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    FoldingRangeRefreshRequest.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest.method);\n})(FoldingRangeRefreshRequest || (exports.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeclarationRequest = void 0;\nconst messages_1 = require(\"./messages\");\n// @ts-ignore: to avoid inlining LocationLink as dynamic import\nlet __noDynamicImport;\n/**\n * A request to resolve the type definition locations of a symbol at a given text\n * document position. The request's parameter is of type {@link TextDocumentPositionParams}\n * the response is of type {@link Declaration} or a typed array of {@link DeclarationLink}\n * or a Thenable that resolves to such.\n */\nvar DeclarationRequest;\n(function (DeclarationRequest) {\n    DeclarationRequest.method = 'textDocument/declaration';\n    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);\n})(DeclarationRequest || (exports.DeclarationRequest = DeclarationRequest = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectionRangeRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to provide selection ranges in a document. The request's\n * parameter is of type {@link SelectionRangeParams}, the\n * response is of type {@link SelectionRange SelectionRange[]} or a Thenable\n * that resolves to such.\n */\nvar SelectionRangeRequest;\n(function (SelectionRangeRequest) {\n    SelectionRangeRequest.method = 'textDocument/selectionRange';\n    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);\n})(SelectionRangeRequest || (exports.SelectionRangeRequest = SelectionRangeRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\nconst messages_1 = require(\"./messages\");\nvar WorkDoneProgress;\n(function (WorkDoneProgress) {\n    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();\n    function is(value) {\n        return value === WorkDoneProgress.type;\n    }\n    WorkDoneProgress.is = is;\n})(WorkDoneProgress || (exports.WorkDoneProgress = WorkDoneProgress = {}));\n/**\n * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress\n * reporting from the server.\n */\nvar WorkDoneProgressCreateRequest;\n(function (WorkDoneProgressCreateRequest) {\n    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';\n    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);\n})(WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));\n/**\n * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress\n * initiated on the server side.\n */\nvar WorkDoneProgressCancelNotification;\n(function (WorkDoneProgressCancelNotification) {\n    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';\n    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);\n})(WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) TypeFox, Microsoft and others. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to result a `CallHierarchyItem` in a document at a given position.\n * Can be used as an input to an incoming or outgoing call hierarchy.\n *\n * @since 3.16.0\n */\nvar CallHierarchyPrepareRequest;\n(function (CallHierarchyPrepareRequest) {\n    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';\n    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);\n})(CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));\n/**\n * A request to resolve the incoming calls for a given `CallHierarchyItem`.\n *\n * @since 3.16.0\n */\nvar CallHierarchyIncomingCallsRequest;\n(function (CallHierarchyIncomingCallsRequest) {\n    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';\n    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);\n})(CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));\n/**\n * A request to resolve the outgoing calls for a given `CallHierarchyItem`.\n *\n * @since 3.16.0\n */\nvar CallHierarchyOutgoingCallsRequest;\n(function (CallHierarchyOutgoingCallsRequest) {\n    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';\n    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);\n})(CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;\nconst messages_1 = require(\"./messages\");\n//------- 'textDocument/semanticTokens' -----\nvar TokenFormat;\n(function (TokenFormat) {\n    TokenFormat.Relative = 'relative';\n})(TokenFormat || (exports.TokenFormat = TokenFormat = {}));\nvar SemanticTokensRegistrationType;\n(function (SemanticTokensRegistrationType) {\n    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';\n    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);\n})(SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));\n/**\n * @since 3.16.0\n */\nvar SemanticTokensRequest;\n(function (SemanticTokensRequest) {\n    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';\n    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);\n    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;\n})(SemanticTokensRequest || (exports.SemanticTokensRequest = SemanticTokensRequest = {}));\n/**\n * @since 3.16.0\n */\nvar SemanticTokensDeltaRequest;\n(function (SemanticTokensDeltaRequest) {\n    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';\n    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);\n    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;\n})(SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));\n/**\n * @since 3.16.0\n */\nvar SemanticTokensRangeRequest;\n(function (SemanticTokensRangeRequest) {\n    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';\n    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);\n    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;\n})(SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));\n/**\n * @since 3.16.0\n */\nvar SemanticTokensRefreshRequest;\n(function (SemanticTokensRefreshRequest) {\n    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;\n    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);\n})(SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShowDocumentRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to show a document. This request might open an\n * external program depending on the value of the URI to open.\n * For example a request to open `https://code.visualstudio.com/`\n * will very likely open the URI in a WEB browser.\n *\n * @since 3.16.0\n*/\nvar ShowDocumentRequest;\n(function (ShowDocumentRequest) {\n    ShowDocumentRequest.method = 'window/showDocument';\n    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);\n})(ShowDocumentRequest || (exports.ShowDocumentRequest = ShowDocumentRequest = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkedEditingRangeRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to provide ranges that can be edited together.\n *\n * @since 3.16.0\n */\nvar LinkedEditingRangeRequest;\n(function (LinkedEditingRangeRequest) {\n    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';\n    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);\n})(LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A pattern kind describing if a glob pattern matches a file a folder or\n * both.\n *\n * @since 3.16.0\n */\nvar FileOperationPatternKind;\n(function (FileOperationPatternKind) {\n    /**\n     * The pattern matches a file only.\n     */\n    FileOperationPatternKind.file = 'file';\n    /**\n     * The pattern matches a folder only.\n     */\n    FileOperationPatternKind.folder = 'folder';\n})(FileOperationPatternKind || (exports.FileOperationPatternKind = FileOperationPatternKind = {}));\n/**\n * The will create files request is sent from the client to the server before files are actually\n * created as long as the creation is triggered from within the client.\n *\n * The request can return a `WorkspaceEdit` which will be applied to workspace before the\n * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file\n * to be created.\n *\n * @since 3.16.0\n */\nvar WillCreateFilesRequest;\n(function (WillCreateFilesRequest) {\n    WillCreateFilesRequest.method = 'workspace/willCreateFiles';\n    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);\n})(WillCreateFilesRequest || (exports.WillCreateFilesRequest = WillCreateFilesRequest = {}));\n/**\n * The did create files notification is sent from the client to the server when\n * files were created from within the client.\n *\n * @since 3.16.0\n */\nvar DidCreateFilesNotification;\n(function (DidCreateFilesNotification) {\n    DidCreateFilesNotification.method = 'workspace/didCreateFiles';\n    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);\n})(DidCreateFilesNotification || (exports.DidCreateFilesNotification = DidCreateFilesNotification = {}));\n/**\n * The will rename files request is sent from the client to the server before files are actually\n * renamed as long as the rename is triggered from within the client.\n *\n * @since 3.16.0\n */\nvar WillRenameFilesRequest;\n(function (WillRenameFilesRequest) {\n    WillRenameFilesRequest.method = 'workspace/willRenameFiles';\n    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);\n})(WillRenameFilesRequest || (exports.WillRenameFilesRequest = WillRenameFilesRequest = {}));\n/**\n * The did rename files notification is sent from the client to the server when\n * files were renamed from within the client.\n *\n * @since 3.16.0\n */\nvar DidRenameFilesNotification;\n(function (DidRenameFilesNotification) {\n    DidRenameFilesNotification.method = 'workspace/didRenameFiles';\n    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);\n})(DidRenameFilesNotification || (exports.DidRenameFilesNotification = DidRenameFilesNotification = {}));\n/**\n * The will delete files request is sent from the client to the server before files are actually\n * deleted as long as the deletion is triggered from within the client.\n *\n * @since 3.16.0\n */\nvar DidDeleteFilesNotification;\n(function (DidDeleteFilesNotification) {\n    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';\n    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);\n})(DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));\n/**\n * The did delete files notification is sent from the client to the server when\n * files were deleted from within the client.\n *\n * @since 3.16.0\n */\nvar WillDeleteFilesRequest;\n(function (WillDeleteFilesRequest) {\n    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';\n    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);\n})(WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * Moniker uniqueness level to define scope of the moniker.\n *\n * @since 3.16.0\n */\nvar UniquenessLevel;\n(function (UniquenessLevel) {\n    /**\n     * The moniker is only unique inside a document\n     */\n    UniquenessLevel.document = 'document';\n    /**\n     * The moniker is unique inside a project for which a dump got created\n     */\n    UniquenessLevel.project = 'project';\n    /**\n     * The moniker is unique inside the group to which a project belongs\n     */\n    UniquenessLevel.group = 'group';\n    /**\n     * The moniker is unique inside the moniker scheme.\n     */\n    UniquenessLevel.scheme = 'scheme';\n    /**\n     * The moniker is globally unique\n     */\n    UniquenessLevel.global = 'global';\n})(UniquenessLevel || (exports.UniquenessLevel = UniquenessLevel = {}));\n/**\n * The moniker kind.\n *\n * @since 3.16.0\n */\nvar MonikerKind;\n(function (MonikerKind) {\n    /**\n     * The moniker represent a symbol that is imported into a project\n     */\n    MonikerKind.$import = 'import';\n    /**\n     * The moniker represents a symbol that is exported from a project\n     */\n    MonikerKind.$export = 'export';\n    /**\n     * The moniker represents a symbol that is local to a project (e.g. a local\n     * variable of a function, a class not visible outside the project, ...)\n     */\n    MonikerKind.local = 'local';\n})(MonikerKind || (exports.MonikerKind = MonikerKind = {}));\n/**\n * A request to get the moniker of a symbol at a given text document position.\n * The request parameter is of type {@link TextDocumentPositionParams}.\n * The response is of type {@link Moniker Moniker[]} or `null`.\n */\nvar MonikerRequest;\n(function (MonikerRequest) {\n    MonikerRequest.method = 'textDocument/moniker';\n    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);\n})(MonikerRequest || (exports.MonikerRequest = MonikerRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) TypeFox, Microsoft and others. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to result a `TypeHierarchyItem` in a document at a given position.\n * Can be used as an input to a subtypes or supertypes type hierarchy.\n *\n * @since 3.17.0\n */\nvar TypeHierarchyPrepareRequest;\n(function (TypeHierarchyPrepareRequest) {\n    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';\n    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);\n})(TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));\n/**\n * A request to resolve the supertypes for a given `TypeHierarchyItem`.\n *\n * @since 3.17.0\n */\nvar TypeHierarchySupertypesRequest;\n(function (TypeHierarchySupertypesRequest) {\n    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';\n    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);\n})(TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));\n/**\n * A request to resolve the subtypes for a given `TypeHierarchyItem`.\n *\n * @since 3.17.0\n */\nvar TypeHierarchySubtypesRequest;\n(function (TypeHierarchySubtypesRequest) {\n    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';\n    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);\n})(TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to provide inline values in a document. The request's parameter is of\n * type {@link InlineValueParams}, the response is of type\n * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.\n *\n * @since 3.17.0\n */\nvar InlineValueRequest;\n(function (InlineValueRequest) {\n    InlineValueRequest.method = 'textDocument/inlineValue';\n    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);\n})(InlineValueRequest || (exports.InlineValueRequest = InlineValueRequest = {}));\n/**\n * @since 3.17.0\n */\nvar InlineValueRefreshRequest;\n(function (InlineValueRefreshRequest) {\n    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;\n    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);\n})(InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to provide inlay hints in a document. The request's parameter is of\n * type {@link InlayHintsParams}, the response is of type\n * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.\n *\n * @since 3.17.0\n */\nvar InlayHintRequest;\n(function (InlayHintRequest) {\n    InlayHintRequest.method = 'textDocument/inlayHint';\n    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);\n})(InlayHintRequest || (exports.InlayHintRequest = InlayHintRequest = {}));\n/**\n * A request to resolve additional properties for an inlay hint.\n * The request's parameter is of type {@link InlayHint}, the response is\n * of type {@link InlayHint} or a Thenable that resolves to such.\n *\n * @since 3.17.0\n */\nvar InlayHintResolveRequest;\n(function (InlayHintResolveRequest) {\n    InlayHintResolveRequest.method = 'inlayHint/resolve';\n    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);\n})(InlayHintResolveRequest || (exports.InlayHintResolveRequest = InlayHintResolveRequest = {}));\n/**\n * @since 3.17.0\n */\nvar InlayHintRefreshRequest;\n(function (InlayHintRefreshRequest) {\n    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;\n    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);\n})(InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\nconst Is = require(\"./utils/is\");\nconst messages_1 = require(\"./messages\");\n/**\n * @since 3.17.0\n */\nvar DiagnosticServerCancellationData;\n(function (DiagnosticServerCancellationData) {\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.boolean(candidate.retriggerRequest);\n    }\n    DiagnosticServerCancellationData.is = is;\n})(DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));\n/**\n * The document diagnostic report kinds.\n *\n * @since 3.17.0\n */\nvar DocumentDiagnosticReportKind;\n(function (DocumentDiagnosticReportKind) {\n    /**\n     * A diagnostic report with a full\n     * set of problems.\n     */\n    DocumentDiagnosticReportKind.Full = 'full';\n    /**\n     * A report indicating that the last\n     * returned report is still accurate.\n     */\n    DocumentDiagnosticReportKind.Unchanged = 'unchanged';\n})(DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));\n/**\n * The document diagnostic request definition.\n *\n * @since 3.17.0\n */\nvar DocumentDiagnosticRequest;\n(function (DocumentDiagnosticRequest) {\n    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';\n    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);\n    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();\n})(DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));\n/**\n * The workspace diagnostic request definition.\n *\n * @since 3.17.0\n */\nvar WorkspaceDiagnosticRequest;\n(function (WorkspaceDiagnosticRequest) {\n    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';\n    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);\n    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();\n})(WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));\n/**\n * The diagnostic refresh request definition.\n *\n * @since 3.17.0\n */\nvar DiagnosticRefreshRequest;\n(function (DiagnosticRefreshRequest) {\n    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;\n    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);\n})(DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst Is = require(\"./utils/is\");\nconst messages_1 = require(\"./messages\");\n/**\n * A notebook cell kind.\n *\n * @since 3.17.0\n */\nvar NotebookCellKind;\n(function (NotebookCellKind) {\n    /**\n     * A markup-cell is formatted source that is used for display.\n     */\n    NotebookCellKind.Markup = 1;\n    /**\n     * A code-cell is source code.\n     */\n    NotebookCellKind.Code = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    NotebookCellKind.is = is;\n})(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));\nvar ExecutionSummary;\n(function (ExecutionSummary) {\n    function create(executionOrder, success) {\n        const result = { executionOrder };\n        if (success === true || success === false) {\n            result.success = success;\n        }\n        return result;\n    }\n    ExecutionSummary.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));\n    }\n    ExecutionSummary.is = is;\n    function equals(one, other) {\n        if (one === other) {\n            return true;\n        }\n        if (one === null || one === undefined || other === null || other === undefined) {\n            return false;\n        }\n        return one.executionOrder === other.executionOrder && one.success === other.success;\n    }\n    ExecutionSummary.equals = equals;\n})(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));\nvar NotebookCell;\n(function (NotebookCell) {\n    function create(kind, document) {\n        return { kind, document };\n    }\n    NotebookCell.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&\n            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));\n    }\n    NotebookCell.is = is;\n    function diff(one, two) {\n        const result = new Set();\n        if (one.document !== two.document) {\n            result.add('document');\n        }\n        if (one.kind !== two.kind) {\n            result.add('kind');\n        }\n        if (one.executionSummary !== two.executionSummary) {\n            result.add('executionSummary');\n        }\n        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {\n            result.add('metadata');\n        }\n        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {\n            result.add('executionSummary');\n        }\n        return result;\n    }\n    NotebookCell.diff = diff;\n    function equalsMetadata(one, other) {\n        if (one === other) {\n            return true;\n        }\n        if (one === null || one === undefined || other === null || other === undefined) {\n            return false;\n        }\n        if (typeof one !== typeof other) {\n            return false;\n        }\n        if (typeof one !== 'object') {\n            return false;\n        }\n        const oneArray = Array.isArray(one);\n        const otherArray = Array.isArray(other);\n        if (oneArray !== otherArray) {\n            return false;\n        }\n        if (oneArray && otherArray) {\n            if (one.length !== other.length) {\n                return false;\n            }\n            for (let i = 0; i < one.length; i++) {\n                if (!equalsMetadata(one[i], other[i])) {\n                    return false;\n                }\n            }\n        }\n        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {\n            const oneKeys = Object.keys(one);\n            const otherKeys = Object.keys(other);\n            if (oneKeys.length !== otherKeys.length) {\n                return false;\n            }\n            oneKeys.sort();\n            otherKeys.sort();\n            if (!equalsMetadata(oneKeys, otherKeys)) {\n                return false;\n            }\n            for (let i = 0; i < oneKeys.length; i++) {\n                const prop = oneKeys[i];\n                if (!equalsMetadata(one[prop], other[prop])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n})(NotebookCell || (exports.NotebookCell = NotebookCell = {}));\nvar NotebookDocument;\n(function (NotebookDocument) {\n    function create(uri, notebookType, version, cells) {\n        return { uri, notebookType, version, cells };\n    }\n    NotebookDocument.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);\n    }\n    NotebookDocument.is = is;\n})(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));\nvar NotebookDocumentSyncRegistrationType;\n(function (NotebookDocumentSyncRegistrationType) {\n    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';\n    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;\n    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);\n})(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));\n/**\n * A notification sent when a notebook opens.\n *\n * @since 3.17.0\n */\nvar DidOpenNotebookDocumentNotification;\n(function (DidOpenNotebookDocumentNotification) {\n    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';\n    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);\n    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));\nvar NotebookCellArrayChange;\n(function (NotebookCellArrayChange) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));\n    }\n    NotebookCellArrayChange.is = is;\n    function create(start, deleteCount, cells) {\n        const result = { start, deleteCount };\n        if (cells !== undefined) {\n            result.cells = cells;\n        }\n        return result;\n    }\n    NotebookCellArrayChange.create = create;\n})(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));\nvar DidChangeNotebookDocumentNotification;\n(function (DidChangeNotebookDocumentNotification) {\n    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';\n    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);\n    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));\n/**\n * A notification sent when a notebook document is saved.\n *\n * @since 3.17.0\n */\nvar DidSaveNotebookDocumentNotification;\n(function (DidSaveNotebookDocumentNotification) {\n    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';\n    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);\n    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));\n/**\n * A notification sent when a notebook closes.\n *\n * @since 3.17.0\n */\nvar DidCloseNotebookDocumentNotification;\n(function (DidCloseNotebookDocumentNotification) {\n    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';\n    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);\n    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;\n})(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlineCompletionRequest = void 0;\nconst messages_1 = require(\"./messages\");\n/**\n * A request to provide inline completions in a document. The request's parameter is of\n * type {@link InlineCompletionParams}, the response is of type\n * {@link InlineCompletion InlineCompletion[]} or a Thenable that resolves to such.\n *\n * @since 3.18.0\n * @proposed\n */\nvar InlineCompletionRequest;\n(function (InlineCompletionRequest) {\n    InlineCompletionRequest.method = 'textDocument/inlineCompletion';\n    InlineCompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    InlineCompletionRequest.type = new messages_1.ProtocolRequestType(InlineCompletionRequest.method);\n})(InlineCompletionRequest || (exports.InlineCompletionRequest = InlineCompletionRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;\nexports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangesFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;\nexports.InlineCompletionRequest = exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = void 0;\nconst messages_1 = require(\"./messages\");\nconst vscode_languageserver_types_1 = require(\"vscode-languageserver-types\");\nconst Is = require(\"./utils/is\");\nconst protocol_implementation_1 = require(\"./protocol.implementation\");\nObject.defineProperty(exports, \"ImplementationRequest\", { enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } });\nconst protocol_typeDefinition_1 = require(\"./protocol.typeDefinition\");\nObject.defineProperty(exports, \"TypeDefinitionRequest\", { enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } });\nconst protocol_workspaceFolder_1 = require(\"./protocol.workspaceFolder\");\nObject.defineProperty(exports, \"WorkspaceFoldersRequest\", { enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } });\nObject.defineProperty(exports, \"DidChangeWorkspaceFoldersNotification\", { enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } });\nconst protocol_configuration_1 = require(\"./protocol.configuration\");\nObject.defineProperty(exports, \"ConfigurationRequest\", { enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } });\nconst protocol_colorProvider_1 = require(\"./protocol.colorProvider\");\nObject.defineProperty(exports, \"DocumentColorRequest\", { enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } });\nObject.defineProperty(exports, \"ColorPresentationRequest\", { enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } });\nconst protocol_foldingRange_1 = require(\"./protocol.foldingRange\");\nObject.defineProperty(exports, \"FoldingRangeRequest\", { enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } });\nObject.defineProperty(exports, \"FoldingRangeRefreshRequest\", { enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRefreshRequest; } });\nconst protocol_declaration_1 = require(\"./protocol.declaration\");\nObject.defineProperty(exports, \"DeclarationRequest\", { enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } });\nconst protocol_selectionRange_1 = require(\"./protocol.selectionRange\");\nObject.defineProperty(exports, \"SelectionRangeRequest\", { enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } });\nconst protocol_progress_1 = require(\"./protocol.progress\");\nObject.defineProperty(exports, \"WorkDoneProgress\", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } });\nObject.defineProperty(exports, \"WorkDoneProgressCreateRequest\", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } });\nObject.defineProperty(exports, \"WorkDoneProgressCancelNotification\", { enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } });\nconst protocol_callHierarchy_1 = require(\"./protocol.callHierarchy\");\nObject.defineProperty(exports, \"CallHierarchyIncomingCallsRequest\", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } });\nObject.defineProperty(exports, \"CallHierarchyOutgoingCallsRequest\", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } });\nObject.defineProperty(exports, \"CallHierarchyPrepareRequest\", { enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } });\nconst protocol_semanticTokens_1 = require(\"./protocol.semanticTokens\");\nObject.defineProperty(exports, \"TokenFormat\", { enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } });\nObject.defineProperty(exports, \"SemanticTokensRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } });\nObject.defineProperty(exports, \"SemanticTokensDeltaRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } });\nObject.defineProperty(exports, \"SemanticTokensRangeRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } });\nObject.defineProperty(exports, \"SemanticTokensRefreshRequest\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } });\nObject.defineProperty(exports, \"SemanticTokensRegistrationType\", { enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } });\nconst protocol_showDocument_1 = require(\"./protocol.showDocument\");\nObject.defineProperty(exports, \"ShowDocumentRequest\", { enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } });\nconst protocol_linkedEditingRange_1 = require(\"./protocol.linkedEditingRange\");\nObject.defineProperty(exports, \"LinkedEditingRangeRequest\", { enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } });\nconst protocol_fileOperations_1 = require(\"./protocol.fileOperations\");\nObject.defineProperty(exports, \"FileOperationPatternKind\", { enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } });\nObject.defineProperty(exports, \"DidCreateFilesNotification\", { enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } });\nObject.defineProperty(exports, \"WillCreateFilesRequest\", { enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } });\nObject.defineProperty(exports, \"DidRenameFilesNotification\", { enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } });\nObject.defineProperty(exports, \"WillRenameFilesRequest\", { enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } });\nObject.defineProperty(exports, \"DidDeleteFilesNotification\", { enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } });\nObject.defineProperty(exports, \"WillDeleteFilesRequest\", { enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } });\nconst protocol_moniker_1 = require(\"./protocol.moniker\");\nObject.defineProperty(exports, \"UniquenessLevel\", { enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } });\nObject.defineProperty(exports, \"MonikerKind\", { enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } });\nObject.defineProperty(exports, \"MonikerRequest\", { enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } });\nconst protocol_typeHierarchy_1 = require(\"./protocol.typeHierarchy\");\nObject.defineProperty(exports, \"TypeHierarchyPrepareRequest\", { enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } });\nObject.defineProperty(exports, \"TypeHierarchySubtypesRequest\", { enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } });\nObject.defineProperty(exports, \"TypeHierarchySupertypesRequest\", { enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } });\nconst protocol_inlineValue_1 = require(\"./protocol.inlineValue\");\nObject.defineProperty(exports, \"InlineValueRequest\", { enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } });\nObject.defineProperty(exports, \"InlineValueRefreshRequest\", { enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } });\nconst protocol_inlayHint_1 = require(\"./protocol.inlayHint\");\nObject.defineProperty(exports, \"InlayHintRequest\", { enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } });\nObject.defineProperty(exports, \"InlayHintResolveRequest\", { enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } });\nObject.defineProperty(exports, \"InlayHintRefreshRequest\", { enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } });\nconst protocol_diagnostic_1 = require(\"./protocol.diagnostic\");\nObject.defineProperty(exports, \"DiagnosticServerCancellationData\", { enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } });\nObject.defineProperty(exports, \"DocumentDiagnosticReportKind\", { enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } });\nObject.defineProperty(exports, \"DocumentDiagnosticRequest\", { enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } });\nObject.defineProperty(exports, \"WorkspaceDiagnosticRequest\", { enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } });\nObject.defineProperty(exports, \"DiagnosticRefreshRequest\", { enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } });\nconst protocol_notebook_1 = require(\"./protocol.notebook\");\nObject.defineProperty(exports, \"NotebookCellKind\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } });\nObject.defineProperty(exports, \"ExecutionSummary\", { enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } });\nObject.defineProperty(exports, \"NotebookCell\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } });\nObject.defineProperty(exports, \"NotebookDocument\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } });\nObject.defineProperty(exports, \"NotebookDocumentSyncRegistrationType\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } });\nObject.defineProperty(exports, \"DidOpenNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } });\nObject.defineProperty(exports, \"NotebookCellArrayChange\", { enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } });\nObject.defineProperty(exports, \"DidChangeNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } });\nObject.defineProperty(exports, \"DidSaveNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } });\nObject.defineProperty(exports, \"DidCloseNotebookDocumentNotification\", { enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } });\nconst protocol_inlineCompletion_1 = require(\"./protocol.inlineCompletion\");\nObject.defineProperty(exports, \"InlineCompletionRequest\", { enumerable: true, get: function () { return protocol_inlineCompletion_1.InlineCompletionRequest; } });\n// @ts-ignore: to avoid inlining LocationLink as dynamic import\nlet __noDynamicImport;\n/**\n * The TextDocumentFilter namespace provides helper functions to work with\n * {@link TextDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar TextDocumentFilter;\n(function (TextDocumentFilter) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern));\n    }\n    TextDocumentFilter.is = is;\n})(TextDocumentFilter || (exports.TextDocumentFilter = TextDocumentFilter = {}));\n/**\n * The NotebookDocumentFilter namespace provides helper functions to work with\n * {@link NotebookDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar NotebookDocumentFilter;\n(function (NotebookDocumentFilter) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));\n    }\n    NotebookDocumentFilter.is = is;\n})(NotebookDocumentFilter || (exports.NotebookDocumentFilter = NotebookDocumentFilter = {}));\n/**\n * The NotebookCellTextDocumentFilter namespace provides helper functions to work with\n * {@link NotebookCellTextDocumentFilter} literals.\n *\n * @since 3.17.0\n */\nvar NotebookCellTextDocumentFilter;\n(function (NotebookCellTextDocumentFilter) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))\n            && (candidate.language === undefined || Is.string(candidate.language));\n    }\n    NotebookCellTextDocumentFilter.is = is;\n})(NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));\n/**\n * The DocumentSelector namespace provides helper functions to work with\n * {@link DocumentSelector}s.\n */\nvar DocumentSelector;\n(function (DocumentSelector) {\n    function is(value) {\n        if (!Array.isArray(value)) {\n            return false;\n        }\n        for (let elem of value) {\n            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    DocumentSelector.is = is;\n})(DocumentSelector || (exports.DocumentSelector = DocumentSelector = {}));\n/**\n * The `client/registerCapability` request is sent from the server to the client to register a new capability\n * handler on the client side.\n */\nvar RegistrationRequest;\n(function (RegistrationRequest) {\n    RegistrationRequest.method = 'client/registerCapability';\n    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);\n})(RegistrationRequest || (exports.RegistrationRequest = RegistrationRequest = {}));\n/**\n * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability\n * handler on the client side.\n */\nvar UnregistrationRequest;\n(function (UnregistrationRequest) {\n    UnregistrationRequest.method = 'client/unregisterCapability';\n    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);\n})(UnregistrationRequest || (exports.UnregistrationRequest = UnregistrationRequest = {}));\nvar ResourceOperationKind;\n(function (ResourceOperationKind) {\n    /**\n     * Supports creating new files and folders.\n     */\n    ResourceOperationKind.Create = 'create';\n    /**\n     * Supports renaming existing files and folders.\n     */\n    ResourceOperationKind.Rename = 'rename';\n    /**\n     * Supports deleting existing files and folders.\n     */\n    ResourceOperationKind.Delete = 'delete';\n})(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));\nvar FailureHandlingKind;\n(function (FailureHandlingKind) {\n    /**\n     * Applying the workspace change is simply aborted if one of the changes provided\n     * fails. All operations executed before the failing operation stay executed.\n     */\n    FailureHandlingKind.Abort = 'abort';\n    /**\n     * All operations are executed transactional. That means they either all\n     * succeed or no changes at all are applied to the workspace.\n     */\n    FailureHandlingKind.Transactional = 'transactional';\n    /**\n     * If the workspace edit contains only textual file changes they are executed transactional.\n     * If resource changes (create, rename or delete file) are part of the change the failure\n     * handling strategy is abort.\n     */\n    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';\n    /**\n     * The client tries to undo the operations already executed. But there is no\n     * guarantee that this is succeeding.\n     */\n    FailureHandlingKind.Undo = 'undo';\n})(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));\n/**\n * A set of predefined position encoding kinds.\n *\n * @since 3.17.0\n */\nvar PositionEncodingKind;\n(function (PositionEncodingKind) {\n    /**\n     * Character offsets count UTF-8 code units (e.g. bytes).\n     */\n    PositionEncodingKind.UTF8 = 'utf-8';\n    /**\n     * Character offsets count UTF-16 code units.\n     *\n     * This is the default and must always be supported\n     * by servers\n     */\n    PositionEncodingKind.UTF16 = 'utf-16';\n    /**\n     * Character offsets count UTF-32 code units.\n     *\n     * Implementation note: these are the same as Unicode codepoints,\n     * so this `PositionEncodingKind` may also be used for an\n     * encoding-agnostic representation of character offsets.\n     */\n    PositionEncodingKind.UTF32 = 'utf-32';\n})(PositionEncodingKind || (exports.PositionEncodingKind = PositionEncodingKind = {}));\n/**\n * The StaticRegistrationOptions namespace provides helper functions to work with\n * {@link StaticRegistrationOptions} literals.\n */\nvar StaticRegistrationOptions;\n(function (StaticRegistrationOptions) {\n    function hasId(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.id) && candidate.id.length > 0;\n    }\n    StaticRegistrationOptions.hasId = hasId;\n})(StaticRegistrationOptions || (exports.StaticRegistrationOptions = StaticRegistrationOptions = {}));\n/**\n * The TextDocumentRegistrationOptions namespace provides helper functions to work with\n * {@link TextDocumentRegistrationOptions} literals.\n */\nvar TextDocumentRegistrationOptions;\n(function (TextDocumentRegistrationOptions) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));\n    }\n    TextDocumentRegistrationOptions.is = is;\n})(TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));\n/**\n * The WorkDoneProgressOptions namespace provides helper functions to work with\n * {@link WorkDoneProgressOptions} literals.\n */\nvar WorkDoneProgressOptions;\n(function (WorkDoneProgressOptions) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));\n    }\n    WorkDoneProgressOptions.is = is;\n    function hasWorkDoneProgress(value) {\n        const candidate = value;\n        return candidate && Is.boolean(candidate.workDoneProgress);\n    }\n    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;\n})(WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));\n/**\n * The initialize request is sent from the client to the server.\n * It is sent once as the request after starting up the server.\n * The requests parameter is of type {@link InitializeParams}\n * the response if of type {@link InitializeResult} of a Thenable that\n * resolves to such.\n */\nvar InitializeRequest;\n(function (InitializeRequest) {\n    InitializeRequest.method = 'initialize';\n    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);\n})(InitializeRequest || (exports.InitializeRequest = InitializeRequest = {}));\n/**\n * Known error codes for an `InitializeErrorCodes`;\n */\nvar InitializeErrorCodes;\n(function (InitializeErrorCodes) {\n    /**\n     * If the protocol version provided by the client can't be handled by the server.\n     *\n     * @deprecated This initialize error got replaced by client capabilities. There is\n     * no version handshake in version 3.0x\n     */\n    InitializeErrorCodes.unknownProtocolVersion = 1;\n})(InitializeErrorCodes || (exports.InitializeErrorCodes = InitializeErrorCodes = {}));\n/**\n * The initialized notification is sent from the client to the\n * server after the client is fully initialized and the server\n * is allowed to send requests from the server to the client.\n */\nvar InitializedNotification;\n(function (InitializedNotification) {\n    InitializedNotification.method = 'initialized';\n    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);\n})(InitializedNotification || (exports.InitializedNotification = InitializedNotification = {}));\n//---- Shutdown Method ----\n/**\n * A shutdown request is sent from the client to the server.\n * It is sent once when the client decides to shutdown the\n * server. The only notification that is sent after a shutdown request\n * is the exit event.\n */\nvar ShutdownRequest;\n(function (ShutdownRequest) {\n    ShutdownRequest.method = 'shutdown';\n    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);\n})(ShutdownRequest || (exports.ShutdownRequest = ShutdownRequest = {}));\n//---- Exit Notification ----\n/**\n * The exit event is sent from the client to the server to\n * ask the server to exit its process.\n */\nvar ExitNotification;\n(function (ExitNotification) {\n    ExitNotification.method = 'exit';\n    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);\n})(ExitNotification || (exports.ExitNotification = ExitNotification = {}));\n/**\n * The configuration change notification is sent from the client to the server\n * when the client's configuration has changed. The notification contains\n * the changed configuration as defined by the language client.\n */\nvar DidChangeConfigurationNotification;\n(function (DidChangeConfigurationNotification) {\n    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';\n    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);\n})(DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));\n//---- Message show and log notifications ----\n/**\n * The message type\n */\nvar MessageType;\n(function (MessageType) {\n    /**\n     * An error message.\n     */\n    MessageType.Error = 1;\n    /**\n     * A warning message.\n     */\n    MessageType.Warning = 2;\n    /**\n     * An information message.\n     */\n    MessageType.Info = 3;\n    /**\n     * A log message.\n     */\n    MessageType.Log = 4;\n    /**\n     * A debug message.\n     *\n     * @since 3.18.0\n     */\n    MessageType.Debug = 5;\n})(MessageType || (exports.MessageType = MessageType = {}));\n/**\n * The show message notification is sent from a server to a client to ask\n * the client to display a particular message in the user interface.\n */\nvar ShowMessageNotification;\n(function (ShowMessageNotification) {\n    ShowMessageNotification.method = 'window/showMessage';\n    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);\n})(ShowMessageNotification || (exports.ShowMessageNotification = ShowMessageNotification = {}));\n/**\n * The show message request is sent from the server to the client to show a message\n * and a set of options actions to the user.\n */\nvar ShowMessageRequest;\n(function (ShowMessageRequest) {\n    ShowMessageRequest.method = 'window/showMessageRequest';\n    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);\n})(ShowMessageRequest || (exports.ShowMessageRequest = ShowMessageRequest = {}));\n/**\n * The log message notification is sent from the server to the client to ask\n * the client to log a particular message.\n */\nvar LogMessageNotification;\n(function (LogMessageNotification) {\n    LogMessageNotification.method = 'window/logMessage';\n    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);\n})(LogMessageNotification || (exports.LogMessageNotification = LogMessageNotification = {}));\n//---- Telemetry notification\n/**\n * The telemetry event notification is sent from the server to the client to ask\n * the client to log telemetry data.\n */\nvar TelemetryEventNotification;\n(function (TelemetryEventNotification) {\n    TelemetryEventNotification.method = 'telemetry/event';\n    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);\n})(TelemetryEventNotification || (exports.TelemetryEventNotification = TelemetryEventNotification = {}));\n/**\n * Defines how the host (editor) should sync\n * document changes to the language server.\n */\nvar TextDocumentSyncKind;\n(function (TextDocumentSyncKind) {\n    /**\n     * Documents should not be synced at all.\n     */\n    TextDocumentSyncKind.None = 0;\n    /**\n     * Documents are synced by always sending the full content\n     * of the document.\n     */\n    TextDocumentSyncKind.Full = 1;\n    /**\n     * Documents are synced by sending the full content on open.\n     * After that only incremental updates to the document are\n     * send.\n     */\n    TextDocumentSyncKind.Incremental = 2;\n})(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));\n/**\n * The document open notification is sent from the client to the server to signal\n * newly opened text documents. The document's truth is now managed by the client\n * and the server must not try to read the document's truth using the document's\n * uri. Open in this sense means it is managed by the client. It doesn't necessarily\n * mean that its content is presented in an editor. An open notification must not\n * be sent more than once without a corresponding close notification send before.\n * This means open and close notification must be balanced and the max open count\n * is one.\n */\nvar DidOpenTextDocumentNotification;\n(function (DidOpenTextDocumentNotification) {\n    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';\n    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);\n})(DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));\nvar TextDocumentContentChangeEvent;\n(function (TextDocumentContentChangeEvent) {\n    /**\n     * Checks whether the information describes a delta event.\n     */\n    function isIncremental(event) {\n        let candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    TextDocumentContentChangeEvent.isIncremental = isIncremental;\n    /**\n     * Checks whether the information describes a full replacement event.\n     */\n    function isFull(event) {\n        let candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n    TextDocumentContentChangeEvent.isFull = isFull;\n})(TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));\n/**\n * The document change notification is sent from the client to the server to signal\n * changes to a text document.\n */\nvar DidChangeTextDocumentNotification;\n(function (DidChangeTextDocumentNotification) {\n    DidChangeTextDocumentNotification.method = 'textDocument/didChange';\n    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);\n})(DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));\n/**\n * The document close notification is sent from the client to the server when\n * the document got closed in the client. The document's truth now exists where\n * the document's uri points to (e.g. if the document's uri is a file uri the\n * truth now exists on disk). As with the open notification the close notification\n * is about managing the document's content. Receiving a close notification\n * doesn't mean that the document was open in an editor before. A close\n * notification requires a previous open notification to be sent.\n */\nvar DidCloseTextDocumentNotification;\n(function (DidCloseTextDocumentNotification) {\n    DidCloseTextDocumentNotification.method = 'textDocument/didClose';\n    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);\n})(DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));\n/**\n * The document save notification is sent from the client to the server when\n * the document got saved in the client.\n */\nvar DidSaveTextDocumentNotification;\n(function (DidSaveTextDocumentNotification) {\n    DidSaveTextDocumentNotification.method = 'textDocument/didSave';\n    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);\n})(DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nvar TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (exports.TextDocumentSaveReason = TextDocumentSaveReason = {}));\n/**\n * A document will save notification is sent from the client to the server before\n * the document is actually saved.\n */\nvar WillSaveTextDocumentNotification;\n(function (WillSaveTextDocumentNotification) {\n    WillSaveTextDocumentNotification.method = 'textDocument/willSave';\n    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);\n})(WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));\n/**\n * A document will save request is sent from the client to the server before\n * the document is actually saved. The request can return an array of TextEdits\n * which will be applied to the text document before it is saved. Please note that\n * clients might drop results if computing the text edits took too long or if a\n * server constantly fails on this request. This is done to keep the save fast and\n * reliable.\n */\nvar WillSaveTextDocumentWaitUntilRequest;\n(function (WillSaveTextDocumentWaitUntilRequest) {\n    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';\n    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);\n})(WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));\n/**\n * The watched files notification is sent from the client to the server when\n * the client detects changes to file watched by the language client.\n */\nvar DidChangeWatchedFilesNotification;\n(function (DidChangeWatchedFilesNotification) {\n    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';\n    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;\n    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);\n})(DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));\n/**\n * The file event type\n */\nvar FileChangeType;\n(function (FileChangeType) {\n    /**\n     * The file got created.\n     */\n    FileChangeType.Created = 1;\n    /**\n     * The file got changed.\n     */\n    FileChangeType.Changed = 2;\n    /**\n     * The file got deleted.\n     */\n    FileChangeType.Deleted = 3;\n})(FileChangeType || (exports.FileChangeType = FileChangeType = {}));\nvar RelativePattern;\n(function (RelativePattern) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);\n    }\n    RelativePattern.is = is;\n})(RelativePattern || (exports.RelativePattern = RelativePattern = {}));\nvar WatchKind;\n(function (WatchKind) {\n    /**\n     * Interested in create events.\n     */\n    WatchKind.Create = 1;\n    /**\n     * Interested in change events\n     */\n    WatchKind.Change = 2;\n    /**\n     * Interested in delete events\n     */\n    WatchKind.Delete = 4;\n})(WatchKind || (exports.WatchKind = WatchKind = {}));\n/**\n * Diagnostics notification are sent from the server to the client to signal\n * results of validation runs.\n */\nvar PublishDiagnosticsNotification;\n(function (PublishDiagnosticsNotification) {\n    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';\n    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;\n    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);\n})(PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));\n/**\n * How a completion was triggered\n */\nvar CompletionTriggerKind;\n(function (CompletionTriggerKind) {\n    /**\n     * Completion was triggered by typing an identifier (24x7 code\n     * complete), manual invocation (e.g Ctrl+Space) or via API.\n     */\n    CompletionTriggerKind.Invoked = 1;\n    /**\n     * Completion was triggered by a trigger character specified by\n     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.\n     */\n    CompletionTriggerKind.TriggerCharacter = 2;\n    /**\n     * Completion was re-triggered as current completion list is incomplete\n     */\n    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;\n})(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));\n/**\n * Request to request completion at a given text document position. The request's\n * parameter is of type {@link TextDocumentPosition} the response\n * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}\n * or a Thenable that resolves to such.\n *\n * The request can delay the computation of the {@link CompletionItem.detail `detail`}\n * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`\n * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,\n * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.\n */\nvar CompletionRequest;\n(function (CompletionRequest) {\n    CompletionRequest.method = 'textDocument/completion';\n    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);\n})(CompletionRequest || (exports.CompletionRequest = CompletionRequest = {}));\n/**\n * Request to resolve additional information for a given completion item.The request's\n * parameter is of type {@link CompletionItem} the response\n * is of type {@link CompletionItem} or a Thenable that resolves to such.\n */\nvar CompletionResolveRequest;\n(function (CompletionResolveRequest) {\n    CompletionResolveRequest.method = 'completionItem/resolve';\n    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);\n})(CompletionResolveRequest || (exports.CompletionResolveRequest = CompletionResolveRequest = {}));\n/**\n * Request to request hover information at a given text document position. The request's\n * parameter is of type {@link TextDocumentPosition} the response is of\n * type {@link Hover} or a Thenable that resolves to such.\n */\nvar HoverRequest;\n(function (HoverRequest) {\n    HoverRequest.method = 'textDocument/hover';\n    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);\n})(HoverRequest || (exports.HoverRequest = HoverRequest = {}));\n/**\n * How a signature help was triggered.\n *\n * @since 3.15.0\n */\nvar SignatureHelpTriggerKind;\n(function (SignatureHelpTriggerKind) {\n    /**\n     * Signature help was invoked manually by the user or by a command.\n     */\n    SignatureHelpTriggerKind.Invoked = 1;\n    /**\n     * Signature help was triggered by a trigger character.\n     */\n    SignatureHelpTriggerKind.TriggerCharacter = 2;\n    /**\n     * Signature help was triggered by the cursor moving or by the document content changing.\n     */\n    SignatureHelpTriggerKind.ContentChange = 3;\n})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));\nvar SignatureHelpRequest;\n(function (SignatureHelpRequest) {\n    SignatureHelpRequest.method = 'textDocument/signatureHelp';\n    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);\n})(SignatureHelpRequest || (exports.SignatureHelpRequest = SignatureHelpRequest = {}));\n/**\n * A request to resolve the definition location of a symbol at a given text\n * document position. The request's parameter is of type {@link TextDocumentPosition}\n * the response is of either type {@link Definition} or a typed array of\n * {@link DefinitionLink} or a Thenable that resolves to such.\n */\nvar DefinitionRequest;\n(function (DefinitionRequest) {\n    DefinitionRequest.method = 'textDocument/definition';\n    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);\n})(DefinitionRequest || (exports.DefinitionRequest = DefinitionRequest = {}));\n/**\n * A request to resolve project-wide references for the symbol denoted\n * by the given text document position. The request's parameter is of\n * type {@link ReferenceParams} the response is of type\n * {@link Location Location[]} or a Thenable that resolves to such.\n */\nvar ReferencesRequest;\n(function (ReferencesRequest) {\n    ReferencesRequest.method = 'textDocument/references';\n    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);\n})(ReferencesRequest || (exports.ReferencesRequest = ReferencesRequest = {}));\n/**\n * Request to resolve a {@link DocumentHighlight} for a given\n * text document position. The request's parameter is of type {@link TextDocumentPosition}\n * the request response is an array of type {@link DocumentHighlight}\n * or a Thenable that resolves to such.\n */\nvar DocumentHighlightRequest;\n(function (DocumentHighlightRequest) {\n    DocumentHighlightRequest.method = 'textDocument/documentHighlight';\n    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);\n})(DocumentHighlightRequest || (exports.DocumentHighlightRequest = DocumentHighlightRequest = {}));\n/**\n * A request to list all symbols found in a given text document. The request's\n * parameter is of type {@link TextDocumentIdentifier} the\n * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable\n * that resolves to such.\n */\nvar DocumentSymbolRequest;\n(function (DocumentSymbolRequest) {\n    DocumentSymbolRequest.method = 'textDocument/documentSymbol';\n    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);\n})(DocumentSymbolRequest || (exports.DocumentSymbolRequest = DocumentSymbolRequest = {}));\n/**\n * A request to provide commands for the given text document and range.\n */\nvar CodeActionRequest;\n(function (CodeActionRequest) {\n    CodeActionRequest.method = 'textDocument/codeAction';\n    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);\n})(CodeActionRequest || (exports.CodeActionRequest = CodeActionRequest = {}));\n/**\n * Request to resolve additional information for a given code action.The request's\n * parameter is of type {@link CodeAction} the response\n * is of type {@link CodeAction} or a Thenable that resolves to such.\n */\nvar CodeActionResolveRequest;\n(function (CodeActionResolveRequest) {\n    CodeActionResolveRequest.method = 'codeAction/resolve';\n    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);\n})(CodeActionResolveRequest || (exports.CodeActionResolveRequest = CodeActionResolveRequest = {}));\n/**\n * A request to list project-wide symbols matching the query string given\n * by the {@link WorkspaceSymbolParams}. The response is\n * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that\n * resolves to such.\n *\n * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients\n *  need to advertise support for WorkspaceSymbols via the client capability\n *  `workspace.symbol.resolveSupport`.\n *\n */\nvar WorkspaceSymbolRequest;\n(function (WorkspaceSymbolRequest) {\n    WorkspaceSymbolRequest.method = 'workspace/symbol';\n    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);\n})(WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));\n/**\n * A request to resolve the range inside the workspace\n * symbol's location.\n *\n * @since 3.17.0\n */\nvar WorkspaceSymbolResolveRequest;\n(function (WorkspaceSymbolResolveRequest) {\n    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';\n    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);\n})(WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));\n/**\n * A request to provide code lens for the given text document.\n */\nvar CodeLensRequest;\n(function (CodeLensRequest) {\n    CodeLensRequest.method = 'textDocument/codeLens';\n    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);\n})(CodeLensRequest || (exports.CodeLensRequest = CodeLensRequest = {}));\n/**\n * A request to resolve a command for a given code lens.\n */\nvar CodeLensResolveRequest;\n(function (CodeLensResolveRequest) {\n    CodeLensResolveRequest.method = 'codeLens/resolve';\n    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);\n})(CodeLensResolveRequest || (exports.CodeLensResolveRequest = CodeLensResolveRequest = {}));\n/**\n * A request to refresh all code actions\n *\n * @since 3.16.0\n */\nvar CodeLensRefreshRequest;\n(function (CodeLensRefreshRequest) {\n    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;\n    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);\n})(CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));\n/**\n * A request to provide document links\n */\nvar DocumentLinkRequest;\n(function (DocumentLinkRequest) {\n    DocumentLinkRequest.method = 'textDocument/documentLink';\n    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);\n})(DocumentLinkRequest || (exports.DocumentLinkRequest = DocumentLinkRequest = {}));\n/**\n * Request to resolve additional information for a given document link. The request's\n * parameter is of type {@link DocumentLink} the response\n * is of type {@link DocumentLink} or a Thenable that resolves to such.\n */\nvar DocumentLinkResolveRequest;\n(function (DocumentLinkResolveRequest) {\n    DocumentLinkResolveRequest.method = 'documentLink/resolve';\n    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);\n})(DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));\n/**\n * A request to format a whole document.\n */\nvar DocumentFormattingRequest;\n(function (DocumentFormattingRequest) {\n    DocumentFormattingRequest.method = 'textDocument/formatting';\n    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);\n})(DocumentFormattingRequest || (exports.DocumentFormattingRequest = DocumentFormattingRequest = {}));\n/**\n * A request to format a range in a document.\n */\nvar DocumentRangeFormattingRequest;\n(function (DocumentRangeFormattingRequest) {\n    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';\n    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);\n})(DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));\n/**\n * A request to format ranges in a document.\n *\n * @since 3.18.0\n * @proposed\n */\nvar DocumentRangesFormattingRequest;\n(function (DocumentRangesFormattingRequest) {\n    DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';\n    DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);\n})(DocumentRangesFormattingRequest || (exports.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));\n/**\n * A request to format a document on type.\n */\nvar DocumentOnTypeFormattingRequest;\n(function (DocumentOnTypeFormattingRequest) {\n    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';\n    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);\n})(DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));\n//---- Rename ----------------------------------------------\nvar PrepareSupportDefaultBehavior;\n(function (PrepareSupportDefaultBehavior) {\n    /**\n     * The client's default behavior is to select the identifier\n     * according the to language's syntax rule.\n     */\n    PrepareSupportDefaultBehavior.Identifier = 1;\n})(PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));\n/**\n * A request to rename a symbol.\n */\nvar RenameRequest;\n(function (RenameRequest) {\n    RenameRequest.method = 'textDocument/rename';\n    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);\n})(RenameRequest || (exports.RenameRequest = RenameRequest = {}));\n/**\n * A request to test and perform the setup necessary for a rename.\n *\n * @since 3.16 - support for default behavior\n */\nvar PrepareRenameRequest;\n(function (PrepareRenameRequest) {\n    PrepareRenameRequest.method = 'textDocument/prepareRename';\n    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);\n})(PrepareRenameRequest || (exports.PrepareRenameRequest = PrepareRenameRequest = {}));\n/**\n * A request send from the client to the server to execute a command. The request might return\n * a workspace edit which the client will apply to the workspace.\n */\nvar ExecuteCommandRequest;\n(function (ExecuteCommandRequest) {\n    ExecuteCommandRequest.method = 'workspace/executeCommand';\n    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;\n    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);\n})(ExecuteCommandRequest || (exports.ExecuteCommandRequest = ExecuteCommandRequest = {}));\n/**\n * A request sent from the server to the client to modified certain resources.\n */\nvar ApplyWorkspaceEditRequest;\n(function (ApplyWorkspaceEditRequest) {\n    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';\n    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;\n    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');\n})(ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProtocolConnection = void 0;\nconst vscode_jsonrpc_1 = require(\"vscode-jsonrpc\");\nfunction createProtocolConnection(input, output, logger, options) {\n    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {\n        options = { connectionStrategy: options };\n    }\n    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);\n}\nexports.createProtocolConnection = createProtocolConnection;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LSPErrorCodes = exports.createProtocolConnection = void 0;\n__exportStar(require(\"vscode-jsonrpc\"), exports);\n__exportStar(require(\"vscode-languageserver-types\"), exports);\n__exportStar(require(\"./messages\"), exports);\n__exportStar(require(\"./protocol\"), exports);\nvar connection_1 = require(\"./connection\");\nObject.defineProperty(exports, \"createProtocolConnection\", { enumerable: true, get: function () { return connection_1.createProtocolConnection; } });\nvar LSPErrorCodes;\n(function (LSPErrorCodes) {\n    /**\n    * This is the start range of LSP reserved error codes.\n    * It doesn't denote a real error code.\n    *\n    * @since 3.16.0\n    */\n    LSPErrorCodes.lspReservedErrorRangeStart = -32899;\n    /**\n     * A request failed but it was syntactically correct, e.g the\n     * method name was known and the parameters were valid. The error\n     * message should contain human readable information about why\n     * the request failed.\n     *\n     * @since 3.17.0\n     */\n    LSPErrorCodes.RequestFailed = -32803;\n    /**\n     * The server cancelled the request. This error code should\n     * only be used for requests that explicitly support being\n     * server cancellable.\n     *\n     * @since 3.17.0\n     */\n    LSPErrorCodes.ServerCancelled = -32802;\n    /**\n     * The server detected that the content of a document got\n     * modified outside normal conditions. A server should\n     * NOT send this error code if it detects a content change\n     * in it unprocessed messages. The result even computed\n     * on an older state might still be useful for the client.\n     *\n     * If a client decides that a result is not of any use anymore\n     * the client should cancel the request.\n     */\n    LSPErrorCodes.ContentModified = -32801;\n    /**\n     * The client has canceled a request and a server as detected\n     * the cancel.\n     */\n    LSPErrorCodes.RequestCancelled = -32800;\n    /**\n    * This is the end range of LSP reserved error codes.\n    * It doesn't denote a real error code.\n    *\n    * @since 3.16.0\n    */\n    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;\n})(LSPErrorCodes || (exports.LSPErrorCodes = LSPErrorCodes = {}));\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProtocolConnection = void 0;\nconst browser_1 = require(\"vscode-jsonrpc/browser\");\n__exportStar(require(\"vscode-jsonrpc/browser\"), exports);\n__exportStar(require(\"../common/api\"), exports);\nfunction createProtocolConnection(reader, writer, logger, options) {\n    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);\n}\nexports.createProtocolConnection = createProtocolConnection;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SemanticTokensBuilder = exports.SemanticTokensDiff = exports.SemanticTokensFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst SemanticTokensFeature = (Base) => {\n    return class extends Base {\n        get semanticTokens() {\n            return {\n                refresh: () => {\n                    return this.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);\n                },\n                on: (handler) => {\n                    const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                },\n                onDelta: (handler) => {\n                    const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                },\n                onRange: (handler) => {\n                    const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.SemanticTokensFeature = SemanticTokensFeature;\nclass SemanticTokensDiff {\n    constructor(originalSequence, modifiedSequence) {\n        this.originalSequence = originalSequence;\n        this.modifiedSequence = modifiedSequence;\n    }\n    computeDiff() {\n        const originalLength = this.originalSequence.length;\n        const modifiedLength = this.modifiedSequence.length;\n        let startIndex = 0;\n        while (startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]) {\n            startIndex++;\n        }\n        if (startIndex < modifiedLength && startIndex < originalLength) {\n            let originalEndIndex = originalLength - 1;\n            let modifiedEndIndex = modifiedLength - 1;\n            while (originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]) {\n                originalEndIndex--;\n                modifiedEndIndex--;\n            }\n            // if one moved behind the start index move them forward again\n            if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {\n                originalEndIndex++;\n                modifiedEndIndex++;\n            }\n            const deleteCount = originalEndIndex - startIndex + 1;\n            const newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);\n            // If we moved behind the start index we could have missed a simple delete.\n            if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {\n                return [\n                    { start: startIndex, deleteCount: deleteCount - 1 }\n                ];\n            }\n            else {\n                return [\n                    { start: startIndex, deleteCount, data: newData }\n                ];\n            }\n        }\n        else if (startIndex < modifiedLength) {\n            return [\n                { start: startIndex, deleteCount: 0, data: this.modifiedSequence.slice(startIndex) }\n            ];\n        }\n        else if (startIndex < originalLength) {\n            return [\n                { start: startIndex, deleteCount: originalLength - startIndex }\n            ];\n        }\n        else {\n            // The two arrays are the same.\n            return [];\n        }\n    }\n}\nexports.SemanticTokensDiff = SemanticTokensDiff;\nclass SemanticTokensBuilder {\n    constructor() {\n        this._prevData = undefined;\n        this.initialize();\n    }\n    initialize() {\n        this._id = Date.now();\n        this._prevLine = 0;\n        this._prevChar = 0;\n        this._data = [];\n        this._dataLen = 0;\n    }\n    push(line, char, length, tokenType, tokenModifiers) {\n        let pushLine = line;\n        let pushChar = char;\n        if (this._dataLen > 0) {\n            pushLine -= this._prevLine;\n            if (pushLine === 0) {\n                pushChar -= this._prevChar;\n            }\n        }\n        this._data[this._dataLen++] = pushLine;\n        this._data[this._dataLen++] = pushChar;\n        this._data[this._dataLen++] = length;\n        this._data[this._dataLen++] = tokenType;\n        this._data[this._dataLen++] = tokenModifiers;\n        this._prevLine = line;\n        this._prevChar = char;\n    }\n    get id() {\n        return this._id.toString();\n    }\n    previousResult(id) {\n        if (this.id === id) {\n            this._prevData = this._data;\n        }\n        this.initialize();\n    }\n    build() {\n        this._prevData = undefined;\n        return {\n            resultId: this.id,\n            data: this._data\n        };\n    }\n    canBuildEdits() {\n        return this._prevData !== undefined;\n    }\n    buildEdits() {\n        if (this._prevData !== undefined) {\n            return {\n                resultId: this.id,\n                edits: (new SemanticTokensDiff(this._prevData, this._data)).computeDiff()\n            };\n        }\n        else {\n            return this.build();\n        }\n    }\n}\nexports.SemanticTokensBuilder = SemanticTokensBuilder;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlineCompletionFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst InlineCompletionFeature = (Base) => {\n    return class extends Base {\n        get inlineCompletion() {\n            return {\n                on: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlineCompletionRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.InlineCompletionFeature = InlineCompletionFeature;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TextDocuments = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\n/**\n * A manager for simple text documents. The manager requires at a minimum that\n * the server registered for the following text document sync events in the\n * initialize handler or via dynamic registration:\n *\n * - open and close events.\n * - change events.\n *\n * Registering for save and will save events is optional.\n */\nclass TextDocuments {\n    /**\n     * Create a new text document manager.\n     */\n    constructor(configuration) {\n        this._configuration = configuration;\n        this._syncedDocuments = new Map();\n        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();\n        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been opened.\n     */\n    get onDidOpen() {\n        return this._onDidOpen.event;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been opened or the content changes.\n     */\n    get onDidChangeContent() {\n        return this._onDidChangeContent.event;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * will be saved.\n     */\n    get onWillSave() {\n        return this._onWillSave.event;\n    }\n    /**\n     * Sets a handler that will be called if a participant wants to provide\n     * edits during a text document save.\n     */\n    onWillSaveWaitUntil(handler) {\n        this._willSaveWaitUntil = handler;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been saved.\n     */\n    get onDidSave() {\n        return this._onDidSave.event;\n    }\n    /**\n     * An event that fires when a text document managed by this manager\n     * has been closed.\n     */\n    get onDidClose() {\n        return this._onDidClose.event;\n    }\n    /**\n     * Returns the document for the given URI. Returns undefined if\n     * the document is not managed by this instance.\n     *\n     * @param uri The text document's URI to retrieve.\n     * @return the text document or `undefined`.\n     */\n    get(uri) {\n        return this._syncedDocuments.get(uri);\n    }\n    /**\n     * Returns all text documents managed by this instance.\n     *\n     * @return all text documents.\n     */\n    all() {\n        return Array.from(this._syncedDocuments.values());\n    }\n    /**\n     * Returns the URIs of all text documents managed by this instance.\n     *\n     * @return the URI's of all text documents.\n     */\n    keys() {\n        return Array.from(this._syncedDocuments.keys());\n    }\n    /**\n     * Listens for `low level` notification on the given connection to\n     * update the text documents managed by this instance.\n     *\n     * Please note that the connection only provides handlers not an event model. Therefore\n     * listening on a connection will overwrite the following handlers on a connection:\n     * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,\n     * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.\n     *\n     * Use the corresponding events on the TextDocuments instance instead.\n     *\n     * @param connection The connection to listen on.\n     */\n    listen(connection) {\n        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;\n        const disposables = [];\n        disposables.push(connection.onDidOpenTextDocument((event) => {\n            const td = event.textDocument;\n            const document = this._configuration.create(td.uri, td.languageId, td.version, td.text);\n            this._syncedDocuments.set(td.uri, document);\n            const toFire = Object.freeze({ document });\n            this._onDidOpen.fire(toFire);\n            this._onDidChangeContent.fire(toFire);\n        }));\n        disposables.push(connection.onDidChangeTextDocument((event) => {\n            const td = event.textDocument;\n            const changes = event.contentChanges;\n            if (changes.length === 0) {\n                return;\n            }\n            const { version } = td;\n            if (version === null || version === undefined) {\n                throw new Error(`Received document change event for ${td.uri} without valid version identifier`);\n            }\n            let syncedDocument = this._syncedDocuments.get(td.uri);\n            if (syncedDocument !== undefined) {\n                syncedDocument = this._configuration.update(syncedDocument, changes, version);\n                this._syncedDocuments.set(td.uri, syncedDocument);\n                this._onDidChangeContent.fire(Object.freeze({ document: syncedDocument }));\n            }\n        }));\n        disposables.push(connection.onDidCloseTextDocument((event) => {\n            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);\n            if (syncedDocument !== undefined) {\n                this._syncedDocuments.delete(event.textDocument.uri);\n                this._onDidClose.fire(Object.freeze({ document: syncedDocument }));\n            }\n        }));\n        disposables.push(connection.onWillSaveTextDocument((event) => {\n            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);\n            if (syncedDocument !== undefined) {\n                this._onWillSave.fire(Object.freeze({ document: syncedDocument, reason: event.reason }));\n            }\n        }));\n        disposables.push(connection.onWillSaveTextDocumentWaitUntil((event, token) => {\n            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);\n            if (syncedDocument !== undefined && this._willSaveWaitUntil) {\n                return this._willSaveWaitUntil(Object.freeze({ document: syncedDocument, reason: event.reason }), token);\n            }\n            else {\n                return [];\n            }\n        }));\n        disposables.push(connection.onDidSaveTextDocument((event) => {\n            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);\n            if (syncedDocument !== undefined) {\n                this._onDidSave.fire(Object.freeze({ document: syncedDocument }));\n            }\n        }));\n        return vscode_languageserver_protocol_1.Disposable.create(() => { disposables.forEach(disposable => disposable.dispose()); });\n    }\n}\nexports.TextDocuments = TextDocuments;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NotebookDocuments = exports.NotebookSyncFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst textDocuments_1 = require(\"./textDocuments\");\nconst NotebookSyncFeature = (Base) => {\n    return class extends Base {\n        get synchronization() {\n            return {\n                onDidOpenNotebookDocument: (handler) => {\n                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidOpenNotebookDocumentNotification.type, (params) => {\n                        handler(params);\n                    });\n                },\n                onDidChangeNotebookDocument: (handler) => {\n                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeNotebookDocumentNotification.type, (params) => {\n                        handler(params);\n                    });\n                },\n                onDidSaveNotebookDocument: (handler) => {\n                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidSaveNotebookDocumentNotification.type, (params) => {\n                        handler(params);\n                    });\n                },\n                onDidCloseNotebookDocument: (handler) => {\n                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidCloseNotebookDocumentNotification.type, (params) => {\n                        handler(params);\n                    });\n                }\n            };\n        }\n    };\n};\nexports.NotebookSyncFeature = NotebookSyncFeature;\nclass CellTextDocumentConnection {\n    onDidOpenTextDocument(handler) {\n        this.openHandler = handler;\n        return vscode_languageserver_protocol_1.Disposable.create(() => { this.openHandler = undefined; });\n    }\n    openTextDocument(params) {\n        this.openHandler && this.openHandler(params);\n    }\n    onDidChangeTextDocument(handler) {\n        this.changeHandler = handler;\n        return vscode_languageserver_protocol_1.Disposable.create(() => { this.changeHandler = handler; });\n    }\n    changeTextDocument(params) {\n        this.changeHandler && this.changeHandler(params);\n    }\n    onDidCloseTextDocument(handler) {\n        this.closeHandler = handler;\n        return vscode_languageserver_protocol_1.Disposable.create(() => { this.closeHandler = undefined; });\n    }\n    closeTextDocument(params) {\n        this.closeHandler && this.closeHandler(params);\n    }\n    onWillSaveTextDocument() {\n        return CellTextDocumentConnection.NULL_DISPOSE;\n    }\n    onWillSaveTextDocumentWaitUntil() {\n        return CellTextDocumentConnection.NULL_DISPOSE;\n    }\n    onDidSaveTextDocument() {\n        return CellTextDocumentConnection.NULL_DISPOSE;\n    }\n}\nCellTextDocumentConnection.NULL_DISPOSE = Object.freeze({ dispose: () => { } });\nclass NotebookDocuments {\n    constructor(configurationOrTextDocuments) {\n        if (configurationOrTextDocuments instanceof textDocuments_1.TextDocuments) {\n            this._cellTextDocuments = configurationOrTextDocuments;\n        }\n        else {\n            this._cellTextDocuments = new textDocuments_1.TextDocuments(configurationOrTextDocuments);\n        }\n        this.notebookDocuments = new Map();\n        this.notebookCellMap = new Map();\n        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidChange = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();\n        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();\n    }\n    get cellTextDocuments() {\n        return this._cellTextDocuments;\n    }\n    getCellTextDocument(cell) {\n        return this._cellTextDocuments.get(cell.document);\n    }\n    getNotebookDocument(uri) {\n        return this.notebookDocuments.get(uri);\n    }\n    getNotebookCell(uri) {\n        const value = this.notebookCellMap.get(uri);\n        return value && value[0];\n    }\n    findNotebookDocumentForCell(cell) {\n        const key = typeof cell === 'string' ? cell : cell.document;\n        const value = this.notebookCellMap.get(key);\n        return value && value[1];\n    }\n    get onDidOpen() {\n        return this._onDidOpen.event;\n    }\n    get onDidSave() {\n        return this._onDidSave.event;\n    }\n    get onDidChange() {\n        return this._onDidChange.event;\n    }\n    get onDidClose() {\n        return this._onDidClose.event;\n    }\n    /**\n     * Listens for `low level` notification on the given connection to\n     * update the notebook documents managed by this instance.\n     *\n     * Please note that the connection only provides handlers not an event model. Therefore\n     * listening on a connection will overwrite the following handlers on a connection:\n     * `onDidOpenNotebookDocument`, `onDidChangeNotebookDocument`, `onDidSaveNotebookDocument`,\n     *  and `onDidCloseNotebookDocument`.\n     *\n     * @param connection The connection to listen on.\n     */\n    listen(connection) {\n        const cellTextDocumentConnection = new CellTextDocumentConnection();\n        const disposables = [];\n        disposables.push(this.cellTextDocuments.listen(cellTextDocumentConnection));\n        disposables.push(connection.notebooks.synchronization.onDidOpenNotebookDocument((params) => {\n            this.notebookDocuments.set(params.notebookDocument.uri, params.notebookDocument);\n            for (const cellTextDocument of params.cellTextDocuments) {\n                cellTextDocumentConnection.openTextDocument({ textDocument: cellTextDocument });\n            }\n            this.updateCellMap(params.notebookDocument);\n            this._onDidOpen.fire(params.notebookDocument);\n        }));\n        disposables.push(connection.notebooks.synchronization.onDidChangeNotebookDocument((params) => {\n            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);\n            if (notebookDocument === undefined) {\n                return;\n            }\n            notebookDocument.version = params.notebookDocument.version;\n            const oldMetadata = notebookDocument.metadata;\n            let metadataChanged = false;\n            const change = params.change;\n            if (change.metadata !== undefined) {\n                metadataChanged = true;\n                notebookDocument.metadata = change.metadata;\n            }\n            const opened = [];\n            const closed = [];\n            const data = [];\n            const text = [];\n            if (change.cells !== undefined) {\n                const changedCells = change.cells;\n                if (changedCells.structure !== undefined) {\n                    const array = changedCells.structure.array;\n                    notebookDocument.cells.splice(array.start, array.deleteCount, ...(array.cells !== undefined ? array.cells : []));\n                    // Additional open cell text documents.\n                    if (changedCells.structure.didOpen !== undefined) {\n                        for (const open of changedCells.structure.didOpen) {\n                            cellTextDocumentConnection.openTextDocument({ textDocument: open });\n                            opened.push(open.uri);\n                        }\n                    }\n                    // Additional closed cell test documents.\n                    if (changedCells.structure.didClose) {\n                        for (const close of changedCells.structure.didClose) {\n                            cellTextDocumentConnection.closeTextDocument({ textDocument: close });\n                            closed.push(close.uri);\n                        }\n                    }\n                }\n                if (changedCells.data !== undefined) {\n                    const cellUpdates = new Map(changedCells.data.map(cell => [cell.document, cell]));\n                    for (let i = 0; i <= notebookDocument.cells.length; i++) {\n                        const change = cellUpdates.get(notebookDocument.cells[i].document);\n                        if (change !== undefined) {\n                            const old = notebookDocument.cells.splice(i, 1, change);\n                            data.push({ old: old[0], new: change });\n                            cellUpdates.delete(change.document);\n                            if (cellUpdates.size === 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (changedCells.textContent !== undefined) {\n                    for (const cellTextDocument of changedCells.textContent) {\n                        cellTextDocumentConnection.changeTextDocument({ textDocument: cellTextDocument.document, contentChanges: cellTextDocument.changes });\n                        text.push(cellTextDocument.document.uri);\n                    }\n                }\n            }\n            // Update internal data structure.\n            this.updateCellMap(notebookDocument);\n            const changeEvent = { notebookDocument };\n            if (metadataChanged) {\n                changeEvent.metadata = { old: oldMetadata, new: notebookDocument.metadata };\n            }\n            const added = [];\n            for (const open of opened) {\n                added.push(this.getNotebookCell(open));\n            }\n            const removed = [];\n            for (const close of closed) {\n                removed.push(this.getNotebookCell(close));\n            }\n            const textContent = [];\n            for (const change of text) {\n                textContent.push(this.getNotebookCell(change));\n            }\n            if (added.length > 0 || removed.length > 0 || data.length > 0 || textContent.length > 0) {\n                changeEvent.cells = { added, removed, changed: { data, textContent } };\n            }\n            if (changeEvent.metadata !== undefined || changeEvent.cells !== undefined) {\n                this._onDidChange.fire(changeEvent);\n            }\n        }));\n        disposables.push(connection.notebooks.synchronization.onDidSaveNotebookDocument((params) => {\n            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);\n            if (notebookDocument === undefined) {\n                return;\n            }\n            this._onDidSave.fire(notebookDocument);\n        }));\n        disposables.push(connection.notebooks.synchronization.onDidCloseNotebookDocument((params) => {\n            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);\n            if (notebookDocument === undefined) {\n                return;\n            }\n            this._onDidClose.fire(notebookDocument);\n            for (const cellTextDocument of params.cellTextDocuments) {\n                cellTextDocumentConnection.closeTextDocument({ textDocument: cellTextDocument });\n            }\n            this.notebookDocuments.delete(params.notebookDocument.uri);\n            for (const cell of notebookDocument.cells) {\n                this.notebookCellMap.delete(cell.document);\n            }\n        }));\n        return vscode_languageserver_protocol_1.Disposable.create(() => { disposables.forEach(disposable => disposable.dispose()); });\n    }\n    updateCellMap(notebookDocument) {\n        for (const cell of notebookDocument.cells) {\n            this.notebookCellMap.set(cell.document, [cell, notebookDocument]);\n        }\n    }\n}\nexports.NotebookDocuments = NotebookDocuments;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\nfunction typedArray(value, check) {\n    return Array.isArray(value) && value.every(check);\n}\nexports.typedArray = typedArray;\nfunction thenable(value) {\n    return value && func(value.then);\n}\nexports.thenable = thenable;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;\nclass ValueUUID {\n    constructor(_value) {\n        this._value = _value;\n        // empty\n    }\n    asHex() {\n        return this._value;\n    }\n    equals(other) {\n        return this.asHex() === other.asHex();\n    }\n}\nclass V4UUID extends ValueUUID {\n    static _oneOf(array) {\n        return array[Math.floor(array.length * Math.random())];\n    }\n    static _randomHex() {\n        return V4UUID._oneOf(V4UUID._chars);\n    }\n    constructor() {\n        super([\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            '-',\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            '-',\n            '4',\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            '-',\n            V4UUID._oneOf(V4UUID._timeHighBits),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            '-',\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n            V4UUID._randomHex(),\n        ].join(''));\n    }\n}\nV4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\nV4UUID._timeHighBits = ['8', '9', 'a', 'b'];\n/**\n * An empty UUID that contains only zeros.\n */\nexports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');\nfunction v4() {\n    return new V4UUID();\n}\nexports.v4 = v4;\nconst _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\nfunction isUUID(value) {\n    return _UUIDPattern.test(value);\n}\nexports.isUUID = isUUID;\n/**\n * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.\n * @param value A uuid string.\n */\nfunction parse(value) {\n    if (!isUUID(value)) {\n        throw new Error('invalid uuid');\n    }\n    return new ValueUUID(value);\n}\nexports.parse = parse;\nfunction generateUuid() {\n    return v4().asHex();\n}\nexports.generateUuid = generateUuid;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst uuid_1 = require(\"./utils/uuid\");\nclass WorkDoneProgressReporterImpl {\n    constructor(_connection, _token) {\n        this._connection = _connection;\n        this._token = _token;\n        WorkDoneProgressReporterImpl.Instances.set(this._token, this);\n    }\n    begin(title, percentage, message, cancellable) {\n        let param = {\n            kind: 'begin',\n            title,\n            percentage,\n            message,\n            cancellable\n        };\n        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);\n    }\n    report(arg0, arg1) {\n        let param = {\n            kind: 'report'\n        };\n        if (typeof arg0 === 'number') {\n            param.percentage = arg0;\n            if (arg1 !== undefined) {\n                param.message = arg1;\n            }\n        }\n        else {\n            param.message = arg0;\n        }\n        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);\n    }\n    done() {\n        WorkDoneProgressReporterImpl.Instances.delete(this._token);\n        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: 'end' });\n    }\n}\nWorkDoneProgressReporterImpl.Instances = new Map();\nclass WorkDoneProgressServerReporterImpl extends WorkDoneProgressReporterImpl {\n    constructor(connection, token) {\n        super(connection, token);\n        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();\n    }\n    get token() {\n        return this._source.token;\n    }\n    done() {\n        this._source.dispose();\n        super.done();\n    }\n    cancel() {\n        this._source.cancel();\n    }\n}\nclass NullProgressReporter {\n    constructor() {\n    }\n    begin() {\n    }\n    report() {\n    }\n    done() {\n    }\n}\nclass NullProgressServerReporter extends NullProgressReporter {\n    constructor() {\n        super();\n        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();\n    }\n    get token() {\n        return this._source.token;\n    }\n    done() {\n        this._source.dispose();\n    }\n    cancel() {\n        this._source.cancel();\n    }\n}\nfunction attachWorkDone(connection, params) {\n    if (params === undefined || params.workDoneToken === undefined) {\n        return new NullProgressReporter();\n    }\n    const token = params.workDoneToken;\n    delete params.workDoneToken;\n    return new WorkDoneProgressReporterImpl(connection, token);\n}\nexports.attachWorkDone = attachWorkDone;\nconst ProgressFeature = (Base) => {\n    return class extends Base {\n        constructor() {\n            super();\n            this._progressSupported = false;\n        }\n        initialize(capabilities) {\n            super.initialize(capabilities);\n            if (capabilities?.window?.workDoneProgress === true) {\n                this._progressSupported = true;\n                this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {\n                    let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);\n                    if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {\n                        progress.cancel();\n                    }\n                });\n            }\n        }\n        attachWorkDoneProgress(token) {\n            if (token === undefined) {\n                return new NullProgressReporter();\n            }\n            else {\n                return new WorkDoneProgressReporterImpl(this.connection, token);\n            }\n        }\n        createWorkDoneProgress() {\n            if (this._progressSupported) {\n                const token = (0, uuid_1.generateUuid)();\n                return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {\n                    const result = new WorkDoneProgressServerReporterImpl(this.connection, token);\n                    return result;\n                });\n            }\n            else {\n                return Promise.resolve(new NullProgressServerReporter());\n            }\n        }\n    };\n};\nexports.ProgressFeature = ProgressFeature;\nvar ResultProgress;\n(function (ResultProgress) {\n    ResultProgress.type = new vscode_languageserver_protocol_1.ProgressType();\n})(ResultProgress || (ResultProgress = {}));\nclass ResultProgressReporterImpl {\n    constructor(_connection, _token) {\n        this._connection = _connection;\n        this._token = _token;\n    }\n    report(data) {\n        this._connection.sendProgress(ResultProgress.type, this._token, data);\n    }\n}\nfunction attachPartialResult(connection, params) {\n    if (params === undefined || params.partialResultToken === undefined) {\n        return undefined;\n    }\n    const token = params.partialResultToken;\n    delete params.partialResultToken;\n    return new ResultProgressReporterImpl(connection, token);\n}\nexports.attachPartialResult = attachPartialResult;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigurationFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nconst ConfigurationFeature = (Base) => {\n    return class extends Base {\n        getConfiguration(arg) {\n            if (!arg) {\n                return this._getConfiguration({});\n            }\n            else if (Is.string(arg)) {\n                return this._getConfiguration({ section: arg });\n            }\n            else {\n                return this._getConfiguration(arg);\n            }\n        }\n        _getConfiguration(arg) {\n            let params = {\n                items: Array.isArray(arg) ? arg : [arg]\n            };\n            return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {\n                if (Array.isArray(result)) {\n                    return Array.isArray(arg) ? result : result[0];\n                }\n                else {\n                    return Array.isArray(arg) ? [] : null;\n                }\n            });\n        }\n    };\n};\nexports.ConfigurationFeature = ConfigurationFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WorkspaceFoldersFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst WorkspaceFoldersFeature = (Base) => {\n    return class extends Base {\n        constructor() {\n            super();\n            this._notificationIsAutoRegistered = false;\n        }\n        initialize(capabilities) {\n            super.initialize(capabilities);\n            let workspaceCapabilities = capabilities.workspace;\n            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {\n                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();\n                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {\n                    this._onDidChangeWorkspaceFolders.fire(params.event);\n                });\n            }\n        }\n        fillServerCapabilities(capabilities) {\n            super.fillServerCapabilities(capabilities);\n            const changeNotifications = capabilities.workspace?.workspaceFolders?.changeNotifications;\n            this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === 'string';\n        }\n        getWorkspaceFolders() {\n            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);\n        }\n        get onDidChangeWorkspaceFolders() {\n            if (!this._onDidChangeWorkspaceFolders) {\n                throw new Error('Client doesn\\'t support sending workspace folder change events.');\n            }\n            if (!this._notificationIsAutoRegistered && !this._unregistration) {\n                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);\n            }\n            return this._onDidChangeWorkspaceFolders.event;\n        }\n    };\n};\nexports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CallHierarchyFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst CallHierarchyFeature = (Base) => {\n    return class extends Base {\n        get callHierarchy() {\n            return {\n                onPrepare: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);\n                    });\n                },\n                onIncomingCalls: (handler) => {\n                    const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                },\n                onOutgoingCalls: (handler) => {\n                    const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.CallHierarchyFeature = CallHierarchyFeature;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShowDocumentFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst ShowDocumentFeature = (Base) => {\n    return class extends Base {\n        showDocument(params) {\n            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);\n        }\n    };\n};\nexports.ShowDocumentFeature = ShowDocumentFeature;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileOperationsFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst FileOperationsFeature = (Base) => {\n    return class extends Base {\n        onDidCreateFiles(handler) {\n            return this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {\n                handler(params);\n            });\n        }\n        onDidRenameFiles(handler) {\n            return this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {\n                handler(params);\n            });\n        }\n        onDidDeleteFiles(handler) {\n            return this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {\n                handler(params);\n            });\n        }\n        onWillCreateFiles(handler) {\n            return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {\n                return handler(params, cancel);\n            });\n        }\n        onWillRenameFiles(handler) {\n            return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {\n                return handler(params, cancel);\n            });\n        }\n        onWillDeleteFiles(handler) {\n            return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {\n                return handler(params, cancel);\n            });\n        }\n    };\n};\nexports.FileOperationsFeature = FileOperationsFeature;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinkedEditingRangeFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst LinkedEditingRangeFeature = (Base) => {\n    return class extends Base {\n        onLinkedEditingRange(handler) {\n            return this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {\n                return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);\n            });\n        }\n    };\n};\nexports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeHierarchyFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst TypeHierarchyFeature = (Base) => {\n    return class extends Base {\n        get typeHierarchy() {\n            return {\n                onPrepare: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);\n                    });\n                },\n                onSupertypes: (handler) => {\n                    const type = vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                },\n                onSubtypes: (handler) => {\n                    const type = vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.TypeHierarchyFeature = TypeHierarchyFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlineValueFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst InlineValueFeature = (Base) => {\n    return class extends Base {\n        get inlineValue() {\n            return {\n                refresh: () => {\n                    return this.connection.sendRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type);\n                },\n                on: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.InlineValueFeature = InlineValueFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FoldingRangeFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst FoldingRangeFeature = (Base) => {\n    return class extends Base {\n        get foldingRange() {\n            return {\n                refresh: () => {\n                    return this.connection.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type);\n                },\n                on: (handler) => {\n                    const type = vscode_languageserver_protocol_1.FoldingRangeRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.FoldingRangeFeature = FoldingRangeFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InlayHintFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst InlayHintFeature = (Base) => {\n    return class extends Base {\n        get inlayHint() {\n            return {\n                refresh: () => {\n                    return this.connection.sendRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type);\n                },\n                on: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params));\n                    });\n                },\n                resolve: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, (params, cancel) => {\n                        return handler(params, cancel);\n                    });\n                }\n            };\n        }\n    };\n};\nexports.InlayHintFeature = InlayHintFeature;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DiagnosticFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst DiagnosticFeature = (Base) => {\n    return class extends Base {\n        get diagnostics() {\n            return {\n                refresh: () => {\n                    return this.connection.sendRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type);\n                },\n                on: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.partialResult, params));\n                    });\n                },\n                onWorkspace: (handler) => {\n                    return this.connection.onRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, params));\n                    });\n                }\n            };\n        }\n    };\n};\nexports.DiagnosticFeature = DiagnosticFeature;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MonikerFeature = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst MonikerFeature = (Base) => {\n    return class extends Base {\n        get moniker() {\n            return {\n                on: (handler) => {\n                    const type = vscode_languageserver_protocol_1.MonikerRequest.type;\n                    return this.connection.onRequest(type, (params, cancel) => {\n                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));\n                    });\n                },\n            };\n        }\n    };\n};\nexports.MonikerFeature = MonikerFeature;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConnection = exports.combineFeatures = exports.combineNotebooksFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._NotebooksImpl = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = void 0;\nconst vscode_languageserver_protocol_1 = require(\"vscode-languageserver-protocol\");\nconst Is = require(\"./utils/is\");\nconst UUID = require(\"./utils/uuid\");\nconst progress_1 = require(\"./progress\");\nconst configuration_1 = require(\"./configuration\");\nconst workspaceFolder_1 = require(\"./workspaceFolder\");\nconst callHierarchy_1 = require(\"./callHierarchy\");\nconst semanticTokens_1 = require(\"./semanticTokens\");\nconst showDocument_1 = require(\"./showDocument\");\nconst fileOperations_1 = require(\"./fileOperations\");\nconst linkedEditingRange_1 = require(\"./linkedEditingRange\");\nconst typeHierarchy_1 = require(\"./typeHierarchy\");\nconst inlineValue_1 = require(\"./inlineValue\");\nconst foldingRange_1 = require(\"./foldingRange\");\n// import { InlineCompletionFeatureShape, InlineCompletionFeature } from './inlineCompletion.proposed';\nconst inlayHint_1 = require(\"./inlayHint\");\nconst diagnostic_1 = require(\"./diagnostic\");\nconst notebook_1 = require(\"./notebook\");\nconst moniker_1 = require(\"./moniker\");\nfunction null2Undefined(value) {\n    if (value === null) {\n        return undefined;\n    }\n    return value;\n}\n/**\n * Helps tracking error message. Equal occurrences of the same\n * message are only stored once. This class is for example\n * useful if text documents are validated in a loop and equal\n * error message should be folded into one.\n */\nclass ErrorMessageTracker {\n    constructor() {\n        this._messages = Object.create(null);\n    }\n    /**\n     * Add a message to the tracker.\n     *\n     * @param message The message to add.\n     */\n    add(message) {\n        let count = this._messages[message];\n        if (!count) {\n            count = 0;\n        }\n        count++;\n        this._messages[message] = count;\n    }\n    /**\n     * Send all tracked messages to the connection's window.\n     *\n     * @param connection The connection established between client and server.\n     */\n    sendErrors(connection) {\n        Object.keys(this._messages).forEach(message => {\n            connection.window.showErrorMessage(message);\n        });\n    }\n}\nexports.ErrorMessageTracker = ErrorMessageTracker;\nclass RemoteConsoleImpl {\n    constructor() {\n    }\n    rawAttach(connection) {\n        this._rawConnection = connection;\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    initialize(_capabilities) {\n    }\n    error(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);\n    }\n    warn(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);\n    }\n    info(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);\n    }\n    log(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);\n    }\n    debug(message) {\n        this.send(vscode_languageserver_protocol_1.MessageType.Debug, message);\n    }\n    send(type, message) {\n        if (this._rawConnection) {\n            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message }).catch(() => {\n                (0, vscode_languageserver_protocol_1.RAL)().console.error(`Sending log message failed`);\n            });\n        }\n    }\n}\nclass _RemoteWindowImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    showErrorMessage(message, ...actions) {\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n    }\n    showWarningMessage(message, ...actions) {\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n    }\n    showInformationMessage(message, ...actions) {\n        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);\n    }\n}\nconst RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));\nvar BulkRegistration;\n(function (BulkRegistration) {\n    /**\n     * Creates a new bulk registration.\n     * @return an empty bulk registration.\n     */\n    function create() {\n        return new BulkRegistrationImpl();\n    }\n    BulkRegistration.create = create;\n})(BulkRegistration || (exports.BulkRegistration = BulkRegistration = {}));\nclass BulkRegistrationImpl {\n    constructor() {\n        this._registrations = [];\n        this._registered = new Set();\n    }\n    add(type, registerOptions) {\n        const method = Is.string(type) ? type : type.method;\n        if (this._registered.has(method)) {\n            throw new Error(`${method} is already added to this registration`);\n        }\n        const id = UUID.generateUuid();\n        this._registrations.push({\n            id: id,\n            method: method,\n            registerOptions: registerOptions || {}\n        });\n        this._registered.add(method);\n    }\n    asRegistrationParams() {\n        return {\n            registrations: this._registrations\n        };\n    }\n}\nvar BulkUnregistration;\n(function (BulkUnregistration) {\n    function create() {\n        return new BulkUnregistrationImpl(undefined, []);\n    }\n    BulkUnregistration.create = create;\n})(BulkUnregistration || (exports.BulkUnregistration = BulkUnregistration = {}));\nclass BulkUnregistrationImpl {\n    constructor(_connection, unregistrations) {\n        this._connection = _connection;\n        this._unregistrations = new Map();\n        unregistrations.forEach(unregistration => {\n            this._unregistrations.set(unregistration.method, unregistration);\n        });\n    }\n    get isAttached() {\n        return !!this._connection;\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    add(unregistration) {\n        this._unregistrations.set(unregistration.method, unregistration);\n    }\n    dispose() {\n        let unregistrations = [];\n        for (let unregistration of this._unregistrations.values()) {\n            unregistrations.push(unregistration);\n        }\n        let params = {\n            unregisterations: unregistrations\n        };\n        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {\n            this._connection.console.info(`Bulk unregistration failed.`);\n        });\n    }\n    disposeSingle(arg) {\n        const method = Is.string(arg) ? arg : arg.method;\n        const unregistration = this._unregistrations.get(method);\n        if (!unregistration) {\n            return false;\n        }\n        let params = {\n            unregisterations: [unregistration]\n        };\n        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {\n            this._unregistrations.delete(method);\n        }, (_error) => {\n            this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);\n        });\n        return true;\n    }\n}\nclass RemoteClientImpl {\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {\n        if (typeOrRegistrations instanceof BulkRegistrationImpl) {\n            return this.registerMany(typeOrRegistrations);\n        }\n        else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {\n            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);\n        }\n        else {\n            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);\n        }\n    }\n    registerSingle1(unregistration, type, registerOptions) {\n        const method = Is.string(type) ? type : type.method;\n        const id = UUID.generateUuid();\n        let params = {\n            registrations: [{ id, method, registerOptions: registerOptions || {} }]\n        };\n        if (!unregistration.isAttached) {\n            unregistration.attach(this.connection);\n        }\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {\n            unregistration.add({ id: id, method: method });\n            return unregistration;\n        }, (_error) => {\n            this.connection.console.info(`Registering request handler for ${method} failed.`);\n            return Promise.reject(_error);\n        });\n    }\n    registerSingle2(type, registerOptions) {\n        const method = Is.string(type) ? type : type.method;\n        const id = UUID.generateUuid();\n        let params = {\n            registrations: [{ id, method, registerOptions: registerOptions || {} }]\n        };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {\n            return vscode_languageserver_protocol_1.Disposable.create(() => {\n                this.unregisterSingle(id, method).catch(() => { this.connection.console.info(`Un-registering capability with id ${id} failed.`); });\n            });\n        }, (_error) => {\n            this.connection.console.info(`Registering request handler for ${method} failed.`);\n            return Promise.reject(_error);\n        });\n    }\n    unregisterSingle(id, method) {\n        let params = {\n            unregisterations: [{ id, method }]\n        };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {\n            this.connection.console.info(`Un-registering request handler for ${id} failed.`);\n        });\n    }\n    registerMany(registrations) {\n        let params = registrations.asRegistrationParams();\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {\n            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => { return { id: registration.id, method: registration.method }; }));\n        }, (_error) => {\n            this.connection.console.info(`Bulk registration failed.`);\n            return Promise.reject(_error);\n        });\n    }\n}\nclass _RemoteWorkspaceImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    applyEdit(paramOrEdit) {\n        function isApplyWorkspaceEditParams(value) {\n            return value && !!value.edit;\n        }\n        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };\n        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);\n    }\n}\nconst RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolder_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));\nclass TracerImpl {\n    constructor() {\n        this._trace = vscode_languageserver_protocol_1.Trace.Off;\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    set trace(value) {\n        this._trace = value;\n    }\n    log(message, verbose) {\n        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {\n            return;\n        }\n        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {\n            message: message,\n            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined\n        }).catch(() => {\n            // Very hard to decide what to do. We tried to send a log\n            // message which failed so we can't simply send another :-(.\n        });\n    }\n}\nclass TelemetryImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    logEvent(data) {\n        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data).catch(() => {\n            this.connection.console.log(`Sending TelemetryEventNotification failed`);\n        });\n    }\n}\nclass _LanguagesImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    attachWorkDoneProgress(params) {\n        return (0, progress_1.attachWorkDone)(this.connection, params);\n    }\n    attachPartialResultProgress(_type, params) {\n        return (0, progress_1.attachPartialResult)(this.connection, params);\n    }\n}\nexports._LanguagesImpl = _LanguagesImpl;\nconst LanguagesImpl = (0, foldingRange_1.FoldingRangeFeature)((0, moniker_1.MonikerFeature)((0, diagnostic_1.DiagnosticFeature)((0, inlayHint_1.InlayHintFeature)((0, inlineValue_1.InlineValueFeature)((0, typeHierarchy_1.TypeHierarchyFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl)))))))));\nclass _NotebooksImpl {\n    constructor() {\n    }\n    attach(connection) {\n        this._connection = connection;\n    }\n    get connection() {\n        if (!this._connection) {\n            throw new Error('Remote is not attached to a connection yet.');\n        }\n        return this._connection;\n    }\n    initialize(_capabilities) {\n    }\n    fillServerCapabilities(_capabilities) {\n    }\n    attachWorkDoneProgress(params) {\n        return (0, progress_1.attachWorkDone)(this.connection, params);\n    }\n    attachPartialResultProgress(_type, params) {\n        return (0, progress_1.attachPartialResult)(this.connection, params);\n    }\n}\nexports._NotebooksImpl = _NotebooksImpl;\nconst NotebooksImpl = (0, notebook_1.NotebookSyncFeature)(_NotebooksImpl);\nfunction combineConsoleFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineConsoleFeatures = combineConsoleFeatures;\nfunction combineTelemetryFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineTelemetryFeatures = combineTelemetryFeatures;\nfunction combineTracerFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineTracerFeatures = combineTracerFeatures;\nfunction combineClientFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineClientFeatures = combineClientFeatures;\nfunction combineWindowFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineWindowFeatures = combineWindowFeatures;\nfunction combineWorkspaceFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineWorkspaceFeatures = combineWorkspaceFeatures;\nfunction combineLanguagesFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineLanguagesFeatures = combineLanguagesFeatures;\nfunction combineNotebooksFeatures(one, two) {\n    return function (Base) {\n        return two(one(Base));\n    };\n}\nexports.combineNotebooksFeatures = combineNotebooksFeatures;\nfunction combineFeatures(one, two) {\n    function combine(one, two, func) {\n        if (one && two) {\n            return func(one, two);\n        }\n        else if (one) {\n            return one;\n        }\n        else {\n            return two;\n        }\n    }\n    let result = {\n        __brand: 'features',\n        console: combine(one.console, two.console, combineConsoleFeatures),\n        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),\n        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),\n        client: combine(one.client, two.client, combineClientFeatures),\n        window: combine(one.window, two.window, combineWindowFeatures),\n        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures),\n        languages: combine(one.languages, two.languages, combineLanguagesFeatures),\n        notebooks: combine(one.notebooks, two.notebooks, combineNotebooksFeatures)\n    };\n    return result;\n}\nexports.combineFeatures = combineFeatures;\nfunction createConnection(connectionFactory, watchDog, factories) {\n    const logger = (factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl());\n    const connection = connectionFactory(logger);\n    logger.rawAttach(connection);\n    const tracer = (factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl());\n    const telemetry = (factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl());\n    const client = (factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl());\n    const remoteWindow = (factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl());\n    const workspace = (factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl());\n    const languages = (factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl());\n    const notebooks = (factories && factories.notebooks ? new (factories.notebooks(NotebooksImpl))() : new NotebooksImpl());\n    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages, notebooks];\n    function asPromise(value) {\n        if (value instanceof Promise) {\n            return value;\n        }\n        else if (Is.thenable(value)) {\n            return new Promise((resolve, reject) => {\n                value.then((resolved) => resolve(resolved), (error) => reject(error));\n            });\n        }\n        else {\n            return Promise.resolve(value);\n        }\n    }\n    let shutdownHandler = undefined;\n    let initializeHandler = undefined;\n    let exitHandler = undefined;\n    let protocolConnection = {\n        listen: () => connection.listen(),\n        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),\n        onRequest: (type, handler) => connection.onRequest(type, handler),\n        sendNotification: (type, param) => {\n            const method = Is.string(type) ? type : type.method;\n            return connection.sendNotification(method, param);\n        },\n        onNotification: (type, handler) => connection.onNotification(type, handler),\n        onProgress: connection.onProgress,\n        sendProgress: connection.sendProgress,\n        onInitialize: (handler) => {\n            initializeHandler = handler;\n            return {\n                dispose: () => {\n                    initializeHandler = undefined;\n                }\n            };\n        },\n        onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),\n        onShutdown: (handler) => {\n            shutdownHandler = handler;\n            return {\n                dispose: () => {\n                    shutdownHandler = undefined;\n                }\n            };\n        },\n        onExit: (handler) => {\n            exitHandler = handler;\n            return {\n                dispose: () => {\n                    exitHandler = undefined;\n                }\n            };\n        },\n        get console() { return logger; },\n        get telemetry() { return telemetry; },\n        get tracer() { return tracer; },\n        get client() { return client; },\n        get window() { return remoteWindow; },\n        get workspace() { return workspace; },\n        get languages() { return languages; },\n        get notebooks() { return notebooks; },\n        onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),\n        onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),\n        __textDocumentSync: undefined,\n        onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),\n        onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),\n        onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),\n        onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),\n        onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),\n        onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),\n        sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),\n        onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);\n        }),\n        onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),\n        onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);\n        }),\n        onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onWorkspaceSymbolResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler),\n        onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onCodeActionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);\n        }),\n        onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);\n        }),\n        onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);\n        }),\n        onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {\n            return handler(params, cancel);\n        }),\n        onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onSelectionRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));\n        }),\n        onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {\n            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);\n        }),\n        dispose: () => connection.dispose()\n    };\n    for (let remote of allRemotes) {\n        remote.attach(protocolConnection);\n    }\n    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {\n        watchDog.initialize(params);\n        if (Is.string(params.trace)) {\n            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);\n        }\n        for (let remote of allRemotes) {\n            remote.initialize(params.capabilities);\n        }\n        if (initializeHandler) {\n            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection, params), undefined);\n            return asPromise(result).then((value) => {\n                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {\n                    return value;\n                }\n                let result = value;\n                if (!result) {\n                    result = { capabilities: {} };\n                }\n                let capabilities = result.capabilities;\n                if (!capabilities) {\n                    capabilities = {};\n                    result.capabilities = capabilities;\n                }\n                if (capabilities.textDocumentSync === undefined || capabilities.textDocumentSync === null) {\n                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n                }\n                else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {\n                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;\n                }\n                for (let remote of allRemotes) {\n                    remote.fillServerCapabilities(capabilities);\n                }\n                return result;\n            });\n        }\n        else {\n            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };\n            for (let remote of allRemotes) {\n                remote.fillServerCapabilities(result.capabilities);\n            }\n            return result;\n        }\n    });\n    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {\n        watchDog.shutdownReceived = true;\n        if (shutdownHandler) {\n            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);\n        }\n        else {\n            return undefined;\n        }\n    });\n    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {\n        try {\n            if (exitHandler) {\n                exitHandler();\n            }\n        }\n        finally {\n            if (watchDog.shutdownReceived) {\n                watchDog.exit(0);\n            }\n            else {\n                watchDog.exit(1);\n            }\n        }\n    });\n    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {\n        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);\n    });\n    return protocolConnection;\n}\nexports.createConnection = createConnection;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProposedFeatures = exports.NotebookDocuments = exports.TextDocuments = exports.SemanticTokensBuilder = void 0;\nconst semanticTokens_1 = require(\"./semanticTokens\");\nObject.defineProperty(exports, \"SemanticTokensBuilder\", { enumerable: true, get: function () { return semanticTokens_1.SemanticTokensBuilder; } });\nconst ic = require(\"./inlineCompletion.proposed\");\n__exportStar(require(\"vscode-languageserver-protocol/\"), exports);\nconst textDocuments_1 = require(\"./textDocuments\");\nObject.defineProperty(exports, \"TextDocuments\", { enumerable: true, get: function () { return textDocuments_1.TextDocuments; } });\nconst notebook_1 = require(\"./notebook\");\nObject.defineProperty(exports, \"NotebookDocuments\", { enumerable: true, get: function () { return notebook_1.NotebookDocuments; } });\n__exportStar(require(\"./server\"), exports);\nvar ProposedFeatures;\n(function (ProposedFeatures) {\n    ProposedFeatures.all = {\n        __brand: 'features',\n        languages: ic.InlineCompletionFeature\n    };\n})(ProposedFeatures || (exports.ProposedFeatures = ProposedFeatures = {}));\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ----------------------------------------------------------------------------------------- */\n'use strict';\n\nmodule.exports = require('./lib/browser/main');","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConnection = void 0;\nconst api_1 = require(\"../common/api\");\n__exportStar(require(\"vscode-languageserver-protocol/browser\"), exports);\n__exportStar(require(\"../common/api\"), exports);\nlet _shutdownReceived = false;\nconst watchDog = {\n    initialize: (_params) => {\n    },\n    get shutdownReceived() {\n        return _shutdownReceived;\n    },\n    set shutdownReceived(value) {\n        _shutdownReceived = value;\n    },\n    exit: (_code) => {\n    }\n};\nfunction createConnection(arg1, arg2, arg3, arg4) {\n    let factories;\n    let reader;\n    let writer;\n    let options;\n    if (arg1 !== void 0 && arg1.__brand === 'features') {\n        factories = arg1;\n        arg1 = arg2;\n        arg2 = arg3;\n        arg3 = arg4;\n    }\n    if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {\n        options = arg1;\n    }\n    else {\n        reader = arg1;\n        writer = arg2;\n        options = arg3;\n    }\n    const connectionFactory = (logger) => {\n        return (0, api_1.createProtocolConnection)(reader, writer, logger, options);\n    };\n    return (0, api_1.createConnection)(connectionFactory, watchDog, factories);\n}\nexports.createConnection = createConnection;\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ----------------------------------------------------------------------------------------- */\n'use strict';\n\nmodule.exports = require('./lib/browser/main');","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if(n == 0) return \"\";\n  if (s.repeat) {return s.repeat(n);} // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_jsbytes\n//Weakdef\n// Pre ECMAScript 5, [apply] would not support array-like object.\n// In such setup, Typed_array would be implemented as polyfill, and [f.apply] would\n// fail here. Mark the primitive as Weakdef, so that people can override it easily.\nfunction caml_subarray_to_jsbytes (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, a.slice(i,i + Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n            v = 3;\n            if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                (c1 < 0xf5)) {\n              v = c2 - 0x3c82080 + (c << 6);\n              if (v < 0x10000 || v > 0x10ffff) v = 3;\n            }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: jsoo_is_ascii\nfunction jsoo_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_bytes_unsafe_get mutable\nfunction caml_bytes_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_set\n//Requires: caml_convert_bytes_to_array\nfunction caml_bytes_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_bytes_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_bytes_bound_error\n//Requires: caml_invalid_argument\nfunction caml_bytes_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get\n//Requires: caml_string_bound_error, caml_string_unsafe_get\n//Requires: caml_ml_string_length\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_ml_string_length\nfunction caml_string_get16(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get16\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\nfunction caml_bytes_get16(s,i) {\n  if (i >>> 0 >= s.l - 1) caml_bytes_bound_error();\n  var b1 = caml_bytes_unsafe_get (s, i),\n      b2 = caml_bytes_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_string_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_ml_string_length\nfunction caml_string_get32(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_bytes_get32\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\nfunction caml_bytes_get32(s,i) {\n  if (i >>> 0 >= s.l - 3) caml_bytes_bound_error();\n  var b1 = caml_bytes_unsafe_get (s, i),\n      b2 = caml_bytes_unsafe_get (s, i + 1),\n      b3 = caml_bytes_unsafe_get (s, i + 2),\n      b4 = caml_bytes_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_string_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\n//Requires: caml_ml_string_length\nfunction caml_string_get64(s,i) {\n  if (i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get64\n//Requires: caml_bytes_unsafe_get, caml_bytes_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_bytes_get64(s,i) {\n  if (i >>> 0 >= s.l - 7) caml_bytes_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_bytes_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_get\nfunction caml_bytes_get (s, i) {\n  if (i >>> 0 >= s.l) caml_bytes_bound_error();\n  return caml_bytes_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set (s, i, c) {\n  caml_failwith(\"caml_string_set\");\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_unsafe_set, caml_string_bound_error\n//If: !js-string\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_set16\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set16(s,i,i16){\n  if (i >>> 0 >= s.l - 1) caml_bytes_bound_error();\n  var b2 = 0xFF & i16 >> 8,\n      b1 = 0xFF & i16;\n  caml_bytes_unsafe_set (s, i + 0, b1);\n  caml_bytes_unsafe_set (s, i + 1, b2);\n  return 0\n}\n\n//Provides: caml_string_set16\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set16(s,i,i16){\n  caml_failwith(\"caml_string_set16\");\n}\n\n//Provides: caml_string_set16\n//Requires: caml_bytes_set16\n//If: !js-string\nfunction caml_string_set16(s,i,i16){\n  return caml_bytes_set16(s,i,i16);\n}\n\n//Provides: caml_bytes_set32\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set32(s,i,i32){\n  if (i >>> 0 >= s.l - 3) caml_bytes_bound_error();\n  var b4 = 0xFF & i32 >> 24,\n      b3 = 0xFF & i32 >> 16,\n      b2 = 0xFF & i32 >> 8,\n      b1 = 0xFF & i32;\n  caml_bytes_unsafe_set (s, i + 0, b1);\n  caml_bytes_unsafe_set (s, i + 1, b2);\n  caml_bytes_unsafe_set (s, i + 2, b3);\n  caml_bytes_unsafe_set (s, i + 3, b4);\n  return 0\n}\n\n//Provides: caml_string_set32\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set32(s,i,i32){\n  caml_failwith(\"caml_string_set32\");\n}\n\n//Provides: caml_string_set32\n//Requires: caml_bytes_set32\n//If: !js-string\nfunction caml_string_set32(s,i,i32){\n  return caml_bytes_set32(s,i,i32);\n}\n\n//Provides: caml_bytes_set64\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\n//Requires: caml_int64_to_bytes\nfunction caml_bytes_set64(s,i,i64){\n  if (i >>> 0 >= s.l - 7) caml_bytes_bound_error();\n  var a = caml_int64_to_bytes(i64);\n  for(var j = 0; j < 8; j++) {\n    caml_bytes_unsafe_set (s, i + 7 - j, a[j]);\n  }\n  return 0\n}\n\n//Provides: caml_string_set64\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_set64(s,i,i64){\n  caml_failwith(\"caml_string_set64\");\n}\n\n//Provides: caml_string_set64\n//Requires: caml_bytes_set64\n//If: !js-string\nfunction caml_string_set64(s,i,i64){\n  return caml_bytes_set64(s,i,i64);\n}\n\n//Provides: caml_bytes_set\n//Requires: caml_bytes_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_bytes_bound_error();\n  return caml_bytes_unsafe_set (s, i, c);\n}\n\n//Provides: caml_bytes_of_utf16_jsstring\n//Requires: jsoo_is_ascii, caml_utf8_of_utf16, MlBytes\nfunction caml_bytes_of_utf16_jsstring (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!jsoo_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlBytes(tag, s, s.length);\n}\n\n\n//Provides: MlBytes\n//Requires: caml_convert_string_to_bytes, jsoo_is_ascii, caml_utf16_of_utf8\nfunction MlBytes (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlBytes.prototype.toString = function(){\n  switch (this.t) {\n  case 9: /*BYTES | ASCII*/\n    return this.c;\n  default:\n    caml_convert_string_to_bytes(this);\n  case 0: /*BYTES | UNKOWN*/\n    if (jsoo_is_ascii(this.c)) {\n      this.t = 9; /*BYTES | ASCII*/\n      return this.c;\n    }\n    this.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return this.c;\n  }\n};\nMlBytes.prototype.toUtf16 = function (){\n  var r = this.toString();\n  if(this.t == 9) return r\n  return caml_utf16_of_utf8(r);\n}\nMlBytes.prototype.slice = function (){\n  var content = this.t == 4 ? this.c.slice() : this.c;\n  return new MlBytes(this.t,content,this.l);\n}\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_jsbytes\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_jsbytes (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_bytes_to_array\nfunction caml_convert_bytes_to_array (s) {\n  /* Assumes not ARRAY */\n  var a = new Uint8Array(s.l);\n  var b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_uint8_array_of_bytes mutable\n//Requires: caml_convert_bytes_to_array\nfunction caml_uint8_array_of_bytes (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_uint8_array_of_string mutable\n//Requires: caml_convert_bytes_to_array\n//Requires: caml_ml_string_length, caml_string_unsafe_get\nfunction caml_uint8_array_of_string (s) {\n  var l = caml_ml_string_length(s);\n  var a = new Uint8Array(l);\n  var i = 0;\n  for (; i < l; i++) a[i] = caml_string_unsafe_get(s,i);\n  return a;\n}\n\n//Provides: caml_create_string const\n//Requires: MlBytes, caml_invalid_argument\n//If: !js-string\nfunction caml_create_string(len) {\n  if(len < 0) caml_invalid_argument(\"String.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_create_string const\n//Requires: caml_invalid_argument\n//If: js-string\nfunction caml_create_string(len) {\n  caml_invalid_argument(\"String.create\");\n}\n\n//Provides: caml_create_bytes const\n//Requires: MlBytes,caml_invalid_argument\nfunction caml_create_bytes(len) {\n  if (len < 0) caml_invalid_argument(\"Bytes.create\");\n  return new MlBytes(len?2:9,\"\",len);\n}\n\n//Provides: caml_string_of_array\n//Requires: caml_subarray_to_jsbytes, caml_string_of_jsbytes\nfunction caml_string_of_array (a) {\n  return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length));\n}\n\n//Provides: caml_bytes_of_array\n//Requires: MlBytes\nfunction caml_bytes_of_array (a) {\n  if(! (a instanceof Uint8Array)) {\n    a = new Uint8Array(a);\n  }\n  return new MlBytes(4,a,a.length);\n}\n\n//Provides: caml_bytes_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n\n//Provides: caml_bytes_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_notequal mutable (const, const)\n//Requires: caml_bytes_equal\nfunction caml_bytes_notequal(s1, s2) { return 1-caml_bytes_equal(s1, s2); }\n\n//Provides: caml_bytes_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n//Provides: caml_bytes_greaterequal\n//Requires: caml_bytes_lessequal\nfunction caml_bytes_greaterequal(s1, s2) {\n  return caml_bytes_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_bytes_greaterthan\n//Requires: caml_bytes_lessthan\nfunction caml_bytes_greaterthan(s1, s2) {\n  return caml_bytes_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_bytes\n//Requires: caml_str_repeat, caml_convert_bytes_to_array\n//Alias: caml_fill_string\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_bytes\n//Requires: caml_subarray_to_jsbytes, caml_convert_bytes_to_array\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_jsbytes(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n      caml_subarray_to_jsbytes(s1.c, i1, len):\n      (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_bytes_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */) {\n      if (i2 <= i1) {\n        for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n      } else {\n        for (var i = len - 1; i >= 0; i--) c2 [i2 + i] = c1 [i1 + i];\n      }\n    } else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_string\n//Requires: caml_blit_bytes, caml_bytes_of_string\nfunction caml_blit_string(a,b,c,d,e) {\n  caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);\n  return 0\n}\n\n//Provides: caml_ml_bytes_length const\nfunction caml_ml_bytes_length(s) { return s.l }\n\n//Provides: caml_string_concat\n//If: js-string\nfunction caml_string_concat(a,b) { return a + b }\n\n//Provides: caml_string_concat\n//Requires: caml_convert_string_to_bytes, MlBytes\n//If: !js-string\nfunction caml_string_concat(s1,s2){\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return new MlBytes(s1.t,s1.c+s2.c,s1.l+s2.l)\n}\n\n\n//Provides: caml_string_unsafe_get const\n//If: js-string\nfunction caml_string_unsafe_get (s, i) {\n  return s.charCodeAt(i);\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_failwith\n//If: js-string\nfunction caml_string_unsafe_set (s, i, c) {\n  caml_failwith(\"caml_string_unsafe_set\");\n}\n\n//Provides: caml_ml_string_length const\n//If: js-string\nfunction caml_ml_string_length(s) {\n  return s.length\n}\n\n//Provides: caml_string_compare const\n//If: js-string\nfunction caml_string_compare(s1, s2) {\n  return (s1 < s2)?-1:(s1 > s2)?1:0;\n}\n\n//Provides: caml_string_equal const\n//If: js-string\nfunction caml_string_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  return 0;\n}\n\n//Provides: caml_string_lessequal const\n//If: js-string\nfunction caml_string_lessequal(s1, s2) {\n  return (s1 <= s2)?1:0;\n}\n\n//Provides: caml_string_lessthan const\n//If: js-string\nfunction caml_string_lessthan(s1, s2) {\n  return (s1 < s2)?1:0;\n}\n\n//Provides: caml_string_of_bytes\n//Requires: caml_convert_string_to_bytes, caml_string_of_jsbytes\n//If: js-string\nfunction caml_string_of_bytes(s) {\n  (s.t & 6) && caml_convert_string_to_bytes(s);\n  return caml_string_of_jsbytes(s.c);\n}\n\n//Provides: caml_bytes_of_string const\n//Requires: caml_bytes_of_jsbytes, caml_jsbytes_of_string\n//If: js-string\nfunction caml_bytes_of_string(s) {\n  return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));\n}\n\n//Provides: caml_string_of_jsbytes const\n//If: js-string\nfunction caml_string_of_jsbytes(x) { return x }\n\n//Provides: caml_jsbytes_of_string const\n//If: js-string\nfunction caml_jsbytes_of_string(x) { return x }\n\n//Provides: caml_jsstring_of_string const\n//Requires: jsoo_is_ascii, caml_utf16_of_utf8\n//If: js-string\nfunction caml_jsstring_of_string(s) {\n  if(jsoo_is_ascii(s))\n    return s;\n  return caml_utf16_of_utf8(s); }\n\n//Provides: caml_string_of_jsstring const\n//Requires: jsoo_is_ascii, caml_utf8_of_utf16, caml_string_of_jsbytes\n//If: js-string\nfunction caml_string_of_jsstring (s) {\n  if (jsoo_is_ascii(s))\n    return caml_string_of_jsbytes(s)\n  else return caml_string_of_jsbytes(caml_utf8_of_utf16(s));\n}\n\n//Provides: caml_bytes_of_jsbytes const\n//Requires: MlBytes\nfunction caml_bytes_of_jsbytes(s) { return new MlBytes(0,s,s.length); }\n\n\n// The section below should be used when use-js-string=false\n\n//Provides: caml_string_unsafe_get const\n//Requires: caml_bytes_unsafe_get\n//If: !js-string\nfunction caml_string_unsafe_get (s, i) {\n  return caml_bytes_unsafe_get(s,i);\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_bytes_unsafe_set\n//If: !js-string\nfunction caml_string_unsafe_set (s, i, c) {\n  return caml_bytes_unsafe_set(s,i,c);\n}\n\n//Provides: caml_ml_string_length const\n//Requires: caml_ml_bytes_length\n//If: !js-string\nfunction caml_ml_string_length(s) {\n  return caml_ml_bytes_length(s)\n}\n\n//Provides: caml_string_compare\n//Requires: caml_bytes_compare\n//If: !js-string\nfunction caml_string_compare(s1, s2) {\n  return caml_bytes_compare(s1,s2)\n}\n\n//Provides: caml_string_equal\n//Requires: caml_bytes_equal\n//If: !js-string\nfunction caml_string_equal(s1, s2) {\n  return caml_bytes_equal(s1,s2)\n}\n\n//Provides: caml_string_lessequal\n//Requires: caml_bytes_lessequal\n//If: !js-string\nfunction caml_string_lessequal(s1, s2) {\n  return caml_bytes_lessequal(s1,s2)\n}\n\n//Provides: caml_string_lessthan\n//Requires: caml_bytes_lessthan\n//If: !js-string\nfunction caml_string_lessthan(s1, s2) {\n  return caml_bytes_lessthan(s1,s2)\n}\n\n//Provides: caml_string_of_bytes\n//If: !js-string\nfunction caml_string_of_bytes(s) { return s }\n\n//Provides: caml_bytes_of_string const\n//If: !js-string\nfunction caml_bytes_of_string(s) { return s }\n\n//Provides: caml_string_of_jsbytes const\n//Requires: caml_bytes_of_jsbytes\n//If: !js-string\nfunction caml_string_of_jsbytes(s) { return caml_bytes_of_jsbytes(s); }\n\n//Provides: caml_jsbytes_of_string const\n//Requires: caml_convert_string_to_bytes\n//If: !js-string\nfunction caml_jsbytes_of_string(s) {\n  (s.t & 6) && caml_convert_string_to_bytes(s);\n  return s.c }\n\n//Provides: caml_jsstring_of_string mutable (const)\n//If: !js-string\nfunction caml_jsstring_of_string(s){\n  return s.toUtf16()\n}\n\n//Provides: caml_string_of_jsstring\n//Requires: caml_bytes_of_utf16_jsstring\n//If: !js-string\nfunction caml_string_of_jsstring (s) {\n  return caml_bytes_of_utf16_jsstring(s);\n}\n\n//Provides: caml_is_ml_bytes\n//Requires: MlBytes\nfunction caml_is_ml_bytes(s) {\n  return (s instanceof MlBytes);\n}\n\n//Provides: caml_ml_bytes_content\n//Requires: MlBytes, caml_convert_string_to_bytes\nfunction caml_ml_bytes_content(s) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    caml_convert_string_to_bytes(s);\n  case 0: /* BYTES */\n    return s.c;\n  case 4:\n    return s.c\n  }\n}\n\n//Provides: caml_is_ml_string\n//Requires: jsoo_is_ascii\n//If: js-string\nfunction caml_is_ml_string(s) {\n  return (typeof s === \"string\" && !/[^\\x00-\\xff]/.test(s));\n}\n\n//Provides: caml_is_ml_string\n//Requires: caml_is_ml_bytes\n//If: !js-string\nfunction caml_is_ml_string(s) {\n  return caml_is_ml_bytes(s);\n}\n\n// The functions below are deprecated\n\n//Provides: caml_js_to_byte_string const\n//Requires: caml_string_of_jsbytes\nfunction caml_js_to_byte_string(s) { return caml_string_of_jsbytes(s) }\n\n//Provides: caml_new_string\n//Requires: caml_string_of_jsbytes\nfunction caml_new_string (s) { return caml_string_of_jsbytes(s) }\n\n//Provides: caml_js_from_string mutable (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_from_string(s) {\n  return caml_jsstring_of_string(s)\n}\n\n//Provides: caml_to_js_string mutable (const)\n//Requires: caml_jsstring_of_string\nfunction caml_to_js_string(s) {\n  return caml_jsstring_of_string(s)\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_string_of_jsstring\nfunction caml_js_to_string (s) {\n  return caml_string_of_jsstring(s);\n}\n\n\n//Provides: caml_array_of_string\n//Requires: caml_uint8_array_of_string\nfunction caml_array_of_string(x) { return caml_uint8_array_of_string(x) }\n\n//Provides: caml_array_of_bytes\n//Requires: caml_uint8_array_of_bytes\nfunction caml_array_of_bytes(x) { return caml_uint8_array_of_bytes(x) }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard, Andy Ray\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n//\n// Bigarray.\n//\n// - all bigarray types including Int64 and Complex.\n// - fortran + c layouts\n// - sub/slice/reshape\n// - retain fast path for 1d array access\n\n//Provides: caml_ba_init const\nfunction caml_ba_init() {\n  return 0;\n}\n\n//Provides: caml_ba_get_size\n//Requires: caml_invalid_argument\nfunction caml_ba_get_size(dims) {\n  var n_dims = dims.length;\n  var size = 1;\n  for (var i = 0; i < n_dims; i++) {\n    if (dims[i] < 0)\n      caml_invalid_argument(\"Bigarray.create: negative dimension\");\n    size = size * dims[i];\n  }\n  return size;\n}\n\n//Provides: caml_ba_get_size_per_element\nfunction caml_ba_get_size_per_element(kind){\n  switch(kind){\n  case 7: case 10: case 11: return 2;\n  default: return 1;\n  }\n}\n\n//Provides: caml_ba_create_buffer\n//Requires: caml_ba_get_size_per_element\n//Requires: caml_invalid_argument\nfunction caml_ba_create_buffer(kind, size){\n  var view;\n  switch(kind){\n  case 0:  view = Float32Array; break;\n  case 1:  view = Float64Array; break;\n  case 2:  view = Int8Array; break;\n  case 3:  view = Uint8Array; break;\n  case 4:  view = Int16Array; break;\n  case 5:  view = Uint16Array; break;\n  case 6:  view = Int32Array; break;\n  case 7:  view = Int32Array; break;\n  case 8:  view = Int32Array; break;\n  case 9:  view = Int32Array; break;\n  case 10: view = Float32Array; break;\n  case 11: view = Float64Array; break;\n  case 12: view = Uint8Array; break;\n  }\n  if (!view) caml_invalid_argument(\"Bigarray.create: unsupported kind\");\n  var data = new view(size * caml_ba_get_size_per_element(kind));\n  return data;\n}\n\n//Provides: caml_ba_custom_name\n//Version: < 4.11\nvar caml_ba_custom_name = \"_bigarray\"\n\n//Provides: caml_ba_custom_name\n//Version: >= 4.11\nvar caml_ba_custom_name = \"_bigarr02\"\n\n//Provides: Ml_Bigarray\n//Requires: caml_array_bound_error, caml_invalid_argument, caml_ba_custom_name\n//Requires: caml_int64_create_lo_hi, caml_int64_hi32, caml_int64_lo32\nfunction Ml_Bigarray (kind, layout, dims, buffer) {\n\n  this.kind   = kind ;\n  this.layout = layout;\n  this.dims   = dims;\n  this.data = buffer;\n}\n\nMl_Bigarray.prototype.caml_custom = caml_ba_custom_name;\n\nMl_Bigarray.prototype.offset = function (arg) {\n  var ofs = 0;\n  if(typeof arg === \"number\") arg = [arg];\n  if (! (arg instanceof Array)) caml_invalid_argument(\"bigarray.js: invalid offset\");\n  if (this.dims.length != arg.length)\n    caml_invalid_argument(\"Bigarray.get/set: bad number of dimensions\");\n  if(this.layout == 0 /* c_layout */) {\n    for (var i = 0; i < this.dims.length; i++) {\n      if (arg[i] < 0 || arg[i] >= this.dims[i])\n        caml_array_bound_error();\n      ofs = (ofs * this.dims[i]) + arg[i];\n    }\n  } else {\n    for (var i = this.dims.length - 1; i >= 0; i--) {\n      if (arg[i] < 1 || arg[i] > this.dims[i]){\n        caml_array_bound_error();\n      }\n      ofs = (ofs * this.dims[i]) + (arg[i] - 1);\n    }\n  }\n  return ofs;\n}\n\nMl_Bigarray.prototype.get = function (ofs) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    var l = this.data[ofs * 2 + 0];\n    var h = this.data[ofs * 2 + 1];\n    return caml_int64_create_lo_hi(l,h);\n  case 10: case 11:\n    // Complex32, Complex64\n    var r = this.data[ofs * 2 + 0];\n    var i = this.data[ofs * 2 + 1];\n    return [254, r, i];\n  default:\n    return this.data[ofs]\n  }\n}\n\nMl_Bigarray.prototype.set = function (ofs,v) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    this.data[ofs * 2 + 0] = caml_int64_lo32(v);\n    this.data[ofs * 2 + 1] = caml_int64_hi32(v);\n    break;\n  case 10: case 11:\n    // Complex32, Complex64\n    this.data[ofs * 2 + 0] = v[1];\n    this.data[ofs * 2 + 1] = v[2];\n    break;\n  default:\n    this.data[ofs] = v;\n    break;\n  }\n  return 0\n}\n\n\nMl_Bigarray.prototype.fill = function (v) {\n  switch(this.kind){\n  case 7:\n    // Int64\n    var a = caml_int64_lo32(v);\n    var b = caml_int64_hi32(v);\n    if(a == b){\n      this.data.fill(a);\n    }\n    else {\n      for(var i = 0; i<this.data.length; i++){\n        this.data[i] = (i%2 == 0) ? a : b;\n      }\n    }\n    break;\n  case 10: case 11:\n    // Complex32, Complex64\n    var im = v[1];\n    var re = v[2];\n    if(im == re){\n      this.data.fill(im);\n    }\n    else {\n      for(var i = 0; i<this.data.length; i++){\n        this.data[i] = (i%2 == 0) ? im : re;\n      }\n    }\n    break;\n  default:\n    this.data.fill(v);\n    break;\n  }\n}\n\n\nMl_Bigarray.prototype.compare = function (b, total) {\n  if (this.layout != b.layout || this.kind != b.kind) {\n    var k1 = this.kind | (this.layout << 8);\n    var k2 =    b.kind | (b.layout << 8);\n    return k2 - k1;\n  }\n  if (this.dims.length != b.dims.length) {\n    return b.dims.length - this.dims.length;\n  }\n  for (var i = 0; i < this.dims.length; i++)\n    if (this.dims[i] != b.dims[i])\n      return (this.dims[i] < b.dims[i]) ? -1 : 1;\n  switch (this.kind) {\n  case 0:\n  case 1:\n  case 10:\n  case 11:\n    // Floats\n    var x, y;\n    for (var i = 0; i < this.data.length; i++) {\n      x = this.data[i];\n      y = b.data[i];\n      if (x < y)\n        return -1;\n      if (x > y)\n        return 1;\n      if (x != y) {\n        if (!total) return NaN;\n        if (x == x) return 1;\n        if (y == y) return -1;\n      }\n    }\n    break;\n  case 7:\n    // Int64\n    for (var i = 0; i < this.data.length; i+=2) {\n      // Check highest bits first\n      if (this.data[i+1] < b.data[i+1])\n        return -1;\n      if (this.data[i+1] > b.data[i+1])\n        return 1;\n      if ((this.data[i] >>> 0) < (b.data[i] >>> 0))\n        return -1;\n      if ((this.data[i] >>> 0) > (b.data[i] >>> 0))\n        return 1;\n    }\n    break;\n  case 2:\n  case 3:\n  case 4:\n  case 5:\n  case 6:\n  case 8:\n  case 9:\n  case 12:\n    for (var i = 0; i < this.data.length; i++) {\n      if (this.data[i] < b.data[i])\n        return -1;\n      if (this.data[i] > b.data[i])\n        return 1;\n    }\n    break;\n  }\n  return 0;\n}\n\n//Provides: Ml_Bigarray_c_1_1\n//Requires: Ml_Bigarray, caml_array_bound_error, caml_invalid_argument\nfunction Ml_Bigarray_c_1_1(kind, layout, dims, buffer) {\n  this.kind   = kind ;\n  this.layout = layout;\n  this.dims   = dims;\n  this.data   = buffer;\n}\n\nMl_Bigarray_c_1_1.prototype = new Ml_Bigarray()\nMl_Bigarray_c_1_1.prototype.offset = function (arg) {\n  if(typeof arg !== \"number\"){\n    if((arg instanceof Array) && arg.length == 1)\n      arg = arg[0];\n    else caml_invalid_argument(\"Ml_Bigarray_c_1_1.offset\");\n  }\n  if (arg < 0 || arg >= this.dims[0])\n    caml_array_bound_error();\n  return arg;\n}\n\nMl_Bigarray_c_1_1.prototype.get = function (ofs) {\n  return this.data[ofs];\n}\n\nMl_Bigarray_c_1_1.prototype.set = function (ofs,v) {\n  this.data[ofs] = v;\n  return 0\n}\n\nMl_Bigarray_c_1_1.prototype.fill = function (v) {\n  this.data.fill(v);\n  return 0\n}\n\n//Provides: caml_ba_compare\nfunction caml_ba_compare(a,b,total){\n  return a.compare(b,total)\n}\n\n//Provides: caml_ba_create_unsafe\n//Requires: Ml_Bigarray, Ml_Bigarray_c_1_1, caml_ba_get_size, caml_ba_get_size_per_element\n//Requires: caml_invalid_argument\nfunction caml_ba_create_unsafe(kind, layout, dims, data){\n  var size_per_element = caml_ba_get_size_per_element(kind);\n  if(caml_ba_get_size(dims) * size_per_element != data.length) {\n    caml_invalid_argument(\"length doesn't match dims\");\n  }\n  if(layout == 0 && // c_layout\n     dims.length == 1 && // Array1\n     size_per_element == 1) // 1-to-1 mapping\n    return new Ml_Bigarray_c_1_1(kind, layout, dims, data);\n  return new Ml_Bigarray(kind, layout, dims, data);\n\n}\n\n\n//Provides: caml_ba_create\n//Requires: caml_js_from_array\n//Requires: caml_ba_get_size, caml_ba_create_unsafe\n//Requires: caml_ba_create_buffer\nfunction caml_ba_create(kind, layout, dims_ml) {\n  var dims = caml_js_from_array(dims_ml);\n  var data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));\n  return caml_ba_create_unsafe(kind, layout, dims, data);\n}\n\n//Provides: caml_ba_change_layout\n//Requires: caml_ba_create_unsafe\nfunction caml_ba_change_layout(ba, layout) {\n  if(ba.layout == layout) return ba;\n  var new_dims = []\n  for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[ba.dims.length - i - 1];\n  return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);\n}\n\n//Provides: caml_ba_kind\nfunction caml_ba_kind(ba) {\n  return ba.kind;\n}\n\n//Provides: caml_ba_layout\nfunction caml_ba_layout(ba) {\n  return ba.layout;\n}\n\n//Provides: caml_ba_num_dims\nfunction caml_ba_num_dims(ba) {\n  return ba.dims.length;\n}\n\n//Provides: caml_ba_dim\n//Requires: caml_invalid_argument\nfunction caml_ba_dim(ba, i) {\n  if (i < 0 || i >= ba.dims.length)\n    caml_invalid_argument(\"Bigarray.dim\");\n  return ba.dims[i];\n}\n\n//Provides: caml_ba_dim_1\n//Requires: caml_ba_dim\nfunction caml_ba_dim_1(ba) {\n  return caml_ba_dim(ba, 0);\n}\n\n//Provides: caml_ba_dim_2\n//Requires: caml_ba_dim\nfunction caml_ba_dim_2(ba) {\n  return caml_ba_dim(ba, 1);\n}\n\n//Provides: caml_ba_dim_3\n//Requires: caml_ba_dim\nfunction caml_ba_dim_3(ba) {\n  return caml_ba_dim(ba, 2);\n}\n\n//Provides: caml_ba_get_generic\n//Requires: caml_js_from_array\nfunction caml_ba_get_generic(ba, i) {\n  var ofs = ba.offset(caml_js_from_array(i));\n  return ba.get(ofs);\n}\n\n//Provides: caml_ba_uint8_get16\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_get16(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 1 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs);\n  var b2 = ba.get(ofs + 1);\n  return (b1 | (b2 << 8));\n}\n\n//Provides: caml_ba_uint8_get32\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_get32(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 3 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs+0);\n  var b2 = ba.get(ofs+1);\n  var b3 = ba.get(ofs+2);\n  var b4 = ba.get(ofs+3);\n  return ( (b1 << 0)  |\n           (b2 << 8)  |\n           (b3 << 16) |\n           (b4 << 24) );\n}\n\n//Provides: caml_ba_uint8_get64\n//Requires: caml_array_bound_error, caml_int64_of_bytes\nfunction caml_ba_uint8_get64(ba, i0) {\n  var ofs = ba.offset(i0);\n  if(ofs + 7 >= ba.data.length) caml_array_bound_error();\n  var b1 = ba.get(ofs+0);\n  var b2 = ba.get(ofs+1);\n  var b3 = ba.get(ofs+2);\n  var b4 = ba.get(ofs+3);\n  var b5 = ba.get(ofs+4);\n  var b6 = ba.get(ofs+5);\n  var b7 = ba.get(ofs+6);\n  var b8 = ba.get(ofs+7);\n  return caml_int64_of_bytes([b8,b7,b6,b5,b4,b3,b2,b1]);\n}\n\n//Provides: caml_ba_get_1\nfunction caml_ba_get_1(ba, i0) {\n  return ba.get(ba.offset(i0));\n}\n\n//Provides: caml_ba_get_2\nfunction caml_ba_get_2(ba, i0, i1) {\n  return ba.get(ba.offset([i0,i1]));\n}\n\n//Provides: caml_ba_get_3\nfunction caml_ba_get_3(ba, i0, i1, i2) {\n  return ba.get(ba.offset([i0,i1,i2]));\n}\n\n//Provides: caml_ba_set_generic\n//Requires: caml_js_from_array\nfunction caml_ba_set_generic(ba, i, v) {\n  ba.set(ba.offset(caml_js_from_array(i)), v);\n  return 0\n}\n\n//Provides: caml_ba_uint8_set16\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_set16(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 1 >= ba.data.length) caml_array_bound_error();\n  ba.set(ofs+0,  v        & 0xff);\n  ba.set(ofs+1, (v >>> 8) & 0xff);\n  return 0;\n}\n\n//Provides: caml_ba_uint8_set32\n//Requires: caml_array_bound_error\nfunction caml_ba_uint8_set32(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 3 >= ba.data.length) caml_array_bound_error();\n  ba.set(ofs+0,  v         & 0xff);\n  ba.set(ofs+1, (v >>> 8)  & 0xff);\n  ba.set(ofs+2, (v >>> 16) & 0xff);\n  ba.set(ofs+3, (v >>> 24) & 0xff);\n  return 0;\n}\n\n//Provides: caml_ba_uint8_set64\n//Requires: caml_array_bound_error, caml_int64_to_bytes\nfunction caml_ba_uint8_set64(ba, i0, v) {\n  var ofs = ba.offset(i0);\n  if(ofs + 7 >= ba.data.length) caml_array_bound_error();\n  var v = caml_int64_to_bytes(v);\n  for(var i = 0; i < 8; i++) ba.set(ofs+i, v[7-i])\n  return 0;\n}\n\n//Provides: caml_ba_set_1\nfunction caml_ba_set_1(ba, i0, v) {\n  ba.set(ba.offset(i0), v);\n  return 0\n}\n\n//Provides: caml_ba_set_2\nfunction caml_ba_set_2(ba, i0, i1, v) {\n  ba.set(ba.offset([i0,i1]), v);\n  return 0;\n}\n\n//Provides: caml_ba_set_3\nfunction caml_ba_set_3(ba, i0, i1, i2, v) {\n  ba.set(ba.offset([i0,i1,i2]), v);\n  return 0;\n}\n\n//Provides: caml_ba_fill\nfunction caml_ba_fill(ba, v) {\n  ba.fill(v);\n  return 0;\n}\n\n//Provides: caml_ba_blit\n//Requires: caml_invalid_argument\nfunction caml_ba_blit(src, dst) {\n  if (dst.dims.length != src.dims.length)\n    caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n  for (var i = 0; i < dst.dims.length; i++)\n    if (dst.dims[i] != src.dims[i])\n      caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n  dst.data.set(src.data);\n  return 0;\n}\n\n//Provides: caml_ba_sub\n//Requires: caml_invalid_argument, caml_ba_create_unsafe, caml_ba_get_size\n//Requires: caml_ba_get_size_per_element\nfunction caml_ba_sub(ba, ofs, len) {\n  var changed_dim;\n  var mul = 1;\n  if (ba.layout == 0) {\n    for (var i = 1; i < ba.dims.length; i++)\n      mul = mul * ba.dims[i];\n    changed_dim = 0;\n  } else {\n    for (var i = 0; i < (ba.dims.length - 1); i++)\n      mul = mul * ba.dims[i];\n    changed_dim = ba.dims.length - 1;\n    ofs = ofs - 1;\n  }\n  if (ofs < 0 || len < 0 || (ofs + len) > ba.dims[changed_dim]){\n    caml_invalid_argument(\"Bigarray.sub: bad sub-array\");\n  }\n  var new_dims = [];\n  for (var i = 0; i < ba.dims.length; i++)\n    new_dims[i] = ba.dims[i];\n  new_dims[changed_dim] = len;\n  mul *= caml_ba_get_size_per_element(ba.kind);\n  var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);\n  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);\n}\n\n//Provides: caml_ba_slice\n//Requires: caml_js_from_array, caml_ba_create_unsafe, caml_invalid_argument, caml_ba_get_size\n//Requires: caml_ba_get_size_per_element\nfunction caml_ba_slice(ba, vind) {\n  vind = caml_js_from_array(vind);\n  var num_inds = vind.length;\n  var index = [];\n  var sub_dims = [];\n  var ofs;\n\n  if (num_inds > ba.dims.length)\n    caml_invalid_argument(\"Bigarray.slice: too many indices\");\n\n  // Compute offset and check bounds\n  if (ba.layout == 0) {\n    for (var i = 0; i < num_inds; i++)\n      index[i] = vind[i];\n    for (; i < ba.dims.length; i++)\n      index[i] = 0;\n    sub_dims = ba.dims.slice(num_inds);\n  } else {\n    for (var i = 0; i < num_inds; i++)\n      index[ba.dims.length - num_inds + i] = vind[i];\n    for (var i = 0; i < ba.dims.length - num_inds; i++)\n      index[i] = 1;\n    sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);\n  }\n  ofs = ba.offset(index);\n  var size = caml_ba_get_size(sub_dims);\n  var size_per_element = caml_ba_get_size_per_element(ba.kind);\n  var new_data = ba.data.subarray(ofs * size_per_element, (ofs + size) * size_per_element);\n  return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);\n}\n\n//Provides: caml_ba_reshape\n//Requires: caml_js_from_array, caml_invalid_argument, caml_ba_create_unsafe, caml_ba_get_size\nfunction caml_ba_reshape(ba, vind) {\n  vind = caml_js_from_array(vind);\n  var new_dim = [];\n  var num_dims = vind.length;\n\n  if (num_dims < 0 || num_dims > 16){\n    caml_invalid_argument(\"Bigarray.reshape: bad number of dimensions\");\n  }\n  var num_elts = 1;\n  for (var i = 0; i < num_dims; i++) {\n    new_dim[i] = vind[i];\n    if (new_dim[i] < 0)\n      caml_invalid_argument(\"Bigarray.reshape: negative dimension\");\n    num_elts = num_elts * new_dim[i];\n  }\n\n  var size = caml_ba_get_size(ba.dims);\n  // Check that sizes agree\n  if (num_elts != size)\n    caml_invalid_argument(\"Bigarray.reshape: size mismatch\");\n  return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);\n}\n\n//Provides: caml_ba_serialize\n//Requires: caml_int64_bits_of_float, caml_int64_to_bytes\n//Requires: caml_int32_bits_of_float\nfunction caml_ba_serialize(writer, ba, sz) {\n  writer.write(32, ba.dims.length);\n  writer.write(32, (ba.kind | (ba.layout << 8)));\n  if(ba.caml_custom == \"_bigarr02\")\n    for(var i = 0; i < ba.dims.length; i++) {\n      if(ba.dims[i] < 0xffff)\n        writer.write(16, ba.dims[i]);\n      else {\n        writer.write(16, 0xffff);\n        writer.write(32, 0);\n        writer.write(32, ba.dims[i]);\n      }\n    }\n  else\n    for(var i = 0; i < ba.dims.length; i++) writer.write(32,ba.dims[i])\n  switch(ba.kind){\n  case 2:  //Int8Array\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(8, ba.data[i]);\n    }\n    break;\n  case 4:  // Int16Array\n  case 5:  // Uint16Array\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(16, ba.data[i]);\n    }\n    break;\n  case 6:  // Int32Array (int32)\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(32, ba.data[i]);\n    }\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    writer.write(8,0);\n    for(var i = 0; i < ba.data.length; i++){\n      writer.write(32, ba.data[i]);\n    }\n    break;\n  case 7:  // Int32Array (int64)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var b = caml_int64_to_bytes(ba.get(i));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  case 1:  // Float64Array\n    for(var i = 0; i < ba.data.length; i++){\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  case 0:  // Float32Array\n    for(var i = 0; i < ba.data.length; i++){\n      var b = caml_int32_bits_of_float(ba.get(i));\n      writer.write(32, b);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var j = ba.get(i);\n      writer.write(32, caml_int32_bits_of_float(j[1]));\n      writer.write(32, caml_int32_bits_of_float(j[2]));\n    }\n    break;\n  case 11: // Float64Array (complex64)\n    for(var i = 0; i < ba.data.length / 2; i++){\n      var complex = ba.get(i);\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n      var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));\n      for (var j = 0; j < 8; j++) writer.write (8, b[j]);\n    }\n    break;\n  }\n  sz[0] = (4 + ba.dims.length) * 4;\n  sz[1] = (4 + ba.dims.length) * 8;\n}\n\n//Provides: caml_ba_deserialize\n//Requires: caml_ba_create_unsafe, caml_failwith\n//Requires: caml_ba_get_size\n//Requires: caml_int64_of_bytes, caml_int64_float_of_bits\n//Requires: caml_int32_float_of_bits\n//Requires: caml_ba_create_buffer\nfunction caml_ba_deserialize(reader, sz, name){\n  var num_dims = reader.read32s();\n  if (num_dims < 0 || num_dims > 16)\n    caml_failwith(\"input_value: wrong number of bigarray dimensions\");\n  var tag = reader.read32s();\n  var kind = tag & 0xff\n  var layout = (tag >> 8) & 1;\n  var dims = []\n  if(name == \"_bigarr02\")\n    for (var i = 0; i < num_dims; i++) {\n      var size_dim = reader.read16u();\n      if(size_dim == 0xffff){\n        var size_dim_hi = reader.read32u();\n        var size_dim_lo = reader.read32u();\n        if(size_dim_hi != 0)\n          caml_failwith(\"input_value: bigarray dimension overflow in 32bit\");\n        size_dim = size_dim_lo;\n      }\n      dims.push(size_dim);\n    }\n  else\n    for (var i = 0; i < num_dims; i++) dims.push(reader.read32u());\n  var size = caml_ba_get_size(dims);\n  var data = caml_ba_create_buffer(kind, size);\n  var ba = caml_ba_create_unsafe(kind, layout, dims, data);\n  switch(kind){\n  case 2:  //Int8Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read8s();\n    }\n    break;\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read8u();\n    }\n    break;\n  case 4:  // Int16Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read16s();\n    }\n    break;\n  case 5:  // Uint16Array\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read16u();\n    }\n    break;\n  case 6:  // Int32Array (int32)\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read32s();\n    }\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    var sixty = reader.read8u();\n    if(sixty) caml_failwith(\"input_value: cannot read bigarray with 64-bit OCaml ints\");\n    for(var i = 0; i < size; i++){\n      data[i] = reader.read32s();\n    }\n    break;\n  case 7: // (int64)\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var int64 = caml_int64_of_bytes(t);\n      ba.set(i,int64);\n    }\n    break;\n  case 1:  // Float64Array\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      ba.set(i,f);\n    }\n    break;\n  case 0:  // Float32Array\n    for(var i = 0; i < size; i++){\n      var f = caml_int32_float_of_bits(reader.read32s());\n      ba.set(i,f);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    for(var i = 0; i < size; i++){\n      var re = caml_int32_float_of_bits(reader.read32s());\n      var im = caml_int32_float_of_bits(reader.read32s());\n      ba.set(i,[254,re,im]);\n    }\n    break;\n  case 11: // Float64Array (complex64)\n    var t = new Array(8);;\n    for(var i = 0; i < size; i++){\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n      var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));\n      ba.set(i,[254,re,im]);\n    }\n    break\n  }\n  sz[0] = (4 + num_dims) * 4;\n  return caml_ba_create_unsafe(kind, layout, dims, data);\n}\n\n//Deprecated\n//Provides: caml_ba_create_from\n//Requires: caml_ba_create_unsafe, caml_invalid_argument, caml_ba_get_size_per_element\nfunction caml_ba_create_from(data1, data2, jstyp, kind, layout, dims){\n  if(data2 || caml_ba_get_size_per_element(kind) == 2){\n    caml_invalid_argument(\"caml_ba_create_from: use return caml_ba_create_unsafe\");\n  }\n  return caml_ba_create_unsafe(kind, layout, dims, data1);\n}\n\n//Provides: caml_ba_hash const\n//Requires: caml_ba_get_size, caml_hash_mix_int, caml_hash_mix_float\nfunction caml_ba_hash(ba){\n  var num_elts = caml_ba_get_size(ba.dims);\n  var h = 0;\n  switch(ba.kind){\n  case 2:  //Int8Array\n  case 3:  //Uint8Array\n  case 12: //Uint8Array\n    if(num_elts > 256) num_elts = 256;\n    var w = 0, i =0;\n    for(i = 0; i + 4 <= ba.data.length; i+=4){\n      w = ba.data[i+0] | (ba.data[i+1] << 8) | (ba.data[i+2] << 16) | (ba.data[i+3] << 24);\n      h = caml_hash_mix_int(h,w);\n    }\n    w = 0;\n    switch (num_elts & 3) {\n    case 3: w  = ba.data[i+2] << 16;    /* fallthrough */\n    case 2: w |= ba.data[i+1] << 8;     /* fallthrough */\n    case 1: w |= ba.data[i+0];\n      h = caml_hash_mix_int(h, w);\n    }\n    break;\n  case 4:  // Int16Array\n  case 5:  // Uint16Array\n    if(num_elts > 128) num_elts = 128;\n    var w = 0, i =0;\n    for(i = 0; i + 2 <= ba.data.length; i+=2){\n      w = ba.data[i+0] | (ba.data[i+1] << 16);\n      h = caml_hash_mix_int(h,w);\n    }\n    if ((num_elts & 1) != 0)\n      h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 6:  // Int32Array (int32)\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 8:  // Int32Array (int)\n  case 9:  // Int32Array (nativeint)\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);\n    break;\n  case 7:  // Int32Array (int64)\n    if (num_elts > 32) num_elts = 32;\n    num_elts *= 2\n    for (var i = 0; i < num_elts; i++) {\n      h = caml_hash_mix_int(h, ba.data[i]);\n    }\n    break;\n  case 10: // Float32Array (complex32)\n    num_elts *=2; /* fallthrough */\n  case 0:  // Float32Array\n    if (num_elts > 64) num_elts = 64;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_float(h, ba.data[i]);\n    break;\n  case 11: // Float64Array (complex64)\n    num_elts *=2; /* fallthrough */\n  case 1:  // Float64Array\n    if (num_elts > 32) num_elts = 32;\n    for (var i = 0; i < num_elts; i++) h = caml_hash_mix_float(h, ba.data[i]);\n    break;\n  }\n  return h;\n}\n\n//Provides: caml_ba_to_typed_array mutable\nfunction caml_ba_to_typed_array(ba){\n  return ba.data;\n}\n\n//Provides: caml_ba_kind_of_typed_array mutable\n//Requires: caml_invalid_argument\nfunction caml_ba_kind_of_typed_array(ta){\n  var kind;\n  if      (ta instanceof Float32Array) kind = 0;\n  else if (ta instanceof Float64Array) kind = 1;\n  else if (ta instanceof Int8Array) kind = 2;\n  else if (ta instanceof Uint8Array) kind = 3;\n  else if (ta instanceof Uint8ClampedArray) kind = 3;\n  else if (ta instanceof Int16Array) kind = 4;\n  else if (ta instanceof Uint16Array) kind = 5;\n  else if (ta instanceof Int32Array) kind = 6;\n  else if (ta instanceof Uint32Array) kind = 6;\n  else caml_invalid_argument(\"caml_ba_kind_of_typed_array: unsupported kind\");\n  return kind;\n}\n\n//Provides: caml_ba_from_typed_array mutable\n//Requires: caml_ba_kind_of_typed_array\n//Requires: caml_ba_create_unsafe\nfunction caml_ba_from_typed_array(ta){\n  var kind = caml_ba_kind_of_typed_array(ta);\n  var ta =\n      /* Needed to avoid unsigned setters overflowing\n         the range of OCaml [int32] values. */\n      ta instanceof Uint32Array ?\n      new Int32Array(ta.buffer ,ta.byteOffset, ta.length) : ta;\n  return caml_ba_create_unsafe(kind, 0, [ta.length], ta);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_marshal_constants\nvar caml_marshal_constants = {\n  PREFIX_SMALL_BLOCK:         0x80,\n  PREFIX_SMALL_INT:           0x40,\n  PREFIX_SMALL_STRING:        0x20,\n  CODE_INT8:                  0x00,\n  CODE_INT16:                 0x01,\n  CODE_INT32:                 0x02,\n  CODE_INT64:                 0x03,\n  CODE_SHARED8:               0x04,\n  CODE_SHARED16:              0x05,\n  CODE_SHARED32:              0x06,\n  CODE_BLOCK32:               0x08,\n  CODE_BLOCK64:               0x13,\n  CODE_STRING8:               0x09,\n  CODE_STRING32:              0x0A,\n  CODE_DOUBLE_BIG:            0x0B,\n  CODE_DOUBLE_LITTLE:         0x0C,\n  CODE_DOUBLE_ARRAY8_BIG:     0x0D,\n  CODE_DOUBLE_ARRAY8_LITTLE:  0x0E,\n  CODE_DOUBLE_ARRAY32_BIG:    0x0F,\n  CODE_DOUBLE_ARRAY32_LITTLE: 0x07,\n  CODE_CODEPOINTER:           0x10,\n  CODE_INFIXPOINTER:          0x11,\n  CODE_CUSTOM:                0x12,\n  CODE_CUSTOM_LEN:            0x18,\n  CODE_CUSTOM_FIXED:          0x19\n}\n\n\n//Provides: UInt8ArrayReader\n//Requires: caml_string_of_array, caml_jsbytes_of_string\nfunction UInt8ArrayReader (s, i) { this.s = s; this.i = i; }\nUInt8ArrayReader.prototype = {\n  read8u:function () { return this.s[this.i++]; },\n  read8s:function () { return this.s[this.i++] << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s[i] << 8) | s[i + 1]\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s[i] << 24 >> 16) | s[i + 1];\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((s[i] << 24) | (s[i+1] << 16) |\n            (s[i+2] << 8) | s[i+3]) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (s[i] << 24) | (s[i+1] << 16) |\n      (s[i+2] << 8) | s[i+3];\n  },\n  readstr:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return caml_string_of_array(this.s.subarray(i, i + len));\n  },\n  readuint8array:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return this.s.subarray(i, i + len);\n  }\n}\n\n\n//Provides: MlStringReader\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction MlStringReader (s, i) { this.s = caml_jsbytes_of_string(s); this.i = i; }\nMlStringReader.prototype = {\n  read8u:function () { return this.s.charCodeAt(this.i++); },\n  read8s:function () { return this.s.charCodeAt(this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 8) | s.charCodeAt(i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 24 >> 16) | s.charCodeAt(i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n            (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3)) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n      (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return caml_string_of_jsbytes(this.s.substring(i, i + len));\n  },\n  readuint8array:function (len) {\n    var b = new Uint8Array(len);\n    var s = this.s;\n    var i = this.i;\n    for(var j = 0; j < len; j++) {\n      b[j] = s.charCodeAt(i + j);\n    }\n    this.i = i + len;\n    return b;\n  }\n}\n\n//Provides: BigStringReader\n//Requires: caml_string_of_array, caml_ba_get_1\nfunction BigStringReader (bs, i) { this.s = bs; this.i = i; }\nBigStringReader.prototype = {\n  read8u:function () { return caml_ba_get_1(this.s,this.i++); },\n  read8s:function () { return caml_ba_get_1(this.s,this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (caml_ba_get_1(s,i) << 8) | caml_ba_get_1(s,i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (caml_ba_get_1(s,i) << 24 >> 16) | caml_ba_get_1(s,i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((caml_ba_get_1(s,i)   << 24) | (caml_ba_get_1(s,i+1) << 16) |\n            (caml_ba_get_1(s,i+2) << 8)  | caml_ba_get_1(s,i+3)         ) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (caml_ba_get_1(s,i)   << 24) | (caml_ba_get_1(s,i+1) << 16) |\n      (caml_ba_get_1(s,i+2) << 8)  | caml_ba_get_1(s,i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    var arr = new Array(len)\n    for(var j = 0; j < len; j++){\n      arr[j] = caml_ba_get_1(this.s, i+j);\n    }\n    this.i = i + len;\n    return caml_string_of_array(arr);\n  },\n  readuint8array:function (len) {\n    var i = this.i;\n    var offset = this.offset(i);\n    this.i = i + len;\n    return this.s.data.subarray(offset, offset + len);\n  }\n}\n\n\n\n//Provides: caml_float_of_bytes\n//Requires: caml_int64_float_of_bits, caml_int64_of_bytes\nfunction caml_float_of_bytes (a) {\n  return caml_int64_float_of_bits (caml_int64_of_bytes (a));\n}\n\n//Provides: caml_input_value_from_string mutable\n//Requires: MlStringReader, caml_input_value_from_reader\nfunction caml_input_value_from_string(s,ofs) {\n  var reader = new MlStringReader (s, typeof ofs==\"number\"?ofs:ofs[0]);\n  return caml_input_value_from_reader(reader, ofs)\n}\n\n//Provides: caml_input_value_from_bytes mutable\n//Requires: MlStringReader, caml_input_value_from_reader, caml_string_of_bytes\nfunction caml_input_value_from_bytes(s,ofs) {\n  var reader = new MlStringReader (caml_string_of_bytes(s), typeof ofs==\"number\"?ofs:ofs[0]);\n  return caml_input_value_from_reader(reader, ofs)\n}\n\n//Provides: caml_int64_unmarshal\n//Requires: caml_int64_of_bytes\nfunction caml_int64_unmarshal(reader, size){\n  var t = new Array(8);;\n  for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n  size[0] = 8;\n  return caml_int64_of_bytes (t);\n}\n\n//Provides: caml_int64_marshal\n//Requires: caml_int64_to_bytes\nfunction caml_int64_marshal(writer, v, sizes) {\n  var b = caml_int64_to_bytes (v);\n  for (var i = 0; i < 8; i++) writer.write (8, b[i]);\n  sizes[0] = 8; sizes[1] = 8;\n}\n\n//Provides: caml_int32_unmarshal\nfunction caml_int32_unmarshal(reader, size){\n  size[0] = 4;\n  return reader.read32s ();\n}\n\n//Provides: caml_nativeint_unmarshal\n//Requires: caml_failwith\nfunction caml_nativeint_unmarshal(reader, size){\n  switch (reader.read8u ()) {\n  case 1:\n    size[0] = 4;\n    return reader.read32s ();\n  case 2:\n    caml_failwith(\"input_value: native integer value too large\");\n  default: caml_failwith(\"input_value: ill-formed native integer\");\n  }\n}\n\n//Provides: caml_custom_ops\n//Requires: caml_int64_unmarshal, caml_int64_marshal, caml_int64_compare, caml_int64_hash\n//Requires: caml_int32_unmarshal, caml_nativeint_unmarshal\n//Requires: caml_ba_serialize, caml_ba_deserialize, caml_ba_compare, caml_ba_hash\nvar caml_custom_ops =\n    {\"_j\": {\n      deserialize : caml_int64_unmarshal,\n      serialize  : caml_int64_marshal,\n      fixed_length : 8,\n      compare : caml_int64_compare,\n      hash : caml_int64_hash\n    },\n     \"_i\": {\n       deserialize : caml_int32_unmarshal,\n       fixed_length : 4,\n     },\n     \"_n\": {\n       deserialize : caml_nativeint_unmarshal,\n       fixed_length : 4,\n     },\n     \"_bigarray\":{\n       deserialize : (function (reader, sz) {return caml_ba_deserialize (reader,sz,\"_bigarray\")}),\n       serialize : caml_ba_serialize,\n       compare : caml_ba_compare,\n       hash: caml_ba_hash,\n     },\n     \"_bigarr02\":{\n       deserialize : (function (reader, sz) {return caml_ba_deserialize (reader,sz,\"_bigarr02\")}),\n       serialize : caml_ba_serialize,\n       compare : caml_ba_compare,\n       hash: caml_ba_hash,\n     }\n    }\n\n//Provides: caml_input_value_from_reader mutable\n//Requires: caml_failwith\n//Requires: caml_float_of_bytes, caml_custom_ops\n//Requires: UInt8ArrayReader\n//Requires: caml_decompress_input\nfunction caml_input_value_from_reader(reader, ofs) {\n  function readvlq(overflow) {\n    var c = reader.read8u();\n    var n = c & 0x7F;\n    while ((c & 0x80) != 0) {\n      c = reader.read8u();\n      var n7 = n << 7;\n      if (n != n7 >> 7) overflow[0] = true;\n      n = n7 | (c & 0x7F);\n    }\n    return n;\n  }\n  var magic = reader.read32u ()\n  switch(magic){\n  case 0x8495A6BE: /* Intext_magic_number_small */\n    var header_len = 20;\n    var compressed = 0;\n    var data_len = reader.read32u ();\n    var uncompressed_data_len = data_len;\n    var num_objects = reader.read32u ();\n    var _size_32 = reader.read32u ();\n    var _size_64 = reader.read32u ();\n    break\n  case 0x8495A6BD: /* Intext_magic_number_compressed */\n    var header_len = reader.read8u() & 0x3F;\n    var compressed = 1;\n    var overflow = [false];\n    var data_len = readvlq(overflow);\n    var uncompressed_data_len = readvlq(overflow);\n    var num_objects = readvlq(overflow);\n    var _size_32 = readvlq (overflow);\n    var _size_64 = readvlq (overflow);\n    if(overflow[0]){\n        caml_failwith(\"caml_input_value_from_reader: object too large to be read back on this platform\");\n    }\n    break\n  case 0x8495A6BF: /* Intext_magic_number_big */\n    caml_failwith(\"caml_input_value_from_reader: object too large to be read back on a 32-bit platform\");\n    break\n  default:\n    caml_failwith(\"caml_input_value_from_reader: bad object\");\n    break;\n  }\n  var stack = [];\n  var intern_obj_table = (num_objects > 0)?[]:null;\n  var obj_counter = 0;\n  function intern_rec (reader) {\n    var code = reader.read8u ();\n    if (code >= 0x40 /*cst.PREFIX_SMALL_INT*/) {\n      if (code >= 0x80 /*cst.PREFIX_SMALL_BLOCK*/) {\n        var tag = code & 0xF;\n        var size = (code >> 4) & 0x7;\n        var v = [tag];\n        if (size == 0) return v;\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        stack.push(v, size);\n        return v;\n      } else\n        return (code & 0x3F);\n    } else {\n      if (code >= 0x20/*cst.PREFIX_SMALL_STRING */) {\n        var len = code & 0x1F;\n        var v = reader.readstr (len);\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        return v;\n      } else {\n        switch(code) {\n        case 0x00: //cst.CODE_INT8:\n          return reader.read8s ();\n        case 0x01: //cst.CODE_INT16:\n          return reader.read16s ();\n        case 0x02: //cst.CODE_INT32:\n          return reader.read32s ();\n        case 0x03: //cst.CODE_INT64:\n          caml_failwith(\"input_value: integer too large\");\n          break;\n        case 0x04: //cst.CODE_SHARED8:\n          var offset = reader.read8u ();\n          if(compressed == 0) offset = obj_counter - offset;\n          return intern_obj_table[offset];\n        case 0x05: //cst.CODE_SHARED16:\n          var offset = reader.read16u ();\n          if(compressed == 0) offset = obj_counter - offset;\n          return intern_obj_table[offset];\n        case 0x06: //cst.CODE_SHARED32:\n          var offset = reader.read32u ();\n          if(compressed == 0) offset = obj_counter - offset;\n          return intern_obj_table[offset];\n        case 0x08: //cst.CODE_BLOCK32:\n          var header = reader.read32u ();\n          var tag = header & 0xFF;\n          var size = header >> 10;\n          var v = [tag];\n          if (size == 0) return v;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          stack.push(v, size);\n          return v;\n        case 0x13: //cst.CODE_BLOCK64:\n          caml_failwith (\"input_value: data block too large\");\n          break;\n        case 0x09: //cst.CODE_STRING8:\n          var len = reader.read8u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0A: //cst.CODE_STRING32:\n          var len = reader.read32u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0C: //cst.CODE_DOUBLE_LITTLE:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[7 - i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0B: //cst.CODE_DOUBLE_BIG:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0E: //cst.CODE_DOUBLE_ARRAY8_LITTLE:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0D: //cst.CODE_DOUBLE_ARRAY8_BIG:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x07: //cst.CODE_DOUBLE_ARRAY32_LITTLE:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0F: //cst.CODE_DOUBLE_ARRAY32_BIG:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x10: //cst.CODE_CODEPOINTER:\n        case 0x11: //cst.CODE_INFIXPOINTER:\n          caml_failwith (\"input_value: code pointer\");\n          break;\n        case 0x12: //cst.CODE_CUSTOM:\n        case 0x18: //cst.CODE_CUSTOM_LEN:\n        case 0x19: //cst.CODE_CUSTOM_FIXED:\n          var c, s = \"\";\n          while ((c = reader.read8u ()) != 0) s += String.fromCharCode (c);\n          var ops = caml_custom_ops[s];\n          var expected_size;\n          if(!ops)\n            caml_failwith(\"input_value: unknown custom block identifier\");\n          switch(code){\n          case 0x12: // cst.CODE_CUSTOM (deprecated)\n            break;\n          case 0x19: // cst.CODE_CUSTOM_FIXED\n            if(!ops.fixed_length)\n              caml_failwith(\"input_value: expected a fixed-size custom block\");\n            expected_size = ops.fixed_length;\n            break;\n          case 0x18: // cst.CODE_CUSTOM_LEN\n            expected_size = reader.read32u ();\n            // Skip size64\n            reader.read32s(); reader.read32s();\n            break;\n          }\n          var old_pos = reader.i;\n          var size = [0];\n          var v = ops.deserialize(reader, size);\n          if(expected_size != undefined){\n            if(expected_size != size[0])\n              caml_failwith(\"input_value: incorrect length of serialized custom block\");\n          }\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        default:\n          caml_failwith (\"input_value: ill-formed message\");\n        }\n      }\n    }\n  }\n  if(compressed) {\n    if(caml_decompress_input) {\n      var data = reader.readuint8array(data_len);\n      var res = new Uint8Array(uncompressed_data_len);\n      var res = caml_decompress_input(data, res);\n      var reader = new UInt8ArrayReader(res, 0);\n    } else {\n      caml_failwith(\"input_value: compressed object, cannot decompress\");\n    }\n  }\n  var res = intern_rec (reader);\n  while (stack.length > 0) {\n    var size = stack.pop();\n    var v = stack.pop();\n    var d = v.length;\n    if (d < size) stack.push(v, size);\n    v[d] = intern_rec (reader);\n  }\n  if (typeof ofs!=\"number\") ofs[0] = reader.i;\n  return res;\n}\n\n//Provides: caml_marshal_header_size\n//Version: < 5.1.0\nvar caml_marshal_header_size = 20\n\n//Provides: caml_marshal_header_size\n//Version: >= 5.1.0\nvar caml_marshal_header_size = 16\n\n\n\n//Provides: caml_marshal_data_size mutable\n//Requires: caml_failwith, caml_bytes_unsafe_get\n//Requires: caml_uint8_array_of_bytes\n//Requires: UInt8ArrayReader\n//Requires: caml_marshal_header_size\nfunction caml_marshal_data_size (s, ofs) {\n  var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);\n  function readvlq(overflow) {\n    var c = r.read8u();\n    var n = c & 0x7F;\n    while ((c & 0x80) != 0) {\n      c = r.read8u();\n      var n7 = n << 7;\n      if (n != n7 >> 7) overflow[0] = true;\n      n = n7 | (c & 0x7F);\n    }\n    return n;\n  }\n\n  switch(r.read32u()){\n  case 0x8495A6BE: /* Intext_magic_number_small */\n    var header_len = 20;\n    var data_len = r.read32u();\n    break;\n  case 0x8495A6BD: /* Intext_magic_number_compressed */\n    var header_len = r.read8u() & 0x3F;\n    var overflow = [false];\n    var data_len = readvlq(overflow);\n    if(overflow[0]){\n      caml_failwith(\"Marshal.data_size: object too large to be read back on this platform\");\n    }\n    break\n  case 0x8495A6BF: /* Intext_magic_number_big */\n  default:\n    caml_failwith(\"Marshal.data_size: bad object\");\n    break\n  }\n  return header_len - caml_marshal_header_size + data_len;\n}\n\n//Provides: MlObjectTable\nvar MlObjectTable;\nif (typeof globalThis.Map === 'undefined') {\n  MlObjectTable = function() {\n    /* polyfill (using linear search) */\n    function NaiveLookup(objs) { this.objs = objs; }\n    NaiveLookup.prototype.get = function(v) {\n      for (var i = 0; i < this.objs.length; i++) {\n        if (this.objs[i] === v) return i;\n      }\n    };\n    NaiveLookup.prototype.set = function() {\n      // Do nothing here. [MlObjectTable.store] will push to [this.objs] directly.\n    };\n\n    return function MlObjectTable() {\n      this.objs = []; this.lookup = new NaiveLookup(this.objs);\n    };\n  }();\n}\nelse {\n  MlObjectTable = function MlObjectTable() {\n    this.objs = []; this.lookup = new globalThis.Map();\n  };\n}\n\nMlObjectTable.prototype.store = function(v) {\n  this.lookup.set(v, this.objs.length);\n  this.objs.push(v);\n}\n\nMlObjectTable.prototype.recall = function(v) {\n  var i = this.lookup.get(v);\n  return (i === undefined)\n    ? undefined : this.objs.length - i;   /* index is relative */\n}\n\n//Provides: caml_output_val\n//Requires: caml_int64_to_bytes, caml_failwith\n//Requires: caml_int64_bits_of_float\n//Requires: caml_is_ml_bytes, caml_ml_bytes_length, caml_bytes_unsafe_get\n//Requires: caml_is_ml_string, caml_ml_string_length, caml_string_unsafe_get\n//Requires: MlObjectTable, caml_list_to_js_array, caml_custom_ops\n//Requires: caml_invalid_argument,caml_string_of_jsbytes, caml_is_continuation_tag\nvar caml_output_val = function (){\n  function Writer () { this.chunk = []; }\n  Writer.prototype = {\n    chunk_idx:20, block_len:0, obj_counter:0, size_32:0, size_64:0,\n    write:function (size, value) {\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_at:function (pos, size, value) {\n      var pos = pos;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[pos++] = (value >> i) & 0xFF;\n    },\n    write_code:function (size, code, value) {\n      this.chunk[this.chunk_idx++] = code;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_shared:function (offset) {\n      if (offset < (1 << 8)) this.write_code(8, 0x04 /*cst.CODE_SHARED8*/, offset);\n      else if (offset < (1 << 16)) this.write_code(16, 0x05 /*cst.CODE_SHARED16*/, offset);\n      else this.write_code(32, 0x06 /*cst.CODE_SHARED32*/, offset);\n    },\n    pos:function () { return this.chunk_idx },\n    finalize:function () {\n      this.block_len = this.chunk_idx - 20;\n      this.chunk_idx = 0;\n      this.write (32, 0x8495A6BE);\n      this.write (32, this.block_len);\n      this.write (32, this.obj_counter);\n      this.write (32, this.size_32);\n      this.write (32, this.size_64);\n      return this.chunk;\n    }\n  }\n  return function (v, flags) {\n    flags = caml_list_to_js_array(flags);\n\n    var no_sharing = (flags.indexOf(0 /*Marshal.No_sharing*/) !== -1),\n        closures =  (flags.indexOf(1 /*Marshal.Closures*/) !== -1);\n    /* Marshal.Compat_32 is redundant since integers are 32-bit anyway */\n\n    if (closures)\n      console.warn(\"in caml_output_val: flag Marshal.Closures is not supported.\");\n\n    var writer = new Writer ();\n    var stack = [];\n    var intern_obj_table = no_sharing ? null : new MlObjectTable();\n\n    function memo(v) {\n      if (no_sharing) return false;\n      var existing_offset = intern_obj_table.recall(v);\n      if (existing_offset) { writer.write_shared(existing_offset); return true; }\n      else { intern_obj_table.store(v); return false; }\n    }\n\n    function extern_rec (v) {\n      if (v.caml_custom) {\n        if (memo(v)) return;\n        var name = v.caml_custom;\n        var ops = caml_custom_ops[name];\n        var sz_32_64 = [0,0];\n        if(!ops.serialize)\n          caml_invalid_argument(\"output_value: abstract value (Custom)\");\n        if(ops.fixed_length == undefined){\n          writer.write (8, 0x18 /*cst.CODE_CUSTOM_LEN*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          var header_pos = writer.pos ();\n          for(var i = 0; i < 12; i++) {\n            writer.write(8, 0);\n          }\n          ops.serialize(writer, v, sz_32_64);\n          writer.write_at(header_pos, 32, sz_32_64[0]);\n          writer.write_at(header_pos + 4, 32, 0); // zero\n          writer.write_at(header_pos + 8, 32, sz_32_64[1]);\n        } else {\n          writer.write (8, 0x19 /*cst.CODE_CUSTOM_FIXED*/);\n          for (var i = 0; i < name.length; i++)\n            writer.write (8, name.charCodeAt(i));\n          writer.write(8, 0);\n          var old_pos = writer.pos();\n          ops.serialize(writer, v, sz_32_64);\n          if (ops.fixed_length != writer.pos() - old_pos)\n            caml_failwith(\"output_value: incorrect fixed sizes specified by \" + name);\n        }\n        writer.size_32 += 2 + ((sz_32_64[0] + 3) >> 2);\n        writer.size_64 += 2 + ((sz_32_64[1] + 7) >> 3);\n      }\n      else if (v instanceof Array && v[0] === (v[0]|0)) {\n        if (v[0] == 251) {\n          caml_failwith(\"output_value: abstract value (Abstract)\");\n        }\n        if (caml_is_continuation_tag(v[0]))\n          caml_invalid_argument(\"output_value: continuation value\");\n        if (v.length > 1 && memo(v)) return;\n        if (v[0] < 16 && v.length - 1 < 8)\n          writer.write (8, 0x80 /*cst.PREFIX_SMALL_BLOCK*/ + v[0] + ((v.length - 1)<<4));\n        else\n          writer.write_code(32, 0x08 /*cst.CODE_BLOCK32*/, ((v.length-1) << 10) | v[0]);\n        writer.size_32 += v.length;\n        writer.size_64 += v.length;\n        if (v.length > 1) stack.push (v, 1);\n      } else if (caml_is_ml_bytes(v)) {\n        if(!(caml_is_ml_bytes(caml_string_of_jsbytes(\"\")))) {\n          caml_failwith(\"output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]\");\n        }\n        if (memo(v)) return;\n        var len = caml_ml_bytes_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_bytes_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else if (caml_is_ml_string(v)) {\n        if (memo(v)) return;\n        var len = caml_ml_string_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_string_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else {\n        if (v != (v|0)){\n          var type_of_v = typeof v;\n          if(type_of_v != \"number\")\n            caml_failwith(\"output_value: abstract value (\"+type_of_v+\")\");\n          // If a float happens to be an integer it is serialized as an integer\n          // (Js_of_ocaml cannot tell whether the type of an integer number is\n          // float or integer.) This can result in unexpected crashes when\n          // unmarshalling using the standard runtime.\n          if (memo(v)) return;\n          var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));\n          writer.write (8, 0x0C /*cst.CODE_DOUBLE_LITTLE*/);\n          for(var i = 0; i<8; i++){writer.write(8,t[7 - i])}\n          writer.size_32 += 3\n          writer.size_64 += 2\n        }\n        else if (v >= 0 && v < 0x40) {\n          writer.write (8, 0X40 /*cst.PREFIX_SMALL_INT*/ + v);\n        } else {\n          if (v >= -(1 << 7) && v < (1 << 7))\n            writer.write_code(8, 0x00 /*cst.CODE_INT8*/, v);\n          else if (v >= -(1 << 15) && v < (1 << 15))\n            writer.write_code(16, 0x01 /*cst.CODE_INT16*/, v);\n          else\n            writer.write_code(32, 0x02 /*cst.CODE_INT32*/, v);\n        }\n      }\n    }\n    extern_rec (v);\n    while (stack.length > 0) {\n      var i = stack.pop ();\n      var v = stack.pop ();\n      if (i + 1 < v.length) stack.push (v, i + 1);\n      extern_rec (v[i]);\n    }\n    if (intern_obj_table) writer.obj_counter = intern_obj_table.objs.length;\n    writer.finalize();\n    return writer.chunk;\n  }\n} ();\n\n//Provides: caml_output_value_to_string mutable\n//Requires: caml_output_val, caml_string_of_array\nfunction caml_output_value_to_string (v, flags) {\n  return caml_string_of_array (caml_output_val (v, flags));\n}\n\n//Provides: caml_output_value_to_bytes mutable\n//Requires: caml_output_val, caml_bytes_of_array\nfunction caml_output_value_to_bytes (v, flags) {\n  return caml_bytes_of_array (caml_output_val (v, flags));\n}\n\n//Provides: caml_output_value_to_buffer\n//Requires: caml_output_val, caml_failwith, caml_blit_bytes\nfunction caml_output_value_to_buffer (s, ofs, len, v, flags) {\n  var t = caml_output_val (v, flags);\n  if (t.length > len) caml_failwith (\"Marshal.to_buffer: buffer overflow\");\n  caml_blit_bytes(t, 0, s, ofs, t.length);\n  return 0;\n}\n","//Provides: caml_unix_gettimeofday\n//Alias: unix_gettimeofday\nfunction caml_unix_gettimeofday () {\n  return (new Date()).getTime() / 1000;\n}\n\n//Provides: caml_unix_time\n//Requires: caml_unix_gettimeofday\n//Alias: unix_time\nfunction caml_unix_time () {\n  return Math.floor(caml_unix_gettimeofday ());\n}\n\n//Provides: caml_unix_gmtime\n//Alias: unix_gmtime\nfunction caml_unix_gmtime (t) {\n  var d = new Date (t * 1000);\n  var d_num = d.getTime();\n  var januaryfirst = (new Date(Date.UTC(d.getUTCFullYear(), 0, 1))).getTime();\n  var doy = Math.floor((d_num - januaryfirst) / 86400000);\n  return BLOCK(0, d.getUTCSeconds(), d.getUTCMinutes(), d.getUTCHours(),\n               d.getUTCDate(), d.getUTCMonth(), d.getUTCFullYear() - 1900,\n               d.getUTCDay(), doy,\n               false | 0 /* for UTC daylight savings time is false */)\n}\n\n//Provides: caml_unix_localtime\n//Alias: unix_localtime\nfunction caml_unix_localtime (t) {\n  var d = new Date (t * 1000);\n  var d_num = d.getTime();\n  var januaryfirst = (new Date(d.getFullYear(), 0, 1)).getTime();\n  var doy = Math.floor((d_num - januaryfirst) / 86400000);\n  var jan = new Date(d.getFullYear(), 0, 1);\n  var jul = new Date(d.getFullYear(), 6, 1);\n  var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n  return BLOCK(0, d.getSeconds(), d.getMinutes(), d.getHours(),\n               d.getDate(), d.getMonth(), d.getFullYear() - 1900,\n               d.getDay(), doy,\n               (d.getTimezoneOffset() < stdTimezoneOffset) | 0 /* daylight savings time  field. */)\n}\n\n//Provides: caml_unix_mktime\n//Requires: caml_unix_localtime\n//Alias: unix_mktime\nfunction caml_unix_mktime(tm){\n  var d = (new Date(tm[6]+1900,tm[5],tm[4],tm[3],tm[2],tm[1])).getTime();\n  var t = Math.floor(d / 1000);\n  var tm2 = caml_unix_localtime(t);\n  return BLOCK(0,t,tm2);\n}\n//Provides: caml_unix_startup const\n//Alias: win_startup\nfunction caml_unix_startup() {}\n\n//Provides: caml_unix_cleanup const\n//Alias: win_cleanup\nfunction caml_unix_cleanup() {}\n\n//Provides: caml_unix_filedescr_of_fd const\n//Alias: win_handle_fd\nfunction caml_unix_filedescr_of_fd(x) {return x;}\n\n//Provides: caml_unix_isatty\n//Requires: fs_node_supported\n//Alias: unix_isatty\nfunction caml_unix_isatty(fileDescriptor) {\n  if(fs_node_supported()) {\n    var tty = require('tty');\n    return tty.isatty(fileDescriptor)?1:0;\n  } else {\n    return 0;\n  }\n}\n\n\n//Provides: caml_unix_isatty\n//Alias: unix_isatty\n//If: browser\nfunction caml_unix_isatty(fileDescriptor) {\n  return 0;\n}\n\n//Provides: make_unix_err_args\n//Requires: caml_string_of_jsstring\nvar unix_error = [\n  /* ===Unix.error===\n   *\n   * This array is in order of the variant in OCaml\n   */\n  \"E2BIG\", \"EACCES\", \"EAGAIN\", \"EBADF\", \"EBUSY\", \"ECHILD\", \"EDEADLK\", \"EDOM\",\n  \"EEXIST\", \"EFAULT\", \"EFBIG\", \"EINTR\", \"EINVAL\", \"EIO\", \"EISDIR\", \"EMFILE\",\n  \"EMLINK\", \"ENAMETOOLONG\", \"ENFILE\", \"ENODEV\", \"ENOENT\", \"ENOEXEC\", \"ENOLCK\",\n  \"ENOMEM\", \"ENOSPC\", \"ENOSYS\", \"ENOTDIR\", \"ENOTEMPTY\", \"ENOTTY\", \"ENXIO\",\n  \"EPERM\", \"EPIPE\", \"ERANGE\", \"EROFS\", \"ESPIPE\", \"ESRCH\", \"EXDEV\", \"EWOULDBLOCK\",\n  \"EINPROGRESS\", \"EALREADY\", \"ENOTSOCK\", \"EDESTADDRREQ\", \"EMSGSIZE\",\n  \"EPROTOTYPE\", \"ENOPROTOOPT\", \"EPROTONOSUPPORT\", \"ESOCKTNOSUPPORT\",\n  \"EOPNOTSUPP\", \"EPFNOSUPPORT\", \"EAFNOSUPPORT\", \"EADDRINUSE\", \"EADDRNOTAVAIL\",\n  \"ENETDOWN\", \"ENETUNREACH\", \"ENETRESET\", \"ECONNABORTED\", \"ECONNRESET\", \"ENOBUFS\",\n  \"EISCONN\", \"ENOTCONN\", \"ESHUTDOWN\", \"ETOOMANYREFS\", \"ETIMEDOUT\", \"ECONNREFUSED\",\n  \"EHOSTDOWN\", \"EHOSTUNREACH\", \"ELOOP\", \"EOVERFLOW\"\n];\nfunction make_unix_err_args(code, syscall, path, errno) {\n  var variant = unix_error.indexOf(code);\n  if (variant < 0) {\n    // Default if undefined\n    if (errno == null) {\n      errno = -9999\n    }\n    // If none of the above variants, fallback to EUNKNOWNERR(int)\n    variant = BLOCK(0, errno);\n  }\n  var args = [\n    variant,\n    caml_string_of_jsstring(syscall || \"\"),\n    caml_string_of_jsstring(path || \"\")\n  ];\n  return args;\n}\n\n//Provides: caml_unix_stat\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_stat\nfunction caml_unix_stat(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.stat) {\n    caml_failwith(\"caml_unix_stat: not implemented\");\n  }\n  return root.device.stat(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_stat_64\n//Requires: caml_unix_stat, caml_int64_of_int32\n//Alias: unix_stat_64\nfunction caml_unix_stat_64(name) {\n  var r = caml_unix_stat(name);\n  r[9] = caml_int64_of_int32(r[9]);\n  return r;\n}\n\n//Provides: caml_unix_lstat\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_lstat\nfunction caml_unix_lstat(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.lstat) {\n    caml_failwith(\"caml_unix_lstat: not implemented\");\n  }\n  return root.device.lstat(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_lstat_64\n//Requires: caml_unix_lstat, caml_int64_of_int32\n//Alias: unix_lstat_64\nfunction caml_unix_lstat_64(name) {\n  var r = caml_unix_lstat(name);\n  r[9] = caml_int64_of_int32(r[9]);\n  return r;\n}\n\n//Provides: caml_unix_mkdir\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_mkdir\nfunction caml_unix_mkdir(name, perm) {\n  var root = resolve_fs_device(name);\n  if (!root.device.mkdir) {\n    caml_failwith(\"caml_unix_mkdir: not implemented\");\n  }\n  return root.device.mkdir(root.rest, perm, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_rmdir\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_rmdir\nfunction caml_unix_rmdir(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.rmdir) {\n    caml_failwith(\"caml_unix_rmdir: not implemented\");\n  }\n  return root.device.rmdir(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_symlink\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_symlink\nfunction caml_unix_symlink(to_dir, src, dst) {\n  var src_root = resolve_fs_device(src);\n  var dst_root = resolve_fs_device(dst);\n  if(src_root.device != dst_root.device)\n    caml_failwith(\"caml_unix_symlink: cannot symlink between two filesystems\");\n  if (!src_root.device.symlink) {\n    caml_failwith(\"caml_unix_symlink: not implemented\");\n  }\n  return src_root.device.symlink(to_dir, src_root.rest, dst_root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_readlink\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_readlink\nfunction caml_unix_readlink(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.readlink) {\n    caml_failwith(\"caml_unix_readlink: not implemented\");\n  }\n  return root.device.readlink(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_unlink\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_unlink\nfunction caml_unix_unlink(name) {\n  var root = resolve_fs_device(name);\n  if (!root.device.unlink) {\n    caml_failwith(\"caml_unix_unlink: not implemented\");\n  }\n  return root.device.unlink(root.rest, /* raise Unix_error */ true);\n}\n\n//Provides: caml_unix_getuid\n//Requires: caml_raise_not_found\n//Alias: unix_getuid\nfunction caml_unix_getuid(unit) {\n  if(globalThis.process && globalThis.process.getuid){\n    return globalThis.process.getuid();\n  }\n  caml_raise_not_found();\n}\n\n//Provides: caml_unix_getpwuid\n//Requires: caml_raise_not_found\n//Alias: unix_getpwuid\nfunction caml_unix_getpwuid(unit) {\n  caml_raise_not_found();\n}\n\n//Provides: caml_unix_has_symlink\n//Requires: fs_node_supported\n//Alias: unix_has_symlink\nfunction caml_unix_has_symlink(unit) {\n  return fs_node_supported()?1:0\n}\n\n//Provides: caml_unix_opendir\n//Requires: resolve_fs_device, caml_failwith\n//Alias: unix_opendir\nfunction caml_unix_opendir(path) {\n  var root = resolve_fs_device(path);\n  if (!root.device.opendir) {\n    caml_failwith(\"caml_unix_opendir: not implemented\");\n  }\n  var dir_handle = root.device.opendir(root.rest, /* raise Unix_error */ true);\n  return { pointer : dir_handle, path: path }\n}\n\n//Provides: caml_unix_readdir\n//Requires: caml_raise_end_of_file\n//Requires: caml_string_of_jsstring\n//Requires: make_unix_err_args, caml_raise_with_args, caml_named_value\n//Alias: unix_readdir\nfunction caml_unix_readdir(dir_handle) {\n  var entry;\n  try {\n      entry = dir_handle.pointer.readSync();\n  } catch (e) {\n      var unix_error = caml_named_value('Unix.Unix_error');\n      caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"readdir\", dir_handle.path));\n  }\n  if (entry === null) {\n      caml_raise_end_of_file();\n  } else {\n      return caml_string_of_jsstring(entry.name);\n  }\n}\n\n//Provides: caml_unix_closedir\n//Requires: make_unix_err_args, caml_raise_with_args, caml_named_value\n//Alias: unix_closedir\nfunction caml_unix_closedir(dir_handle) {\n  try {\n      dir_handle.pointer.closeSync();\n  } catch (e) {\n      var unix_error = caml_named_value('Unix.Unix_error');\n      caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"closedir\", dir_handle.path));\n  }\n}\n\n//Provides: caml_unix_rewinddir\n//Requires: caml_unix_closedir, caml_unix_opendir\n//Alias: unix_rewinddir\nfunction caml_unix_rewinddir(dir_handle) {\n  caml_unix_closedir(dir_handle);\n  var new_dir_handle = caml_unix_opendir(dir_handle.path);\n  dir_handle.pointer = new_dir_handle.pointer;\n  return 0;\n}\n\n//Provides: caml_unix_findfirst\n//Requires: caml_jsstring_of_string, caml_string_of_jsstring\n//Requires: caml_unix_opendir, caml_unix_readdir\n//Alias: win_findfirst\nfunction caml_unix_findfirst(path) {\n  // The Windows code adds this glob to the path, so we need to remove it\n  var path_js = caml_jsstring_of_string(path);\n  path_js = path_js.replace(/(^|[\\\\\\/])\\*\\.\\*$/, \"\");\n  path = caml_string_of_jsstring(path_js);\n  // *.* is now stripped\n  var dir_handle = caml_unix_opendir(path);\n  var first_entry = caml_unix_readdir(dir_handle);\n  // The Windows bindings type dir_handle as an `int` but it's not in JS\n  return [0, first_entry, dir_handle];\n}\n\n//Provides: caml_unix_findnext\n//Requires: caml_unix_readdir\n//Alias: win_findnext\nfunction caml_unix_findnext(dir_handle) {\n  return caml_unix_readdir(dir_handle);\n}\n\n//Provides: caml_unix_findclose\n//Requires: caml_unix_closedir\n//Alias: win_findclose\nfunction caml_unix_findclose(dir_handle) {\n  return caml_unix_closedir(dir_handle);\n}\n\n\n//Provides: caml_unix_inet_addr_of_string const\n//Alias: unix_inet_addr_of_string\nfunction caml_unix_inet_addr_of_string () {return 0;}\n\n\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_call_gen (const, shallow)\n//If: !effects\n//Weakdef\nfunction caml_call_gen(f, args) {\n  var n = (f.l >= 0)?f.l:(f.l = f.length);\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0) {\n    var g = f.apply(null,args.slice(0,n));\n    if(typeof g !== \"function\") return g;\n    return caml_call_gen(g,args.slice(n));\n  }\n  else {\n    switch (d) {\n    case 1: {\n      var g = function (x){\n        var nargs = new Array(argsLen + 1);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    case 2: {\n      var g = function (x, y){\n        var nargs = new Array(argsLen + 2);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        nargs[argsLen + 1] = y;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    default: {\n      var g = function (){\n        var extra_args = (arguments.length == 0)?1:arguments.length;\n        var nargs = new Array(args.length+extra_args);\n        for(var i = 0; i < args.length; i++ ) nargs[i] = args[i];\n        for(var i = 0; i < arguments.length; i++ ) nargs[args.length+i] = arguments[i];\n        return caml_call_gen(f, nargs)\n      };\n    }}\n    g.l = d;\n    return g;\n  }\n}\n\n//Provides: caml_call_gen (const, shallow)\n//If: effects\n//Weakdef\nfunction caml_call_gen(f, args) {\n  var n = (f.l >= 0)?f.l:(f.l = f.length);\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0) {\n    return f.apply(null, args);\n  } else if (d < 0) {\n    var rest = args.slice(n - 1);\n    var k = args [argsLen - 1];\n    args = args.slice(0, n);\n    args[n - 1] = function (g) {\n      if (typeof g !== \"function\") return k(g);\n      var args = rest.slice();\n      args[args.length - 1] = k;\n      return caml_call_gen(g, args); };\n    return f.apply(null, args);\n  } else {\n    argsLen--;\n    var k = args [argsLen];\n    switch (d) {\n    case 1: {\n      var g = function (x, y){\n        var nargs = new Array(argsLen + 2);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        nargs[argsLen + 1] = y;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    case 2: {\n      var g = function (x, y, z){\n        var nargs = new Array(argsLen + 3);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        nargs[argsLen] = x;\n        nargs[argsLen + 1] = y;\n        nargs[argsLen + 2] = z;\n        return f.apply(null, nargs)\n      };\n      break;\n    }\n    default: {\n      var g = function (){\n        var extra_args = (arguments.length == 0)?1:arguments.length;\n        var nargs = new Array(argsLen + extra_args);\n        for(var i = 0; i < argsLen; i++ ) nargs[i] = args[i];\n        for(var i = 0; i < arguments.length; i++ )\n          nargs[argsLen + i] = arguments[i];\n        return caml_call_gen(f, nargs)\n      };\n    }}\n    g.l = d + 1;\n    return k(g);\n  }\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,mutable)\n//Requires: caml_named_values, caml_jsbytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_jsbytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_build_symbols\n//Requires: caml_jsstring_of_string\nfunction caml_build_symbols(symb) {\n  var r = {};\n  if(symb) {\n    for(var i = 1; i < symb.length; i++){\n      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2]\n    }\n  }\n  return r;\n}\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data, caml_callback, caml_build_symbols\n//Requires: caml_failwith\nfunction caml_register_global (n, v, name_opt) {\n  if (name_opt) {\n    var name = name_opt;\n    if(globalThis.toplevelReloc) {\n      n = caml_callback(globalThis.toplevelReloc, [name]);\n    }\n    else if (caml_global_data.symbols) {\n      if(!caml_global_data.symidx) {\n        caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols)\n      }\n      var nid = caml_global_data.symidx[name]\n      if(nid >= 0)\n        n = nid\n      else {\n        caml_failwith(\"caml_register_global: cannot locate \" + name);\n      }\n    }\n  }\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n\n//Provides: caml_maybe_print_stats\nfunction caml_maybe_print_stats(unit) { return 0 }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Sys\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  if(globalThis.quit) globalThis.quit(code);\n  //nodejs\n  if(globalThis.process && globalThis.process.exit)\n    globalThis.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_is_special_exception\nfunction caml_is_special_exception(exn){\n  switch(exn[2]) {\n  case -8: // Match_failure\n  case -11: // Assert_failure\n  case -12: // Undefined_recursive_module\n    return 1;\n  default:\n    return 0;\n  }\n}\n\n//Provides: caml_format_exception\n//Requires: MlBytes, caml_is_special_exception\nfunction caml_format_exception(exn){\n  var r = \"\";\n  if(exn[0] == 0) {\n    r += exn[1][1];\n    if(exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1])) {\n\n      var bucket = exn[2];\n      var start = 1;\n    } else {\n      var start = 2\n      var bucket = exn;\n    }\n    r += \"(\";\n    for(var i = start; i < bucket.length; i ++){\n      if(i > start) r+=\", \";\n      var v = bucket[i]\n      if(typeof v == \"number\")\n        r+= v.toString();\n      else if(v instanceof MlBytes){\n        r+= '\"' + v.toString() + '\"';\n      }\n      else if(typeof v == \"string\"){\n        r+= '\"' + v.toString() + '\"';\n      }\n      else r += \"_\";\n    }\n    r += \")\"\n  } else if (exn[0] == 248){\n    r += exn[1]\n  }\n  return r\n}\n\n//Provides: caml_fatal_uncaught_exception\n//Requires: caml_named_value, caml_format_exception, caml_callback\nfunction caml_fatal_uncaught_exception(err){\n  if(err instanceof Array && (err[0] == 0 || err[0] == 248)) {\n    var handler = caml_named_value(\"Printexc.handle_uncaught_exception\");\n    if(handler) caml_callback(handler, [err,false]);\n    else {\n      var msg = caml_format_exception(err);\n      var at_exit = caml_named_value(\"Pervasives.do_at_exit\");\n      if(at_exit) caml_callback(at_exit, [0]);\n      console.error(\"Fatal error: exception \" + msg);\n      if(err.js_error) throw err.js_error;\n    }\n  }\n  else {\n    throw err\n  }\n}\n\n//Provides: caml_set_static_env\nfunction caml_set_static_env(k,v){\n  if(!globalThis.jsoo_static_env)\n    globalThis.jsoo_static_env = {}\n  globalThis.jsoo_static_env[k] = v;\n  return 0;\n}\n\n//Provides: jsoo_sys_getenv (const)\nfunction jsoo_sys_getenv(n) {\n  var process = globalThis.process;\n  //nodejs env\n  if(process\n     && process.env\n     && process.env[n] != undefined)\n    return process.env[n];\n  if(globalThis.jsoo_static_env\n     && globalThis.jsoo_static_env[n])\n    return globalThis.jsoo_static_env[n]\n}\n\n//Provides: caml_sys_getenv (const)\n//Requires: caml_raise_not_found\n//Requires: caml_string_of_jsstring\n//Requires: caml_jsstring_of_string\n//Requires: jsoo_sys_getenv\nfunction caml_sys_getenv (name) {\n  var r = jsoo_sys_getenv(caml_jsstring_of_string(name));\n  if(r === undefined)\n    caml_raise_not_found ();\n  return caml_string_of_jsstring(r)\n}\n\n//Provides: caml_sys_unsafe_getenv\n//Requires: caml_sys_getenv\nfunction caml_sys_unsafe_getenv(name){\n  return caml_sys_getenv (name);\n}\n\n//Provides: caml_argv\n//Requires: caml_string_of_jsstring\nvar caml_argv = ((function () {\n  var process = globalThis.process;\n  var main = \"a.out\";\n  var args = []\n\n  if(process\n     && process.argv\n     && process.argv.length > 1) {\n    var argv = process.argv\n    //nodejs\n    main = argv[1];\n    args = argv.slice(2);\n  }\n\n  var p = caml_string_of_jsstring(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_string_of_jsstring(args[i]));\n  return args2;\n})())\n\n//Provides: caml_executable_name\n//Requires: caml_argv\nvar caml_executable_name = caml_argv[1]\n\n//Provides: caml_sys_get_argv\n//Requires: caml_argv\nfunction caml_sys_get_argv (a) {\n  return [0, caml_argv[1], caml_argv];\n}\n\n//Provides: caml_sys_argv\n//Requires: caml_argv\nfunction caml_sys_argv (a) {\n  return caml_argv;\n}\n\n//Provides: caml_sys_modify_argv\n//Requires: caml_argv\nfunction caml_sys_modify_argv(arg){\n  caml_argv = arg;\n  return 0;\n}\n\n//Provides: caml_sys_executable_name const\n//Requires: caml_executable_name\nfunction caml_sys_executable_name(a){\n  return caml_executable_name\n}\n\n//Provides: caml_sys_system_command\n//Requires: caml_jsstring_of_string\nfunction caml_sys_system_command(cmd){\n  var cmd = caml_jsstring_of_string(cmd);\n  if (typeof require != \"undefined\"){\n    var child_process = require('child_process');\n    if(child_process && child_process.execSync)\n      try {\n        child_process.execSync(cmd,{stdio: 'inherit'});\n        return 0\n      } catch (e) {\n        return 1\n      }\n  }\n  else return 127;\n}\n\n//Provides: caml_sys_system_command\n//Requires: caml_jsstring_of_string\n//If: browser\nfunction caml_sys_system_command(cmd){\n  return 127;\n}\n\n//Provides: caml_sys_time mutable\nvar caml_initial_time = (new Date()).getTime() * 0.001;\nfunction caml_sys_time () {\n  var now = (new Date()).getTime();\n  return now * 0.001 - caml_initial_time;\n}\n\n//Provides: caml_sys_time_include_children\n//Requires: caml_sys_time\nfunction caml_sys_time_include_children(b) {\n  return caml_sys_time();\n}\n\n//Provides: caml_sys_random_seed mutable\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  if (globalThis.crypto) {\n     if (globalThis.crypto.getRandomValues) {\n       var a = globalThis.crypto.getRandomValues(new Int32Array(4));\n       return [0, a[0], a[1], a[2], a[3]];\n     } else if (globalThis.crypto.randomBytes) {\n       var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);\n       return [0, a[0], a[1], a[2], a[3]];\n     }\n  }\n  var now = (new Date()).getTime();\n  var x = now^0xffffffff*Math.random();\n  return [0,x];\n}\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_unix const\n//Requires: os_type\nfunction caml_sys_const_ostype_unix () { return os_type == \"Unix\" ? 1 : 0; }\n//Provides: caml_sys_const_ostype_win32 const\n//Requires: os_type\nfunction caml_sys_const_ostype_win32 () { return os_type == \"Win32\" ? 1 : 0; }\n//Provides: caml_sys_const_ostype_cygwin const\n//Requires: os_type\nfunction caml_sys_const_ostype_cygwin () { return os_type == \"Cygwin\" ? 1 : 0; }\n\n//Provides: caml_sys_const_backend_type const\n//Requires: caml_string_of_jsbytes\nfunction caml_sys_const_backend_type () {\n  return [0, caml_string_of_jsbytes(\"js_of_ocaml\")];\n}\n\n//Provides: os_type\nvar os_type = (globalThis.process &&\n               globalThis.process.platform &&\n               globalThis.process.platform == \"win32\") ? \"Cygwin\" : \"Unix\";\n\n\n//Provides: caml_sys_get_config const\n//Requires: caml_string_of_jsbytes, os_type\nfunction caml_sys_get_config () {\n  return [0, caml_string_of_jsbytes(os_type), 32, 0];\n}\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n\n//Provides: caml_runtime_variant\n//Requires: caml_string_of_jsbytes\nfunction caml_runtime_variant(_unit) {\n  return caml_string_of_jsbytes(\"\");\n}\n//Provides: caml_runtime_parameters\n//Requires: caml_string_of_jsbytes\nfunction caml_runtime_parameters(_unit) {\n  return caml_string_of_jsbytes(\"\");\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n\n//Provides: caml_spacetime_enabled const (const)\nfunction caml_spacetime_enabled(_unit) {\n  return 0;\n}\n\n//Provides: caml_sys_const_naked_pointers_checked const (const)\nfunction caml_sys_const_naked_pointers_checked(_unit) {\n  return 0;\n}\n\n//Provides: caml_register_channel_for_spacetime const (const)\nfunction caml_register_channel_for_spacetime(_channel) {\n  return 0;\n}\n\n//Provides: caml_spacetime_only_works_for_native_code\n//Requires: caml_failwith\nfunction caml_spacetime_only_works_for_native_code() {\n  caml_failwith(\"Spacetime profiling only works for native code\");\n}\n\n//Provides: caml_xdg_defaults\n//Version: >= 5.2\nfunction caml_xdg_defaults(_unit) {\n  return 0; // empty list\n}\n\n//Provides: caml_sys_is_regular_file\n//Requires: resolve_fs_device\nfunction caml_sys_is_regular_file(name) {\n  var root = resolve_fs_device(name);\n  return root.device.isFile(root.rest);\n}\n//Always\n//Requires: caml_fatal_uncaught_exception\nfunction caml_setup_uncaught_exception_handler() {\n  var process = globalThis.process;\n  if(process && process.on) {\n    process.on('uncaughtException', function (err, origin) {\n      caml_fatal_uncaught_exception(err);\n      process.exit (2);\n    })\n  }\n  else if(globalThis.addEventListener){\n    globalThis.addEventListener('error', function(event){\n      if(event.error){\n        caml_fatal_uncaught_exception(event.error);\n      }\n    });\n  }\n}\ncaml_setup_uncaught_exception_handler();\n\n\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n//Provides: caml_record_backtrace_flag\n//Requires: jsoo_sys_getenv\nvar caml_record_backtrace_flag = FLAG(\"with-js-error\");\n\n(function () {\n  var r = jsoo_sys_getenv(\"OCAMLRUNPARAM\")\n  if(r !== undefined){\n    var l = r.split(\",\");\n    for(var i = 0; i < l.length; i++){\n      if(l[i] == \"b\") { caml_record_backtrace_flag = 1; break }\n      else if (l[i].startsWith(\"b=\")) {\n        caml_record_backtrace_flag = +(l[i].slice(2))}\n      else continue;\n    }\n  }\n}) ()\n\n\n//Provides: caml_ml_debug_info_status const\nfunction caml_ml_debug_info_status () { return 0; }\n//Provides: caml_backtrace_status\n//Requires: caml_record_backtrace_flag\nfunction caml_backtrace_status (_unit) { return caml_record_backtrace_flag ? 1 : 0; }\n//Provides: caml_get_exception_backtrace const\nfunction caml_get_exception_backtrace () { return 0; }\n//Provides: caml_get_exception_raw_backtrace const\nfunction caml_get_exception_raw_backtrace () { return [0]; }\n//Provides: caml_record_backtrace\n//Requires: caml_record_backtrace_flag\nfunction caml_record_backtrace (b) { caml_record_backtrace_flag = b; return 0; }\n//Provides: caml_convert_raw_backtrace const\nfunction caml_convert_raw_backtrace () { return [0]; }\n//Provides: caml_raw_backtrace_length\nfunction caml_raw_backtrace_length() { return 0; }\n//Provides: caml_raw_backtrace_next_slot\nfunction caml_raw_backtrace_next_slot() { return 0 }\n//Provides: caml_raw_backtrace_slot\n//Requires: caml_invalid_argument\nfunction caml_raw_backtrace_slot () {\n  caml_invalid_argument(\"Printexc.get_raw_backtrace_slot: index out of bounds\");\n}\n//Provides: caml_restore_raw_backtrace\nfunction caml_restore_raw_backtrace(exn, bt) { return 0 }\n//Provides: caml_get_current_callstack const\nfunction caml_get_current_callstack () { return [0]; }\n\n//Provides: caml_convert_raw_backtrace_slot\n//Requires: caml_failwith\nfunction caml_convert_raw_backtrace_slot(){\n  caml_failwith(\"caml_convert_raw_backtrace_slot\");\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\n//Requires: caml_callback\nfunction caml_js_pure_expr (f) { return caml_callback(f, [0]); }\n\n//Provides: caml_js_set (mutable, const, mutable)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get (mutable, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return (o instanceof c) ? 1 : 0; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides:caml_stack_depth\n//If: effects\nvar caml_stack_depth = 0;\n\n//Provides:caml_stack_check_depth\n//If: effects\n//Requires:caml_stack_depth\nfunction caml_stack_check_depth() {\n    return --caml_stack_depth > 0;\n}\n\n//Provides: caml_callback\n//If: !effects\n//Requires:caml_call_gen\nvar caml_callback = caml_call_gen;\n\n//Provides: caml_callback\n//If: effects\n//Requires:caml_stack_depth, caml_call_gen, caml_exn_stack, caml_fiber_stack, caml_wrap_exception, caml_resume_stack, caml_fresh_oo_id, caml_named_value, caml_raise_with_arg, caml_string_of_jsbytes\n//Requires: caml_raise_constant\nfunction caml_callback(f,args) {\n  function uncaught_effect_handler(eff,k,ms) {\n    // Resumes the continuation k by raising exception Unhandled.\n    caml_resume_stack(k[1],ms);\n    var exn = caml_named_value(\"Effect.Unhandled\");\n    if(exn) caml_raise_with_arg(exn, eff);\n    else {\n      exn = [248,caml_string_of_jsbytes(\"Effect.Unhandled\"), caml_fresh_oo_id(0)];\n      caml_raise_constant(exn);\n    }\n  }\n  var saved_stack_depth = caml_stack_depth;\n  var saved_exn_stack = caml_exn_stack;\n  var saved_fiber_stack = caml_fiber_stack;\n  try {\n    caml_exn_stack = 0;\n    caml_fiber_stack =\n      {h:[0, 0, 0, uncaught_effect_handler], r:{k:0, x:0, e:0}};\n    var res = {joo_tramp: f,\n               joo_args: args.concat(function (x){return x;})};\n    do {\n      caml_stack_depth = 40;\n      try {\n        res = caml_call_gen(res.joo_tramp, res.joo_args);\n      } catch (e) {\n        /* Handle exception coming from JavaScript or from the runtime. */\n        if (!caml_exn_stack) throw e;\n        var handler = caml_exn_stack[1];\n        caml_exn_stack = caml_exn_stack[2];\n        res = {joo_tramp: handler,\n               joo_args: [caml_wrap_exception(e)]};\n      }\n    } while(res && res.joo_args)\n  } finally {\n    caml_stack_depth = saved_stack_depth;\n    caml_exn_stack = saved_exn_stack;\n    caml_fiber_stack = saved_fiber_stack;\n  }\n  return res;\n}\n\n//Provides: caml_is_js\nfunction caml_is_js() {\n  return 1;\n}\n\n//Provides: caml_jsoo_flags_use_js_string\nfunction caml_jsoo_flags_use_js_string(unit){\n  return FLAG(\"use-js-string\")\n}\n\n//Provides: caml_jsoo_flags_effects\nfunction caml_jsoo_flags_effects(unit){\n  return FLAG(\"effects\")\n}\n\n//Provides: caml_wrap_exception const (mutable)\n//Requires: caml_global_data,caml_string_of_jsstring,caml_named_value\nfunction caml_wrap_exception(e) {\n  if (FLAG(\"excwrap\")) {\n    if(e instanceof Array) return e;\n    var exn;\n    //Stack_overflow: chrome, safari\n    if(globalThis.RangeError\n       && e instanceof globalThis.RangeError\n       && e.message\n       && e.message.match(/maximum call stack/i))\n      exn = caml_global_data.Stack_overflow;\n    //Stack_overflow: firefox\n    else if(globalThis.InternalError\n       && e instanceof globalThis.InternalError\n       && e.message\n       && e.message.match(/too much recursion/i))\n      exn = caml_global_data.Stack_overflow;\n    //Wrap Error in Js.Error exception\n    else if(e instanceof globalThis.Error && caml_named_value(\"jsError\"))\n      exn = [0,caml_named_value(\"jsError\"),e];\n    else\n      //fallback: wrapped in Failure\n      exn = [0,caml_global_data.Failure,caml_string_of_jsstring (String(e))];\n    // We already have an error at hand, let's use it.\n    if (e instanceof globalThis.Error)\n      exn.js_error = e;\n    return exn;\n  } else\n    return e;\n}\n\n//Provides: caml_maybe_attach_backtrace\n//Requires: caml_exn_with_js_backtrace\n//Requires: caml_record_backtrace_flag\nfunction caml_maybe_attach_backtrace(exn, force) {\n  if(caml_record_backtrace_flag)\n    return caml_exn_with_js_backtrace(exn, force);\n  else return exn\n}\n\n// Experimental\n//Provides: caml_exn_with_js_backtrace\n//Requires: caml_global_data\nfunction caml_exn_with_js_backtrace(exn, force) {\n  //never reraise for constant exn\n  if(!exn.js_error || force || exn[0] == 248) exn.js_error = new globalThis.Error(\"Js exception containing backtrace\");\n  return exn;\n}\n\n\n//Provides: caml_js_error_option_of_exception\nfunction caml_js_error_option_of_exception(exn) {\n  if(exn.js_error) { return [0, exn.js_error]; }\n  return 0;\n}\n\n\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\n//Alias: caml_js_from_int32\n//Alias: caml_js_from_nativeint\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n//Provides: caml_js_to_int32 const (const)\n//Alias: caml_js_to_nativeint\nfunction caml_js_to_int32(x) { return x|0; }\n\n//Provides: caml_js_from_array mutable (shallow)\nfunction caml_js_from_array(a) {\n  return a.slice(1);\n}\n//Provides: caml_js_to_array mutable (shallow)\nfunction caml_js_to_array(a) {\n  var len = a.length;\n  var b = new Array(len+1);\n  b[0] = 0;\n  for(var i=0;i<len;i++) b[i+1] = a[i];\n  return b;\n}\n\n//Provides: caml_list_of_js_array const (mutable)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_list_to_js_array const (mutable)\nfunction caml_list_to_js_array(l){\n  var a = [];\n  for(; l !== 0; l = l[2]) {\n    a.push(l[1]);\n  }\n  return a;\n}\n\n//Provides: caml_js_var mutable\n//Requires: caml_jsstring_of_string\nfunction caml_js_var(x) {\n  var x = caml_jsstring_of_string(x);\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    console.error(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, a) {\n  switch (a.length) {\n  case 1: return f();\n  case 2: return f (a[1]);\n  case 3: return f (a[1],a[2]);\n  case 4: return f (a[1],a[2],a[3]);\n  case 5: return f (a[1],a[2],a[3],a[4]);\n  case 6: return f (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return f (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return f (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  return f.apply(null, caml_js_from_array(a));\n}\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: caml_jsstring_of_string\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_ojs_new_arr (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_ojs_new_arr(c, a) {\n  switch (a.length) {\n  case 0: return new c;\n  case 1: return new c (a[0]);\n  case 2: return new c (a[0],a[1]);\n  case 3: return new c (a[0],a[1],a[2]);\n  case 4: return new c (a[0],a[1],a[2],a[3]);\n  case 5: return new c (a[0],a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[0],a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[0],a[1],a[2],a[3],a[4],a[5],a[6]);\n  }\n  function F() { return c.apply(this, a); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_callback\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    var len = arguments.length;\n    if(len > 0){\n      var args = new Array(len);\n      for (var i = 0; i < len; i++) args[i] = arguments[i];\n    } else {\n      args = [undefined];\n    }\n    var res = caml_callback(f, args);\n    return (res instanceof Function)?caml_js_wrap_callback(res):res;\n  }\n}\n\n//Provides: caml_js_wrap_callback_arguments\n//Requires: caml_callback\nfunction caml_js_wrap_callback_arguments(f) {\n  return function() {\n    var len = arguments.length;\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f, [args]);\n  }\n}\n//Provides: caml_js_wrap_callback_strict const\n//Requires: caml_callback\nfunction caml_js_wrap_callback_strict(arity, f) {\n  return function () {\n    var n = arguments.length;\n    var args = new Array(arity);\n    var len = Math.min(arguments.length, arity)\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f, args);\n  };\n}\n//Provides: caml_js_wrap_callback_unsafe const (const)\n//Requires: caml_callback, caml_js_function_arity\nfunction caml_js_wrap_callback_unsafe(f) {\n  return function () {\n    var len = caml_js_function_arity(f);\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f, args); }\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_callback, caml_js_wrap_callback\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len + 1);\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    var res = caml_callback(f,args);\n    return (res instanceof Function)?caml_js_wrap_callback(res):res;\n  }\n}\n//Provides: caml_js_wrap_meth_callback_arguments const (const)\n//Requires: caml_callback\nfunction caml_js_wrap_meth_callback_arguments(f) {\n  return function () {\n    var len = arguments.length;\n    var args = new Array(len);\n    for (var i = 0; i < len; i++) args[i] = arguments[i];\n    return caml_callback(f,[this,args]);\n  }\n}\n//Provides: caml_js_wrap_meth_callback_strict const\n//Requires: caml_callback\nfunction caml_js_wrap_meth_callback_strict(arity, f) {\n  return function () {\n    var args = new Array(arity + 1);\n    var len = Math.min(arguments.length, arity)\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return caml_callback(f, args);\n  };\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_callback, caml_js_function_arity\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () {\n    var len = caml_js_function_arity(f) - 1;\n    var args = new Array(len + 1);\n    args[0] = this;\n    for (var i = 0; i < len; i++) args[i+1] = arguments[i];\n    return caml_callback(f, args); }\n}\n\n//Provides: caml_js_function_arity\n//If: !effects\nfunction caml_js_function_arity(f) {\n  return (f.l >= 0)?f.l:(f.l = f.length)\n}\n\n//Provides: caml_js_function_arity\n//If: effects\nfunction caml_js_function_arity(f) {\n  // Functions have an additional continuation parameter. This should\n  // not be visible when calling them from JavaScript\n  return ((f.l >= 0)?f.l:(f.l = f.length)) - 1\n}\n\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n\n//Provides: caml_js_strict_equals mutable (const, const)\nfunction caml_js_strict_equals (x, y) { return +(x === y); }\n\n//Provides: caml_js_eval_string (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_eval_string (s) {return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_js_expr (const)\n//Requires: caml_jsstring_of_string\nfunction caml_js_expr(s) {\n  console.error(\"caml_js_expr: fallback to runtime evaluation\\n\");\n  return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: caml_jsstring_of_string\nfunction caml_pure_js_expr (s){\n  console.error(\"caml_pure_js_expr: fallback to runtime evaluation\\n\");\n  return eval(caml_jsstring_of_string(s));}\n\n//Provides: caml_js_object (object_literal)\n//Requires: caml_jsstring_of_string\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[caml_jsstring_of_string(p[1])] = p[2];\n  }\n  return o;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Raise exception\n\n//Provides: caml_raise_constant (const)\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_raise_with_arg (const, mutable)\n//Requires: caml_maybe_attach_backtrace\nfunction caml_raise_with_arg (tag, arg) { throw caml_maybe_attach_backtrace([0, tag, arg]); }\n\n//Provides: caml_raise_with_args (const, mutable)\n//Requires: caml_maybe_attach_backtrace\nfunction caml_raise_with_args (tag, args) { throw caml_maybe_attach_backtrace([0, tag].concat(args)); }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg, caml_string_of_jsbytes\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_string_of_jsbytes(msg));\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data, caml_string_of_jsbytes\nfunction caml_failwith (msg) {\n  if(!caml_global_data.Failure)\n    caml_global_data.Failure=[248,caml_string_of_jsbytes(\"Failure\"),-3];\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_trailing_slash\nfunction caml_trailing_slash(name){\n  return (name.slice(-1) !== \"/\") ? (name + \"/\") : name;\n}\n\n//Provides: caml_current_dir\n//Requires: caml_trailing_slash, fs_node_supported\nif(fs_node_supported () && globalThis.process && globalThis.process.cwd)\n  var caml_current_dir = globalThis.process.cwd().replace(/\\\\/g,'/');\nelse\n  var caml_current_dir =  \"/static\";\ncaml_current_dir = caml_trailing_slash(caml_current_dir);\n\n//Provides: caml_get_root\n//Requires: path_is_absolute\nfunction caml_get_root(path){\n  var x = path_is_absolute(path);\n  if (!x) return;\n  return x[0] + \"/\"}\n\n//Provides: caml_root\n//Requires: caml_get_root, caml_current_dir, caml_failwith\nvar caml_root = caml_get_root(caml_current_dir) || caml_failwith(\"unable to compute caml_root\");\n\n\n//Provides: MlFile\nfunction MlFile(){  }\n\n//Provides: path_is_absolute\n//Requires: fs_node_supported\nfunction make_path_is_absolute() {\n  function posix(path) {\n    if (path.charAt(0) === '/') return [\"\", path.substring(1)];\n    return;\n  }\n\n  function win32(path) {\n    // https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n    var splitDeviceRe = /^([a-zA-Z]:|[\\\\/]{2}[^\\\\/]+[\\\\/]+[^\\\\/]+)?([\\\\/])?([\\s\\S]*?)$/;\n    var result = splitDeviceRe.exec(path);\n    var device = result[1] || '';\n    var isUnc = Boolean(device && device.charAt(1) !== ':');\n\n    // UNC paths are always absolute\n    if (Boolean(result[2] || isUnc)) {\n      var root = (result[1] || '');\n      var sep = (result[2] || '');\n      return [root, path.substring(root.length + sep.length)]\n    }\n    return;\n  }\n  if(fs_node_supported () && globalThis.process && globalThis.process.platform) {\n    return globalThis.process.platform === 'win32' ? win32 : posix;\n  }\n  else return posix\n}\nvar path_is_absolute = make_path_is_absolute();\n\n//Provides: caml_make_path\n//Requires: caml_current_dir\n//Requires: caml_jsstring_of_string, path_is_absolute\nfunction caml_make_path (name) {\n  name=caml_jsstring_of_string(name);\n  if( !path_is_absolute(name) )\n    name = caml_current_dir + name;\n  var comp0 = path_is_absolute(name);\n  var comp = comp0[1].split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.unshift(comp0[0]);\n  ncomp.orig = name;\n  return ncomp;\n}\n\n//Provides:jsoo_mount_point\n//Requires: MlFakeDevice, MlNodeDevice, caml_root, fs_node_supported\nvar jsoo_mount_point = []\nif (fs_node_supported()) {\n  jsoo_mount_point.push({path:caml_root,device:new MlNodeDevice(caml_root)});\n} else {\n  jsoo_mount_point.push({path:caml_root,device:new MlFakeDevice(caml_root)});\n}\njsoo_mount_point.push({path:\"/static/\", device:new MlFakeDevice(\"/static/\")});\n\n//Provides:caml_list_mount_point\n//Requires: jsoo_mount_point, caml_string_of_jsbytes\nfunction caml_list_mount_point(){\n  var prev = 0\n  for(var i = 0; i < jsoo_mount_point.length; i++){\n    var old = prev;\n    prev = [0, caml_string_of_jsbytes(jsoo_mount_point[i].path), old]\n  }\n  return prev;\n}\n\n//Provides: resolve_fs_device\n//Requires: caml_make_path, jsoo_mount_point, caml_raise_sys_error, caml_get_root, MlNodeDevice, caml_trailing_slash, fs_node_supported\nfunction resolve_fs_device(name){\n  var path = caml_make_path(name);\n  var name = path.join(\"/\");\n  var name_slash = caml_trailing_slash(name);\n  var res;\n  for(var i = 0; i < jsoo_mount_point.length; i++) {\n    var m = jsoo_mount_point[i];\n    if(name_slash.search(m.path) == 0\n       && (!res || res.path.length < m.path.length))\n      res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n  }\n  if( !res && fs_node_supported()) {\n    var root = caml_get_root(name);\n    if (root && root.match(/^[a-zA-Z]:\\/$/)){\n      var m = {path:root,device:new MlNodeDevice(root)};\n      jsoo_mount_point.push(m);\n      res = {path:m.path,device:m.device,rest:name.substring(m.path.length,name.length)};\n    }\n  }\n  if( res ) return res;\n  caml_raise_sys_error(\"no device found for \" + name_slash);\n}\n\n//Provides: caml_mount_autoload\n//Requires: MlFakeDevice, caml_make_path, jsoo_mount_point, caml_trailing_slash\nfunction caml_mount_autoload(name,f){\n  var path = caml_make_path(name);\n  var name = caml_trailing_slash(path.join(\"/\"));\n  jsoo_mount_point.push({path:name,device:new MlFakeDevice(name,f)})\n  return 0;\n}\n\n//Provides: caml_unmount\n//Requires: jsoo_mount_point, caml_make_path, caml_trailing_slash\nfunction caml_unmount(name){\n  var path = caml_make_path(name);\n  var name = caml_trailing_slash(path.join(\"/\"));\n  var idx = -1;\n  for(var i = 0; i < jsoo_mount_point.length; i++)\n    if(jsoo_mount_point[i].path == name) idx = i;\n  if(idx > -1) jsoo_mount_point.splice(idx,1);\n  return 0\n}\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_string_of_jsbytes\nfunction caml_sys_getcwd() {\n  return caml_string_of_jsbytes(caml_current_dir);\n}\n\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_raise_no_such_file, resolve_fs_device, caml_trailing_slash, caml_jsbytes_of_string\nfunction caml_sys_chdir(dir) {\n  var root = resolve_fs_device(dir);\n  if(root.device.exists(root.rest)) {\n    if(root.rest) caml_current_dir = caml_trailing_slash(root.path + root.rest);\n    else caml_current_dir = root.path;\n    return 0;\n  }\n  else {\n    caml_raise_no_such_file(caml_jsbytes_of_string(dir));\n  }\n}\n\n//Provides: caml_raise_no_such_file\n//Requires: caml_raise_sys_error\nfunction caml_raise_no_such_file(name){\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: caml_raise_sys_error\nfunction caml_raise_not_a_dir(name){\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_sys_file_exists\n//Requires: resolve_fs_device\nfunction caml_sys_file_exists (name) {\n  var root = resolve_fs_device(name);\n  return root.device.exists(root.rest);\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_string_of_jsbytes\n//Requires: caml_raise_not_a_dir, resolve_fs_device\nfunction caml_sys_read_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.readdir(root.rest);\n  var l = new Array(a.length + 1);\n  l[0] = 0;\n  for(var i=0;i<a.length;i++)\n    l[i+1] = caml_string_of_jsbytes(a[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_raise_no_such_file, resolve_fs_device, caml_jsbytes_of_string\nfunction caml_sys_remove(name){\n  var root = resolve_fs_device(name);\n  var ok = root.device.unlink(root.rest);\n  if(ok == 0) caml_raise_no_such_file(caml_jsbytes_of_string(name));\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: resolve_fs_device\nfunction caml_sys_is_directory(name){\n  var root = resolve_fs_device(name);\n  var a = root.device.is_dir(root.rest);\n  return a?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_sys_rename(o,n){\n  var o_root = resolve_fs_device(o);\n  var n_root = resolve_fs_device(n);\n  if(o_root.device != n_root.device)\n    caml_failwith(\"caml_sys_rename: cannot move file between two filesystem\");\n  if(!o_root.device.rename)\n    caml_failwith(\"caml_sys_rename: no implemented\");\n  o_root.device.rename(o_root.rest, n_root.rest);\n}\n\n//Provides: caml_sys_mkdir\n//Requires: resolve_fs_device, caml_raise_sys_error\nfunction caml_sys_mkdir(name, perm){\n  var root = resolve_fs_device(name);\n  root.device.mkdir(root.rest,perm);\n  return 0;\n}\n\n//Provides: caml_sys_rmdir\n//Requires: resolve_fs_device, caml_raise_sys_error, caml_raise_not_a_dir\nfunction caml_sys_rmdir(name){\n  var root = resolve_fs_device(name);\n  root.device.rmdir(root.rest);\n  return 0;\n}\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n  // var data = caml_sys_fds[vfd];\n  caml_failwith(\"caml_ba_map_file not implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n//Provides: jsoo_create_file_extern\nfunction jsoo_create_file_extern(name,content){\n  if(globalThis.jsoo_create_file)\n    globalThis.jsoo_create_file(name,content);\n  else {\n    if(!globalThis.caml_fs_tmp) globalThis.caml_fs_tmp = [];\n    globalThis.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: jsoo_create_file\nfunction caml_fs_init (){\n  var tmp=globalThis.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      jsoo_create_file(tmp[i].name,tmp[i].content);\n    }\n  }\n  globalThis.jsoo_create_file = jsoo_create_file;\n  globalThis.caml_fs_tmp = [];\n  return 0;\n}\n\n//Provides: caml_create_file\n//Requires: caml_failwith, resolve_fs_device\nfunction caml_create_file(name,content) {\n  var root = resolve_fs_device(name);\n  if(! root.device.register) caml_failwith(\"cannot register file\");\n  root.device.register(root.rest,content);\n  return 0;\n}\n\n\n//Provides: jsoo_create_file\n//Requires: caml_create_file, caml_string_of_jsbytes\nfunction jsoo_create_file(name,content) {\n  var name = caml_string_of_jsbytes(name);\n  var content = caml_string_of_jsbytes(content);\n  return caml_create_file(name, content);\n}\n\n\n//Provides: caml_read_file_content\n//Requires: resolve_fs_device, caml_raise_no_such_file, caml_string_of_array\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction caml_read_file_content (name) {\n  var name = (typeof name == \"string\")?caml_string_of_jsbytes(name):name;\n  var root = resolve_fs_device(name);\n  if(root.device.exists(root.rest)) {\n    var file = root.device.open(root.rest,{rdonly:1});\n    var len  = file.length();\n    var buf = new Uint8Array(len);\n    file.read(0,buf,0,len);\n    return caml_string_of_array(buf)\n  }\n  caml_raise_no_such_file(caml_jsbytes_of_string(name));\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: MlFakeDevice\n//Requires: MlFakeFile, MlFakeFd, caml_create_bytes\n//Requires: caml_raise_sys_error, caml_raise_no_such_file\n//Requires: caml_string_of_jsbytes, caml_string_of_jsstring\n//Requires: caml_bytes_of_array, caml_bytes_of_string, caml_bytes_of_jsbytes\n//Requires: caml_is_ml_bytes, caml_is_ml_string\n//Requires: caml_named_value, caml_raise_with_args, caml_named_values\n//Requires: make_unix_err_args\nfunction MlFakeDevice (root, f) {\n  this.content={};\n  this.root = root;\n  this.lookupFun = f;\n}\nMlFakeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlFakeDevice.prototype.create_dir_if_needed = function(name) {\n  var comp = name.split(\"/\");\n  var res = \"\";\n  for(var i = 0; i < comp.length - 1; i++){\n    res += comp[i] + \"/\";\n    if(this.content[res]) continue;\n    this.content[res] = Symbol(\"directory\");\n  }\n}\nMlFakeDevice.prototype.slash = function(name){\n  return /\\/$/.test(name)?name:(name + \"/\");\n}\nMlFakeDevice.prototype.lookup = function(name) {\n  if(!this.content[name] && this.lookupFun) {\n    var res = this.lookupFun(caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));\n    if(res !== 0) {\n      this.create_dir_if_needed(name);\n      this.content[name]=new MlFakeFile(caml_bytes_of_string(res[1]));\n    }\n  }\n}\nMlFakeDevice.prototype.exists = function(name) {\n  // The root of the device exists\n  if(name == \"\") return 1;\n  // Check if a directory exists\n  var name_slash = this.slash(name);\n  if(this.content[name_slash]) return 1;\n  // Check if a file exists\n  this.lookup(name);\n  return this.content[name]?1:0;\n}\nMlFakeDevice.prototype.isFile = function(name) {\n  if(this.exists(name) && !this.is_dir(name)) {\n    return 1\n  }\n  else {\n    return 0\n  }\n}\nMlFakeDevice.prototype.mkdir = function(name,mode, raise_unix) {\n  var unix_error = raise_unix && caml_named_value('Unix.Unix_error');\n  if(this.exists(name)) {\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"EEXIST\", \"mkdir\", this.nm(name)));\n    }\n    else {\n      caml_raise_sys_error(name + \": File exists\");\n    }\n  }\n  var parent = /^(.*)\\/[^/]+/.exec(name);\n  parent = (parent && parent[1]) || '';\n  if(!this.exists(parent)){\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOENT\", \"mkdir\", this.nm(parent)));\n    }\n    else {\n      caml_raise_sys_error(parent + \": No such file or directory\");\n    }\n  }\n  if(!this.is_dir(parent)){\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOTDIR\", \"mkdir\", this.nm(parent)));\n    }\n    else {\n      caml_raise_sys_error(parent + \": Not a directory\");\n    }\n  }\n  this.create_dir_if_needed(this.slash(name));\n}\nMlFakeDevice.prototype.rmdir = function(name, raise_unix) {\n  var unix_error = raise_unix && caml_named_value('Unix.Unix_error');\n  var name_slash = (name == \"\")?\"\":(this.slash(name));\n  var r = new RegExp(\"^\" + name_slash + \"([^/]+)\");\n  if(!this.exists(name)) {\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOENT\", \"rmdir\", this.nm(name)));\n    }\n    else {\n      caml_raise_sys_error(name + \": No such file or directory\");\n    }\n  }\n  if(!this.is_dir(name)) {\n    if (unix_error) {\n      caml_raise_with_args(unix_error, make_unix_err_args(\"ENOTDIR\", \"rmdir\", this.nm(name)));\n    }\n    else {\n      caml_raise_sys_error(name + \": Not a directory\");\n    }\n  }\n  for(var n in this.content) {\n    if(n.match(r)) {\n      if (unix_error) {\n        caml_raise_with_args(unix_error, make_unix_err_args(\"ENOTEMPTY\", \"rmdir\", this.nm(name)));\n      } else {\n        caml_raise_sys_error(this.nm(name) + \": Directory not empty\");\n      }\n    }\n  }\n  delete this.content[name_slash];\n}\nMlFakeDevice.prototype.readdir = function(name) {\n  var name_slash = (name == \"\")?\"\":(this.slash(name));\n  if(!this.exists(name)) {\n    caml_raise_sys_error(name + \": No such file or directory\");\n  }\n  if(!this.is_dir(name)) {\n    caml_raise_sys_error(name + \": Not a directory\");\n  }\n  var r = new RegExp(\"^\" + name_slash + \"([^/]+)\");\n  var seen = {}\n  var a = [];\n  for(var n in this.content) {\n    var m = n.match(r);\n    if(m && !seen[m[1]]) {seen[m[1]] = true; a.push(m[1])}\n  }\n  return a;\n}\nMlFakeDevice.prototype.opendir = function(name, raise_unix) {\n  var unix_error = raise_unix && caml_named_value('Unix.Unix_error');\n\n  var a = this.readdir(name);\n  var c = false;\n  var i = 0;\n  return { readSync : (function () {\n    if (c) {\n      if (unix_error) {\n        caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"closedir\", this.nm(name)));\n      }\n      else {\n        caml_raise_sys_error(name + \": closedir failed\");\n      }\n    }\n    if(i == a.length) return null;\n    var entry = a[i];\n    i++;\n    return { name: entry }\n  })\n    , closeSync: (function () {\n      if (c) {\n        if (unix_error) {\n          caml_raise_with_args(unix_error, make_unix_err_args(\"EBADF\", \"closedir\", this.nm(name)));\n        }\n        else {\n          caml_raise_sys_error(name + \": closedir failed\");\n        }\n      }\n      c = true;\n      a = [];\n    })\n  }\n}\nMlFakeDevice.prototype.is_dir = function(name) {\n  if(name == \"\")  return true;\n  var name_slash = this.slash(name);\n  return this.content[name_slash]?1:0;\n}\nMlFakeDevice.prototype.unlink = function(name) {\n  var ok = this.content[name]?true:false;\n  delete this.content[name];\n  return ok;\n}\nMlFakeDevice.prototype.open = function(name, f) {\n  var file;\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    file = this.content[name];\n    if(f.truncate) file.truncate();\n  } else if (f.create) {\n    this.create_dir_if_needed(name);\n    this.content[name] = new MlFakeFile(caml_create_bytes(0));\n    file = this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n  return new MlFakeFd(this.nm(name), file, f);\n}\n\nMlFakeDevice.prototype.open = function(name, f) {\n  var file;\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(this.nm(name) + \" : flags Open_text and Open_binary are not compatible\");\n  this.lookup(name);\n  if (this.content[name]) {\n    if (this.is_dir(name)) caml_raise_sys_error(this.nm(name) + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n    file = this.content[name];\n    if(f.truncate) file.truncate();\n  } else if (f.create) {\n    this.create_dir_if_needed(name);\n    this.content[name] = new MlFakeFile(caml_create_bytes(0));\n    file = this.content[name];\n  } else {\n    caml_raise_no_such_file (this.nm(name));\n  }\n  return new MlFakeFd(this.nm(name), file, f);\n}\n\nMlFakeDevice.prototype.register= function (name,content){\n  var file;\n  if(this.content[name]) caml_raise_sys_error(this.nm(name) + \" : file already exists\");\n  if(caml_is_ml_bytes(content))\n    file = new MlFakeFile(content);\n  if(caml_is_ml_string(content))\n    file = new MlFakeFile(caml_bytes_of_string(content));\n  else if(content instanceof Array)\n    file = new MlFakeFile(caml_bytes_of_array(content));\n  else if(typeof content === \"string\")\n    file = new MlFakeFile(caml_bytes_of_jsbytes(content));\n  else if(content.toString) {\n    var bytes = caml_bytes_of_string(caml_string_of_jsstring(content.toString()));\n    file = new MlFakeFile(bytes);\n  }\n  if(file){\n    this.create_dir_if_needed(name);\n    this.content[name] = file;\n  }\n  else caml_raise_sys_error(this.nm(name) + \" : registering file with invalid content type\");\n}\n\nMlFakeDevice.prototype.constructor = MlFakeDevice\n\n//Provides: MlFakeFile\n//Requires: MlFile\n//Requires: caml_create_bytes, caml_ml_bytes_length, caml_blit_bytes\n//Requires: caml_uint8_array_of_bytes, caml_bytes_of_array\nfunction MlFakeFile(content){\n  this.data = content;\n}\nMlFakeFile.prototype = new MlFile ();\nMlFakeFile.prototype.constructor = MlFakeFile\nMlFakeFile.prototype.truncate = function(len){\n  var old = this.data;\n  this.data = caml_create_bytes(len|0);\n  caml_blit_bytes(old, 0, this.data, 0, len);\n}\nMlFakeFile.prototype.length = function () {\n  return caml_ml_bytes_length(this.data);\n}\nMlFakeFile.prototype.write = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    var new_str = caml_create_bytes(offset + len);\n    var old_data = this.data;\n    this.data = new_str;\n    caml_blit_bytes(old_data, 0, this.data, 0, clen);\n  }\n  caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);\n  return 0\n}\nMlFakeFile.prototype.read = function(offset,buf,pos,len){\n  var clen = this.length();\n  if(offset + len >= clen) {\n    len = clen - offset;\n  }\n  if(len) {\n    var data = caml_create_bytes(len|0);\n    caml_blit_bytes(this.data, offset, data, 0, len);\n    buf.set(caml_uint8_array_of_bytes(data), pos);\n  }\n  return len\n}\n\n\n//Provides: MlFakeFd_out\n//Requires: MlFakeFile, caml_create_bytes, caml_blit_bytes, caml_bytes_of_array\n//Requires: caml_raise_sys_error\nfunction MlFakeFd_out(fd,flags) {\n  MlFakeFile.call(this, caml_create_bytes(0));\n  this.log = (function (s) { return 0 });\n  if(fd == 1 && typeof console.log == \"function\")\n    this.log = console.log;\n  else if(fd == 2 && typeof console.error == \"function\")\n    this.log = console.error;\n  else if(typeof console.log == \"function\")\n    this.log = console.log\n  this.flags = flags;\n}\nMlFakeFd_out.prototype.length = function() { return 0 }\nMlFakeFd_out.prototype.write = function (offset,buf,pos,len) {\n  if(this.log) {\n    if(len > 0\n       && pos >= 0\n       && pos+len <= buf.length\n       && buf[pos+len-1] == 10)\n      len --;\n    // Do not output the last \\n if present\n    // as console logging display a newline at the end\n    var src = caml_create_bytes(len);\n    caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);\n    this.log(src.toUtf16());\n    return 0;\n  }\n  caml_raise_sys_error(this.fd  + \": file descriptor already closed\");\n}\nMlFakeFd_out.prototype.read = function (offset, buf, pos, len) {\n  caml_raise_sys_error(this.fd  + \": file descriptor is write only\");\n}\nMlFakeFd_out.prototype.close = function () {\n  this.log = undefined;\n}\n\n\n//Provides: MlFakeFd\n//Requires: MlFakeFile\n//Requires: caml_raise_sys_error\nfunction MlFakeFd(name, file,flags) {\n  this.file = file;\n  this.name = name;\n  this.flags = flags;\n}\n\nMlFakeFd.prototype.err_closed = function () {\n  caml_raise_sys_error(this.name  + \": file descriptor already closed\");\n}\nMlFakeFd.prototype.length = function() {\n  if(this.file) return this.file.length ()\n  this.err_closed();\n}\nMlFakeFd.prototype.write = function (offset,buf,pos,len) {\n  if(this.file) return this.file.write(offset,buf,pos,len)\n  this.err_closed();\n}\nMlFakeFd.prototype.read = function (offset, buf, pos, len) {\n  if(this.file) return this.file.read(offset, buf, pos, len)\n  this.err_closed();\n}\nMlFakeFd.prototype.close = function () {\n  this.file = undefined;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: MlInt64\n//Requires: caml_int64_offset, caml_raise_zero_divide\nfunction MlInt64 (lo,mi,hi) {\n  this.lo = lo & 0xffffff;\n  this.mi = mi & 0xffffff;\n  this.hi = hi & 0xffff;\n}\nMlInt64.prototype.caml_custom = \"_j\"\nMlInt64.prototype.copy = function () {\n  return new MlInt64(this.lo,this.mi,this.hi);\n}\n\nMlInt64.prototype.ucompare = function (x) {\n  if (this.hi > x.hi) return 1;\n  if (this.hi < x.hi) return -1;\n  if (this.mi > x.mi) return 1;\n  if (this.mi < x.mi) return -1;\n  if (this.lo > x.lo) return 1;\n  if (this.lo < x.lo) return -1;\n  return 0;\n}\nMlInt64.prototype.compare = function (x) {\n  var hi = this.hi << 16;\n  var xhi = x.hi << 16;\n  if (hi > xhi) return 1;\n  if (hi < xhi) return -1;\n  if (this.mi > x.mi) return 1;\n  if (this.mi < x.mi) return -1;\n  if (this.lo > x.lo) return 1;\n  if (this.lo < x.lo) return -1;\n  return 0;\n}\nMlInt64.prototype.neg = function () {\n  var lo = - this.lo;\n  var mi = - this.mi + (lo >> 24);\n  var hi = - this.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.add = function (x) {\n  var lo = this.lo + x.lo;\n  var mi = this.mi + x.mi + (lo >> 24);\n  var hi = this.hi + x.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.sub = function (x) {\n  var lo = this.lo - x.lo;\n  var mi = this.mi - x.mi + (lo >> 24);\n  var hi = this.hi - x.hi + (mi >> 24);\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.mul = function (x) {\n  var lo = this.lo * x.lo;\n  var mi = ((lo * caml_int64_offset) | 0) + this.mi * x.lo + this.lo * x.mi;\n  var hi = ((mi * caml_int64_offset) | 0) + this.hi * x.lo + this.mi * x.mi + this.lo * x.hi;\n  return new MlInt64(lo, mi, hi);\n}\nMlInt64.prototype.isZero = function () {\n  return (this.lo|this.mi|this.hi) == 0;\n}\nMlInt64.prototype.isNeg = function () {\n  return (this.hi << 16) < 0;\n}\nMlInt64.prototype.and = function (x) {\n  return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);\n}\nMlInt64.prototype.or = function (x) {\n  return new MlInt64(this.lo|x.lo, this.mi|x.mi, this.hi|x.hi);\n}\nMlInt64.prototype.xor = function (x) {\n  return new MlInt64(this.lo^x.lo, this.mi^x.mi, this.hi^x.hi);\n}\nMlInt64.prototype.shift_left = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  if (s < 24) {\n    return new MlInt64 (this.lo << s,\n                        (this.mi << s) | (this.lo >> (24 - s)),\n                        (this.hi << s) | (this.mi >> (24 - s)));\n  }\n  if (s < 48)\n    return new MlInt64 (0,\n                        this.lo << (s - 24),\n                        (this.mi << (s - 24)) | (this.lo >> (48 - s)));\n  return new MlInt64(0, 0, this.lo << (s - 48))\n}\nMlInt64.prototype.shift_right_unsigned = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  if (s < 24)\n    return new MlInt64 (\n      (this.lo >> s) | (this.mi << (24 - s)),\n      (this.mi >> s) | (this.hi << (24 - s)),\n      (this.hi >> s));\n  if (s < 48)\n    return new MlInt64 (\n      (this.mi >> (s - 24)) | (this.hi << (48 - s)),\n      (this.hi >> (s - 24)),\n      0);\n  return new MlInt64 (this.hi >> (s - 48), 0, 0);\n}\nMlInt64.prototype.shift_right = function (s) {\n  s = s & 63;\n  if (s == 0) return this;\n  var h = (this.hi << 16) >> 16;\n  if (s < 24)\n    return new MlInt64 (\n      (this.lo >> s) | (this.mi << (24 - s)),\n      (this.mi >> s) | (h << (24 - s)),\n      ((this.hi << 16) >> s) >>> 16);\n  var sign = (this.hi << 16) >> 31;\n  if (s < 48)\n    return new MlInt64 (\n      (this.mi >> (s - 24)) | (this.hi << (48 - s)),\n      (this.hi << 16) >> (s - 24) >> 16,\n      sign & 0xffff);\n  return new MlInt64 ((this.hi << 16) >> (s - 32), sign, sign);\n}\nMlInt64.prototype.lsl1 = function () {\n  this.hi = (this.hi << 1) | (this.mi >> 23);\n  this.mi = ((this.mi << 1) | (this.lo >> 23)) & 0xffffff;\n  this.lo = (this.lo << 1) & 0xffffff;\n}\nMlInt64.prototype.lsr1 = function () {\n  this.lo = ((this.lo >>> 1) | (this.mi << 23)) & 0xffffff;\n  this.mi = ((this.mi >>> 1) | (this.hi << 23)) & 0xffffff;\n  this.hi = this.hi >>> 1;\n}\nMlInt64.prototype.udivmod = function (x) {\n  var offset = 0;\n  var modulus = this.copy();\n  var divisor = x.copy();\n  var quotient = new MlInt64(0,0,0);\n  while (modulus.ucompare(divisor) > 0) {\n    offset++;\n    divisor.lsl1();\n  }\n  while (offset >= 0) {\n    offset --;\n    quotient.lsl1();\n    if (modulus.ucompare(divisor) >= 0) {\n      quotient.lo ++;\n      modulus = modulus.sub(divisor);\n    }\n    divisor.lsr1();\n  }\n  return { quotient : quotient, modulus : modulus };\n}\nMlInt64.prototype.div = function (y)\n{\n  var x = this;\n  if (y.isZero()) caml_raise_zero_divide ();\n  var sign = x.hi ^ y.hi;\n  if (x.hi & 0x8000) x = x.neg();\n  if (y.hi & 0x8000) y = y.neg();\n  var q = x.udivmod(y).quotient;\n  if (sign & 0x8000) q = q.neg();\n  return q;\n}\nMlInt64.prototype.mod = function (y)\n{\n  var x = this;\n  if (y.isZero()) caml_raise_zero_divide ();\n  var sign = x.hi;\n  if (x.hi & 0x8000) x = x.neg();\n  if (y.hi & 0x8000) y = y.neg();\n  var r = x.udivmod(y).modulus;\n  if (sign & 0x8000) r = r.neg();\n  return r;\n}\nMlInt64.prototype.toInt = function () {\n  return this.lo | (this.mi << 24);\n}\nMlInt64.prototype.toFloat = function () {\n  return ((this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)) + this.lo;\n}\nMlInt64.prototype.toArray = function () {\n  return [this.hi >> 8,\n          this.hi & 0xff,\n          this.mi >> 16,\n          (this.mi >> 8) & 0xff,\n          this.mi & 0xff,\n          this.lo >> 16,\n          (this.lo >> 8) & 0xff,\n          this.lo & 0xff];\n}\nMlInt64.prototype.lo32 = function () {\n  return this.lo | ((this.mi & 0xff) << 24);\n}\nMlInt64.prototype.hi32 = function () {\n  return ((this.mi >>> 8) & 0xffff) | (this.hi << 16);\n}\n\n//Provides: caml_int64_ult const\nfunction caml_int64_ult(x,y) { return x.ucompare(y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y, total) { return x.compare(y) }\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) { return x.neg() }\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) { return x.add(y) }\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) { return x.sub(y) }\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) { return x.mul(y) }\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) { return +x.isZero(); }\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) { return +x.isNeg(); }\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) { return x.and(y); }\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) { return x.or(y); }\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) { return x.xor(y) }\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) { return x.shift_left(s) }\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) { return x.shift_right_unsigned(s) }\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) { return x.shift_right(s) }\n\n//Provides: caml_int64_div const\nfunction caml_int64_div (x, y) { return x.div(y) }\n\n//Provides: caml_int64_mod const\nfunction caml_int64_mod (x, y) { return x.mod(y) }\n\n//Provides: caml_int64_of_int32 const\n//Requires: MlInt64\nfunction caml_int64_of_int32 (x) {\n  return new MlInt64(x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff)\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) { return x.toInt() }\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) { return x.toFloat () }\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset, MlInt64\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return new MlInt64(\n    x & 0xffffff,\n    Math.floor(x * caml_int64_offset) & 0xffffff,\n    Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = x.udivmod(wbase);\n    x = p.quotient;\n    buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit\n//Requires: caml_int64_of_int32, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get, MlInt64\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n      new MlInt64(0xffffff, 0xfffffff, 0xffff).udivmod(base64).quotient;\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (base == 10 && caml_int64_ult(new MlInt64(0, 0, 0x8000), res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_create_lo_mi_hi const\n//Requires: MlInt64\nfunction caml_int64_create_lo_mi_hi(lo, mi, hi){\n  return new MlInt64(lo, mi, hi)\n}\n//Provides: caml_int64_create_lo_hi const\n//Requires: MlInt64\nfunction caml_int64_create_lo_hi(lo, hi){\n  return new MlInt64 (\n    lo & 0xffffff,\n    ((lo >>> 24) & 0xff) | ((hi & 0xffff) << 8),\n    (hi >>> 16) & 0xffff);\n}\n//Provides: caml_int64_lo32 const\nfunction caml_int64_lo32(v){ return v.lo32() }\n\n//Provides: caml_int64_hi32 const\nfunction caml_int64_hi32(v){ return v.hi32() }\n\n//Provides: caml_int64_of_bytes const\n//Requires: MlInt64\nfunction caml_int64_of_bytes(a) {\n  return new MlInt64(a[7] << 0 | (a[6] << 8) | (a[5] << 16),\n                     a[4] << 0 | (a[3] << 8) | (a[2] << 16),\n                     a[1] << 0 | (a[0] << 8));\n}\n//Provides: caml_int64_to_bytes const\nfunction caml_int64_to_bytes(x) { return x.toArray() }\n\n//Provides: caml_int64_hash const\nfunction caml_int64_hash(v){\n  return (v.lo32()) ^ (v.hi32())\n}\n","\n//Provides: MlMutex\nfunction MlMutex() {\n  this.locked = false\n}\n\n//Provides: caml_ml_mutex_new\n//Requires: MlMutex\nfunction caml_ml_mutex_new(unit) {\n  return new MlMutex();\n}\n\n//Provides: caml_ml_mutex_lock\n//Requires: caml_failwith\nfunction caml_ml_mutex_lock(t) {\n  if(t.locked)\n    caml_failwith(\"Mutex.lock: mutex already locked. Cannot wait.\");\n  else t.locked = true;\n  return 0;\n}\n\n//Provides: caml_ml_mutex_try_lock\nfunction caml_ml_mutex_try_lock(t) {\n  if(!t.locked) {\n    t.locked = true;\n    return 1;\n  }\n  return 0;\n}\n\n//Provides: caml_ml_mutex_unlock\nfunction caml_ml_mutex_unlock(t) {\n  t.locked = false;\n  return 0;\n}\n","//Provides: initialize_nat\n//Requires: caml_custom_ops\n//Requires: serialize_nat, deserialize_nat, caml_hash_nat\nfunction initialize_nat() {\n  caml_custom_ops[\"_nat\"] =\n    { deserialize : deserialize_nat,\n      serialize : serialize_nat,\n      hash : caml_hash_nat\n    }\n}\n\n//Provides: MlNat\nfunction MlNat(x){\n  this.data = new Int32Array(x);\n  // For num < 1.5\n  // length_nat isn't external, so we have to make the Obj.size\n  // work out right.\n  // We add +2 to the array length:\n  // - +1 for the tag\n  // - +1 for the custom_ops slot\n  this.length = this.data.length + 2\n}\n\nMlNat.prototype.caml_custom = \"_nat\";\n\n//Provides: caml_hash_nat\n//Requires: caml_hash_mix_int, num_digits_nat\nfunction caml_hash_nat(x) {\n  var len = num_digits_nat(x, 0, x.data.length);\n  var h = 0;\n  for (var i = 0; i < len; i++) {\n    h = caml_hash_mix_int(h, x.data[i]);\n  }\n  return h;\n}\n\n//Provides: length_nat\nfunction length_nat(x) {\n  return x.data.length;\n}\n\n//Provides: nat_of_array\n//Requires: MlNat\nfunction nat_of_array(l){\n  return new MlNat(l);\n}\n\n//Provides: create_nat\n//Requires: MlNat\nfunction create_nat(size) {\n  var arr = new MlNat(size);\n  for(var i = 0; i < size; i++) {\n    arr.data[i] = -1;\n  }\n  return arr;\n}\n\n//Provides: set_to_zero_nat\nfunction set_to_zero_nat(nat, ofs, len) {\n  for(var i = 0; i < len; i++) {\n    nat.data[ofs+i] = 0;\n  }\n  return 0;\n}\n\n//Provides: blit_nat\nfunction blit_nat(nat1, ofs1, nat2, ofs2, len) {\n  for(var i = 0; i < len; i++) {\n    nat1.data[ofs1+i] = nat2.data[ofs2+i];\n  }\n  return 0;\n}\n\n//Provides: set_digit_nat\nfunction set_digit_nat(nat, ofs, digit) {\n  nat.data[ofs] = digit;\n  return 0;\n}\n\n//Provides: nth_digit_nat\nfunction nth_digit_nat(nat, ofs) {\n  return nat.data[ofs];\n}\n\n//Provides: set_digit_nat_native\nfunction set_digit_nat_native(nat, ofs, digit) {\n  nat.data[ofs] = digit;\n  return 0;\n}\n\n//Provides: nth_digit_nat_native\nfunction nth_digit_nat_native(nat, ofs) {\n  return nat.data[ofs];\n}\n\n//Provides: num_digits_nat\nfunction num_digits_nat(nat, ofs, len) {\n  for(var i = len - 1; i >= 0; i--) {\n    if(nat.data[ofs+i] != 0) return i+1;\n  }\n  return 1; // 0 counts as 1 digit\n}\n\n//Provides: num_leading_zero_bits_in_digit\nfunction num_leading_zero_bits_in_digit(nat, ofs) {\n  var a = nat.data[ofs];\n  var b = 0;\n  if(a & 0xFFFF0000) { b +=16; a >>>=16; }\n  if(a & 0xFF00)     { b += 8; a >>>= 8; }\n  if(a & 0xF0)       { b += 4; a >>>= 4; }\n  if(a & 12)         { b += 2; a >>>= 2; }\n  if(a & 2)          { b += 1; a >>>= 1; }\n  if(a & 1)          { b += 1; }\n  return 32 - b;\n}\n\n//Provides: is_digit_int\nfunction is_digit_int(nat, ofs) {\n  if (nat.data[ofs] >= 0) return 1\n  return 0;\n}\n\n//Provides: is_digit_zero\nfunction is_digit_zero(nat, ofs) {\n  if(nat.data[ofs] == 0) return 1;\n  return 0;\n}\n\n//Provides: is_digit_odd\nfunction is_digit_odd(nat, ofs) {\n  if(nat.data[ofs] & 1) return 1;\n  return 0;\n}\n\n//Provides: incr_nat\nfunction incr_nat(nat, ofs, len, carry_in) {\n  var carry = carry_in;\n  for(var i = 0; i < len; i++) {\n    var x = (nat.data[ofs+i] >>> 0) + carry;\n    nat.data[ofs+i] = (x | 0);\n    if(x == (x >>> 0)) {\n      carry = 0;\n      break;\n    } else {\n      carry = 1;\n    }\n  }\n  return carry;\n}\n\n// len1 >= len2\n//Provides: add_nat\n//Requires: incr_nat\nfunction add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in) {\n  var carry = carry_in;\n  for(var i = 0; i < len2; i++) {\n    var x = (nat1.data[ofs1+i] >>> 0) + (nat2.data[ofs2+i] >>> 0) + carry;\n    nat1.data[ofs1+i] = x\n    if(x == (x >>> 0)) {\n      carry = 0;\n    } else {\n      carry = 1;\n    }\n  }\n  return incr_nat(nat1, ofs1+len2, len1-len2, carry);\n}\n\n//Provides: complement_nat\nfunction complement_nat(nat, ofs, len) {\n  for(var i = 0; i < len; i++) {\n    nat.data[ofs+i] = (-1 >>> 0) - (nat.data[ofs+i] >>> 0);\n  }\n}\n\n// ocaml flips carry_in\n//Provides: decr_nat\nfunction decr_nat(nat, ofs, len, carry_in) {\n  var borrow = (carry_in == 1) ? 0 : 1;\n  for(var i = 0; i < len; i++) {\n    var x = (nat.data[ofs+i] >>>0) - borrow;\n    nat.data[ofs+i] = x;\n    if (x >= 0) {\n      borrow = 0;\n      break;\n    } else {\n      borrow = 1;\n    }\n  }\n  return (borrow == 1) ? 0 : 1;\n}\n\n// ocaml flips carry_in\n// len1 >= len2\n//Provides: sub_nat\n//Requires: decr_nat\nfunction sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in) {\n  var borrow = (carry_in == 1) ? 0 : 1;\n  for(var i = 0; i < len2; i++) {\n    var x = (nat1.data[ofs1+i] >>> 0) - (nat2.data[ofs2+i] >>> 0) - borrow;\n    nat1.data[ofs1+i] = x;\n    if (x >= 0) {\n      borrow = 0;\n    } else {\n      borrow = 1;\n    }\n  }\n  return decr_nat(nat1, ofs1+len2, len1-len2, (borrow==1)?0:1);\n}\n\n// nat1 += nat2 * nat3[ofs3]\n// len1 >= len2\n//Provides: mult_digit_nat\n//Requires: add_nat, nat_of_array\nfunction mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3) {\n  var carry = 0;\n  var a = (nat3.data[ofs3] >>> 0);\n  for(var i = 0; i < len2; i++) {\n    var x1 = (nat1.data[ofs1+i] >>> 0) + (nat2.data[ofs2+i] >>> 0) * (a & 0x0000FFFF) + carry;\n    var x2 = (nat2.data[ofs2+i] >>> 0) * (a >>> 16);\n    carry = Math.floor(x2/65536);\n    var x3 = x1 + (x2 % 65536) * 65536;\n    nat1.data[ofs1+i] = x3;\n    carry += Math.floor(x3/4294967296);\n  }\n\n  if(len2 < len1 && carry) {\n    return add_nat(nat1, ofs1+len2, len1-len2, nat_of_array([carry]), 0, 1, 0);\n  } else {\n    return carry;\n  }\n}\n\n// nat1 += nat2 * nat3\n// len1 >= len2 + len3.\n//Provides: mult_nat\n//Requires: mult_digit_nat\nfunction mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3) {\n  var carry = 0;\n  for(var i = 0; i < len3; i++) {\n    carry += mult_digit_nat(nat1, ofs1+i, len1-i, nat2, ofs2, len2, nat3, ofs3+i);\n  }\n  return carry;\n}\n\n// nat1 = 2 * nat1 + nat2 * nat2\n// len1 >= 2 * len2\n//Provides: square_nat\n//Requires: mult_nat, add_nat\nfunction square_nat(nat1, ofs1, len1, nat2, ofs2, len2) {\n  var carry = 0;\n  carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);\n  carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);\n  return carry;\n}\n\n\n// 0 <= shift < 32\n//Provides: shift_left_nat\nfunction shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits) {\n  if(nbits == 0) {\n    nat2.data[ofs2] = 0;\n    return 0;\n  }\n  var wrap = 0;\n  for(var i = 0; i < len1; i++) {\n    var a = (nat1.data[ofs1+i] >>> 0);\n    nat1.data[ofs1+i] = (a << nbits) | wrap;\n    wrap = a >>> (32 - nbits);\n  }\n  nat2.data[ofs2] = wrap;\n  return 0;\n}\n\n// Assuming c > a, returns [quotient, remainder] of (a<<32 + b)/c\n//Provides: div_helper\nfunction div_helper(a, b, c) {\n  var x = a * 65536 + (b>>>16);\n  var y = Math.floor(x/c) * 65536;\n  var z = (x % c) * 65536;\n  var w = z + (b & 0x0000FFFF);\n  return [y + Math.floor(w/c), w % c];\n}\n\n// nat1[ofs1+len] < nat2[ofs2]\n//Provides: div_digit_nat\n//Requires: div_helper\nfunction div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2) {\n  var rem = (nat1.data[ofs1+len-1] >>>0);\n  // natq[ofsq+len-1] is guaranteed to be zero (due to the MSD requirement),\n  // and should not be written to.\n  for(var i = len-2; i >= 0; i--) {\n    var x = div_helper(rem, (nat1.data[ofs1+i] >>> 0), (nat2.data[ofs2] >>> 0));\n    natq.data[ofsq+i] = x[0];\n    rem = x[1];\n  }\n  natr.data[ofsr] = rem;\n  return 0;\n}\n\n// nat1[nat2:] := nat1 / nat2\n// nat1[:nat2] := nat1 % nat2\n// len1 > len2, nat2[ofs2+len2-1] > nat1[ofs1+len1-1]\n//Provides: div_nat\n//Requires: div_digit_nat, div_helper, num_leading_zero_bits_in_digit, shift_left_nat, shift_right_nat, create_nat, set_to_zero_nat, mult_digit_nat, sub_nat, compare_nat, nat_of_array\nfunction div_nat(nat1, ofs1, len1, nat2, ofs2, len2) {\n  if(len2 == 1) {\n    div_digit_nat(nat1, ofs1+1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);\n    return 0;\n  }\n\n  var s = num_leading_zero_bits_in_digit(nat2, ofs2+len2-1);\n  shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);\n  shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);\n\n  var d = (nat2.data[ofs2+len2-1] >>> 0) + 1;\n  var a = create_nat(len2+1);\n  for (var i = len1 - 1; i >= len2; i--) {\n    // Decent lower bound on quo\n    var quo = d == 4294967296 ? (nat1.data[ofs1+i] >>> 0) : div_helper((nat1.data[ofs1+i] >>> 0), (nat1.data[ofs1+i-1] >>>0), d)[0];\n    set_to_zero_nat(a, 0, len2+1);\n    mult_digit_nat(a, 0, len2+1, nat2, ofs2, len2, nat_of_array([quo]), 0);\n    sub_nat(nat1, ofs1+i-len2, len2+1, a, 0, len2+1, 1);\n\n    while (nat1.data[ofs1+i] != 0 || compare_nat(nat1, ofs1+i-len2, len2, nat2, ofs2, len2) >= 0) {\n      quo = quo + 1;\n      sub_nat(nat1, ofs1+i-len2, len2+1, nat2, ofs2, len2, 1);\n    }\n\n    nat1.data[ofs1+i] = quo;\n  }\n\n  shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s); // shift remainder\n  shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s); // restore\n  return 0;\n}\n\n\n// 0 <= shift < 32\n//Provides: shift_right_nat\nfunction shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits) {\n  if(nbits == 0) {\n    nat2.data[ofs2] = 0;\n    return 0;\n  }\n  var wrap = 0;\n  for(var i = len1-1; i >= 0; i--) {\n    var a = nat1.data[ofs1+i] >>> 0;\n    nat1.data[ofs1+i] = (a >>> nbits) | wrap;\n    wrap = a << (32 - nbits);\n  }\n  nat2.data[ofs2] = wrap;\n  return 0;\n}\n\n//Provides: compare_digits_nat\nfunction compare_digits_nat(nat1, ofs1, nat2, ofs2) {\n  if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;\n  if(nat1.data[ofs1] < nat2.data[ofs2]) return -1;\n  return 0;\n}\n\n//Provides: compare_nat\n//Requires: num_digits_nat\nfunction compare_nat(nat1, ofs1, len1, nat2, ofs2, len2) {\n  var a = num_digits_nat(nat1, ofs1, len1);\n  var b = num_digits_nat(nat2, ofs2, len2);\n  if(a > b) return 1;\n  if(a < b) return -1;\n  for(var i = len1 - 1; i >= 0; i--) {\n    if ((nat1.data[ofs1+i] >>> 0) > (nat2.data[ofs2+i] >>> 0)) return 1;\n    if ((nat1.data[ofs1+i] >>> 0) < (nat2.data[ofs2+i] >>> 0)) return -1;\n  }\n  return 0;\n}\n\n//Provides: compare_nat_real\n//Requires: compare_nat\nfunction compare_nat_real(nat1,nat2){\n  return compare_nat(nat1,0,nat1.data.length,nat2,0,nat2.data.length);\n}\n\n//Provides: land_digit_nat\nfunction land_digit_nat(nat1, ofs1, nat2, ofs2) {\n  nat1.data[ofs1] &= nat2.data[ofs2];\n  return 0;\n}\n\n//Provides: lor_digit_nat\nfunction lor_digit_nat(nat1, ofs1, nat2, ofs2) {\n  nat1.data[ofs1] |= nat2.data[ofs2];\n  return 0;\n}\n\n//Provides: lxor_digit_nat\nfunction lxor_digit_nat(nat1, ofs1, nat2, ofs2) {\n  nat1.data[ofs1] ^= nat2.data[ofs2];\n  return 0;\n}\n\n\n//Provides: serialize_nat\nfunction serialize_nat(writer, nat, sz){\n  var len = nat.data.length;\n  writer.write(32, len);\n  for(var i = 0; i < len; i++){\n    writer.write(32, nat.data[i]);\n  }\n  sz[0] = len * 4;\n  sz[1] = len * 8;\n}\n\n//Provides: deserialize_nat\n//Requires: MlNat\nfunction deserialize_nat(reader, sz){\n  var len = reader.read32s();\n  var nat = new MlNat(len);\n  for(var i = 0; i < len; i++){\n    nat.data[i] = reader.read32s();\n  }\n  sz[0] = len * 4;\n  return nat;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: fs_node_supported\nfunction fs_node_supported () {\n  return (\n    typeof globalThis.process !== 'undefined'\n      && typeof globalThis.process.versions !== 'undefined'\n      && typeof globalThis.process.versions.node !== 'undefined')\n}\n//Provides: fs_node_supported\n//If: browser\nfunction fs_node_supported () {\n  return false\n}\n\n\n//Provides: MlNodeDevice\n//Requires: MlNodeFd, caml_raise_sys_error, caml_raise_with_args\n//Requires: make_unix_err_args, caml_named_value, caml_string_of_jsstring\nfunction MlNodeDevice(root) {\n  this.fs = require('fs');\n  this.root = root;\n}\nMlNodeDevice.prototype.nm = function(name) {\n  return (this.root + name);\n}\nMlNodeDevice.prototype.exists = function(name) {\n  try {\n    return this.fs.existsSync(this.nm(name))?1:0;\n  } catch (err) {\n    return 0;\n  }\n}\nMlNodeDevice.prototype.isFile = function(name) {\n  try {\n    return this.fs.statSync(this.nm(name)).isFile()?1:0;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.mkdir = function(name, mode, raise_unix) {\n  try {\n    this.fs.mkdirSync(this.nm(name),{mode:mode});\n    return 0\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.rmdir = function(name, raise_unix) {\n  try {\n    this.fs.rmdirSync(this.nm(name));\n    return 0\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.readdir = function(name, raise_unix) {\n  try {\n    return this.fs.readdirSync(this.nm(name));\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.is_dir = function(name) {\n  try {\n    return this.fs.statSync(this.nm(name)).isDirectory()?1:0;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.unlink = function(name, raise_unix) {\n  try {\n    var b = this.fs.existsSync(this.nm(name))?1:0;\n    this.fs.unlinkSync(this.nm(name));\n    return b;\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.open = function(name, f, raise_unix) {\n  var consts = require('constants');\n  var res = 0;\n  for(var key in f){\n    switch(key){\n    case \"rdonly\"  : res |= consts.O_RDONLY; break;\n    case \"wronly\"  : res |= consts.O_WRONLY; break;\n    case \"append\"  :\n      res |= consts.O_WRONLY | consts.O_APPEND;\n      break;\n    case \"create\"   : res |= consts.O_CREAT;    break;\n    case \"truncate\" : res |= consts.O_TRUNC;    break;\n    case \"excl\"     : res |= consts.O_EXCL;     break;\n    case \"binary\"   : res |= consts.O_BINARY;   break;\n    case \"text\"     : res |= consts.O_TEXT;     break;\n    case \"nonblock\" : res |= consts.O_NONBLOCK; break;\n    }\n  }\n  try {\n    var fd = this.fs.openSync(this.nm(name), res);\n    var isCharacterDevice = this.fs.lstatSync(this.nm(name)).isCharacterDevice();\n    f.isCharacterDevice = isCharacterDevice;\n    return new MlNodeFd(fd, f);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\n\nMlNodeDevice.prototype.rename = function(o, n, raise_unix) {\n  try {\n    this.fs.renameSync(this.nm(o), this.nm(n));\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.stat = function(name, raise_unix) {\n  try {\n    var js_stats = this.fs.statSync(this.nm(name));\n    return this.stats_from_js(js_stats);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.lstat = function(name, raise_unix) {\n  try {\n    var js_stats = this.fs.lstatSync(this.nm(name));\n    return this.stats_from_js(js_stats);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.symlink = function(to_dir, target, path, raise_unix) {\n  try {\n    this.fs.symlinkSync(this.nm(target), this.nm(path), to_dir ? 'dir' : 'file');\n    return 0;\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.readlink = function(name, raise_unix) {\n  try {\n    var link = this.fs.readlinkSync(this.nm(name), 'utf8');\n    return caml_string_of_jsstring(link);\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.opendir = function(name, raise_unix) {\n  try {\n    return this.fs.opendirSync(this.nm(name));\n  } catch (err) {\n    this.raise_nodejs_error(err, raise_unix);\n  }\n}\nMlNodeDevice.prototype.raise_nodejs_error = function(err, raise_unix) {\n  var unix_error = caml_named_value(\"Unix.Unix_error\");\n  if (raise_unix && unix_error) {\n    var args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);\n    caml_raise_with_args(unix_error, args);\n  } else {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeDevice.prototype.stats_from_js = function(js_stats) {\n  /* ===Unix.file_kind===\n   * type file_kind =\n   *     S_REG                       (** Regular file *)\n   *   | S_DIR                       (** Directory *)\n   *   | S_CHR                       (** Character device *)\n   *   | S_BLK                       (** Block device *)\n   *   | S_LNK                       (** Symbolic link *)\n   *   | S_FIFO                      (** Named pipe *)\n   *   | S_SOCK                      (** Socket *)\n   */\n  var file_kind;\n  if (js_stats.isFile()) {\n    file_kind = 0;\n  } else if (js_stats.isDirectory()) {\n    file_kind = 1;\n  } else if (js_stats.isCharacterDevice()) {\n    file_kind = 2;\n  } else if (js_stats.isBlockDevice()) {\n    file_kind = 3;\n  } else if (js_stats.isSymbolicLink()) {\n    file_kind = 4;\n  } else if (js_stats.isFIFO()) {\n    file_kind = 5;\n  } else if (js_stats.isSocket()) {\n    file_kind = 6;\n  }\n  /* ===Unix.stats===\n   * type stats =\n   *  { st_dev : int;               (** Device number *)\n   *    st_ino : int;               (** Inode number *)\n   *    st_kind : file_kind;        (** Kind of the file *)\n   *    st_perm : file_perm;        (** Access rights *)\n   *    st_nlink : int;             (** Number of links *)\n   *    st_uid : int;               (** User id of the owner *)\n   *    st_gid : int;               (** Group ID of the file's group *)\n   *    st_rdev : int;              (** Device ID (if special file) *)\n   *    st_size : int;              (** Size in bytes *)\n   *    st_atime : float;           (** Last access time *)\n   *    st_mtime : float;           (** Last modification time *)\n   *    st_ctime : float;           (** Last status change time *)\n   *  }\n   */\n  return BLOCK(\n    0,\n    js_stats.dev,\n    js_stats.ino,\n    file_kind,\n    js_stats.mode,\n    js_stats.nlink,\n    js_stats.uid,\n    js_stats.gid,\n    js_stats.rdev,\n    js_stats.size,\n    js_stats.atimeMs,\n    js_stats.mtimeMs,\n    js_stats.ctimeMs\n  );\n}\n\nMlNodeDevice.prototype.constructor = MlNodeDevice\n\n//Provides: MlNodeDevice\n//If: browser\nfunction MlNodeDevice() {\n}\n\n//Provides: MlNodeFd\n//Requires: MlFile, caml_uint8_array_of_string, caml_uint8_array_of_bytes, caml_bytes_set, caml_raise_sys_error\nfunction MlNodeFd(fd, flags){\n  this.fs = require('fs');\n  this.fd = fd;\n  this.flags = flags;\n}\nMlNodeFd.prototype = new MlFile ();\nMlNodeFd.prototype.constructor = MlNodeFd;\n\nMlNodeFd.prototype.truncate = function(len){\n  try {\n    this.fs.ftruncateSync(this.fd,len|0);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFd.prototype.length = function () {\n  try {\n    return this.fs.fstatSync(this.fd).size;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFd.prototype.write = function(offset,buf,buf_offset,len){\n  try {\n    if(this.flags.isCharacterDevice)\n      this.fs.writeSync(this.fd, buf, buf_offset, len);\n    else\n      this.fs.writeSync(this.fd, buf, buf_offset, len, offset);\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n  return 0;\n}\nMlNodeFd.prototype.read = function(offset,a,buf_offset,len){\n  try {\n    if(this.flags.isCharacterDevice)\n      var read = this.fs.readSync(this.fd, a, buf_offset, len);\n    else\n      var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);\n    return read;\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\nMlNodeFd.prototype.close = function(){\n  try {\n    this.fs.closeSync(this.fd);\n    return 0\n  } catch (err) {\n    caml_raise_sys_error(err.toString());\n  }\n}\n\n\n//Provides: MlNodeFd\n//If: browser\nfunction MlNodeFd(){\n}\n\n\n//Provides: caml_sys_open_for_node\n//Requires: MlNodeFd\nfunction caml_sys_open_for_node(fd, flags){\n  if(flags.name) {\n    try {\n      var fs = require(\"fs\");\n      var fd2 = fs.openSync(flags.name, \"rs\");\n      return new MlNodeFd(fd2, flags);\n    } catch(e) {  }\n  }\n  return new MlNodeFd(fd, flags);\n}\n\n//Provides: caml_sys_open_for_node\n//If: browser\nfunction caml_sys_open_for_node(fd, flags){\n  return null;\n}\n","///////// BIGSTRING\n\n//Provides: caml_hash_mix_bigstring\n//Requires: caml_hash_mix_bytes_arr\nfunction caml_hash_mix_bigstring(h, bs) {\n  return caml_hash_mix_bytes_arr(h,bs.data);\n}\n\n//Provides: bigstring_to_array_buffer mutable\nfunction bigstring_to_array_buffer(bs) {\n  return bs.data.buffer\n}\n\n//Provides: bigstring_to_typed_array mutable\nfunction bigstring_to_typed_array(bs) {\n  return bs.data\n}\n\n//Provides: bigstring_of_array_buffer mutable\n//Requires: caml_ba_create_unsafe\nfunction bigstring_of_array_buffer(ab) {\n  var ta = new Uint8Array(ab);\n  return caml_ba_create_unsafe(12, 0, [ta.length], ta);\n}\n\n//Provides: bigstring_of_typed_array mutable\n//Requires: caml_ba_create_unsafe\nfunction bigstring_of_typed_array(ba) {\n  var ta = new Uint8Array(ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);\n  return caml_ba_create_unsafe(12, 0, [ta.length], ta);\n}\n\n//Provides: caml_bigstring_memcmp\n//Requires: caml_ba_get_1\nfunction caml_bigstring_memcmp(s1, pos1, s2, pos2, len){\n  for (var i = 0; i < len; i++) {\n    var a = caml_ba_get_1(s1,pos1 + i);\n    var b = caml_ba_get_1(s2,pos2 + i);\n    if (a < b) return -1;\n    if (a > b) return 1;\n  }\n  return 0;\n}\n\n//Provides: caml_bigstring_blit_ba_to_ba\n//Requires: caml_invalid_argument, caml_array_bound_error\nfunction caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){\n  if(12 != ba1.kind)\n    caml_invalid_argument(\"caml_bigstring_blit_ba_to_ba: kind mismatch\");\n  if(12 != ba2.kind)\n    caml_invalid_argument(\"caml_bigstring_blit_ba_to_ba: kind mismatch\");\n  if(len == 0) return 0;\n  var ofs1 = ba1.offset(pos1);\n  var ofs2 = ba2.offset(pos2);\n  if(ofs1 + len > ba1.data.length){\n    caml_array_bound_error();\n  }\n  if(ofs2 + len > ba2.data.length){\n    caml_array_bound_error();\n  }\n  var slice = ba1.data.subarray(ofs1,ofs1+len);\n  ba2.data.set(slice,pos2);\n  return 0\n}\n\n//Provides: caml_bigstring_blit_string_to_ba\n//Requires: caml_invalid_argument, caml_array_bound_error, caml_uint8_array_of_string\n//Requires: caml_ml_string_length\nfunction caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){\n  if(12 != ba2.kind)\n    caml_invalid_argument(\"caml_bigstring_blit_string_to_ba: kind mismatch\");\n  if(len == 0) return 0;\n  var ofs2 = ba2.offset(pos2);\n  if(pos1 + len > caml_ml_string_length(str1)) {\n    caml_array_bound_error();\n  }\n  if(ofs2 + len > ba2.data.length) {\n    caml_array_bound_error();\n  }\n  var slice = caml_uint8_array_of_string(str1).slice(pos1,pos1 + len);\n  ba2.data.set(slice,ofs2);\n  return 0\n}\n\n//Provides: caml_bigstring_blit_bytes_to_ba\n//Requires: caml_invalid_argument, caml_array_bound_error, caml_uint8_array_of_bytes\n//Requires: caml_ml_bytes_length\nfunction caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){\n  if(12 != ba2.kind)\n    caml_invalid_argument(\"caml_bigstring_blit_string_to_ba: kind mismatch\");\n  if(len == 0) return 0;\n  var ofs2 = ba2.offset(pos2);\n  if(pos1 + len > caml_ml_bytes_length(str1)) {\n    caml_array_bound_error();\n  }\n  if(ofs2 + len > ba2.data.length) {\n    caml_array_bound_error();\n  }\n  var slice = caml_uint8_array_of_bytes(str1).slice(pos1,pos1 + len);\n  ba2.data.set(slice,ofs2);\n  return 0\n}\n\n//Provides: caml_bigstring_blit_ba_to_bytes\n//Requires: caml_invalid_argument, caml_array_bound_error\n//Requires: caml_blit_bytes, caml_bytes_of_array\n//Requires: caml_ml_bytes_length\nfunction caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){\n  if(12 != ba1.kind)\n    caml_invalid_argument(\"caml_bigstring_blit_string_to_ba: kind mismatch\");\n  if(len == 0) return 0;\n  var ofs1 = ba1.offset(pos1);\n  if(ofs1 + len > ba1.data.length){\n    caml_array_bound_error();\n  }\n  if(pos2 + len > caml_ml_bytes_length(bytes2)){\n    caml_array_bound_error();\n  }\n  var slice = ba1.data.slice(ofs1, ofs1+len);\n  caml_blit_bytes(caml_bytes_of_array(slice), 0, bytes2, pos2, len);\n  return 0\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_md5_chan\n//Requires: caml_string_of_array\n//Requires: caml_raise_end_of_file, caml_ml_input_block\n//Requires: caml_MD5Init, caml_MD5Update, caml_MD5Final\nfunction caml_md5_chan(chanid,toread){\n  var ctx = caml_MD5Init();\n  var buffer = new Uint8Array(4096);\n  if(toread < 0){\n    while(true){\n      var read = caml_ml_input_block(chanid,buffer,0,buffer.length);\n      if(read == 0) break;\n      caml_MD5Update(ctx,buffer.subarray(0, read), read);\n    }\n  } else {\n    while(toread > 0) {\n      var read = caml_ml_input_block(chanid,buffer,0, (toread > buffer.length ? buffer.length : toread));\n      if(read == 0) caml_raise_end_of_file();\n      caml_MD5Update(ctx,buffer.subarray(0, read), read);\n      toread -= read\n    }\n  }\n  return caml_string_of_array(caml_MD5Final(ctx));\n}\n\n//Provides: caml_md5_string\n//Requires: caml_bytes_of_string, caml_md5_bytes\nfunction caml_md5_string(s, ofs, len) {\n  return caml_md5_bytes(caml_bytes_of_string(s),ofs,len);\n}\n\n//Provides: caml_MD5Transform\nvar caml_MD5Transform = (function () {\n  function add (x, y) { return (x + y) | 0; }\n  function xx(q,a,b,x,s,t) {\n    a = add(add(a, q), add(x, t));\n    return add((a << s) | (a >>> (32 - s)), b);\n  }\n  function ff(a,b,c,d,x,s,t) {\n    return xx((b & c) | ((~b) & d), a, b, x, s, t);\n  }\n  function gg(a,b,c,d,x,s,t) {\n    return xx((b & d) | (c & (~d)), a, b, x, s, t);\n  }\n  function hh(a,b,c,d,x,s,t) { return xx(b ^ c ^ d, a, b, x, s, t); }\n  function ii(a,b,c,d,x,s,t) { return xx(c ^ (b | (~d)), a, b, x, s, t); }\n\n  return function (w, buffer) {\n    var a = w[0], b = w[1], c = w[2], d = w[3];\n\n    a = ff(a, b, c, d, buffer[ 0], 7, 0xD76AA478);\n    d = ff(d, a, b, c, buffer[ 1], 12, 0xE8C7B756);\n    c = ff(c, d, a, b, buffer[ 2], 17, 0x242070DB);\n    b = ff(b, c, d, a, buffer[ 3], 22, 0xC1BDCEEE);\n    a = ff(a, b, c, d, buffer[ 4], 7, 0xF57C0FAF);\n    d = ff(d, a, b, c, buffer[ 5], 12, 0x4787C62A);\n    c = ff(c, d, a, b, buffer[ 6], 17, 0xA8304613);\n    b = ff(b, c, d, a, buffer[ 7], 22, 0xFD469501);\n    a = ff(a, b, c, d, buffer[ 8], 7, 0x698098D8);\n    d = ff(d, a, b, c, buffer[ 9], 12, 0x8B44F7AF);\n    c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);\n    b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);\n    a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);\n    d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);\n    c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);\n    b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);\n\n    a = gg(a, b, c, d, buffer[ 1], 5, 0xF61E2562);\n    d = gg(d, a, b, c, buffer[ 6], 9, 0xC040B340);\n    c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);\n    b = gg(b, c, d, a, buffer[ 0], 20, 0xE9B6C7AA);\n    a = gg(a, b, c, d, buffer[ 5], 5, 0xD62F105D);\n    d = gg(d, a, b, c, buffer[10], 9, 0x02441453);\n    c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);\n    b = gg(b, c, d, a, buffer[ 4], 20, 0xE7D3FBC8);\n    a = gg(a, b, c, d, buffer[ 9], 5, 0x21E1CDE6);\n    d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);\n    c = gg(c, d, a, b, buffer[ 3], 14, 0xF4D50D87);\n    b = gg(b, c, d, a, buffer[ 8], 20, 0x455A14ED);\n    a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);\n    d = gg(d, a, b, c, buffer[ 2], 9, 0xFCEFA3F8);\n    c = gg(c, d, a, b, buffer[ 7], 14, 0x676F02D9);\n    b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);\n\n    a = hh(a, b, c, d, buffer[ 5], 4, 0xFFFA3942);\n    d = hh(d, a, b, c, buffer[ 8], 11, 0x8771F681);\n    c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);\n    b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);\n    a = hh(a, b, c, d, buffer[ 1], 4, 0xA4BEEA44);\n    d = hh(d, a, b, c, buffer[ 4], 11, 0x4BDECFA9);\n    c = hh(c, d, a, b, buffer[ 7], 16, 0xF6BB4B60);\n    b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);\n    a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);\n    d = hh(d, a, b, c, buffer[ 0], 11, 0xEAA127FA);\n    c = hh(c, d, a, b, buffer[ 3], 16, 0xD4EF3085);\n    b = hh(b, c, d, a, buffer[ 6], 23, 0x04881D05);\n    a = hh(a, b, c, d, buffer[ 9], 4, 0xD9D4D039);\n    d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);\n    c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);\n    b = hh(b, c, d, a, buffer[ 2], 23, 0xC4AC5665);\n\n    a = ii(a, b, c, d, buffer[ 0], 6, 0xF4292244);\n    d = ii(d, a, b, c, buffer[ 7], 10, 0x432AFF97);\n    c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);\n    b = ii(b, c, d, a, buffer[ 5], 21, 0xFC93A039);\n    a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);\n    d = ii(d, a, b, c, buffer[ 3], 10, 0x8F0CCC92);\n    c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);\n    b = ii(b, c, d, a, buffer[ 1], 21, 0x85845DD1);\n    a = ii(a, b, c, d, buffer[ 8], 6, 0x6FA87E4F);\n    d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);\n    c = ii(c, d, a, b, buffer[ 6], 15, 0xA3014314);\n    b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);\n    a = ii(a, b, c, d, buffer[ 4], 6, 0xF7537E82);\n    d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);\n    c = ii(c, d, a, b, buffer[ 2], 15, 0x2AD7D2BB);\n    b = ii(b, c, d, a, buffer[ 9], 21, 0xEB86D391);\n\n    w[0] = add(a, w[0]);\n    w[1] = add(b, w[1]);\n    w[2] = add(c, w[2]);\n    w[3] = add(d, w[3]);\n  }})()\n\n//Provides: caml_MD5Init\nfunction caml_MD5Init() {\n  var buffer = new ArrayBuffer(64);\n  var b32 = new Uint32Array(buffer);\n  var b8 = new Uint8Array(buffer);\n  return {len:0,\n          w:new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),\n          b32:b32,\n          b8:b8}\n}\n\n//Provides: caml_MD5Update\n//Requires: caml_MD5Transform\nfunction caml_MD5Update(ctx, input, input_len){\n  var in_buf = ctx.len & 0x3f;\n  var input_pos = 0;\n  ctx.len += input_len;\n  if(in_buf){\n    var missing = 64 - in_buf;\n    if(input_len < missing) {\n      ctx.b8.set(input.subarray(0,input_len),in_buf);\n      return\n    }\n    ctx.b8.set(input.subarray(0,missing),in_buf);\n    caml_MD5Transform(ctx.w, ctx.b32);\n    input_len -= missing;\n    input_pos += missing;\n  }\n  while(input_len >= 64){\n    ctx.b8.set(input.subarray(input_pos,input_pos + 64), 0);\n    caml_MD5Transform(ctx.w, ctx.b32);\n    input_len -= 64;\n    input_pos += 64;\n  }\n  if(input_len)\n    ctx.b8.set(input.subarray(input_pos,input_pos + input_len), 0);\n}\n\n//Provides: caml_MD5Final\n//Requires: caml_MD5Transform\nfunction caml_MD5Final(ctx){\n  var in_buf = ctx.len & 0x3f;\n  ctx.b8[in_buf] = 0x80;\n  in_buf ++;\n  if(in_buf > 56) {\n    for(var j = in_buf; j < 64; j++){\n      ctx.b8[j] = 0;\n    }\n    caml_MD5Transform(ctx.w, ctx.b32);\n    for(var j = 0; j < 56; j++){\n      ctx.b8[j] = 0;\n    }\n  } else {\n    for(var j = in_buf; j < 56; j++){\n      ctx.b8[j] = 0;\n    }\n  }\n  ctx.b32[14] = ctx.len << 3;\n  ctx.b32[15] = (ctx.len >> 29) & 0x1FFFFFFF;\n  caml_MD5Transform(ctx.w, ctx.b32);\n  var t = new Uint8Array(16);\n  for (var i = 0; i < 4; i++)\n    for (var j = 0; j < 4; j++)\n      t[i * 4 + j] = (ctx.w[i] >> (8 * j)) & 0xFF;\n  return t;\n}\n\n\n//Provides: caml_md5_bytes\n//Requires: caml_uint8_array_of_bytes, caml_string_of_array\n//Requires: caml_MD5Init, caml_MD5Update, caml_MD5Final\nfunction caml_md5_bytes(s, ofs, len) {\n  var ctx = caml_MD5Init();\n  var a = caml_uint8_array_of_bytes(s);\n  caml_MD5Update(ctx,a.subarray(ofs, ofs + len), len);\n  return caml_string_of_array(caml_MD5Final(ctx));\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n  if(log2_ok) return Math.floor(Math.log2(x))\n  var i = 0;\n  if (x == 0) return -Infinity;\n  if(x>=1) {while (x>=2) {x/=2; i++} }\n  else {while (x < 1) {x*=2; i--} };\n  return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2, caml_int64_create_lo_mi_hi\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x))\n      return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);\n    if (x > 0)\n      return caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)\n    else\n      return caml_int64_create_lo_mi_hi(0, 0, 0xfff0)\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return caml_int64_create_lo_mi_hi(r1, r2, r3);\n}\n\n//Provides: caml_int32_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int32_bits_of_float (x) {\n  var float32a = new Float32Array(1);\n  float32a[0] = x;\n  var int32a = new Int32Array(float32a.buffer);\n  return int32a[0] | 0;\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_string_of_jsstring, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_string_of_jsstring(\"nan\");\n    return caml_string_of_jsstring ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n    var cst = Math.pow(2,prec * 4);\n    x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n    var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_string_of_jsstring (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var lo = x.lo;\n  var mi = x.mi;\n  var hi = x.hi;\n  var exp = (hi & 0x7fff) >> 4;\n  if (exp == 2047) {\n    if ((lo|mi|(hi&0xf)) == 0)\n      return (hi & 0x8000)?(-Infinity):Infinity;\n    else\n      return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (lo*k+mi)*k+(hi&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (hi & 0x8000) res = - res;\n  return res;\n}\n\n//Provides: caml_nextafter_float const\n//Requires: caml_int64_float_of_bits, caml_int64_bits_of_float, caml_int64_add, caml_int64_sub,caml_int64_of_int32\nfunction caml_nextafter_float (x,y) {\n  if(isNaN(x) || isNaN(y)) return NaN;\n  if(x==y) return y;\n  if(x==0){\n    if(y < 0)\n      return -Math.pow(2, -1074)\n    else\n      return Math.pow(2, -1074)\n  }\n  var bits = caml_int64_bits_of_float(x);\n  var one = caml_int64_of_int32(1);\n  if ((x<y) == (x>0))\n    bits = caml_int64_add(bits, one)\n  else\n    bits = caml_int64_sub(bits, one)\n  return caml_int64_float_of_bits(bits);\n}\n\n//Provides: caml_trunc_float\nfunction caml_trunc_float(x){\n  return Math.trunc(x);\n}\n\n//Provides: caml_int32_float_of_bits const\nfunction caml_int32_float_of_bits (x) {\n  var int32a = new Int32Array(1);\n  int32a[0] = x;\n  var float32a = new Float32Array(int32a.buffer);\n  return float32a[0];\n}\n\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = Math.max(-1023, jsoo_floor_log2(x) + 1);\n  x *= Math.pow(2,-exp);\n  while (x < 0.5) {\n    x *= 2;\n    exp--;\n  }\n  while (x >= 1) {\n    x *= 0.5;\n    exp++;\n  }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_signbit_float const\nfunction caml_signbit_float(x) {\n  if (x == 0) x = 1 / x;\n  return (x < 0)?1:0;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) { return Math.expm1(x); }\n//Provides: caml_exp2_float const\nfunction caml_exp2_float(x) { return Math.pow(2, x); }\n//Provides: caml_log1p_float const\nfunction caml_log1p_float(x) { return Math.log1p(x); }\n//Provides: caml_log2_float const\nfunction caml_log2_float(x) { return Math.log2(x); }\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) { return Math.hypot(x, y); }\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.log10(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return Math.cosh(x); }\n//Provides: caml_acosh_float const\nfunction caml_acosh_float (x) { return Math.acosh(x); }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return Math.sinh(x); }\n//Provides: caml_asinh_float const\nfunction caml_asinh_float (x) { return Math.asinh(x); }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) { return Math.tanh(x); }\n//Provides: caml_atanh_float const\nfunction caml_atanh_float (x) { return Math.atanh(x); }\n//Provides: caml_round_float const\nfunction caml_round_float (x) {\n  if (x >= 0) {\n    var y = Math.floor(x);\n    return (x - y >= 0.5)?(y + 1):y\n  } else {\n    var y = Math.ceil(x);\n    return (y - x >= 0.5)?(y - 1):y\n  }\n}\n//Provides: caml_cbrt_float const\nfunction caml_cbrt_float (x) { return Math.cbrt(x); }\n\n//Provides: caml_erf_float const\nfunction caml_erf_float(x) {\n  var a1 = 0.254829592;\n  var a2 = -0.284496736;\n  var a3 = 1.421413741;\n  var a4 = -1.453152027;\n  var a5 = 1.061405429;\n  var p = 0.3275911;\n\n  var sign = 1;\n  if (x < 0) {\n    sign = -1;\n  }\n  x = Math.abs(x);\n  var t = 1.0 / (1.0 + p * x);\n  var y = 1.0 - ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n  return sign * y;\n}\n\n//Provides: caml_erfc_float const\n//Requires: caml_erf_float\nfunction caml_erfc_float(x) {\n  return 1 - caml_erf_float(x);\n}\n\n\n//Provides: caml_fma_float const\nfunction caml_fma_float(x, y, z) {\n  var SPLIT = Math.pow(2, 27) + 1;\n  var MIN_VALUE = Math.pow(2, -1022);\n  var EPSILON = Math.pow(2, -52);\n  var C = 416;\n  var A = Math.pow(2, +C);\n  var B = Math.pow(2, -C);\n\n  function multiply (a, b) {\n    var at = SPLIT * a;\n    var ahi = at - (at - a);\n    var alo = a - ahi;\n    var bt = SPLIT * b;\n    var bhi = bt - (bt - b);\n    var blo = b - bhi;\n    var p = a * b;\n    var e = ((ahi * bhi - p) + ahi * blo + alo * bhi) + alo * blo;\n    return {\n      p: p,\n      e: e\n    };\n  };\n\n  function add (a, b) {\n    var s = a + b;\n    var v = s - a;\n    var e = (a - (s - v)) + (b - v);\n    return {\n      s: s,\n      e: e\n    };\n  };\n\n  function adjust (x, y) {\n    return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x ? x * (1 + (x < 0 ? -1 : +1) * (y < 0 ? -1 : +1) * EPSILON) : x;\n  };\n\n  if (x === 0 || x !== x || x === +1 / 0 || x === -1 / 0 ||\n      y === 0 || y !== y || y === +1 / 0 || y === -1 / 0) {\n    return x * y + z;\n  }\n  if (z === 0) {\n    return x * y;\n  }\n  if (z !== z || z === +1 / 0 || z === -1 / 0) {\n    return z;\n  }\n\n  var scale = 1;\n  while (Math.abs(x) > A) {\n    scale *= A;\n    x *= B;\n  }\n  while (Math.abs(y) > A) {\n    scale *= A;\n    y *= B;\n  }\n  if (scale === 1 / 0) {\n    return x * y * scale;\n  }\n  while (Math.abs(x) < B) {\n    scale *= B;\n    x *= A;\n  }\n  while (Math.abs(y) < B) {\n    scale *= B;\n    y *= A;\n  }\n  if (scale === 0) {\n    return z;\n  }\n\n  var xs = x;\n  var ys = y;\n  var zs = z / scale;\n\n  if (Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) {\n    return z;\n  }\n  if (Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4) {\n    zs = (z < 0 ? -1 : +1) * MIN_VALUE;\n  }\n\n  var xy = multiply(xs, ys);\n  var s = add(xy.p, zs);\n  var u = add(xy.e, s.e);\n  var i = add(s.s, u.s);\n\n  var f = i.s + adjust(i.e, u.e);\n  if (f === 0) {\n    return f;\n  }\n\n  var fs = f * scale;\n  if (Math.abs(fs) > MIN_VALUE) {\n    return fs;\n  }\n\n  // It is possible that there was extra rounding for a denormalized value.\n  return fs + adjust(f - fs / scale, i.e) * scale;\n}\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  function toFixed(x,dp) {\n    if (Math.abs(x) < 1.0) {\n      return x.toFixed(dp);\n    } else {\n      var e = parseInt(x.toString().split('+')[1]);\n      if (e > 20) {\n        e -= 20;\n        x /= Math.pow(10,e);\n        x += (new Array(e+1)).join('0');\n        if(dp > 0) {\n          x = x + '.' + (new Array(dp+1)).join('0');\n        }\n        return x;\n      }\n      else return x.toFixed(dp)\n    }\n  }\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = toFixed(x, prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_jsbytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_jsbytes_of_string(s)\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);\n  //          1        2             3           5\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[5]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_alloc_dummy_infix\n//Requires: caml_call_gen\nfunction caml_alloc_dummy_infix () {\n  return function f (x) { return caml_call_gen(f.fun, [x]) }\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n\n\n//Provides: caml_obj_tag\n//Requires: caml_is_ml_bytes, caml_is_ml_string\nfunction caml_obj_tag (x) {\n  if ((x instanceof Array) && x[0] == (x[0] >>> 0))\n    return x[0]\n  else if (caml_is_ml_bytes(x))\n    return 252\n  else if (caml_is_ml_string(x))\n    return 252\n  else if ((x instanceof Function) || typeof x == \"function\")\n    return 247\n  else if (x && x.caml_custom)\n    return 255\n  else\n    return 1000\n}\n\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n\n//Provides: caml_obj_with_tag\nfunction caml_obj_with_tag(tag,x) {\n  var l = x.length;\n  var a = new Array(l);\n  a[0] = tag;\n  for(var i = 1; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n\n//Provides: caml_obj_dup mutable (mutable)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_obj_make_forward\nfunction caml_obj_make_forward (b,v) {\n  b[0]=250;\n  b[1]=v;\n  return 0\n}\n\n//Provides: caml_obj_compare_and_swap\nfunction caml_obj_compare_and_swap(x,i,old,n){\n  if(x[i+1] == old) {\n    x[i+1] = n;\n    return 1;\n  }\n  return 0\n}\n\n//Provides: caml_obj_is_shared\nfunction caml_obj_is_shared(x){\n  return 1\n}\n\n//Provides: caml_lazy_make_forward const (mutable)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === undefined) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n    return meths[ofs - 1];\n  }\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id const\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n\n//Provides: caml_obj_raw_field\nfunction caml_obj_raw_field(o,i) { return o[i+1] }\n\n//Provides: caml_obj_set_raw_field\nfunction caml_obj_set_raw_field(o,i,v) { return o[i+1] = v }\n\n//Provides: caml_obj_reachable_words\nfunction caml_obj_reachable_words(o) { return 0; }\n\n//Provides: caml_obj_add_offset\n//Requires: caml_failwith\nfunction caml_obj_add_offset(v,offset) {\n  caml_failwith(\"Obj.add_offset is not supported\");\n}\n\n//Provides: caml_obj_update_tag\nfunction caml_obj_update_tag(b,o,n) {\n    if(b[0]==o) { b[0] = n; return 1 }\n    return 0\n}\n\n//Provides: caml_lazy_update_to_forcing\n//Requires: caml_obj_update_tag\nfunction caml_lazy_update_to_forcing(o) {\n  if ((o instanceof Array) && o[0] == (o[0] >>> 0) &&\n      caml_obj_update_tag(o, 246, 244)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n//Provides: caml_lazy_update_to_forward\n//Requires: caml_obj_update_tag\n  function caml_lazy_update_to_forward(o) {\n  caml_obj_update_tag(o,244,250);\n  return 0; // unit\n}\n\n\n//Provides: caml_lazy_reset_to_lazy\n//Requires: caml_obj_update_tag\nfunction caml_lazy_reset_to_lazy(o) {\n  caml_obj_update_tag(o,244,246);\n  return 0;\n}\n\n//Provides: caml_lazy_read_result\n//Requires: caml_obj_tag\nfunction caml_lazy_read_result(o) {\n  return (caml_obj_tag(o) == 250)?o[1]:o;\n}\n\n\n//Provides: caml_is_continuation_tag\n//Version: < 5\nfunction caml_is_continuation_tag(t) {\n  return 0;\n}\n\n//Provides: caml_is_continuation_tag\n//Version: >= 5\nfunction caml_is_continuation_tag(t) {\n  return (t == 245) ? 1 : 0;\n}\n","/*\nTo deal with effects, the execution context is intuitively composed of\na stack of fibers. Each fiber has a current low-level continuation\n(one-argument JavaScript function), a stack of exception handlers and\na triple of handlers, which are invoked when the fiber terminates\n(either with a value or an exception) or when an effect is performed.\nThe low-level continuation of the topmost fiber (which is currently\nexecuting) is passed from function to function as an additional\nargument. Its stack of exception handlers is stored in\n[caml_exn_stack]. Exception handlers are pushed into this stack when\nentering a [try ... with ...] and popped on exit. Then, handlers and\nthe remaining fibers are stored in [caml_fiber_stack]. To install an\neffect handler, we push a new fiber into the execution context.\n\nWe have basically the following type for reified continuations (type\n[continuation] in module [Effect] of the standard library):\n\n  type ('a, 'b) continuation = ('a, 'b) stack ref\n\n  and (_, _) stack =\n      Cons : ('b -> unit) *             (* low-level continuation *)\n             (exn -> unit) list *       (* exception handlers *)\n             ('b, 'c) handler *\n             ('a, 'b) stack\n             -> ('a, 'c) stack\n    | Empty : ('a, 'a) stack\n\n  and ('a,'b) handler =   (* As in module Effect from the standard library *)\n    { retc: 'a -> 'b;\n      exnc: exn -> 'b;\n      effc: 'c.'c Effect.t -> (('c,'b) continuation -> 'b) option }\n\nContinuations are one-shot. A continuation [ref Empty] has already\nbeen resumed.\n\nA continuation is basically composed of a list of fibers, which each\nhas its low-level continuation, its stack of exception handlers and a\ntriple of handlers to deal with when the fiber terminates or an\neffect is performed. When resuming a continuation, the innermost fiber\nis resumed first.\n\nThe handlers are CPS-transformed functions: they actually take an\nadditional parameter which is the current low-level continuation.\n*/\n\n//Provides: caml_exn_stack\n//If: effects\n// This is an OCaml list of exception handlers\nvar caml_exn_stack = 0;\n\n//Provides: caml_push_trap\n//Requires: caml_exn_stack\n//If: effects\nfunction caml_push_trap(handler) {\n  caml_exn_stack=[0,handler,caml_exn_stack];\n}\n\n//Provides: caml_pop_trap\n//Requires: caml_exn_stack\n//If: effects\nfunction caml_pop_trap() {\n  if (!caml_exn_stack) return function(x){throw x;}\n  var h = caml_exn_stack[1];\n  caml_exn_stack=caml_exn_stack[2];\n  return h\n}\n\n//Provides: caml_fiber_stack\n//If: effects\n// This has the shape {h, r:{k, x, e}} where h is a triple of handlers\n// (see effect.js) and k, x and e are the saved continuation,\n// exception stack and fiber stack of the parent fiber.\nvar caml_fiber_stack;\n\n//Provides:caml_resume_stack\n//Requires: caml_named_value, caml_raise_constant, caml_exn_stack, caml_fiber_stack\n//If: effects\nfunction caml_resume_stack(stack, k) {\n  if (!stack) caml_raise_constant\n                 (caml_named_value(\"Effect.Continuation_already_resumed\"));\n  // Update the execution context with the stack of fibers in [stack] in\n  // order to resume the continuation\n  do {\n    caml_fiber_stack =\n      {h:stack[3], r:{k:k, x:caml_exn_stack, e:caml_fiber_stack}};\n    k = stack[1];\n    caml_exn_stack = stack[2];\n    stack = stack[4];\n  } while (stack)\n  return k;\n}\n\n//Provides: caml_pop_fiber\n//Requires: caml_exn_stack, caml_fiber_stack\n//If: effects\nfunction caml_pop_fiber() {\n  // Move to the parent fiber, returning the parent's low-level continuation\n  var rem = caml_fiber_stack.r;\n  caml_exn_stack = rem.x;\n  caml_fiber_stack = rem.e;\n  return rem.k;\n}\n\n//Provides: caml_perform_effect\n//Requires: caml_pop_fiber, caml_stack_check_depth, caml_trampoline_return, caml_exn_stack, caml_fiber_stack\n//If: effects\nfunction caml_perform_effect(eff, cont, k0) {\n  // Allocate a continuation if we don't already have one\n  if (!cont) cont = [245 /*continuation*/, 0];\n  // Get current effect handler\n  var handler = caml_fiber_stack.h[3];\n  // Cons the current fiber onto the continuation:\n  //   cont := Cons (k, exn_stack, handlers, !cont)\n  cont[1] = [0,k0,caml_exn_stack,caml_fiber_stack.h,cont[1]];\n  // Move to parent fiber and execute the effect handler there\n  // The handler is defined in Stdlib.Effect, so we know that the arity matches\n  var k1 = caml_pop_fiber();\n  return caml_stack_check_depth()?handler(eff,cont,k1,k1)\n         :caml_trampoline_return(handler,[eff,cont,k1,k1]);\n}\n\n//Provides: caml_alloc_stack\n//Requires: caml_pop_fiber, caml_fiber_stack, caml_call_gen, caml_stack_check_depth, caml_trampoline_return\n//If: effects\nfunction caml_alloc_stack(hv, hx, hf) {\n  function call(i, x) {\n    var f=caml_fiber_stack.h[i];\n    var args = [x, caml_pop_fiber()];\n    return caml_stack_check_depth()?caml_call_gen(f,args)\n           :caml_trampoline_return(f,args);\n  }\n  function hval(x) {\n    // Call [hv] in the parent fiber\n    return call(1, x);\n  }\n  function hexn(e) {\n    // Call [hx] in the parent fiber\n    return call(2, e);\n  }\n  return [0, hval, [0, hexn, 0], [0, hv, hx, hf], 0];\n}\n\n//Provides: caml_alloc_stack\n//If: !effects\nfunction caml_alloc_stack(hv, hx, hf) {\n  return 0;\n}\n\n//Provides: caml_continuation_use_noexc\nfunction caml_continuation_use_noexc(cont) {\n  var stack=cont[1];\n  cont[1]=0;\n  return stack;\n}\n\n//Provides: caml_continuation_use_and_update_handler_noexc\n//Requires: caml_continuation_use_noexc\nfunction caml_continuation_use_and_update_handler_noexc(cont, hval, hexn, heff) {\n  var stack = caml_continuation_use_noexc(cont);\n  stack[3] = [0, hval, hexn, heff];\n  return stack;\n}\n\n//Provides: caml_get_continuation_callstack\nfunction caml_get_continuation_callstack () { return [0]; }\n\n//Provides: caml_ml_condition_new\nfunction caml_ml_condition_new(unit){\n    return {condition:1};\n}\n\n//Provides: caml_ml_condition_wait\nfunction caml_ml_condition_wait(t,mutext){\n    return 0;\n}\n\n//Provides: caml_ml_condition_broadcast\nfunction caml_ml_condition_broadcast(t){\n    return 0;\n}\n\n//Provides: caml_ml_condition_signal\nfunction caml_ml_condition_signal(t){\n    return 0;\n}\n\n//Provides: jsoo_effect_not_supported\n//Requires: caml_failwith\n//!If: effects\nfunction jsoo_effect_not_supported(){\n  caml_failwith(\"Effect handlers are not supported\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Array\n\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n//Provides: caml_floatarray_blit\nfunction caml_floatarray_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, mutable)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (mutable, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_array_fill\nfunction caml_array_fill(array, ofs, len, v){\n  for(var i = 0; i < len; i++){\n    array[ofs+i+1] = v;\n  }\n  return 0;\n}\n\n//Provides: caml_check_bound (mutable, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, mutable)\n//Requires: caml_array_bound_error\nfunction caml_make_vect (len, init) {\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\n//Requires: caml_array_bound_error\nfunction caml_make_float_vect(len){\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n//Provides: caml_floatarray_create const (const)\n//Requires: caml_array_bound_error\nfunction caml_floatarray_create(len){\n  if (len < 0) caml_array_bound_error();\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n","//Provides: caml_domain_dls\nvar caml_domain_dls = [0];\n\n//Provides: caml_domain_dls_set\n//Requires: caml_domain_dls\nfunction caml_domain_dls_set(a) {\n  caml_domain_dls = a;\n}\n\n//Provides: caml_domain_dls_compare_and_set\n//Requires: caml_domain_dls\n//Version: >= 5.2\nfunction caml_domain_dls_compare_and_set(old,n) {\n  if(caml_domain_dls !== old) return 0\n  caml_domain_dls = n;\n  return 1;\n}\n\n//Provides: caml_domain_dls_get\n//Requires: caml_domain_dls\nfunction caml_domain_dls_get(unit) {\n  return caml_domain_dls;\n}\n\n\n//Provides: caml_atomic_load\nfunction caml_atomic_load(ref){\n  return ref[1];\n}\n\n//Provides: caml_atomic_cas\nfunction caml_atomic_cas(ref,o,n) {\n  if(ref[1] === o){\n    ref[1] = n;\n    return 1;\n  }\n  return 0;\n}\n\n//Provides: caml_atomic_fetch_add\nfunction caml_atomic_fetch_add(ref, i) {\n  var old = ref[1];\n  ref[1] += i;\n  return old;\n}\n\n//Provides: caml_atomic_exchange\nfunction caml_atomic_exchange(ref, v) {\n  var r = ref[1];\n  ref[1] = v;\n  return r;\n}\n\n//Provides: caml_atomic_make_contended\nfunction caml_atomic_make_contended(a) {\n  return [0, a]\n}\n\n//Provides: caml_ml_domain_unique_token\n//Version: < 5.2\nvar caml_ml_domain_unique_token_ = [0]\nfunction caml_ml_domain_unique_token(unit) {\n  return caml_ml_domain_unique_token_\n}\n\n\n//Provides: caml_ml_domain_set_name\nfunction caml_ml_domain_set_name(_name) {\n  return 0;\n}\n\n//Provides: caml_recommended_domain_count\nfunction caml_recommended_domain_count(unit) { return 1 }\n\n\n//Provides: caml_domain_id\nvar caml_domain_id = 0;\n\n//Provides: caml_domain_spawn\n//Requires: caml_ml_mutex_unlock\n//Requires: caml_domain_id\n//Requires: caml_callback\n//Version: >= 5.2\nvar caml_domain_latest_idx = 1\nfunction caml_domain_spawn(f,term_sync){\n    var id = caml_domain_latest_idx++;\n    var old = caml_domain_id;\n    caml_domain_id = id;\n    var res = caml_callback(f,[0]);\n    caml_domain_id = old;\n    caml_ml_mutex_unlock(term_sync[2]);\n    //TODO: fix exn case\n    term_sync[1] = [0, [0, res]];\n    return id;\n}\n\n//Provides: caml_domain_spawn\n//Requires: caml_ml_mutex_unlock\n//Requires: caml_domain_id\n//Requires: caml_callback\n//Version: < 5.2\nvar caml_domain_latest_idx = 1\nfunction caml_domain_spawn(f,mutex){\n    var id = caml_domain_latest_idx++;\n    var old = caml_domain_id;\n    caml_domain_id = id;\n    var res = caml_callback(f,[0]);\n    caml_domain_id = old;\n    caml_ml_mutex_unlock(mutex);\n    return id;\n}\n\n\n//Provides: caml_ml_domain_id\n//Requires: caml_domain_id\nfunction caml_ml_domain_id(unit){\n    return caml_domain_id;\n}\n\n\n//Provides: caml_ml_domain_cpu_relax\nfunction caml_ml_domain_cpu_relax(unit){\n    return 0;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_string_of_jsbytes, caml_jsbytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_jsbytes_of_string(fmt) == \"%d\") return caml_string_of_jsbytes(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;\n  if (len > 0) {\n    switch (caml_string_unsafe_get(s,i)) {\n    case 45: i++; sign = -1; break;\n    case 43: i++; sign = 1; break;\n    }\n  }\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    case 117: case 85: i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_mul const\nfunction caml_mul(a,b){\n  return Math.imul(a,b);\n}\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >>> 8) |\n          ((x & 0xFF000000) >>> 24));\n}\n//Provides: caml_int64_bswap\n//Requires: caml_int64_to_bytes, caml_int64_of_bytes\nfunction caml_int64_bswap(x) {\n  var y = caml_int64_to_bytes(x);\n  return caml_int64_of_bytes([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Hashtbl\n\n\n//Provides: caml_hash_univ_param mutable\n//Requires: caml_is_ml_string, caml_is_ml_bytes\n//Requires: caml_ml_bytes_content\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float, caml_custom_ops\n//Requires: caml_ml_bytes_length, caml_jsbytes_of_string\n//Version: < 4.12\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (caml_is_ml_bytes(obj)) {\n      count --;\n      var content = caml_ml_bytes_content(obj);\n      if(typeof content === \"string\") {\n        for (var b = content, l = b.length, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n      } else { /* ARRAY */\n        for (var a = content, l = a.length, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (caml_is_ml_string(obj)) {\n      var jsbytes = caml_jsbytes_of_string(obj);\n      for (var b = jsbytes, l = jsbytes.length, i = 0; i < l; i++)\n        hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n    } else if (typeof obj === \"string\") {\n      for (var b = obj, l = obj.length, i = 0; i < l; i++)\n        hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    } else if(obj && obj.caml_custom) {\n      if(caml_custom_ops[obj.caml_custom] && caml_custom_ops[obj.caml_custom].hash) {\n        var h = caml_custom_ops[obj.caml_custom].hash(obj) | 0;\n        hash_accu = (hash_accu * 65599 + h) | 0;\n      }\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n//Provides: caml_hash_mix_int\n//Requires: caml_mul\nfunction caml_hash_mix_int(h,d) {\n  d = caml_mul(d, 0xcc9e2d51|0);\n  d = ((d << 15) | (d >>> (32-15))); // ROTL32(d, 15);\n  d = caml_mul(d, 0x1b873593);\n  h ^= d;\n  h = ((h << 13) | (h >>> (32-13)));   //ROTL32(h, 13);\n  return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n}\n\n//Provides: caml_hash_mix_final\n//Requires: caml_mul\nfunction caml_hash_mix_final(h) {\n  h ^= h >>> 16;\n  h = caml_mul (h, 0x85ebca6b|0);\n  h ^= h >>> 13;\n  h = caml_mul (h, 0xc2b2ae35|0);\n  h ^= h >>> 16;\n  return h;\n}\n\n//Provides: caml_hash_mix_float\n//Requires: caml_int64_bits_of_float, caml_hash_mix_int64\nfunction caml_hash_mix_float (h, v0) {\n  return caml_hash_mix_int64(h, caml_int64_bits_of_float (v0));\n}\n//Provides: caml_hash_mix_int64\n//Requires: caml_hash_mix_int\n//Requires: caml_int64_lo32, caml_int64_hi32\nfunction caml_hash_mix_int64 (h, v) {\n  h = caml_hash_mix_int(h, caml_int64_lo32(v));\n  h = caml_hash_mix_int(h, caml_int64_hi32(v));\n  return h;\n}\n\n//Provides: caml_hash_mix_jsbytes\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_jsbytes(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s.charCodeAt(i)\n      | (s.charCodeAt(i+1) << 8)\n      | (s.charCodeAt(i+2) << 16)\n      | (s.charCodeAt(i+3) << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s.charCodeAt(i+2) << 16;\n  case 2: w |= s.charCodeAt(i+1) << 8;\n  case 1:\n    w |= s.charCodeAt(i);\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_bytes_arr\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_bytes_arr(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s[i]\n      | (s[i+1] << 8)\n      | (s[i+2] << 16)\n      | (s[i+3] << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s[i+2] << 16;\n  case 2: w |= s[i+1] << 8;\n  case 1: w |= s[i];\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_bytes\n//Requires: caml_ml_bytes_content\n//Requires: caml_hash_mix_jsbytes\n//Requires: caml_hash_mix_bytes_arr\nfunction caml_hash_mix_bytes(h, v) {\n  var content = caml_ml_bytes_content(v);\n  if(typeof content === \"string\")\n    return caml_hash_mix_jsbytes(h, content)\n  else /* ARRAY */\n    return caml_hash_mix_bytes_arr(h, content);\n}\n\n//Provides: caml_hash_mix_string\n//Requires: caml_hash_mix_jsbytes, caml_jsbytes_of_string\nfunction caml_hash_mix_string(h, v) {\n  return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));\n}\n\n\n//Provides: caml_hash mutable\n//Requires: caml_is_ml_string, caml_is_ml_bytes\n//Requires: caml_hash_mix_int, caml_hash_mix_final\n//Requires: caml_hash_mix_float, caml_hash_mix_string, caml_hash_mix_bytes, caml_custom_ops\n//Requires: caml_hash_mix_jsbytes\n//Requires: caml_is_continuation_tag\nfunction caml_hash (count, limit, seed, obj) {\n  var queue, rd, wr, sz, num, h, v, i, len;\n  sz = limit;\n  if (sz < 0 || sz > 256) sz = 256;\n  num = count;\n  h = seed;\n  queue = [obj]; rd = 0; wr = 1;\n  while (rd < wr && num > 0) {\n    v = queue[rd++];\n    if (v && v.caml_custom){\n      if(caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash) {\n        var hh = caml_custom_ops[v.caml_custom].hash(v);\n        h = caml_hash_mix_int (h, hh);\n        num --;\n      }\n    }\n    else if (v instanceof Array && v[0] === (v[0]|0)) {\n      switch (v[0]) {\n      case 248:\n        // Object\n        h = caml_hash_mix_int(h, v[2]);\n        num--;\n        break;\n      case 250:\n        // Forward\n        queue[--rd] = v[1];\n        break;\n      default:\n        if(caml_is_continuation_tag(v[0])) {\n          /* All continuations hash to the same value,\n             since we have no idea how to distinguish them. */\n          break;\n        }\n        var tag = ((v.length - 1) << 10) | v[0];\n        h = caml_hash_mix_int(h, tag);\n        for (i = 1, len = v.length; i < len; i++) {\n          if (wr >= sz) break;\n          queue[wr++] = v[i];\n        }\n        break;\n      }\n    } else if (caml_is_ml_bytes(v)) {\n      h = caml_hash_mix_bytes(h,v)\n      num--;\n    } else if (caml_is_ml_string(v)) {\n      h = caml_hash_mix_string(h,v)\n      num--;\n    } else if (typeof v === \"string\") {\n      h = caml_hash_mix_jsbytes(h,v)\n      num--;\n    } else if (v === (v|0)) {\n      // Integer\n      h = caml_hash_mix_int(h, v+v+1);\n      num--;\n    } else if (typeof v === \"number\") {\n      // Float\n      h = caml_hash_mix_float(h,v);\n      num--;\n    }\n  }\n  h = caml_hash_mix_final(h);\n  return h & 0x3FFFFFFF;\n}\n\n//Provides: caml_string_hash\n//Requires: caml_hash_mix_final, caml_hash_mix_string\nfunction caml_string_hash(h, v){\n  var h = caml_hash_mix_string(h,v);\n  var h = caml_hash_mix_final(h);\n  return h & 0x3FFFFFFF;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_fds\nvar caml_sys_fds = new Array(3);\n\n//Provides: caml_sys_close\n//Requires: caml_sys_fds\nfunction caml_sys_close(fd) {\n  var file = caml_sys_fds[fd];\n  if(file) file.close();\n  delete caml_sys_fds[fd];\n  return 0;\n}\n\n\n//Provides: caml_sys_open\n//Requires: caml_raise_sys_error\n//Requires: MlFakeFd_out\n//Requires: resolve_fs_device\n//Requires: caml_jsbytes_of_string\n//Requires: fs_node_supported\n//Requires: caml_sys_fds\n//Requires: caml_sys_open_for_node\nfunction caml_sys_open_internal(file,idx) {\n  if(idx == undefined){\n    idx = caml_sys_fds.length;\n  }\n  caml_sys_fds[idx] = file;\n  return idx | 0;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(caml_jsbytes_of_string(name) + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(caml_jsbytes_of_string(name) + \" : flags Open_text and Open_binary are not compatible\");\n  var root = resolve_fs_device(name);\n  var file = root.device.open(root.rest,f);\n  return caml_sys_open_internal (file, undefined);\n}\n(function () {\n  function file(fd, flags) {\n    if(fs_node_supported()) {\n      return caml_sys_open_for_node(fd, flags);\n    }\n    else\n      return new MlFakeFd_out(fd, flags)\n  }\n  caml_sys_open_internal(file(0,{rdonly:1,altname:\"/dev/stdin\",isCharacterDevice:true}), 0);\n  caml_sys_open_internal(file(1,{buffered:2,wronly:1,isCharacterDevice:true}), 1);\n  caml_sys_open_internal(file(2,{buffered:2,wronly:1,isCharacterDevice:true}), 2);\n})()\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\n//Requires: caml_ml_channel_get\nfunction caml_ml_set_channel_name(chanid, name) {\n  var chan = caml_ml_channel_get(chanid);\n  chan.name = name;\n  return 0;\n}\n\n//Provides: caml_ml_channels\nvar caml_ml_channels = new Array();\n\n//Provides: caml_ml_channel_redirect\n//Requires: caml_ml_channel_get, caml_ml_channels\nfunction caml_ml_channel_redirect (captured, into){\n  var to_restore = caml_ml_channel_get(captured);\n  var new_ = caml_ml_channel_get(into);\n  caml_ml_channels[captured] = new_; // XXX\n  return to_restore;\n}\n\n//Provides: caml_ml_channel_restore\n//Requires: caml_ml_channels\nfunction caml_ml_channel_restore (captured, to_restore){\n  caml_ml_channels[captured] = to_restore; // XXX\n  return 0;\n}\n\n//Provides: caml_ml_channel_get\n//Requires: caml_ml_channels\nfunction caml_ml_channel_get(id) {\n  return caml_ml_channels[id]; // XXX\n}\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c = 0; c < caml_ml_channels.length; c++){\n    if(caml_ml_channels[c] && caml_ml_channels[c].opened && caml_ml_channels[c].out)\n      l=[0,caml_ml_channels[c].fd,l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: caml_ml_channels, caml_sys_fds\n//Requires: caml_raise_sys_error\n//Requires: caml_sys_open\nfunction caml_ml_open_descriptor_out (fd) {\n  var file = caml_sys_fds[fd];\n  if(file.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var buffered = (file.flags.buffered !== undefined) ? file.flags.buffered : 1;\n  var channel = {\n    file:file,\n    offset:file.flags.append?file.length():0,\n    fd:fd,\n    opened:true,\n    out:true,\n    buffer_curr:0,\n    buffer:new Uint8Array(65536),\n    buffered:buffered\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_ml_channels, caml_sys_fds\n//Requires: caml_raise_sys_error\n//Requires: caml_sys_open\nfunction caml_ml_open_descriptor_in (fd)  {\n  var file = caml_sys_fds[fd];\n  if(file.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n  var refill = null;\n  var channel = {\n    file:file,\n    offset:file.flags.append?file.length():0,\n    fd:fd,\n    opened:true,\n    out: false,\n    buffer_curr:0,\n    buffer_max:0,\n    buffer:new Uint8Array(65536),\n    refill:refill\n  };\n  caml_ml_channels[channel.fd]=channel;\n  return channel.fd;\n}\n\n\n//Provides: caml_ml_open_descriptor_in_with_flags\n//Requires: caml_ml_open_descriptor_in\n//Version: >= 5.1\nfunction caml_ml_open_descriptor_in_with_flags(fd, flags){\n  return caml_ml_open_descriptor_in(fd);\n}\n\n//Provides: caml_ml_open_descriptor_out_with_flags\n//Requires: caml_ml_open_descriptor_out\n//Version: >= 5.1\nfunction caml_ml_open_descriptor_out_with_flags(fd, flags){\n  return caml_ml_open_descriptor_out(fd);\n}\n\n//Provides: caml_channel_descriptor\n//Requires: caml_ml_channel_get\n//Alias: win_filedescr_of_channel\nfunction caml_channel_descriptor(chanid){\n  var chan = caml_ml_channel_get(chanid);\n  return chan.fd;\n}\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_ml_channel_get\nfunction caml_ml_set_binary_mode(chanid,mode){\n  var chan = caml_ml_channel_get(chanid);\n  chan.file.flags.text = !mode\n  chan.file.flags.binary = mode\n  return 0;\n}\n\n//Provides: caml_ml_is_binary_mode\n//Requires: caml_ml_channel_get\n//Version: >= 5.2\nfunction caml_ml_is_binary_mode(chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  return chan.file.flags.binary\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_channel_get\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  if(chan.opened) {\n    chan.opened = false;\n    caml_sys_close(chan.fd);\n    chan.fd = -1;\n    chan.buffer = new Uint8Array(0);\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n  }\n  return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_channel_get\nfunction caml_ml_channel_size(chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  return chan.file.length();\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_int64_of_float,caml_ml_channel_get\nfunction caml_ml_channel_size_64(chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  return caml_int64_of_float(chan.file.length ());\n}\n\n//Provides: caml_ml_set_channel_output\n//Requires: caml_ml_channel_get\nfunction caml_ml_set_channel_output(chanid,f) {\n  var chan = caml_ml_channel_get(chanid);\n  chan.output = (function (s) {f(s)});\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\n//Requires: caml_ml_channel_get\nfunction caml_ml_set_channel_refill(chanid,f) {\n  caml_ml_channel_get(chanid).refill = f;\n  return 0;\n}\n\n//Provides: caml_refill\n//Requires: caml_ml_string_length, caml_uint8_array_of_string\nfunction caml_refill (chan) {\n  if(chan.refill != null){\n    var str = chan.refill();\n    var str_a = caml_uint8_array_of_string(str);\n    if (str_a.length == 0) {\n      chan.refill = null\n    }\n    else {\n      if(chan.buffer.length < chan.buffer_max + str_a.length){\n        var b = new Uint8Array(chan.buffer_max + str_a.length);\n        b.set(chan.buffer);\n        chan.buffer = b;\n      }\n      chan.buffer.set(str_a,chan.buffer_max);\n      chan.offset += str_a.length;\n      chan.buffer_max += str_a.length;\n    }\n  } else {\n    var nread = chan.file.read(chan.offset, chan.buffer, chan.buffer_max, chan.buffer.length - chan.buffer_max);\n    chan.offset += nread;\n    chan.buffer_max += nread;\n  }\n}\n\n//Provides: caml_ml_input\n//Requires: caml_ml_input_block\n//Requires: caml_uint8_array_of_bytes\nfunction caml_ml_input (chanid, b, i, l) {\n  var ba = caml_uint8_array_of_bytes(b);\n  return caml_ml_input_block(chanid, ba, i, l)\n}\n\n//Provides: caml_ml_input_bigarray\n//Requires: caml_ml_input_block\n//Requires: caml_ba_to_typed_array\nfunction caml_ml_input_bigarray (chanid, b, i, l) {\n  var ba = caml_ba_to_typed_array(b);\n  return caml_ml_input_block(chanid, ba, i, l)\n}\n\n//Provides: caml_ml_input_block\n//Requires: caml_refill, caml_ml_channel_get\nfunction caml_ml_input_block (chanid, ba, i, l) {\n  var chan = caml_ml_channel_get(chanid);\n  var n = l;\n  var avail = chan.buffer_max - chan.buffer_curr;\n  if(l <= avail) {\n    ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + l), i);\n    chan.buffer_curr += l;\n  }\n  else if(avail > 0) {\n    ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + avail), i);\n    chan.buffer_curr += avail;\n    n = avail;\n  } else {\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n    caml_refill(chan);\n    var avail = chan.buffer_max - chan.buffer_curr;\n    if(n > avail) n = avail;\n    ba.set(chan.buffer.subarray(chan.buffer_curr,chan.buffer_curr + n), i);\n    chan.buffer_curr += n;\n  }\n  return n | 0;\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_bytes, caml_create_bytes, caml_ml_channel_get, caml_bytes_of_array\n//Requires: caml_refill, caml_failwith, caml_raise_end_of_file\n//Requires: caml_marshal_header_size\nfunction caml_input_value (chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  var header = new Uint8Array(caml_marshal_header_size);\n  function block(buffer, offset, n) {\n    var r = 0;\n    while(r < n){\n      if(chan.buffer_curr >= chan.buffer_max){\n        chan.buffer_curr = 0;\n        chan.buffer_max = 0;\n        caml_refill(chan);\n      }\n      if (chan.buffer_curr >= chan.buffer_max)\n        break;\n      buffer[offset+r] = chan.buffer[chan.buffer_curr];\n      chan.buffer_curr++;\n      r++;\n    }\n    return r;\n  }\n  var r = block(header, 0, caml_marshal_header_size);\n  if(r == 0)\n    caml_raise_end_of_file();\n  else if (r < caml_marshal_header_size)\n    caml_failwith(\"input_value: truncated object\");\n  var len = caml_marshal_data_size (caml_bytes_of_array(header), 0);\n  var buf = new Uint8Array(len + caml_marshal_header_size);\n  buf.set(header,0);\n  var r = block(buf, caml_marshal_header_size, len)\n  if(r < len)\n    caml_failwith(\"input_value: truncated object \" + r + \"  \" + len);\n  var offset = [0];\n  var res = caml_input_value_from_bytes(caml_bytes_of_array(buf), offset);\n  chan.offset = chan.offset + offset[0];\n  return res;\n}\n\n//Provides: caml_input_value_to_outside_heap\n//Requires: caml_input_value\nfunction caml_input_value_to_outside_heap(c) {\n  return caml_input_value(c);\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_channel_get, caml_refill\nfunction caml_ml_input_char (chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  if(chan.buffer_curr >= chan.buffer_max){\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n    caml_refill(chan);\n  }\n  if (chan.buffer_curr >= chan.buffer_max)\n    caml_raise_end_of_file();\n  var res = chan.buffer[chan.buffer_curr];\n  chan.buffer_curr++;\n  return res;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_input_char, caml_ml_channel_get\nfunction caml_ml_input_int (chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  var res = 0;\n  for(var i = 0; i < 4; i++){\n    res = (res << 8) + caml_ml_input_char(chanid) | 0;\n  }\n  return res | 0;\n}\n\n//Provides: caml_seek_in\n//Requires: caml_raise_sys_error, caml_ml_channel_get\nfunction caml_seek_in(chanid, pos) {\n  var chan = caml_ml_channel_get(chanid);\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  if(pos >= chan.offset - chan.buffer_max\n     && pos <= chan.offset\n     && chan.file.flags.binary) {\n    chan.buffer_curr = chan.buffer_max - (chan.offset - pos);\n  } else {\n    chan.offset = pos;\n    chan.buffer_curr = 0;\n    chan.buffer_max = 0;\n  }\n  return 0;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_seek_in\nfunction caml_ml_seek_in(chanid,pos){\n  return caml_seek_in(chanid,pos);\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_seek_in\nfunction caml_ml_seek_in_64(chanid,pos){\n  var pos = caml_int64_to_float(pos);\n  return caml_seek_in(chanid, pos);\n}\n\n//Provides: caml_pos_in\n//Requires: caml_ml_channel_get\nfunction caml_pos_in(chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  return chan.offset - (chan.buffer_max - chan.buffer_curr) | 0;\n}\n\n//Provides: caml_ml_pos_in\n//Requires: caml_pos_in\nfunction caml_ml_pos_in(chanid) {\n  return caml_pos_in(chanid);\n}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float, caml_pos_in\nfunction caml_ml_pos_in_64(chanid) {\n  return caml_int64_of_float(caml_pos_in(chanid));\n}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error\n//Requires: caml_ml_channel_get, caml_refill\nfunction caml_ml_input_scan_line(chanid){\n  var chan = caml_ml_channel_get(chanid);\n  var p = chan.buffer_curr;\n  do {\n    if(p >= chan.buffer_max) {\n      if(chan.buffer_curr > 0) {\n        chan.buffer.set(chan.buffer.subarray(chan.buffer_curr),0);\n        p -= chan.buffer_curr;\n        chan.buffer_max -= chan.buffer_curr;\n        chan.buffer_curr = 0;\n      }\n      if(chan.buffer_max >= chan.buffer.length) {\n        return -(chan.buffer_max) | 0;\n      }\n      var prev_max = chan.buffer_max;\n      caml_refill (chan);\n      if(prev_max == chan.buffer_max) {\n        return -(chan.buffer_max) | 0;\n      }\n    }\n  } while (chan.buffer[p++] != 10);\n  return (p - chan.buffer_curr) | 0;\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error, caml_ml_channel_get\n//Requires: caml_subarray_to_jsbytes\nfunction caml_ml_flush (chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  if(! chan.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n  if(!chan.buffer || chan.buffer_curr == 0) return 0;\n  if(chan.output) {\n    chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));\n  } else {\n    chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);\n  }\n  chan.offset += chan.buffer_curr;\n  chan.buffer_curr = 0;\n  return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output_ta\n//Requires: caml_ml_flush,caml_ml_bytes_length\n//Requires: caml_raise_sys_error, caml_ml_channel_get\nfunction caml_ml_output_ta(chanid,buffer,offset,len) {\n  var chan = caml_ml_channel_get(chanid);\n  if(! chan.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n  buffer = buffer.subarray(offset, offset + len);\n  if(chan.buffer_curr + buffer.length > chan.buffer.length) {\n    var b = new Uint8Array(chan.buffer_curr + buffer.length);\n    b.set(chan.buffer);\n    chan.buffer = b\n  }\n  switch(chan.buffered){\n  case 0: // Unbuffered\n    chan.buffer.set(buffer, chan.buffer_curr);\n    chan.buffer_curr += buffer.length;\n    caml_ml_flush (chanid);\n    break\n  case 1: // Buffered (the default)\n    chan.buffer.set(buffer, chan.buffer_curr);\n    chan.buffer_curr += buffer.length;\n    if(chan.buffer_curr >= chan.buffer.length)\n      caml_ml_flush (chanid);\n    break;\n  case 2: // Buffered (only for stdout and stderr)\n    var id = buffer.lastIndexOf(10)\n    if(id < 0) {\n      chan.buffer.set(buffer, chan.buffer_curr);\n      chan.buffer_curr += buffer.length;\n      if(chan.buffer_curr >= chan.buffer.length)\n        caml_ml_flush (chanid);\n    }\n    else {\n      chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);\n      chan.buffer_curr += id + 1;\n      caml_ml_flush (chanid);\n      chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);\n      chan.buffer_curr += buffer.length - id - 1;\n    }\n    break;\n  }\n  return 0;\n}\n\n//Provides: caml_ml_output_bytes\n//Requires: caml_uint8_array_of_bytes, caml_ml_output_ta\nfunction caml_ml_output_bytes(chanid,buffer,offset,len) {\n  var buffer = caml_uint8_array_of_bytes(buffer);\n  return caml_ml_output_ta(chanid,buffer,offset,len);\n}\n\n\n//Provides: caml_ml_output_bigarray\n//Requires: caml_ba_to_typed_array, caml_ml_output_ta\nfunction caml_ml_output_bigarray(chanid,buffer,offset,len) {\n  var buffer = caml_ba_to_typed_array(buffer);\n  return caml_ml_output_ta(chanid,buffer,offset,len);\n}\n\n\n\n//Provides: caml_ml_output\n//Requires: caml_ml_output_bytes, caml_bytes_of_string\nfunction caml_ml_output(chanid,buffer,offset,len){\n  return caml_ml_output_bytes(chanid,caml_bytes_of_string(buffer),offset,len);\n}\n\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_string_of_jsbytes\nfunction caml_ml_output_char (chanid,c) {\n  var s = caml_string_of_jsbytes(String.fromCharCode(c));\n  caml_ml_output(chanid,s,0,1);\n  return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length\nfunction caml_output_value (chanid,v,flags) {\n  var s = caml_output_value_to_string(v, flags);\n  caml_ml_output(chanid,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_seek_out\n//Requires: caml_ml_channel_get, caml_ml_flush\nfunction caml_seek_out(chanid, pos){\n  caml_ml_flush(chanid);\n  var chan = caml_ml_channel_get(chanid);\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out\n//Requires: caml_seek_out\nfunction caml_ml_seek_out(chanid,pos){\n  return caml_seek_out(chanid, pos);\n}\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float, caml_seek_out\nfunction caml_ml_seek_out_64(chanid,pos){\n  var pos = caml_int64_to_float(pos);\n  return caml_seek_out(chanid, pos);\n}\n\n//Provides: caml_pos_out\n//Requires: caml_ml_channel_get, caml_ml_flush\nfunction caml_pos_out(chanid) {\n  var chan = caml_ml_channel_get(chanid);\n  return chan.offset + chan.buffer_curr\n}\n\n//Provides: caml_ml_pos_out\n//Requires: caml_pos_out\nfunction caml_ml_pos_out(chanid) {\n  return caml_pos_out(chanid);\n}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float, caml_pos_out\nfunction caml_ml_pos_out_64(chanid) {\n  return caml_int64_of_float (caml_pos_out(chanid));\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (chanid,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(chanid,s,0,4);\n  return 0\n}\n\n//Provides: caml_ml_is_buffered\n//Requires: caml_ml_channel_get\nfunction caml_ml_is_buffered(chanid) {\n  return caml_ml_channel_get(chanid).buffered ? 1 : 0\n}\n\n//Provides: caml_ml_set_buffered\n//Requires: caml_ml_channel_get, caml_ml_flush\nfunction caml_ml_set_buffered(chanid,v) {\n  caml_ml_channel_get(chanid).buffered = v;\n  if(!v) caml_ml_flush(chanid);\n  return 0\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_compare_val_tag\n//Requires: caml_is_ml_string, caml_is_ml_bytes\nfunction caml_compare_val_tag(a){\n  if (typeof a === \"number\") return 1000; // int_tag (we use it for all numbers)\n  else if (caml_is_ml_bytes(a)) return 252; // string_tag\n  else if (caml_is_ml_string(a)) return 1252; // ocaml string (if different from bytes)\n  else if (a instanceof Array && a[0] === (a[0]>>>0) && a[0] <= 255) {\n    // Look like an ocaml block\n    var tag = a[0] | 0;\n    // ignore double_array_tag because we cannot accurately set\n    // this tag when we create an array of float.\n    return (tag == 254)?0:tag\n  }\n  else if (a instanceof String) return 12520; // javascript string, like string_tag (252)\n  else if (typeof a == \"string\") return 12520; // javascript string, like string_tag (252)\n  else if (a instanceof Number) return 1000; // int_tag (we use it for all numbers)\n  else if (a && a.caml_custom) return 1255; // like custom_tag (255)\n  else if (a && a.compare) return 1256; // like custom_tag (255)\n  else if (typeof a == \"function\") return 1247; // like closure_tag (247)\n  else if (typeof a == \"symbol\") return 1251;\n  return 1001; //out_of_heap_tag\n}\n\n//Provides: caml_compare_val_get_custom\n//Requires: caml_custom_ops\nfunction caml_compare_val_get_custom(a){\n  return caml_custom_ops[a.caml_custom] && caml_custom_ops[a.caml_custom].compare;\n}\n\n//Provides: caml_compare_val_number_custom\n//Requires: caml_compare_val_get_custom\nfunction caml_compare_val_number_custom(num, custom, swap, total) {\n  var comp = caml_compare_val_get_custom(custom);\n  if(comp) {\n    var x = (swap > 0)?comp(custom,num,total):comp(num,custom,total);\n    if(total && x != x) return swap; // total && nan\n    if(+x != +x) return +x; // nan\n    if((x | 0) != 0) return (x | 0); // !nan\n  }\n  return swap\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: caml_int_compare, caml_string_compare, caml_bytes_compare\n//Requires: caml_invalid_argument, caml_compare_val_get_custom, caml_compare_val_tag\n//Requires: caml_compare_val_number_custom\n//Requires: caml_jsbytes_of_string\n//Requires: caml_is_continuation_tag\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      var tag_a = caml_compare_val_tag(a);\n      // forward_tag ?\n      if(tag_a == 250) { a = a[1]; continue }\n\n      var tag_b = caml_compare_val_tag(b);\n      // forward_tag ?\n      if(tag_b == 250) { b = b[1]; continue }\n\n      // tags are different\n      if(tag_a !== tag_b) {\n        if(tag_a == 1000) {\n          if(tag_b == 1255) { //immediate can compare against custom\n            return caml_compare_val_number_custom(a, b, -1, total);\n          }\n          return -1\n        }\n        if(tag_b == 1000) {\n          if(tag_a == 1255) { //immediate can compare against custom\n            return caml_compare_val_number_custom(b, a, 1, total);\n          }\n          return 1\n        }\n        return (tag_a < tag_b)?-1:1;\n      }\n      switch(tag_a){\n        // 246: Lazy_tag handled bellow\n      case 247: // Closure_tag\n        // Cannot happen\n        caml_invalid_argument(\"compare: functional value\");\n        break\n      case 248: // Object\n        var x = caml_int_compare(a[2], b[2]);\n        if (x != 0) return (x | 0);\n        break;\n      case 249: // Infix\n        // Cannot happen\n        caml_invalid_argument(\"compare: functional value\");\n        break\n      case 250: // Forward tag\n        // Cannot happen, handled above\n        caml_invalid_argument(\"equal: got Forward_tag, should not happen\");\n        break;\n      case 251: //Abstract\n        caml_invalid_argument(\"equal: abstract value\");\n        break;\n      case 252: // OCaml bytes\n        if (a !== b) {\n          var x = caml_bytes_compare(a, b);\n          if (x != 0) return (x | 0);\n        };\n        break;\n      case 253: // Double_tag\n        // Cannot happen\n        caml_invalid_argument(\"equal: got Double_tag, should not happen\");\n        break;\n      case 254: // Double_array_tag\n        // Cannot happen, handled above\n        caml_invalid_argument(\"equal: got Double_array_tag, should not happen\");\n        break\n      case 255: // Custom_tag\n        caml_invalid_argument(\"equal: got Custom_tag, should not happen\");\n        break;\n      case 1247: // Function\n        caml_invalid_argument(\"compare: functional value\");\n        break;\n      case 1255: // Custom\n        var comp = caml_compare_val_get_custom(a);\n        if(comp != caml_compare_val_get_custom(b)){\n          return (a.caml_custom<b.caml_custom)?-1:1;\n        }\n        if(!comp)\n          caml_invalid_argument(\"compare: abstract value\");\n        var x = comp(a,b,total);\n        if(x != x){ // Protect against invalid UNORDERED\n          return total?-1:x;\n        }\n        if(x !== (x|0)){ // Protect against invalid return value\n          return -1\n        }\n        if (x != 0) return (x | 0);\n        break;\n      case 1256: // compare function\n        var x = a.compare(b,total);\n        if(x != x) { // Protect against invalid UNORDERED\n          return total?-1:x;\n        }\n        if(x !== (x|0)){ // Protect against invalid return value\n          return -1\n        }\n        if (x != 0) return (x | 0);\n        break;\n      case 1000: // Number\n        a = +a;\n        b = +b;\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n        break;\n      case 1001: // The rest\n        // Here we can be in the following cases:\n        // 1. JavaScript primitive types\n        // 2. JavaScript object that can be coerced to primitive types\n        // 3. JavaScript object than cannot be coerced to primitive types\n        //\n        // (3) will raise a [TypeError]\n        // (2) will coerce to primitive types using [valueOf] or [toString]\n        // (2) and (3), after eventual coercion\n        // - if a and b are strings, apply lexicographic comparison\n        // - if a or b are not strings, convert a and b to number\n        //   and apply standard comparison\n        //\n        // Exception: `!=` will not coerce/convert if both a and b are objects\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n        break;\n      case 1251: // JavaScript Symbol, no ordering.\n        if(a !== b) {\n          if (!total) return NaN;\n          return 1;\n        }\n        break;\n      case 1252: // ocaml strings\n        var a = caml_jsbytes_of_string(a);\n        var b = caml_jsbytes_of_string(b);\n        if(a !== b) {\n          if(a < b) return -1;\n          if(a > b) return 1;\n        }\n        break;\n      case 12520: // javascript strings\n        var a = a.toString();\n        var b = b.toString();\n        if(a !== b) {\n          if(a < b) return -1;\n          if(a > b) return 1;\n        }\n        break;\n      case 246: // Lazy_tag\n      case 254: // Double_array\n      default: // Block with other tag\n        if(caml_is_continuation_tag(tag_a)) {\n          caml_invalid_argument(\"compare: continuation value\");\n          break;\n        }\n        if (a.length != b.length) return (a.length < b.length)?-1:1;\n        if (a.length > 1) stack.push(a, b, 1);\n        break;\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n","\n//Provides: caml_custom_event_index\nvar caml_custom_event_index = 0;\n\n//Provides: caml_runtime_events_user_register\n//Requires: caml_custom_event_index\nfunction caml_runtime_events_user_register(event_name, event_tag, event_type) {\n  caml_custom_event_index += 1;\n  return [0, caml_custom_event_index, event_name, event_type, event_tag];\n}\n\n//Provides: caml_runtime_events_user_write\nfunction caml_runtime_events_user_write(event, event_content) {\n  return 0;\n}\n\n//Provides: caml_runtime_events_user_resolve\nfunction caml_runtime_events_user_resolve() {\n  return 0;\n}\n\n//Provides: caml_ml_runtime_events_start\n//Alias: caml_runtime_events_start\nfunction caml_ml_runtime_events_start() {\n  return 0;\n}\n\n//Provides: caml_ml_runtime_events_pause\n//Alias: caml_runtime_events_pause\nfunction caml_ml_runtime_events_pause() {\n  return 0;\n}\n\n//Provides: caml_ml_runtime_events_are_active\n//Version: >= 5.2\nfunction caml_ml_runtime_events_are_active() {\n  return 0;\n}\n\n//Provides: caml_ml_runtime_events_resume\n//Alias: caml_runtime_events_resume\nfunction caml_ml_runtime_events_resume() {\n  return 0;\n}\n\n//Provides: caml_runtime_events_create_cursor\nfunction caml_runtime_events_create_cursor(target) {\n  return {};\n}\n\n//Provides: caml_runtime_events_free_cursor\nfunction caml_runtime_events_free_cursor(cursor) {\n  return 0;\n}\n\n//Provides: caml_runtime_events_read_poll\nfunction caml_runtime_events_read_poll(cursor, callbacks, num) {\n  return 0;\n}\n","\n//Provides: zstd_decompress\n//Version: >= 5.1\nvar zstd_decompress = (function () {\n\"use strict\";\n// aliases for shorter compressed code (most minifers don't do this)\nvar ab = ArrayBuffer, u8 = Uint8Array, u16 = Uint16Array, i16 = Int16Array, u32 = Uint32Array, i32 = Int32Array;\nvar slc = function (v, s, e) {\n    if (u8.prototype.slice)\n        return u8.prototype.slice.call(v, s, e);\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    var n = new u8(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\nvar fill = function (v, n, s, e) {\n    if (u8.prototype.fill)\n        return u8.prototype.fill.call(v, n, s, e);\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    for (; s < e; ++s)\n        v[s] = n;\n    return v;\n};\nvar cpw = function (v, t, s, e) {\n    if (u8.prototype.copyWithin)\n        return u8.prototype.copyWithin.call(v, t, s, e);\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    while (s < e) {\n        v[t++] = v[s++];\n    }\n};\n/**\n * Codes for errors generated within this library\n */\n// error codes\nvar ec = [\n    'invalid zstd data',\n    'window size too large (>2046MB)',\n    'invalid block type',\n    'FSE accuracy too high',\n    'match distance too far back',\n    'unexpected EOF'\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (!nt)\n        throw e;\n    return e;\n};\nvar rb = function (d, b, n) {\n    var i = 0, o = 0;\n    for (; i < n; ++i)\n        o |= d[b++] << (i << 3);\n    return o;\n};\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\n// read Zstandard frame header\nvar rzfh = function (dat, w) {\n    var n3 = dat[0] | (dat[1] << 8) | (dat[2] << 16);\n    if (n3 == 0x2FB528 && dat[3] == 253) {\n        // Zstandard\n        var flg = dat[4];\n        //    single segment       checksum             dict flag     frame content flag\n        var ss = (flg >> 5) & 1, cc = (flg >> 2) & 1, df = flg & 3, fcf = flg >> 6;\n        if (flg & 8)\n            err(0);\n        // byte\n        var bt = 6 - ss;\n        // dict bytes\n        var db = df == 3 ? 4 : df;\n        // dictionary id\n        var di = rb(dat, bt, db);\n        bt += db;\n        // frame size bytes\n        var fsb = fcf ? (1 << fcf) : ss;\n        // frame source size\n        var fss = rb(dat, bt, fsb) + ((fcf == 1) && 256);\n        // window size\n        var ws = fss;\n        if (!ss) {\n            // window descriptor\n            var wb = 1 << (10 + (dat[5] >> 3));\n            ws = wb + (wb >> 3) * (dat[5] & 7);\n        }\n        if (ws > 2145386496)\n            err(1);\n        var buf = new u8((w == 1 ? (fss || ws) : w ? 0 : ws) + 12);\n        buf[0] = 1, buf[4] = 4, buf[8] = 8;\n        return {\n            b: bt + fsb,\n            y: 0,\n            l: 0,\n            d: di,\n            w: (w && w != 1) ? w : buf.subarray(12),\n            e: ws,\n            o: new i32(buf.buffer, 0, 3),\n            u: fss,\n            c: cc,\n            m: Math.min(131072, ws)\n        };\n    }\n    else if (((n3 >> 4) | (dat[3] << 20)) == 0x184D2A5) {\n        // skippable\n        return b4(dat, 4) + 8;\n    }\n    err(0);\n};\n// most significant bit for nonzero\nvar msb = function (val) {\n    var bits = 0;\n    for (; (1 << bits) <= val; ++bits)\n        ;\n    return bits - 1;\n};\n// read finite state entropy\nvar rfse = function (dat, bt, mal) {\n    // table pos\n    var tpos = (bt << 3) + 4;\n    // accuracy log\n    var al = (dat[bt] & 15) + 5;\n    if (al > mal)\n        err(3);\n    // size\n    var sz = 1 << al;\n    // probabilities symbols  repeat   index   high threshold\n    var probs = sz, sym = -1, re = -1, i = -1, ht = sz;\n    // optimization: single allocation is much faster\n    var buf = new ab(512 + (sz << 2));\n    var freq = new i16(buf, 0, 256);\n    // same view as freq\n    var dstate = new u16(buf, 0, 256);\n    var nstate = new u16(buf, 512, sz);\n    var bb1 = 512 + (sz << 1);\n    var syms = new u8(buf, bb1, sz);\n    var nbits = new u8(buf, bb1 + sz);\n    while (sym < 255 && probs > 0) {\n        var bits = msb(probs + 1);\n        var cbt = tpos >> 3;\n        // mask\n        var msk = (1 << (bits + 1)) - 1;\n        var val = ((dat[cbt] | (dat[cbt + 1] << 8) | (dat[cbt + 2] << 16)) >> (tpos & 7)) & msk;\n        // mask (1 fewer bit)\n        var msk1fb = (1 << bits) - 1;\n        // max small value\n        var msv = msk - probs - 1;\n        // small value\n        var sval = val & msk1fb;\n        if (sval < msv)\n            tpos += bits, val = sval;\n        else {\n            tpos += bits + 1;\n            if (val > msk1fb)\n                val -= msv;\n        }\n        freq[++sym] = --val;\n        if (val == -1) {\n            probs += val;\n            syms[--ht] = sym;\n        }\n        else\n            probs -= val;\n        if (!val) {\n            do {\n                // repeat byte\n                var rbt = tpos >> 3;\n                re = ((dat[rbt] | (dat[rbt + 1] << 8)) >> (tpos & 7)) & 3;\n                tpos += 2;\n                sym += re;\n            } while (re == 3);\n        }\n    }\n    if (sym > 255 || probs)\n        err(0);\n    var sympos = 0;\n    // sym step (coprime with sz - formula from zstd source)\n    var sstep = (sz >> 1) + (sz >> 3) + 3;\n    // sym mask\n    var smask = sz - 1;\n    for (var s = 0; s <= sym; ++s) {\n        var sf = freq[s];\n        if (sf < 1) {\n            dstate[s] = -sf;\n            continue;\n        }\n        // This is split into two loops in zstd to avoid branching, but as JS is higher-level that is unnecessary\n        for (i = 0; i < sf; ++i) {\n            syms[sympos] = s;\n            do {\n                sympos = (sympos + sstep) & smask;\n            } while (sympos >= ht);\n        }\n    }\n    // After spreading symbols, should be zero again\n    if (sympos)\n        err(0);\n    for (i = 0; i < sz; ++i) {\n        // next state\n        var ns = dstate[syms[i]]++;\n        // num bits\n        var nb = nbits[i] = al - msb(ns);\n        nstate[i] = (ns << nb) - sz;\n    }\n    return [(tpos + 7) >> 3, {\n            b: al,\n            s: syms,\n            n: nbits,\n            t: nstate\n        }];\n};\n// read huffman\nvar rhu = function (dat, bt) {\n    //  index  weight count\n    var i = 0, wc = -1;\n    //    buffer             header byte\n    var buf = new u8(292), hb = dat[bt];\n    // huffman weights\n    var hw = buf.subarray(0, 256);\n    // rank count\n    var rc = buf.subarray(256, 268);\n    // rank index\n    var ri = new u16(buf.buffer, 268);\n    // NOTE: at this point bt is 1 less than expected\n    if (hb < 128) {\n        // end byte, fse decode table\n        var _a = rfse(dat, bt + 1, 6), ebt = _a[0], fdt = _a[1];\n        bt += hb;\n        var epos = ebt << 3;\n        // last byte\n        var lb = dat[bt];\n        if (!lb)\n            err(0);\n        //  state1   state2   state1 bits   state2 bits\n        var st1 = 0, st2 = 0, btr1 = fdt.b, btr2 = btr1;\n        // fse pos\n        // pre-increment to account for original deficit of 1\n        var fpos = (++bt << 3) - 8 + msb(lb);\n        for (;;) {\n            fpos -= btr1;\n            if (fpos < epos)\n                break;\n            var cbt = fpos >> 3;\n            st1 += ((dat[cbt] | (dat[cbt + 1] << 8)) >> (fpos & 7)) & ((1 << btr1) - 1);\n            hw[++wc] = fdt.s[st1];\n            fpos -= btr2;\n            if (fpos < epos)\n                break;\n            cbt = fpos >> 3;\n            st2 += ((dat[cbt] | (dat[cbt + 1] << 8)) >> (fpos & 7)) & ((1 << btr2) - 1);\n            hw[++wc] = fdt.s[st2];\n            btr1 = fdt.n[st1];\n            st1 = fdt.t[st1];\n            btr2 = fdt.n[st2];\n            st2 = fdt.t[st2];\n        }\n        if (++wc > 255)\n            err(0);\n    }\n    else {\n        wc = hb - 127;\n        for (; i < wc; i += 2) {\n            var byte = dat[++bt];\n            hw[i] = byte >> 4;\n            hw[i + 1] = byte & 15;\n        }\n        ++bt;\n    }\n    // weight exponential sum\n    var wes = 0;\n    for (i = 0; i < wc; ++i) {\n        var wt = hw[i];\n        // bits must be at most 11, same as weight\n        if (wt > 11)\n            err(0);\n        wes += wt && (1 << (wt - 1));\n    }\n    // max bits\n    var mb = msb(wes) + 1;\n    // table size\n    var ts = 1 << mb;\n    // remaining sum\n    var rem = ts - wes;\n    // must be power of 2\n    if (rem & (rem - 1))\n        err(0);\n    hw[wc++] = msb(rem) + 1;\n    for (i = 0; i < wc; ++i) {\n        var wt = hw[i];\n        ++rc[hw[i] = wt && (mb + 1 - wt)];\n    }\n    // huf buf\n    var hbuf = new u8(ts << 1);\n    //    symbols                      num bits\n    var syms = hbuf.subarray(0, ts), nb = hbuf.subarray(ts);\n    ri[mb] = 0;\n    for (i = mb; i > 0; --i) {\n        var pv = ri[i];\n        fill(nb, i, pv, ri[i - 1] = pv + rc[i] * (1 << (mb - i)));\n    }\n    if (ri[0] != ts)\n        err(0);\n    for (i = 0; i < wc; ++i) {\n        var bits = hw[i];\n        if (bits) {\n            var code = ri[bits];\n            fill(syms, i, code, ri[bits] = code + (1 << (mb - bits)));\n        }\n    }\n    return [bt, {\n            n: nb,\n            b: mb,\n            s: syms\n        }];\n};\n// Tables generated using this:\n// https://gist.github.com/101arrowz/a979452d4355992cbf8f257cbffc9edd\n// default literal length table\nvar dllt = /*#__PURE__*/ rfse(/*#__PURE__*/ new u8([\n    81, 16, 99, 140, 49, 198, 24, 99, 12, 33, 196, 24, 99, 102, 102, 134, 70, 146, 4\n]), 0, 6)[1];\n// default match length table\nvar dmlt = /*#__PURE__*/ rfse(/*#__PURE__*/ new u8([\n    33, 20, 196, 24, 99, 140, 33, 132, 16, 66, 8, 33, 132, 16, 66, 8, 33, 68, 68, 68, 68, 68, 68, 68, 68, 36, 9\n]), 0, 6)[1];\n// default offset code table\nvar doct = /*#__PURE__ */ rfse(/*#__PURE__*/ new u8([\n    32, 132, 16, 66, 102, 70, 68, 68, 68, 68, 36, 73, 2\n]), 0, 5)[1];\n// bits to baseline\nvar b2bl = function (b, s) {\n    var len = b.length, bl = new i32(len);\n    for (var i = 0; i < len; ++i) {\n        bl[i] = s;\n        s += 1 << b[i];\n    }\n    return bl;\n};\n// literal length bits\nvar llb = /*#__PURE__ */ new u8(( /*#__PURE__ */new i32([\n    0, 0, 0, 0, 16843009, 50528770, 134678020, 202050057, 269422093\n])).buffer, 0, 36);\n// literal length baseline\nvar llbl = /*#__PURE__ */ b2bl(llb, 0);\n// match length bits\nvar mlb = /*#__PURE__ */ new u8(( /*#__PURE__ */new i32([\n    0, 0, 0, 0, 0, 0, 0, 0, 16843009, 50528770, 117769220, 185207048, 252579084, 16\n])).buffer, 0, 53);\n// match length baseline\nvar mlbl = /*#__PURE__ */ b2bl(mlb, 3);\n// decode huffman stream\nvar dhu = function (dat, out, hu) {\n    var len = dat.length, ss = out.length, lb = dat[len - 1], msk = (1 << hu.b) - 1, eb = -hu.b;\n    if (!lb)\n        err(0);\n    var st = 0, btr = hu.b, pos = (len << 3) - 8 + msb(lb) - btr, i = -1;\n    for (; pos > eb && i < ss;) {\n        var cbt = pos >> 3;\n        var val = (dat[cbt] | (dat[cbt + 1] << 8) | (dat[cbt + 2] << 16)) >> (pos & 7);\n        st = ((st << btr) | val) & msk;\n        out[++i] = hu.s[st];\n        pos -= (btr = hu.n[st]);\n    }\n    if (pos != eb || i + 1 != ss)\n        err(0);\n};\n// decode huffman stream 4x\n// TODO: use workers to parallelize\nvar dhu4 = function (dat, out, hu) {\n    var bt = 6;\n    var ss = out.length, sz1 = (ss + 3) >> 2, sz2 = sz1 << 1, sz3 = sz1 + sz2;\n    dhu(dat.subarray(bt, bt += dat[0] | (dat[1] << 8)), out.subarray(0, sz1), hu);\n    dhu(dat.subarray(bt, bt += dat[2] | (dat[3] << 8)), out.subarray(sz1, sz2), hu);\n    dhu(dat.subarray(bt, bt += dat[4] | (dat[5] << 8)), out.subarray(sz2, sz3), hu);\n    dhu(dat.subarray(bt), out.subarray(sz3), hu);\n};\n// read Zstandard block\nvar rzb = function (dat, st, out) {\n    var _a;\n    var bt = st.b;\n    //    byte 0        block type\n    var b0 = dat[bt], btype = (b0 >> 1) & 3;\n    st.l = b0 & 1;\n    var sz = (b0 >> 3) | (dat[bt + 1] << 5) | (dat[bt + 2] << 13);\n    // end byte for block\n    var ebt = (bt += 3) + sz;\n    if (btype == 1) {\n        if (bt >= dat.length)\n            return;\n        st.b = bt + 1;\n        if (out) {\n            fill(out, dat[bt], st.y, st.y += sz);\n            return out;\n        }\n        return fill(new u8(sz), dat[bt]);\n    }\n    if (ebt > dat.length)\n        return;\n    if (btype == 0) {\n        st.b = ebt;\n        if (out) {\n            out.set(dat.subarray(bt, ebt), st.y);\n            st.y += sz;\n            return out;\n        }\n        return slc(dat, bt, ebt);\n    }\n    if (btype == 2) {\n        //    byte 3        lit btype     size format\n        var b3 = dat[bt], lbt = b3 & 3, sf = (b3 >> 2) & 3;\n        // lit src size  lit cmp sz 4 streams\n        var lss = b3 >> 4, lcs = 0, s4 = 0;\n        if (lbt < 2) {\n            if (sf & 1)\n                lss |= (dat[++bt] << 4) | ((sf & 2) && (dat[++bt] << 12));\n            else\n                lss = b3 >> 3;\n        }\n        else {\n            s4 = sf;\n            if (sf < 2)\n                lss |= ((dat[++bt] & 63) << 4), lcs = (dat[bt] >> 6) | (dat[++bt] << 2);\n            else if (sf == 2)\n                lss |= (dat[++bt] << 4) | ((dat[++bt] & 3) << 12), lcs = (dat[bt] >> 2) | (dat[++bt] << 6);\n            else\n                lss |= (dat[++bt] << 4) | ((dat[++bt] & 63) << 12), lcs = (dat[bt] >> 6) | (dat[++bt] << 2) | (dat[++bt] << 10);\n        }\n        ++bt;\n        // add literals to end - can never overlap with backreferences because unused literals always appended\n        var buf = out ? out.subarray(st.y, st.y + st.m) : new u8(st.m);\n        // starting point for literals\n        var spl = buf.length - lss;\n        if (lbt == 0)\n            buf.set(dat.subarray(bt, bt += lss), spl);\n        else if (lbt == 1)\n            fill(buf, dat[bt++], spl);\n        else {\n            // huffman table\n            var hu = st.h;\n            if (lbt == 2) {\n                var hud = rhu(dat, bt);\n                // subtract description length\n                lcs += bt - (bt = hud[0]);\n                st.h = hu = hud[1];\n            }\n            else if (!hu)\n                err(0);\n            (s4 ? dhu4 : dhu)(dat.subarray(bt, bt += lcs), buf.subarray(spl), hu);\n        }\n        // num sequences\n        var ns = dat[bt++];\n        if (ns) {\n            if (ns == 255)\n                ns = (dat[bt++] | (dat[bt++] << 8)) + 0x7F00;\n            else if (ns > 127)\n                ns = ((ns - 128) << 8) | dat[bt++];\n            // symbol compression modes\n            var scm = dat[bt++];\n            if (scm & 3)\n                err(0);\n            var dts = [dmlt, doct, dllt];\n            for (var i = 2; i > -1; --i) {\n                var md = (scm >> ((i << 1) + 2)) & 3;\n                if (md == 1) {\n                    // rle buf\n                    var rbuf = new u8([0, 0, dat[bt++]]);\n                    dts[i] = {\n                        s: rbuf.subarray(2, 3),\n                        n: rbuf.subarray(0, 1),\n                        t: new u16(rbuf.buffer, 0, 1),\n                        b: 0\n                    };\n                }\n                else if (md == 2) {\n                    // accuracy log 8 for offsets, 9 for others\n                    _a = rfse(dat, bt, 9 - (i & 1)), bt = _a[0], dts[i] = _a[1];\n                }\n                else if (md == 3) {\n                    if (!st.t)\n                        err(0);\n                    dts[i] = st.t[i];\n                }\n            }\n            var _b = st.t = dts, mlt = _b[0], oct = _b[1], llt = _b[2];\n            var lb = dat[ebt - 1];\n            if (!lb)\n                err(0);\n            var spos = (ebt << 3) - 8 + msb(lb) - llt.b, cbt = spos >> 3, oubt = 0;\n            var lst = ((dat[cbt] | (dat[cbt + 1] << 8)) >> (spos & 7)) & ((1 << llt.b) - 1);\n            cbt = (spos -= oct.b) >> 3;\n            var ost = ((dat[cbt] | (dat[cbt + 1] << 8)) >> (spos & 7)) & ((1 << oct.b) - 1);\n            cbt = (spos -= mlt.b) >> 3;\n            var mst = ((dat[cbt] | (dat[cbt + 1] << 8)) >> (spos & 7)) & ((1 << mlt.b) - 1);\n            for (++ns; --ns;) {\n                var llc = llt.s[lst];\n                var lbtr = llt.n[lst];\n                var mlc = mlt.s[mst];\n                var mbtr = mlt.n[mst];\n                var ofc = oct.s[ost];\n                var obtr = oct.n[ost];\n                cbt = (spos -= ofc) >> 3;\n                var ofp = 1 << ofc;\n                var off = ofp + (((dat[cbt] | (dat[cbt + 1] << 8) | (dat[cbt + 2] << 16) | (dat[cbt + 3] << 24)) >>> (spos & 7)) & (ofp - 1));\n                cbt = (spos -= mlb[mlc]) >> 3;\n                var ml = mlbl[mlc] + (((dat[cbt] | (dat[cbt + 1] << 8) | (dat[cbt + 2] << 16)) >> (spos & 7)) & ((1 << mlb[mlc]) - 1));\n                cbt = (spos -= llb[llc]) >> 3;\n                var ll = llbl[llc] + (((dat[cbt] | (dat[cbt + 1] << 8) | (dat[cbt + 2] << 16)) >> (spos & 7)) & ((1 << llb[llc]) - 1));\n                cbt = (spos -= lbtr) >> 3;\n                lst = llt.t[lst] + (((dat[cbt] | (dat[cbt + 1] << 8)) >> (spos & 7)) & ((1 << lbtr) - 1));\n                cbt = (spos -= mbtr) >> 3;\n                mst = mlt.t[mst] + (((dat[cbt] | (dat[cbt + 1] << 8)) >> (spos & 7)) & ((1 << mbtr) - 1));\n                cbt = (spos -= obtr) >> 3;\n                ost = oct.t[ost] + (((dat[cbt] | (dat[cbt + 1] << 8)) >> (spos & 7)) & ((1 << obtr) - 1));\n                if (off > 3) {\n                    st.o[2] = st.o[1];\n                    st.o[1] = st.o[0];\n                    st.o[0] = off -= 3;\n                }\n                else {\n                    var idx = off - (ll != 0);\n                    if (idx) {\n                        off = idx == 3 ? st.o[0] - 1 : st.o[idx];\n                        if (idx > 1)\n                            st.o[2] = st.o[1];\n                        st.o[1] = st.o[0];\n                        st.o[0] = off;\n                    }\n                    else\n                        off = st.o[0];\n                }\n                for (var i = 0; i < ll; ++i) {\n                    buf[oubt + i] = buf[spl + i];\n                }\n                oubt += ll, spl += ll;\n                var stin = oubt - off;\n                if (stin < 0) {\n                    var len = -stin;\n                    var bs = st.e + stin;\n                    if (len > ml)\n                        len = ml;\n                    for (var i = 0; i < len; ++i) {\n                        buf[oubt + i] = st.w[bs + i];\n                    }\n                    oubt += len, ml -= len, stin = 0;\n                }\n                for (var i = 0; i < ml; ++i) {\n                    buf[oubt + i] = buf[stin + i];\n                }\n                oubt += ml;\n            }\n            if (oubt != spl) {\n                while (spl < buf.length) {\n                    buf[oubt++] = buf[spl++];\n                }\n            }\n            else\n                oubt = buf.length;\n            if (out)\n                st.y += oubt;\n            else\n                buf = slc(buf, 0, oubt);\n        }\n        else {\n            if (out) {\n                st.y += lss;\n                if (spl) {\n                    for (var i = 0; i < lss; ++i) {\n                        buf[i] = buf[spl + i];\n                    }\n                }\n            }\n            else if (spl)\n                buf = slc(buf, spl);\n        }\n        st.b = ebt;\n        return buf;\n    }\n    err(2);\n};\n// concat\nvar cct = function (bufs, ol) {\n    if (bufs.length == 1)\n        return bufs[0];\n    var buf = new u8(ol);\n    for (var i = 0, b = 0; i < bufs.length; ++i) {\n        var chk = bufs[i];\n        buf.set(chk, b);\n        b += chk.length;\n    }\n    return buf;\n};\n/**\n * Decompresses Zstandard data\n * @param dat The input data\n * @param buf The output buffer. If unspecified, the function will allocate\n *            exactly enough memory to fit the decompressed data. If your\n *            data has multiple frames and you know the output size, specifying\n *            it will yield better performance.\n * @returns The decompressed data\n */\nreturn function decompress(dat, buf) {\n    var bt = 0, bufs = [], nb = +!buf, ol = 0;\n    for (; dat.length;) {\n        var st = rzfh(dat, nb || buf);\n        if (typeof st == 'object') {\n            if (nb) {\n                buf = null;\n                if (st.w.length == st.u) {\n                    bufs.push(buf = st.w);\n                    ol += st.u;\n                }\n            }\n            else {\n                bufs.push(buf);\n                st.e = 0;\n            }\n            for (; !st.l;) {\n                var blk = rzb(dat, st, buf);\n                if (!blk)\n                    err(5);\n                if (buf)\n                    st.e = st.y;\n                else {\n                    bufs.push(blk);\n                    ol += blk.length;\n                    cpw(st.w, 0, blk.length);\n                    st.w.set(blk, st.w.length - blk.length);\n                }\n            }\n            bt = st.b + (st.c * 4);\n        }\n        else\n            bt = st;\n        dat = dat.subarray(bt);\n    }\n    return cct(bufs, ol);\n}\n}) ()\n\n\n//Provides: caml_decompress_input\n//Version: < 5.1.0\nvar caml_decompress_input = null\n\n//Provides: caml_decompress_input\n//Version: >= 5.1.0\n//Version: < 5.1.1\n//Requires: zstd_decompress\nvar caml_decompress_input = zstd_decompress;\n\n//Provides: caml_decompress_input\n//Version: >= 5.1.1\n//Version: < 5.2.0\nvar caml_decompress_input = null\n\n//Provides: caml_decompress_input\n//Version: >= 5.2\n//Requires: zstd_decompress\nvar caml_decompress_input = zstd_decompress;\n\n//Provides: caml_zstd_initialize\n//Requires: caml_decompress_input\n//Requires: zstd_decompress\n//Version: >= 5.1.1\nfunction caml_zstd_initialize(unit) {\n  caml_decompress_input = zstd_decompress;\n  return 1\n}\n\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// Weak API\n\n//Provides: caml_ephe_key_offset\nvar caml_ephe_key_offset = 3\n\n//Provides: caml_ephe_data_offset\nvar caml_ephe_data_offset = 2\n\n//Provides: caml_ephe_set_key\n//Requires: caml_invalid_argument, caml_ephe_key_offset\nfunction caml_ephe_set_key(x, i, v) {\n  if(i < 0 || caml_ephe_key_offset + i >= x.length)\n    caml_invalid_argument (\"Weak.set\");\n  if (v instanceof Object && globalThis.WeakRef) {\n    if(x[1].register) x[1].register(v, undefined, v);\n    x[caml_ephe_key_offset + i] = new globalThis.WeakRef(v);\n  }\n  else x[caml_ephe_key_offset + i] = v;\n  return 0\n}\n\n//Provides: caml_ephe_unset_key\n//Requires: caml_invalid_argument, caml_ephe_key_offset\nfunction caml_ephe_unset_key(x, i) {\n  if(i < 0 || caml_ephe_key_offset + i >= x.length)\n    caml_invalid_argument (\"Weak.set\");\n  if(globalThis.WeakRef && x[caml_ephe_key_offset + i] instanceof globalThis.WeakRef && x[1].unregister) {\n    var old = x[caml_ephe_key_offset + i].deref();\n    if(old !== undefined) {\n      var count = 0\n      for(var j = caml_ephe_key_offset; j < x.length; j++){\n        var key = x[j];\n        if(key instanceof globalThis.WeakRef){\n          key = key.deref()\n          if(key === old) count++;\n        }\n      }\n      if(count == 1) x[1].unregister(old);\n    }\n  }\n  x[caml_ephe_key_offset + i] = undefined;\n  return 0\n}\n\n\n//Provides: caml_ephe_create\n//Requires: caml_weak_create, caml_ephe_data_offset\nfunction caml_ephe_create (n) {\n  var x = caml_weak_create(n);\n  return x;\n}\n\n//Provides: caml_weak_create\n//Requires: caml_ephe_key_offset, caml_invalid_argument,caml_ephe_data_offset\nfunction caml_weak_create (n) {\n  if (n < 0) caml_invalid_argument (\"Weak.create\");\n  var x = [251,\"caml_ephe_list_head\"];\n  x.length = caml_ephe_key_offset + n;\n  return x;\n}\n\n//Provides: caml_weak_set\n//Requires: caml_invalid_argument\n//Requires: caml_ephe_set_key, caml_ephe_unset_key\nfunction caml_weak_set(x, i, v) {\n  if(v == 0) caml_ephe_unset_key(x,i)\n  else caml_ephe_set_key(x,i,v[1])\n  return 0;\n}\n//Provides: caml_ephe_get_key\n//Requires: caml_ephe_key_offset, caml_invalid_argument\n//Alias: caml_weak_get\nfunction caml_ephe_get_key(x, i) {\n  if(i < 0 || caml_ephe_key_offset + i >= x.length)\n    caml_invalid_argument (\"Weak.get_key\");\n  var weak = x[caml_ephe_key_offset + i ];\n  if(globalThis.WeakRef && weak instanceof globalThis.WeakRef) weak = weak.deref();\n  return (weak===undefined)?0:[0, weak];\n}\n//Provides: caml_ephe_get_key_copy\n//Requires: caml_ephe_get_key,caml_ephe_key_offset\n//Requires: caml_obj_dup, caml_invalid_argument\n//Alias: caml_weak_get_copy\nfunction caml_ephe_get_key_copy(x, i) {\n  if(i < 0 || caml_ephe_key_offset + i >= x.length)\n    caml_invalid_argument (\"Weak.get_copy\");\n  var y = caml_ephe_get_key(x, i);\n  if (y === 0) return y;\n  var z = y[1];\n  if (z instanceof Array) return [0, caml_obj_dup(z)];\n  return y;\n}\n\n//Provides: caml_ephe_check_key mutable\n//Requires: caml_ephe_key_offset\n//Alias: caml_weak_check\nfunction caml_ephe_check_key(x, i) {\n  var weak = x[caml_ephe_key_offset + i];\n  if(globalThis.WeakRef && weak instanceof globalThis.WeakRef) weak = weak.deref();\n  if(weak===undefined)\n    return 0;\n  else\n    return 1;\n}\n\n//Provides: caml_ephe_blit_key\n//Requires: caml_array_blit\n//Requires: caml_ephe_key_offset\n//Alias: caml_weak_blit\nfunction caml_ephe_blit_key(a1, i1, a2, i2, len) {\n  // minus one because caml_array_blit works on ocaml array\n  caml_array_blit(a1, caml_ephe_key_offset + i1 - 1,\n                  a2, caml_ephe_key_offset + i2 - 1,\n                  len);\n  return 0;\n}\n\n//Provides: caml_ephe_blit_data\n//Requires: caml_ephe_data_offset, caml_ephe_set_data, caml_ephe_unset_data\nfunction caml_ephe_blit_data(src, dst){\n  var n = src[caml_ephe_data_offset];\n  if(n === undefined) caml_ephe_unset_data(dst);\n  else caml_ephe_set_data(dst, n);\n  return 0;\n}\n\n//Provides: caml_ephe_get_data\n//Requires: caml_ephe_data_offset\nfunction caml_ephe_get_data(x){\n  if(x[caml_ephe_data_offset] === undefined)\n    return 0;\n  else\n    return [0, x[caml_ephe_data_offset]];\n}\n\n//Provides: caml_ephe_get_data_copy\n//Requires: caml_ephe_data_offset\n//Requires: caml_obj_dup\nfunction caml_ephe_get_data_copy(x){\n  if(x[caml_ephe_data_offset] === undefined)\n    return 0;\n  else\n    return [0, caml_obj_dup(x[caml_ephe_data_offset])];\n}\n\n//Provides: caml_ephe_set_data\n//Requires: caml_ephe_data_offset, caml_ephe_key_offset, caml_ephe_unset_data\nfunction caml_ephe_set_data(x, data){\n  if(globalThis.FinalizationRegistry && globalThis.WeakRef) {\n    if(! (x[1] instanceof globalThis.FinalizationRegistry)) {\n      x[1] = new globalThis.FinalizationRegistry(function () { caml_ephe_unset_data(x) });\n      //register all keys\n      for(var j = caml_ephe_key_offset; j < x.length; j++){\n        var key = x[j];\n        if(key instanceof globalThis.WeakRef) {\n          key = key.deref();\n          if(key) x[1].register(key, undefined, key);\n        }\n      }\n    }\n  }\n  x[caml_ephe_data_offset] = data;\n  return 0;\n}\n\n//Provides: caml_ephe_unset_data\n//Requires: caml_ephe_data_offset, caml_ephe_key_offset\nfunction caml_ephe_unset_data(x){\n  if(globalThis.FinalizationRegistry && globalThis.WeakRef) {\n    if(x[1] instanceof globalThis.FinalizationRegistry){\n      //unregister all keys\n      for(var j = caml_ephe_key_offset; j < x.length; j++){\n        var key = x[j];\n        if(key instanceof globalThis.WeakRef) {\n          key = key.deref();\n          if(key) x[1].unregister(key);\n        }\n      }\n    }\n  }\n  x[caml_ephe_data_offset] = undefined;\n  return 0;\n}\n\n//Provides: caml_ephe_check_data\n//Requires: caml_ephe_data_offset\nfunction caml_ephe_check_data(x){\n  if(x[caml_ephe_data_offset] === undefined)\n    return 0;\n  else\n    return 1;\n}\n","\n\n//Provides: caml_gc_minor\nfunction caml_gc_minor(unit){\n  //available with [node --expose-gc]\n  if(typeof globalThis.gc == 'function') globalThis.gc(true);\n  return 0\n}\n//Provides: caml_gc_major\nfunction caml_gc_major(unit){\n  //available with [node --expose-gc]\n  if(typeof globalThis.gc == 'function') globalThis.gc();\n  return 0\n}\n//Provides: caml_gc_full_major\nfunction caml_gc_full_major(unit){\n  //available with [node --expose-gc]\n  if(typeof globalThis.gc == 'function') globalThis.gc();\n  return 0\n}\n//Provides: caml_gc_compaction\nfunction caml_gc_compaction(){ return 0}\n//Provides: caml_gc_counters\nfunction caml_gc_counters() { return [254,0,0,0] }\n//Provides: caml_gc_quick_stat\n//Version: >= 4.12\nfunction caml_gc_quick_stat(){\n  return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n}\n\n//Provides: caml_gc_quick_stat\n//Version: < 4.12\nfunction caml_gc_quick_stat(){\n  return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n}\n//Provides: caml_gc_stat\n//Requires: caml_gc_quick_stat\nfunction caml_gc_stat() {\n  return caml_gc_quick_stat();\n}\n\n//Provides: caml_gc_set\nfunction caml_gc_set(_control) {\n  return 0;\n}\n\n//Provides: caml_gc_get\nfunction caml_gc_get(){\n  return [0,0,0,0,0,0,0,0,0,0,0,0]\n}\n\n//Provides: caml_memprof_set\nfunction caml_memprof_set(_control) {\n  return 0;\n}\n\n//Provides: caml_final_register const\nfunction caml_final_register () { return 0; }\n\n//Provides: caml_final_register_called_without_value\nvar all_finalizers = new globalThis.Set()\nfunction caml_final_register_called_without_value (cb, a) {\n  if(globalThis.FinalizationRegistry && a instanceof Object) {\n    var x = new globalThis.FinalizationRegistry(function (x){all_finalizers.delete(x); cb(0); return;});\n    x.register(a,x);\n    all_finalizers.add(x);\n  }\n  return 0;\n}\n\n//Provides: caml_final_release const\nfunction caml_final_release () { return 0; }\n\n//Provides: caml_memprof_start\nfunction caml_memprof_start(rate,stack_size,tracker){\n  return 0;\n}\n\n//Provides: caml_memprof_stop\nfunction caml_memprof_stop(unit) {\n  return 0;\n}\n\n//Provides: caml_memprof_discard\nfunction caml_memprof_discard(t) { return 0 }\n\n//Provides: caml_eventlog_resume\nfunction caml_eventlog_resume(unit) { return 0; }\n\n//Provides: caml_eventlog_pause\nfunction caml_eventlog_pause(unit) { return 0; }\n\n//Provides: caml_gc_huge_fallback_count\nfunction caml_gc_huge_fallback_count(unit) { return 0; }\n\n//Provides: caml_gc_major_slice\nfunction caml_gc_major_slice(work) { return 0; }\n\n//Provides: caml_gc_minor_words\nfunction caml_gc_minor_words(unit) { return 0; }\n\n//Provides: caml_get_minor_free\nfunction caml_get_minor_free(unit) { return 0; }\n\n//Provides: caml_get_major_bucket\nfunction caml_get_major_bucket(n) { return 0; }\n\n//Provides: caml_get_major_credit\nfunction caml_get_major_credit(n) { return 0; }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Format\n\n//Provides: caml_parse_format\n//Requires: caml_jsbytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_jsbytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n      { justify:'+', signstyle:'-', filler:' ', alternate:false,\n        base:0, signedconv:false, width:0, uppercase:false,\n        sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n      break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_string_of_jsbytes\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += f.uppercase?\"0X\":\"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_string_of_jsbytes(buffer);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Hugo Heuzard\n\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_gr_state\nvar caml_gr_state;\n\n//Provides: caml_gr_state_get\n//Requires: caml_gr_state\n//Requires: caml_named_value, caml_string_of_jsbytes\n//Requires: caml_maybe_attach_backtrace\nfunction caml_gr_state_get() {\n  if(caml_gr_state) {\n    return caml_gr_state;\n  }\n  throw caml_maybe_attach_backtrace([0,caml_named_value(\"Graphics.Graphic_failure\"), caml_string_of_jsbytes(\"Not initialized\")]);\n}\n//Provides: caml_gr_state_set\n//Requires: caml_gr_state,caml_gr_state_init\nfunction caml_gr_state_set(ctx) {\n  caml_gr_state=ctx;\n  caml_gr_state_init()\n  return 0;\n}\n\n//Provides: caml_gr_open_graph\n//Requires: caml_gr_state_create\n//Requires: caml_gr_state_set\n//Requires: caml_failwith\n//Requires: caml_jsstring_of_string\nfunction caml_gr_open_graph(info){\n  var info = caml_jsstring_of_string(info);\n  function get(name){\n    var res = info.match(\"(^|,) *\"+name+\" *= *([a-zA-Z0-9_]+) *(,|$)\");\n    if(res) return res[2];\n  }\n  var specs = [];\n  if(!(info==\"\")) specs.push(info);\n  var target = get(\"target\");\n  if(!target) target=\"\";\n  var status = get(\"status\");\n  if(!status) specs.push(\"status=1\")\n\n  var w = get(\"width\");\n  w = w?parseInt(w):200;\n  specs.push(\"width=\"+w);\n\n  var h = get(\"height\");\n  h = h?parseInt(h):200;\n  specs.push(\"height=\"+h);\n\n  var win = globalThis.open(\"about:blank\",target,specs.join(\",\"));\n  if(!win) {caml_failwith(\"Graphics.open_graph: cannot open the window\")}\n  var doc = win.document;\n  var canvas = doc.createElement(\"canvas\");\n  canvas.width = w;\n  canvas.height = h;\n  var ctx = caml_gr_state_create(canvas,w,h);\n  ctx.set_title = function (title) {\n    doc.title = title;\n  };\n  caml_gr_state_set(ctx);\n  var body = doc.body;\n  body.style.margin = \"0px\";\n  body.appendChild(canvas);\n  return 0;\n}\n\n//Provides: caml_gr_state_init\n//Requires: caml_gr_state\n//Requires: caml_gr_set_color,caml_gr_moveto,caml_gr_resize_window\n//Requires: caml_gr_set_line_width,caml_gr_set_text_size,caml_gr_set_font\n//Requires: caml_gr_set_window_title\nfunction caml_gr_state_init(){\n  caml_gr_moveto(caml_gr_state.x,caml_gr_state.y);\n  caml_gr_resize_window(caml_gr_state.width,caml_gr_state.height);\n  caml_gr_set_line_width(caml_gr_state.line_width);\n  caml_gr_set_text_size(caml_gr_state.text_size);\n  caml_gr_set_font(caml_gr_state.font);\n  caml_gr_set_color(caml_gr_state.color);\n  caml_gr_set_window_title(caml_gr_state.title);\n  //caml_gr_resize_window might reset some canvas' properties\n  caml_gr_state.context.textBaseline = 'bottom';\n}\n\n//Provides: caml_gr_state_create\n//Requires: caml_string_of_jsbytes\nfunction caml_gr_state_create(canvas,w,h){\n  var context = canvas.getContext(\"2d\");\n  return {\n    context: context,\n    canvas : canvas,\n    x : 0,\n    y : 0,\n    width : w,\n    height : h,\n    line_width : 1,\n    font : caml_string_of_jsbytes(\"fixed\"),\n    text_size : 26,\n    color : 0x000000,\n    title : caml_string_of_jsbytes(\"\")\n  };\n}\n\n//Provides: caml_gr_doc_of_state\nfunction caml_gr_doc_of_state(state) {\n  if(state.canvas.ownerDocument)\n    return state.canvas.ownerDocument;\n}\n\n//Provides: caml_gr_close_graph\n//Requires: caml_gr_state_get\nfunction caml_gr_close_graph(){\n  var s = caml_gr_state_get();\n  s.canvas.width = 0;\n  s.canvas.height = 0;\n  return 0;\n}\n\n//Provides: caml_gr_set_window_title\n//Requires: caml_gr_state_get\n//Requires: caml_jsstring_of_string\nfunction caml_gr_set_window_title(name){\n  var s = caml_gr_state_get();\n  s.title = name;\n  var jsname = caml_jsstring_of_string(name);\n  if(s.set_title) s.set_title(jsname);\n  return 0;\n}\n\n//Provides: caml_gr_resize_window\n//Requires: caml_gr_state_get\nfunction caml_gr_resize_window(w,h){\n  var s = caml_gr_state_get()\n  s.width = w;\n  s.height = h;\n  s.canvas.width = w;\n  s.canvas.height = h;\n  return 0;\n}\n\n//Provides: caml_gr_clear_graph\n//Requires: caml_gr_state_get\nfunction caml_gr_clear_graph(){\n  var s = caml_gr_state_get();\n  s.canvas.width = s.width;\n  s.canvas.height = s.height;\n  //  s.context.strokeRect (0., 0., s.width, s.height);\n  return 0;\n}\n\n//Provides: caml_gr_size_x\n//Requires: caml_gr_state_get\nfunction caml_gr_size_x(){\n  var s = caml_gr_state_get();\n  return s.width;\n}\n//Provides: caml_gr_size_y\n//Requires: caml_gr_state_get\nfunction caml_gr_size_y(){\n  var s = caml_gr_state_get();\n  return s.height;\n}\n\n\n//Provides: caml_gr_set_color\n//Requires: caml_gr_state_get\nfunction caml_gr_set_color(color){\n  var s = caml_gr_state_get();\n  function convert(number) {\n    var str = '' + number.toString(16);\n    while (str.length < 2) str = '0' + str;\n    return str;\n  }\n  var\n  r = (color >> 16) & 0xff,\n  g = (color >> 8)  & 0xff,\n  b = (color >> 0)  & 0xff;\n  s.color=color;\n  var c_str = '#' + convert(r) + convert(g) + convert(b);\n  s.context.fillStyle =   c_str;\n  s.context.strokeStyle = c_str;\n  return 0;\n}\n//Provides: caml_gr_plot\n//Requires: caml_gr_state_get\nfunction caml_gr_plot(x,y){\n  var s = caml_gr_state_get();\n  var im=s.context.createImageData(1,1);\n  var d = im.data;\n  var color = s.color;\n  d[0] = (color >> 16) & 0xff; //r\n  d[1] = (color >> 8)  & 0xff, //g\n  d[2] = (color >> 0)  & 0xff; //b\n  d[3] = 0xFF; //a\n  s.x=x;\n  s.y=y;\n  s.context.putImageData(im,x,s.height - y);\n  return 0;\n}\n\n//Provides: caml_gr_point_color\n//Requires: caml_gr_state_get\nfunction caml_gr_point_color(x,y){\n  var s = caml_gr_state_get();\n  var im=s.context.getImageData(x,s.height - y,1,1);\n  var d = im.data;\n  return (d[0] << 16) + (d[1] << 8) + d[2];\n}\n//Provides: caml_gr_moveto\n//Requires: caml_gr_state_get\nfunction caml_gr_moveto(x,y){\n  var s = caml_gr_state_get();\n  s.x=x;\n  s.y=y;\n  return 0;\n}\n\n//Provides: caml_gr_current_x\n//Requires: caml_gr_state_get\nfunction caml_gr_current_x(){\n  var s = caml_gr_state_get();\n  return s.x\n}\n//Provides: caml_gr_current_y\n//Requires: caml_gr_state_get\nfunction caml_gr_current_y(){\n  var s = caml_gr_state_get();\n  return s.y\n}\n//Provides: caml_gr_lineto\n//Requires: caml_gr_state_get\nfunction caml_gr_lineto(x,y){\n  var s = caml_gr_state_get();\n  s.context.beginPath();\n  s.context.moveTo(s.x,s.height - s.y);\n  s.context.lineTo(x,s.height - y);\n  s.context.stroke();\n  s.x=x;\n  s.y=y;\n  return 0;\n}\n//Provides: caml_gr_draw_rect\n//Requires: caml_gr_state_get\nfunction caml_gr_draw_rect(x,y,w,h){\n  var s = caml_gr_state_get();\n  s.context.strokeRect(x,s.height - y,w,-h);\n  return 0;\n}\n\n//Provides: caml_gr_arc_aux\nfunction caml_gr_arc_aux(ctx,cx,cy,ry,rx,a1,a2){\n  while(a1>a2) a2+=360;\n  a1 /= 180;\n  a2 /= 180;\n  var rot = 0,xPos,yPos,xPos_prev,yPos_prev;\n  var space = 2;\n  var num = (((a2 - a1) * Math.PI * ((rx+ry)/2)) / space) | 0;\n  var delta = (a2 - a1) * Math.PI / num;\n  var i = a1 * Math.PI;\n  for (var j=0;j<=num;j++){\n    xPos = cx - (rx * Math.sin(i)) * Math.sin(rot * Math.PI) + (ry * Math.cos(i)) * Math.cos(rot * Math.PI);\n    xPos = xPos.toFixed(2);\n    yPos = cy + (ry * Math.cos(i)) * Math.sin(rot * Math.PI) + (rx * Math.sin(i)) * Math.cos(rot * Math.PI);\n    yPos = yPos.toFixed(2);\n    if (j==0) {\n      ctx.moveTo(xPos, yPos);\n    } else if (xPos_prev!=xPos || yPos_prev!=yPos){\n      ctx.lineTo(xPos, yPos);\n    }\n    xPos_prev=xPos;\n    yPos_prev=yPos;\n    i-= delta;//ccw\n  }\n  return 0;\n}\n\n\n//Provides: caml_gr_draw_arc\n//Requires: caml_gr_state_get, caml_gr_arc_aux\nfunction caml_gr_draw_arc(x,y,rx,ry,a1,a2){\n  var s = caml_gr_state_get();\n  s.context.beginPath();\n  caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);\n  s.context.stroke();\n  return 0;\n}\n\n//Provides: caml_gr_set_line_width\n//Requires: caml_gr_state_get\nfunction caml_gr_set_line_width(w){\n  var s = caml_gr_state_get();\n  s.line_width = w;\n  s.context.lineWidth = w\n  return 0;\n}\n\n//Provides: caml_gr_fill_rect\n//Requires: caml_gr_state_get\nfunction caml_gr_fill_rect(x,y,w,h){\n  var s = caml_gr_state_get();\n  s.context.fillRect(x,s.height - y,w,-h);\n  return 0;\n}\n//Provides: caml_gr_fill_poly\n//Requires: caml_gr_state_get\nfunction caml_gr_fill_poly(ar){\n  var s = caml_gr_state_get();\n  s.context.beginPath();\n  s.context.moveTo(ar[1][1],s.height - ar[1][2]);\n  for(var i = 2; i < ar.length; i++)\n    s.context.lineTo(ar[i][1],s.height - ar[i][2]);\n  s.context.lineTo(ar[1][1],s.height - ar[1][2]);\n  s.context.fill();\n  return 0;\n}\n\n//Provides: caml_gr_fill_arc\n//Requires: caml_gr_state_get, caml_gr_arc_aux\nfunction caml_gr_fill_arc(x,y,rx,ry,a1,a2){\n  var s = caml_gr_state_get();\n  s.context.beginPath();\n  caml_gr_arc_aux(s.context,x,s.height - y,rx,ry,a1,a2);\n  s.context.fill();\n  return 0;\n}\n\n//Provides: caml_gr_draw_str\n//Requires: caml_gr_state_get\nfunction caml_gr_draw_str(str){\n  var s = caml_gr_state_get();\n  var m = s.context.measureText(str);\n  var dx = m.width;\n  s.context.fillText(str,s.x,s.height - s.y);\n  s.x += dx | 0;\n  return 0;\n}\n\n//Provides: caml_gr_draw_char\n//Requires: caml_gr_draw_str\nfunction caml_gr_draw_char(c){\n  caml_gr_draw_str(String.fromCharCode(c));\n  return 0;\n}\n\n//Provides: caml_gr_draw_string\n//Requires: caml_gr_draw_str\n//Requires: caml_jsstring_of_string\nfunction caml_gr_draw_string(str){\n  caml_gr_draw_str(caml_jsstring_of_string(str));\n  return 0;\n}\n\n//Provides: caml_gr_set_font\n//Requires: caml_gr_state_get\n//Requires: caml_jsstring_of_string\nfunction caml_gr_set_font(f){\n  var s = caml_gr_state_get();\n  s.font = f;\n  s.context.font = s.text_size + \"px \" + caml_jsstring_of_string(s.font);\n  return 0;\n}\n\n//Provides: caml_gr_set_text_size\n//Requires: caml_gr_state_get\n//Requires: caml_jsstring_of_string\nfunction caml_gr_set_text_size(size){\n  var s = caml_gr_state_get();\n  s.text_size = size;\n  s.context.font = s.text_size + \"px \" + caml_jsstring_of_string(s.font);\n  return 0;\n}\n\n//Provides: caml_gr_text_size\n//Requires: caml_gr_state_get\n//Requires: caml_jsstring_of_string\nfunction caml_gr_text_size(txt){\n  var s = caml_gr_state_get();\n  var w = s.context.measureText(caml_jsstring_of_string(txt)).width;\n  return [0,w,s.text_size];\n}\n\n\n//Provides: caml_gr_make_image\n//Requires: caml_gr_state_get\nfunction caml_gr_make_image(arr){\n  var s = caml_gr_state_get();\n  var h = arr.length - 1 ;\n  var w = arr[1].length - 1;\n  var im = s.context.createImageData(w,h);\n  for(var i=0;i<h;i++){\n    for(var j=0;j<w;j++){\n      var c = arr[i+1][j+1];\n      var o = i*(w*4) + (j * 4);\n      if(c == -1) {\n        im.data[o + 0] = 0;\n        im.data[o + 1] = 0;\n        im.data[o + 2] = 0;\n        im.data[o + 3] = 0;\n      } else {\n        im.data[o + 0] = c >> 16 & 0xff;\n        im.data[o + 1] = c >>  8 & 0xff;\n        im.data[o + 2] = c >>  0 & 0Xff;\n        im.data[o + 3] = 0xff;\n      }\n    }\n  }\n  return im\n}\n//Provides: caml_gr_dump_image\n//Requires: caml_gr_state_get\nfunction caml_gr_dump_image(im){\n  var data = [0]\n  for(var i=0; i<im.height;i++){\n    data[i+1] = [0]\n    for(var j=0; j<im.width;j++){\n      var o = i*(im.width*4) + (j * 4),\n          r = im.data[o+0],\n          g = im.data[o+1],\n          b = im.data[o+2];\n      data[i+1][j+1] = (r << 16) + (g << 8) + b\n    }\n  }\n  return data\n}\n//Provides: caml_gr_draw_image\n//Requires: caml_gr_state_get\nfunction caml_gr_draw_image(im,x,y){\n  var s = caml_gr_state_get();\n  if(!im.image) {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = s.width;\n    canvas.height = s.height;\n    canvas.getContext(\"2d\").putImageData(im,0,0);\n    var image = new globalThis.Image();\n    image.onload = function () {\n      s.context.drawImage(image,x,s.height - im.height - y);\n      im.image = image;\n    }\n    image.src = canvas.toDataURL(\"image/png\");\n  } else {\n    s.context.drawImage(im.image,x,s.height - im.height - y);\n  }\n  return 0;\n}\n//Provides: caml_gr_create_image\n//Requires: caml_gr_state_get\nfunction caml_gr_create_image(x,y){\n  var s = caml_gr_state_get();\n  return s.context.createImageData(x,y);\n}\n//Provides: caml_gr_blit_image\n//Requires: caml_gr_state_get\nfunction caml_gr_blit_image(im,x,y){\n  var s = caml_gr_state_get();\n  var im2 = s.context.getImageData(x,s.height - im.height - y,im.width,im.height);\n  for (var i = 0; i < im2.data.length; i+=4){\n    im.data[i] = im2.data[i];\n    im.data[i+1] = im2.data[i+1];\n    im.data[i+2] = im2.data[i+2];\n    im.data[i+3] = im2.data[i+3];\n  }\n  return 0;\n}\n//Provides: caml_gr_sigio_handler\nfunction caml_gr_sigio_handler(){return 0}\n//Provides: caml_gr_sigio_signal\nfunction caml_gr_sigio_signal(){return 0}\n//Provides: caml_gr_wait_event\n//Requires: caml_failwith\nfunction caml_gr_wait_event(_evl){\n  caml_failwith(\"caml_gr_wait_event not Implemented: use Graphics_js instead\");\n}\n\n//Provides: caml_gr_synchronize\n//Requires: caml_failwith\nfunction caml_gr_synchronize () {\n  caml_failwith(\"caml_gr_synchronize not Implemented\");\n}\n//Provides: caml_gr_remember_mode\n//Requires: caml_failwith\nfunction caml_gr_remember_mode () {\n  caml_failwith(\"caml_gr_remember_mode not Implemented\");\n}\n//Provides: caml_gr_display_mode\n//Requires: caml_failwith\nfunction caml_gr_display_mode() {\n  caml_failwith(\"caml_gr_display_mode not Implemented\");\n}\n\n//Provides: caml_gr_window_id\n//Requires: caml_failwith\nfunction caml_gr_window_id(a) {\n  caml_failwith(\"caml_gr_window_id not Implemented\");\n}\n\n//Provides: caml_gr_open_subwindow\n//Requires: caml_failwith\nfunction caml_gr_open_subwindow(a,b,c,d) {\n  caml_failwith(\"caml_gr_open_subwindow not Implemented\");\n}\n\n//Provides: caml_gr_close_subwindow\n//Requires: caml_failwith\nfunction caml_gr_close_subwindow(a) {\n  caml_failwith(\"caml_gr_close_subwindow not Implemented\");\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib: code specific to Js_of_ocaml\n\n//Provides: caml_js_on_ie const\nfunction caml_js_on_ie () {\n  var ua =\n      (globalThis.navigator&&globalThis.navigator.userAgent)\n      ?globalThis.navigator.userAgent:\"\";\n  return ua.indexOf(\"MSIE\") != -1 && ua.indexOf(\"Opera\") != 0;\n}\n\n//Provides: caml_js_html_escape const (const)\nvar caml_js_regexps = { amp:/&/g, lt:/</g, quot:/\\\"/g, all:/[&<\\\"]/ };\nfunction caml_js_html_escape (s) {\n  if (!caml_js_regexps.all.test(s)) return s;\n  return s.replace(caml_js_regexps.amp, \"&amp;\")\n    .replace(caml_js_regexps.lt, \"&lt;\")\n    .replace(caml_js_regexps.quot, \"&quot;\");\n}\n\n//Provides: caml_js_html_entities\n//Requires: caml_failwith\nfunction caml_js_html_entities(s) {\n  var entity = /^&#?[0-9a-zA-Z]+;$/\n  if(s.match(entity))\n  {\n    var str, temp = document.createElement('p');\n    temp.innerHTML= s;\n    str= temp.textContent || temp.innerText;\n    temp=null;\n    return str;\n  }\n  else {\n    caml_failwith(\"Invalid entity \" + s);\n  }\n}\n\n//Provides: caml_js_get_console const\nfunction caml_js_get_console () {\n  var c = console;\n  var m = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\", \"dir\", \"dirxml\",\n           \"trace\", \"group\", \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\"];\n  function f () {}\n  for (var i = 0; i < m.length; i++) if (!c[m[i]]) c[m[i]]=f;\n  return c;\n}\n\n//Provides: caml_xmlhttprequest_create\n//Requires: caml_failwith\n//Weakdef\nfunction caml_xmlhttprequest_create(unit){\n  if(typeof globalThis.XMLHttpRequest !== 'undefined') {\n    try { return new globalThis.XMLHttpRequest } catch (e) { };\n  }\n  if(typeof globalThis.activeXObject !== 'undefined') {\n    try { return new globalThis.activeXObject(\"Msxml2.XMLHTTP\") } catch(e){ };\n    try { return new globalThis.activeXObject(\"Msxml3.XMLHTTP\") } catch(e){ };\n    try { return new globalThis.activeXObject(\"Microsoft.XMLHTTP\") } catch(e){ };\n  }\n  caml_failwith(\"Cannot create a XMLHttpRequest\");\n}\n\n//Provides: caml_js_error_of_exception\nfunction caml_js_error_of_exception(exn) {\n  if(exn.js_error) { return exn.js_error; }\n  return null;\n}\n","/***********************************************************************/\n/*                                                                     */\n/*                           Objective Caml                            */\n/*                                                                     */\n/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */\n/*                                                                     */\n/*  Copyright 1996 Institut National de Recherche en Informatique et   */\n/*  en Automatique.  All rights reserved.  This file is distributed    */\n/*  under the terms of the GNU Lesser General Public License, with     */\n/*  the special exception on linking described in file ../LICENSE.     */\n/*                                                                     */\n/***********************************************************************/\n\n/* $Id: lexing.c 6045 2004-01-01 16:42:43Z doligez $ */\n\n/* The table-driven automaton for lexers generated by camllex. */\n\n//Provides: caml_lex_array\n//Requires: caml_jsbytes_of_string\nfunction caml_lex_array(s) {\n  s = caml_jsbytes_of_string(s);\n  var l = s.length / 2;\n  var a = new Array(l);\n  for (var i = 0; i < l; i++)\n    a[i] = (s.charCodeAt(2 * i) | (s.charCodeAt(2 * i + 1) << 8)) << 16 >> 16;\n  return a;\n}\n\n//Provides: caml_lex_engine\n//Requires: caml_failwith, caml_lex_array, caml_uint8_array_of_bytes\nfunction caml_lex_engine(tbl, start_state, lexbuf) {\n  var lex_buffer = 2;\n  var lex_buffer_len = 3;\n  var lex_start_pos = 5;\n  var lex_curr_pos = 6;\n  var lex_last_pos = 7;\n  var lex_last_action = 8;\n  var lex_eof_reached = 9;\n  var lex_base = 1;\n  var lex_backtrk = 2;\n  var lex_default = 3;\n  var lex_trans = 4;\n  var lex_check = 5;\n\n  if (!tbl.lex_default) {\n    tbl.lex_base =    caml_lex_array (tbl[lex_base]);\n    tbl.lex_backtrk = caml_lex_array (tbl[lex_backtrk]);\n    tbl.lex_check =   caml_lex_array (tbl[lex_check]);\n    tbl.lex_trans =   caml_lex_array (tbl[lex_trans]);\n    tbl.lex_default = caml_lex_array (tbl[lex_default]);\n  }\n\n  var c, state = start_state;\n\n  var buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);\n\n  if (state >= 0) {\n    /* First entry */\n    lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];\n    lexbuf[lex_last_action] = -1;\n  } else {\n    /* Reentry after refill */\n    state = -state - 1;\n  }\n  for(;;) {\n    /* Lookup base address or action number for current state */\n    var base = tbl.lex_base[state];\n    if (base < 0) return -base-1;\n    /* See if it's a backtrack point */\n    var backtrk = tbl.lex_backtrk[state];\n    if (backtrk >= 0) {\n      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];\n      lexbuf[lex_last_action] = backtrk;\n    }\n    /* See if we need a refill */\n    if (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len]){\n      if (lexbuf[lex_eof_reached] == 0)\n        return -state - 1;\n      else\n        c = 256;\n    }else{\n      /* Read next input char */\n      c = buffer[lexbuf[lex_curr_pos]];\n      lexbuf[lex_curr_pos] ++;\n    }\n    /* Determine next state */\n    if (tbl.lex_check[base + c] == state)\n      state = tbl.lex_trans[base + c];\n    else\n      state = tbl.lex_default[state];\n    /* If no transition on this char, return to last backtrack point */\n    if (state < 0) {\n      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];\n      if (lexbuf[lex_last_action] == -1)\n        caml_failwith(\"lexing: empty token\");\n      else\n        return lexbuf[lex_last_action];\n    }else{\n      /* Erase the EOF condition only if the EOF pseudo-character was\n         consumed by the automaton (i.e. there was no backtrack above)\n      */\n      if (c == 256) lexbuf[lex_eof_reached] = 0;\n    }\n  }\n}\n\n/***********************************************/\n/* New lexer engine, with memory of positions  */\n/***********************************************/\n\n//Provides: caml_new_lex_engine\n//Requires: caml_failwith, caml_lex_array\n//Requires: caml_jsbytes_of_string, caml_uint8_array_of_bytes\nfunction caml_lex_run_mem(s, i, mem, curr_pos) {\n  for (;;) {\n    var dst = s.charCodeAt(i); i++;\n    if (dst == 0xff) return;\n    var src = s.charCodeAt(i); i++;\n    if (src == 0xff)\n      mem [dst + 1] = curr_pos;\n    else\n      mem [dst + 1] = mem [src + 1];\n  }\n}\n\nfunction caml_lex_run_tag(s, i, mem) {\n  for (;;) {\n    var dst = s.charCodeAt(i); i++;\n    if (dst == 0xff) return ;\n    var src = s.charCodeAt(i); i++;\n    if (src == 0xff)\n      mem [dst + 1] = -1;\n    else\n      mem [dst + 1] = mem [src + 1];\n  }\n}\n\nfunction caml_new_lex_engine(tbl, start_state, lexbuf) {\n  var lex_buffer = 2;\n  var lex_buffer_len = 3;\n  var lex_start_pos = 5;\n  var lex_curr_pos = 6;\n  var lex_last_pos = 7;\n  var lex_last_action = 8;\n  var lex_eof_reached = 9;\n  var lex_mem = 10;\n  var lex_base = 1;\n  var lex_backtrk = 2;\n  var lex_default = 3;\n  var lex_trans = 4;\n  var lex_check = 5;\n  var lex_base_code = 6;\n  var lex_backtrk_code = 7;\n  var lex_default_code = 8;\n  var lex_trans_code = 9;\n  var lex_check_code = 10;\n  var lex_code = 11;\n\n  if (!tbl.lex_default) {\n    tbl.lex_base =    caml_lex_array (tbl[lex_base]);\n    tbl.lex_backtrk = caml_lex_array (tbl[lex_backtrk]);\n    tbl.lex_check =   caml_lex_array (tbl[lex_check]);\n    tbl.lex_trans =   caml_lex_array (tbl[lex_trans]);\n    tbl.lex_default = caml_lex_array (tbl[lex_default]);\n  }\n  if (!tbl.lex_default_code) {\n    tbl.lex_base_code =    caml_lex_array (tbl[lex_base_code]);\n    tbl.lex_backtrk_code = caml_lex_array (tbl[lex_backtrk_code]);\n    tbl.lex_check_code =   caml_lex_array (tbl[lex_check_code]);\n    tbl.lex_trans_code =   caml_lex_array (tbl[lex_trans_code]);\n    tbl.lex_default_code = caml_lex_array (tbl[lex_default_code]);\n  }\n  if (tbl.lex_code == null) tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);\n\n  var c, state = start_state;\n\n  var buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);\n\n  if (state >= 0) {\n    /* First entry */\n    lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];\n    lexbuf[lex_last_action] = -1;\n  } else {\n    /* Reentry after refill */\n    state = -state - 1;\n  }\n  for(;;) {\n    /* Lookup base address or action number for current state */\n    var base = tbl.lex_base[state];\n    if (base < 0) {\n      var pc_off = tbl.lex_base_code[state];\n      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);\n      return -base-1;\n    }\n    /* See if it's a backtrack point */\n    var backtrk = tbl.lex_backtrk[state];\n    if (backtrk >= 0) {\n      var pc_off = tbl.lex_backtrk_code[state];\n      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);\n      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];\n      lexbuf[lex_last_action] = backtrk;\n    }\n    /* See if we need a refill */\n    if (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len]){\n      if (lexbuf[lex_eof_reached] == 0)\n        return -state - 1;\n      else\n        c = 256;\n    }else{\n      /* Read next input char */\n      c = buffer[lexbuf[lex_curr_pos]];\n      lexbuf[lex_curr_pos] ++;\n    }\n    /* Determine next state */\n    var pstate = state ;\n    if (tbl.lex_check[base + c] == state)\n      state = tbl.lex_trans[base + c];\n    else\n      state = tbl.lex_default[state];\n    /* If no transition on this char, return to last backtrack point */\n    if (state < 0) {\n      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];\n      if (lexbuf[lex_last_action] == -1)\n        caml_failwith(\"lexing: empty token\");\n      else\n        return lexbuf[lex_last_action];\n    }else{\n      /* If some transition, get and perform memory moves */\n      var base_code = tbl.lex_base_code[pstate], pc_off;\n      if (tbl.lex_check_code[base_code + c] == pstate)\n        pc_off = tbl.lex_trans_code[base_code + c];\n      else\n        pc_off = tbl.lex_default_code[pstate];\n      if (pc_off > 0)\n        caml_lex_run_mem\n      (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);\n      /* Erase the EOF condition only if the EOF pseudo-character was\n         consumed by the automaton (i.e. there was no backtrack above)\n      */\n      if (c == 256) lexbuf[lex_eof_reached] = 0;\n    }\n  }\n}\n","\n//Provides: caml_lxm_next\n//Requires: caml_int64_shift_left\n//Requires: caml_int64_shift_right_unsigned\n//Requires: caml_int64_or\n//Requires: caml_int64_xor\n//Requires: caml_int64_add\n//Requires: caml_int64_mul\n//Requires: caml_ba_get_1\n//Requires: caml_ba_set_1\n//Requires: caml_int64_of_string\n//Requires: caml_new_string\nfunction caml_lxm_next(v) {\n  function shift_l(x, k){\n    return caml_int64_shift_left(x,k);\n  }\n  function shift_r(x, k){\n    return caml_int64_shift_right_unsigned(x,k);\n  }\n  function or(a, b){\n    return caml_int64_or(a,b);\n  }\n  function xor(a, b){\n    return caml_int64_xor(a,b);\n  }\n  function add(a, b){\n    return caml_int64_add(a,b);\n  }\n  function mul(a, b){\n    return caml_int64_mul(a,b);\n  }\n  function rotl(x, k) {\n    return or(shift_l(x,k),shift_r (x, 64 - k));\n  }\n  function get(a, i) {\n    return caml_ba_get_1(a, i);\n  }\n  function set(a, i, x) {\n    return caml_ba_set_1(a, i, x);\n  }\n  var M = caml_int64_of_string(caml_new_string(\"0xd1342543de82ef95\"));\n  var daba = caml_int64_of_string(caml_new_string(\"0xdaba0b6eb09322e3\"));\n  var z, q0, q1;\n  var st = v;\n  var a = get(st,0);\n  var s = get(st,1);\n  var x0 = get(st,2);\n  var x1 = get(st,3);\n  /* Combining operation */\n  z = add(s, x0);\n  /* Mixing function */\n  z = mul(xor(z,shift_r(z,32)), daba);\n  z = mul(xor(z,shift_r(z,32)), daba);\n  z = xor(z,shift_r(z,32));\n  /* LCG update */\n  set(st, 1, add (mul(s,M), a));\n  /* XBG update */\n  var q0 = x0\n  var q1 = x1\n  q1 = xor(q1,q0);\n  q0 = rotl(q0, 24);\n  q0 = xor(xor(q0, q1), (shift_l(q1,16)));\n  q1 = rotl(q1, 37);\n  set(st, 2, q0);\n  set(st, 3, q1);\n  /* Return result */\n  return z;\n}\n","/***********************************************************************/\n/*                                                                     */\n/*                           Objective Caml                            */\n/*                                                                     */\n/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */\n/*                                                                     */\n/*  Copyright 1996 Institut National de Recherche en Informatique et   */\n/*  en Automatique.  All rights reserved.  This file is distributed    */\n/*  under the terms of the GNU Lesser General Public License, with     */\n/*  the special exception on linking described in file ../LICENSE.     */\n/*                                                                     */\n/***********************************************************************/\n\n/* $Id: parsing.c 8983 2008-08-06 09:38:25Z xleroy $ */\n\n/* The PDA automaton for parsers generated by camlyacc */\n\n/* The pushdown automata */\n\n//Provides: caml_parser_trace\nvar caml_parser_trace = 0;\n\n//Provides: caml_parse_engine\n//Requires: caml_lex_array, caml_parser_trace,caml_jsstring_of_string\n//Requires: caml_ml_output, caml_ml_string_length, caml_string_of_jsbytes\n//Requires: caml_jsbytes_of_string, MlBytes\nfunction caml_parse_engine(tables, env, cmd, arg)\n{\n  var ERRCODE = 256;\n\n  //var START = 0;\n  //var TOKEN_READ = 1;\n  //var STACKS_GROWN_1 = 2;\n  //var STACKS_GROWN_2 = 3;\n  //var SEMANTIC_ACTION_COMPUTED = 4;\n  //var ERROR_DETECTED = 5;\n  var loop = 6;\n  var testshift = 7;\n  var shift = 8;\n  var shift_recover = 9;\n  var reduce = 10;\n\n  var READ_TOKEN = 0;\n  var RAISE_PARSE_ERROR = 1;\n  var GROW_STACKS_1 = 2;\n  var GROW_STACKS_2 = 3;\n  var COMPUTE_SEMANTIC_ACTION = 4;\n  var CALL_ERROR_FUNCTION = 5;\n\n  var env_s_stack = 1;\n  var env_v_stack = 2;\n  var env_symb_start_stack = 3;\n  var env_symb_end_stack = 4;\n  var env_stacksize = 5;\n  var env_stackbase = 6;\n  var env_curr_char = 7;\n  var env_lval = 8;\n  var env_symb_start = 9;\n  var env_symb_end = 10;\n  var env_asp = 11;\n  var env_rule_len = 12;\n  var env_rule_number = 13;\n  var env_sp = 14;\n  var env_state = 15;\n  var env_errflag = 16;\n\n  // var _tbl_actions = 1;\n  var tbl_transl_const = 2;\n  var tbl_transl_block = 3;\n  var tbl_lhs = 4;\n  var tbl_len = 5;\n  var tbl_defred = 6;\n  var tbl_dgoto = 7;\n  var tbl_sindex = 8;\n  var tbl_rindex = 9;\n  var tbl_gindex = 10;\n  var tbl_tablesize = 11;\n  var tbl_table = 12;\n  var tbl_check = 13;\n  // var _tbl_error_function = 14;\n  var tbl_names_const = 15;\n  var tbl_names_block = 16;\n\n\n  function log(x) {\n    var s = caml_string_of_jsbytes(x + \"\\n\");\n    caml_ml_output(2, s, 0, caml_ml_string_length(s));\n  }\n\n  function token_name(names, number)\n  {\n    var str = caml_jsstring_of_string(names);\n    if (str[0] == '\\x00')\n      return \"<unknown token>\";\n    return str.split('\\x00')[number];\n  }\n\n  function print_token(state, tok)\n  {\n    var token, kind;\n    if (tok instanceof Array) {\n      token = token_name(tables[tbl_names_block], tok[0]);\n      if (typeof tok[1] == \"number\")\n        kind = \"\" + tok[1];\n      else if (typeof tok[1] == \"string\")\n        kind = tok[1]\n      else if (tok[1] instanceof MlBytes)\n        kind = caml_jsbytes_of_string(tok[1])\n      else\n        kind = \"_\"\n      log(\"State \" + state + \": read token \" + token + \"(\" + kind + \")\");\n    } else {\n      token = token_name(tables[tbl_names_const], tok);\n      log(\"State \" + state + \": read token \" + token);\n    }\n  }\n\n  if (!tables.dgoto) {\n    tables.defred = caml_lex_array (tables[tbl_defred]);\n    tables.sindex = caml_lex_array (tables[tbl_sindex]);\n    tables.check  = caml_lex_array (tables[tbl_check]);\n    tables.rindex = caml_lex_array (tables[tbl_rindex]);\n    tables.table  = caml_lex_array (tables[tbl_table]);\n    tables.len    = caml_lex_array (tables[tbl_len]);\n    tables.lhs    = caml_lex_array (tables[tbl_lhs]);\n    tables.gindex = caml_lex_array (tables[tbl_gindex]);\n    tables.dgoto  = caml_lex_array (tables[tbl_dgoto]);\n  }\n\n  var res = 0, n, n1, n2, state1;\n\n  // RESTORE\n  var sp = env[env_sp];\n  var state = env[env_state];\n  var errflag = env[env_errflag];\n\n  exit:for (;;) {\n    next:switch(cmd) {\n    case 0://START:\n      state = 0;\n      errflag = 0;\n      // Fall through\n\n    case 6://loop:\n      n = tables.defred[state];\n      if (n != 0) { cmd = reduce; break; }\n      if (env[env_curr_char] >= 0) { cmd = testshift; break; }\n      res = READ_TOKEN;\n      break exit;\n      /* The ML code calls the lexer and updates */\n      /* symb_start and symb_end */\n    case 1://TOKEN_READ:\n      if (arg instanceof Array) {\n        env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];\n        env[env_lval] = arg[1];\n      } else {\n        env[env_curr_char] = tables[tbl_transl_const][arg + 1];\n        env[env_lval] = 0;\n      }\n      if (caml_parser_trace) print_token (state, arg);\n      // Fall through\n\n    case 7://testshift:\n      n1 = tables.sindex[state];\n      n2 = n1 + env[env_curr_char];\n      if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n          tables.check[n2] == env[env_curr_char]) {\n        cmd = shift; break;\n      }\n      n1 = tables.rindex[state];\n      n2 = n1 + env[env_curr_char];\n      if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n          tables.check[n2] == env[env_curr_char]) {\n        n = tables.table[n2];\n        cmd = reduce; break;\n      }\n      if (errflag <= 0) {\n        res = CALL_ERROR_FUNCTION;\n        break exit;\n      }\n      // Fall through\n      /* The ML code calls the error function */\n    case 5://ERROR_DETECTED:\n      if (errflag < 3) {\n        errflag = 3;\n        for (;;) {\n          state1 = env[env_s_stack][sp + 1];\n          n1 = tables.sindex[state1];\n          n2 = n1 + ERRCODE;\n          if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n              tables.check[n2] == ERRCODE) {\n            if (caml_parser_trace)\n              log(\"Recovering in state \" + state1);\n            cmd = shift_recover; break next;\n          } else {\n            if (caml_parser_trace)\n              log(\"Discarding state \" + state1);\n            if (sp <= env[env_stackbase]) {\n              if (caml_parser_trace)\n                log(\"No more states to discard\");\n              return RAISE_PARSE_ERROR;\n            }\n            /* The ML code raises Parse_error */\n            sp--;\n          }\n        }\n      } else {\n        if (env[env_curr_char] == 0)\n          return RAISE_PARSE_ERROR; /* The ML code raises Parse_error */\n        if (caml_parser_trace)\n          log(\"Discarding last token read\");\n        env[env_curr_char] = -1;\n        cmd = loop; break;\n      }\n      // Fall through\n    case 8://shift:\n      env[env_curr_char] = -1;\n      if (errflag > 0) errflag--;\n      // Fall through\n    case 9://shift_recover:\n      if (caml_parser_trace)\n        log(\"State \" + state + \": shift to state \" + tables.table[n2]);\n      state = tables.table[n2];\n      sp++;\n      if (sp >= env[env_stacksize]) {\n        res = GROW_STACKS_1;\n        break exit;\n      }\n      // Fall through\n      /* The ML code resizes the stacks */\n    case 2://STACKS_GROWN_1:\n      env[env_s_stack][sp + 1] = state;\n      env[env_v_stack][sp + 1] = env[env_lval];\n      env[env_symb_start_stack][sp + 1] = env[env_symb_start];\n      env[env_symb_end_stack][sp + 1] = env[env_symb_end];\n      cmd = loop;\n      break;\n\n    case 10://reduce:\n      if (caml_parser_trace)\n        log(\"State \" + state + \": reduce by rule \" + n);\n      var m = tables.len[n];\n      env[env_asp] = sp;\n      env[env_rule_number] = n;\n      env[env_rule_len] = m;\n      sp = sp - m + 1;\n      m = tables.lhs[n];\n      state1 = env[env_s_stack][sp];\n      n1 = tables.gindex[m];\n      n2 = n1 + state1;\n      if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n          tables.check[n2] == state1)\n        state = tables.table[n2];\n      else\n        state = tables.dgoto[m];\n      if (sp >= env[env_stacksize]) {\n        res = GROW_STACKS_2;\n        break exit;\n      }\n      // Fall through\n      /* The ML code resizes the stacks */\n    case 3://STACKS_GROWN_2:\n      res = COMPUTE_SEMANTIC_ACTION;\n      break exit;\n      /* The ML code calls the semantic action */\n    case 4://SEMANTIC_ACTION_COMPUTED:\n      env[env_s_stack][sp + 1] = state;\n      env[env_v_stack][sp + 1] = arg;\n      var asp = env[env_asp];\n      env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];\n      if (sp > asp) {\n        /* This is an epsilon production. Take symb_start equal to symb_end. */\n        env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];\n      }\n      cmd = loop; break;\n      /* Should not happen */\n    default:\n      return RAISE_PARSE_ERROR;\n    }\n  }\n  // SAVE\n  env[env_sp] = sp;\n  env[env_state] = state;\n  env[env_errflag] = errflag;\n  return res;\n}\n\n//Provides: caml_set_parser_trace\n//Requires: caml_parser_trace\nfunction caml_set_parser_trace(bool) {\n  var oldflag = caml_parser_trace;\n  caml_parser_trace = bool;\n  return oldflag;\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2020 - Hugo Heuzard\n// Copyright (C) 2020 - Shachar Itzhaky\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// Based on https://github.com/ocaml/ocaml/blob/4.07/otherlibs/str/strstubs.c\n// Copied from https://github.com/jscoq/jscoq/blob/v8.11/coq-js/js_stub/str.js\n\n//Provides: re_match\n//Requires: caml_jsbytes_of_string, caml_js_from_array, caml_uint8_array_of_string\n//Requires: caml_string_get\n\nvar re_match = function(){\n  var re_word_letters = [\n    0x00, 0x00, 0x00, 0x00,       /* 0x00-0x1F: none */\n    0x00, 0x00, 0xFF, 0x03,       /* 0x20-0x3F: digits 0-9 */\n    0xFE, 0xFF, 0xFF, 0x87,       /* 0x40-0x5F: A to Z, _ */\n    0xFE, 0xFF, 0xFF, 0x07,       /* 0x60-0x7F: a to z */\n    0x00, 0x00, 0x00, 0x00,       /* 0x80-0x9F: none */\n    0x00, 0x00, 0x00, 0x00,       /* 0xA0-0xBF: none */\n    0xFF, 0xFF, 0x7F, 0xFF,       /* 0xC0-0xDF: Latin-1 accented uppercase */\n    0xFF, 0xFF, 0x7F, 0xFF        /* 0xE0-0xFF: Latin-1 accented lowercase */\n  ];\n\n  var opcodes = {\n    CHAR: 0, CHARNORM: 1, STRING: 2, STRINGNORM: 3, CHARCLASS: 4,\n    BOL: 5, EOL: 6, WORDBOUNDARY: 7,\n    BEGGROUP: 8, ENDGROUP: 9, REFGROUP: 10,\n    ACCEPT: 11,\n    SIMPLEOPT: 12, SIMPLESTAR: 13, SIMPLEPLUS: 14,\n    GOTO: 15, PUSHBACK: 16, SETMARK: 17,\n    CHECKPROGRESS: 18\n  };\n\n  function is_word_letter(c) {\n    return (re_word_letters[  (c >> 3)] >> (c & 7)) & 1;\n  }\n\n  function in_bitset(s,i) {\n    return (caml_string_get(s,(i >> 3)) >> (i & 7)) & 1;\n  }\n\n  function re_match_impl(re, s, pos, partial) {\n\n    var prog          = caml_js_from_array(re[1]),\n        cpool         = caml_js_from_array(re[2]),\n        normtable     = caml_jsbytes_of_string(re[3]),\n        numgroups     = re[4] | 0,\n        numregisters  = re[5] | 0,\n        startchars    = re[6] | 0;\n\n    var s = caml_uint8_array_of_string(s);\n\n    var pc = 0,\n        quit = false,\n        stack = [],\n        groups = new Array(numgroups),\n        re_register = new Array(numregisters);\n\n    for(var i = 0; i < groups.length; i++){\n      groups[i] = {start: -1, end:-1}\n    }\n    groups[0].start = pos;\n\n    var backtrack = function () {\n      while (stack.length) {\n        var item = stack.pop();\n        if (item.undo) {\n          item.undo.obj[item.undo.prop] = item.undo.value;\n        }\n        else if(item.pos) {\n          pc = item.pos.pc;\n          pos = item.pos.txt;\n          return;\n        }\n      }\n      quit = true;\n    };\n\n    var push = function(item) { stack.push(item); };\n\n    var accept = function () {\n      groups[0].end = pos;\n      var result = new Array(1 + groups.length*2);\n      result[0] = 0; // tag\n      for(var i = 0; i < groups.length; i++){\n        var g = groups[i];\n        if(g.start < 0 || g.end < 0) {\n          g.start = g.end = -1;\n        }\n        result[2*i + 1 ] = g.start;\n        result[2*i + 1 + 1 ] = g.end;\n      };\n      return result\n    };\n\n    var prefix_match = function () {\n      if(partial) return accept ();\n      else backtrack ();\n    }\n\n    /* Main DFA interpreter loop */\n    while (!quit) {\n      var op = prog[pc] & 0xff,\n          sarg = prog[pc] >> 8,\n          uarg = sarg & 0xff,\n          c = s[pos],\n          group;\n\n      pc++;\n\n      switch (op) {\n      case opcodes.CHAR:\n        if(pos === s.length) {prefix_match (); break};\n        if (c === uarg) pos++;\n        else backtrack();\n        break;\n      case opcodes.CHARNORM:\n        if(pos === s.length) {prefix_match (); break};\n        if (normtable.charCodeAt(c) === uarg) pos++;\n        else backtrack();\n        break;\n      case opcodes.STRING:\n        for (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0; i < arg.length; i++) {\n          if(pos === s.length) {prefix_match (); break};\n          if (c === arg.charCodeAt(i))\n            c = s[++pos];\n          else { backtrack(); break; }\n        }\n        break;\n      case opcodes.STRINGNORM:\n        for (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0; i < arg.length; i++) {\n          if(pos === s.length) {prefix_match (); break};\n          if (normtable.charCodeAt(c) === arg.charCodeAt(i))\n            c = s[++pos];\n          else { backtrack(); break; }\n        }\n        break;\n      case opcodes.CHARCLASS:\n        if(pos === s.length) {prefix_match (); break};\n        if (in_bitset(cpool[uarg], c)) pos++;\n        else backtrack();\n        break;\n      case opcodes.BOL:\n        if(pos > 0 && s[pos - 1] != 10 /* \\n */) {backtrack()}\n        break;\n      case opcodes.EOL:\n        if(pos < s.length && s[pos] != 10 /* \\n */) {backtrack()}\n        break;\n      case opcodes.WORDBOUNDARY:\n        if(pos == 0) {\n          if(pos === s.length) {prefix_match (); break};\n          if(is_word_letter(s[0])) break;\n          backtrack();\n        }\n        else if (pos === s.length) {\n          if(is_word_letter(s[pos - 1])) break;\n          backtrack ();\n        }\n        else {\n          if(is_word_letter(s[pos - 1]) != is_word_letter(s[pos])) break;\n          backtrack ();\n        }\n        break;\n      case opcodes.BEGGROUP:\n        group = groups[uarg];\n        push({undo: {obj:group,\n                     prop:'start',\n                     value: group.start}});\n        group.start = pos;\n        break;\n      case opcodes.ENDGROUP:\n        group = groups[uarg];\n        push({undo: {obj: group,\n                     prop:'end',\n                     value: group.end}});\n        group.end = pos;\n        break;\n      case opcodes.REFGROUP:\n        group = groups[uarg];\n        if(group.start < 0 || group.end < 0) {backtrack (); break}\n        for (var i = group.start; i < group.end; i++){\n          if(pos === s.length) {prefix_match (); break};\n          if(s[i] != s[pos]) {backtrack (); break}\n          pos++;\n        }\n        break;\n      case opcodes.SIMPLEOPT:\n        if (in_bitset(cpool[uarg], c)) pos++;\n        break;\n      case opcodes.SIMPLESTAR:\n        while (in_bitset(cpool[uarg], c))\n          c = s[++pos];\n        break;\n      case opcodes.SIMPLEPLUS:\n        if(pos === s.length) {prefix_match (); break};\n        if (in_bitset(cpool[uarg], c)) {\n          do {\n            c = s[++pos];\n          } while (in_bitset(cpool[uarg], c));\n        }\n        else backtrack();\n        break;\n      case opcodes.ACCEPT:\n        return accept();\n      case opcodes.GOTO:\n        pc = pc + sarg;\n        break;\n      case opcodes.PUSHBACK:\n        push({pos: {pc: pc + sarg, txt: pos}});\n        break;\n      case opcodes.SETMARK:\n        push({undo: {obj:re_register,\n                     prop: uarg,\n                     value: re_register[uarg]}});\n        re_register[uarg] = pos;\n        break;\n      case opcodes.CHECKPROGRESS:\n        if (re_register[uarg] === pos) backtrack();\n        break;\n      default: throw new Error(\"Invalid bytecode\");\n      }\n    }\n    return 0;\n  }\n\n  return re_match_impl;\n}();\n\n\n//Provides: re_search_forward\n//Requires: re_match, caml_ml_string_length, caml_invalid_argument\nfunction re_search_forward(re, s, pos) {\n  if(pos < 0 || pos > caml_ml_string_length(s))\n    caml_invalid_argument(\"Str.search_forward\")\n  while (pos <= caml_ml_string_length(s)) {\n    var res = re_match(re, s, pos, 0);\n    if (res) return res;\n    pos++;\n  }\n\n  return [0];  /* [||] : int array */\n}\n\n//Provides: re_search_backward\n//Requires: re_match, caml_ml_string_length, caml_invalid_argument\nfunction re_search_backward(re, s, pos) {\n  if(pos < 0 || pos > caml_ml_string_length(s))\n    caml_invalid_argument(\"Str.search_backward\")\n  while (pos >= 0) {\n    var res = re_match(re, s, pos, 0);\n    if (res) return res;\n    pos--;\n  }\n\n  return [0];  /* [||] : int array */\n}\n\n\n//Provides: re_string_match\n//Requires: re_match, caml_ml_string_length, caml_invalid_argument\nfunction re_string_match(re,s,pos){\n  if(pos < 0 || pos > caml_ml_string_length(s))\n    caml_invalid_argument(\"Str.string_match\")\n  var res = re_match(re, s, pos, 0);\n  if (res) return res;\n  else return [0];\n}\n\n//Provides: re_partial_match\n//Requires: re_match, caml_ml_string_length, caml_invalid_argument\nfunction re_partial_match(re,s,pos){\n  if(pos < 0 || pos > caml_ml_string_length(s))\n    caml_invalid_argument(\"Str.partial_match\")\n  var res = re_match(re, s, pos, 1);\n  if (res) return res;\n  else return [0];\n}\n\n//Provides: re_replacement_text\n//Requires: caml_jsbytes_of_string, caml_string_of_jsbytes\n//Requires: caml_array_get\n//Requires: caml_failwith\n// external re_replacement_text: string -> int array -> string -> string\nfunction re_replacement_text(repl,groups,orig) {\n  var repl = caml_jsbytes_of_string(repl);\n  var len = repl.length;\n  var orig = caml_jsbytes_of_string(orig);\n  var res = \"\"; //result\n  var n = 0; // current position\n  var cur; //current char\n  var start, end, c;\n  while(n < len){\n    cur = repl.charAt(n++);\n    if(cur != '\\\\'){\n      res += cur;\n    }\n    else {\n      if(n == len) caml_failwith(\"Str.replace: illegal backslash sequence\");\n      cur = repl.charAt(n++);\n      switch(cur){\n      case '\\\\':\n        res += cur;\n        break;\n      case '0': case '1': case '2': case '3': case '4':\n      case '5': case '6': case '7': case '8': case '9':\n        c = +cur;\n        if (c*2 >= groups.length - 1 )\n          caml_failwith(\"Str.replace: reference to unmatched group\" );\n        start = caml_array_get(groups,c*2);\n        end = caml_array_get(groups, c*2 +1);\n        if (start == -1)\n          caml_failwith(\"Str.replace: reference to unmatched group\");\n        res+=orig.slice(start,end);\n        break;\n      default:\n        res += ('\\\\'  + cur);\n      }\n    }\n  }\n  return caml_string_of_jsbytes(res); }\n\n\n//Provides: caml_str_initialize\nfunction caml_str_initialize(unit) {\n  return 0;\n}\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n  | Int_Cd | Int_Ci | Int_Cu       (*  %#d | %#i | %#u *)\n\n(* Float conversion. *)\ntype float_flag_conv =\n  | Float_flag_                    (* %[feEgGFhH] *)\n  | Float_flag_p                   (* %+[feEgGFhH] *)\n  | Float_flag_s                   (* % [feEgGFhH] *)\ntype float_kind_conv =\n  | Float_f                        (*  %f | %+f | % f  *)\n  | Float_e                        (*  %e | %+e | % e  *)\n  | Float_E                        (*  %E | %+E | % E  *)\n  | Float_g                        (*  %g | %+g | % g  *)\n  | Float_G                        (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F | %+F | % F  *)\n  | Float_h                        (*  %h | %+h | % h  *)\n  | Float_H                        (*  %H | %+H | % H  *)\n  | Float_CF                       (*  %#F| %+#F| % #F *)\ntype float_conv = float_flag_conv * float_kind_conv\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\"\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\"\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost[1])\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE [1]: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargument and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two inputs have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printer. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)\n           fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)\n           fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                    (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGFhH] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('x, bool -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     intended for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, _ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool (pad, rest) ->\n    Bool (pad, concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for runtime/fail_nat.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\nexception Match_failure = Match_failure\nexception Assert_failure = Assert_failure\nexception Invalid_argument = Invalid_argument\nexception Failure = Failure\nexception Not_found = Not_found\nexception Out_of_memory = Out_of_memory\nexception Stack_overflow = Stack_overflow\nexception Sys_error = Sys_error\nexception End_of_file = End_of_file\nexception Division_by_zero = Division_by_zero\nexception Sys_blocked_io = Sys_blocked_io\nexception Undefined_recursive_module = Undefined_recursive_module\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\nexternal __FUNCTION__ : string = \"%loc_FUNCTION\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal acosh : float -> float = \"caml_acosh_float\" \"caml_acosh\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal asinh : float -> float = \"caml_asinh_float\" \"caml_asinh\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal atanh : float -> float = \"caml_atanh_float\" \"caml_atanh\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n  [@@unboxed] [@@noalloc]\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F8_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%bytes_length\"\nexternal bytes_create : int -> bytes = \"caml_create_bytes\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_bytes\" [@@noalloc]\nexternal bytes_unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* Result type *)\n\ntype ('a,'b) result = Ok of 'a | Error of 'b\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet bool_of_string_opt = function\n  | \"true\" -> Some true\n  | \"false\" -> Some false\n  | _ -> None\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\n\nlet int_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (int_of_string s)\n  with Failure _ -> None\n\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f)\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\nlet float_of_string_opt s =\n  (* TODO: provide this directly as a non-raising primitive. *)\n  try Some (float_of_string s)\n  with Failure _ -> None\n\n(* List operations -- more in module List *)\n\nlet[@tail_mod_cons] rec ( @ ) l1 l2 =\n  match l1 with\n  | [] -> l2\n  | h1 :: [] -> h1 :: l2\n  | h1 :: h2 :: [] -> h1 :: h2 :: l2\n  | h1 :: h2 :: h3 :: tl -> h1 :: h2 :: h3 :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nexternal set_out_channel_name: out_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_out_gen mode perm name =\n  let c = open_descriptor_out(open_desc name mode perm) in\n  set_out_channel_name c name;\n  c\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a::l ->\n        begin try\n            flush a\n        with Sys_error _ ->\n          () (* ignore channels closed during a preceding flush. *)\n        end;\n        iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output_bytes\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nexternal set_in_channel_name: in_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_in_gen mode perm name =\n  let c = open_descriptor_in(open_desc name mode perm) in\n  set_in_channel_name c name;\n  c\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ())\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_int_opt () = int_of_string_opt(read_line())\nlet read_float () = float_of_string(read_line())\nlet read_float_opt () = float_of_string_opt(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (_fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet ( ^^ ) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\n(* for at_exit *)\ntype 'a atomic_t\nexternal atomic_make : 'a -> 'a atomic_t = \"%makemutable\"\nexternal atomic_get : 'a atomic_t -> 'a = \"%atomic_load\"\nexternal atomic_compare_and_set : 'a atomic_t -> 'a -> 'a -> bool\n  = \"%atomic_cas\"\n\nlet exit_function = atomic_make flush_all\n\nlet rec at_exit f =\n  (* MPR#7253, MPR#7796: make sure \"f\" is executed only once *)\n  let f_yet_to_run = atomic_make true in\n  let old_exit = atomic_get exit_function in\n  let new_exit () =\n    if atomic_compare_and_set f_yet_to_run true false then f () ;\n    old_exit ()\n  in\n  let success = atomic_compare_and_set exit_function old_exit new_exit in\n  if not success then at_exit f\n\nlet do_domain_local_at_exit = ref (fun () -> ())\n\nlet do_at_exit () =\n  (!do_domain_local_at_exit) ();\n  (atomic_get exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\n\n(*MODULE_ALIASES*)\nmodule Arg            = Arg\nmodule Array          = Array\nmodule ArrayLabels    = ArrayLabels\nmodule Atomic         = Atomic\nmodule Bigarray       = Bigarray\nmodule Bool           = Bool\nmodule Buffer         = Buffer\nmodule Bytes          = Bytes\nmodule BytesLabels    = BytesLabels\nmodule Callback       = Callback\nmodule Char           = Char\nmodule Complex        = Complex\nmodule Condition      = Condition\nmodule Digest         = Digest\nmodule Domain         = Domain\nmodule Effect         = Effect\nmodule Either         = Either\nmodule Ephemeron      = Ephemeron\nmodule Filename       = Filename\nmodule Float          = Float\nmodule Format         = Format\nmodule Fun            = Fun\nmodule Gc             = Gc\nmodule Hashtbl        = Hashtbl\nmodule In_channel     = In_channel\nmodule Int            = Int\nmodule Int32          = Int32\nmodule Int64          = Int64\nmodule Lazy           = Lazy\nmodule Lexing         = Lexing\nmodule List           = List\nmodule ListLabels     = ListLabels\nmodule Map            = Map\nmodule Marshal        = Marshal\nmodule MoreLabels     = MoreLabels\nmodule Mutex          = Mutex\nmodule Nativeint      = Nativeint\nmodule Obj            = Obj\nmodule Oo             = Oo\nmodule Option         = Option\nmodule Out_channel    = Out_channel\nmodule Parsing        = Parsing\nmodule Printexc       = Printexc\nmodule Printf         = Printf\nmodule Queue          = Queue\nmodule Random         = Random\nmodule Result         = Result\nmodule Scanf          = Scanf\nmodule Semaphore      = Semaphore\nmodule Seq            = Seq\nmodule Set            = Set\nmodule Stack          = Stack\nmodule StdLabels      = StdLabels\nmodule String         = String\nmodule StringLabels   = StringLabels\nmodule Sys            = Sys\nmodule Type           = Type\nmodule Uchar          = Uchar\nmodule Unit           = Unit\nmodule Weak           = Weak\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*         Gabriel Scherer, projet Parsifal, INRIA Saclay                 *)\n(*                                                                        *)\n(*   Copyright 2019 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype ('a, 'b) t = Left of 'a | Right of 'b\n\nlet left v = Left v\nlet right v = Right v\n\nlet is_left = function\n| Left _ -> true\n| Right _ -> false\n\nlet is_right = function\n| Left _ -> false\n| Right _ -> true\n\nlet find_left = function\n| Left v -> Some v\n| Right _ -> None\n\nlet find_right = function\n| Left _ -> None\n| Right v -> Some v\n\nlet map_left f = function\n| Left v -> Left (f v)\n| Right _ as e -> e\n\nlet map_right f = function\n| Left _ as e -> e\n| Right v -> Right (f v)\n\nlet map ~left ~right = function\n| Left v -> Left (left v)\n| Right v -> Right (right v)\n\nlet fold ~left ~right = function\n| Left v -> left v\n| Right v -> right v\n\nlet iter = fold\n\nlet for_all = fold\n\nlet equal ~left ~right e1 e2 = match e1, e2 with\n| Left v1, Left v2 -> left v1 v2\n| Right v1, Right v2 -> right v1 v2\n| Left _, Right _ | Right _, Left _ -> false\n\nlet compare ~left ~right e1 e2 = match e1, e2 with\n| Left v1, Left v2 -> left v1 v2\n| Right v1, Right v2 -> right v1 v2\n| Left _, Right _ -> (-1)\n| Right _, Left _ -> 1\n","(* @configure_input@ *)\n#3 \"sys.ml.in\"\n(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype backend_type =\n  | Native\n  | Bytecode\n  | Other of string\n(* System interface *)\n\nexternal get_config: unit -> string * int * bool = \"caml_sys_get_config\"\nexternal get_executable_name : unit -> string = \"caml_sys_executable_name\"\nexternal argv : string array = \"%sys_argv\"\nexternal big_endian : unit -> bool = \"%big_endian\"\nexternal word_size : unit -> int = \"%word_size\"\nexternal int_size : unit -> int = \"%int_size\"\nexternal max_wosize : unit -> int = \"%max_wosize\"\nexternal unix : unit -> bool = \"%ostype_unix\"\nexternal win32 : unit -> bool = \"%ostype_win32\"\nexternal cygwin : unit -> bool = \"%ostype_cygwin\"\nexternal get_backend_type : unit -> backend_type = \"%backend_type\"\n\nlet executable_name = get_executable_name()\nlet (os_type, _, _) = get_config()\nlet backend_type = get_backend_type ()\nlet big_endian = big_endian ()\nlet word_size = word_size ()\nlet int_size = int_size ()\nlet unix = unix ()\nlet win32 = win32 ()\nlet cygwin = cygwin ()\nlet max_array_length = max_wosize ()\nlet max_floatarray_length = max_array_length / (64 / word_size)\nlet max_string_length = word_size / 8 * max_array_length - 1\nexternal runtime_variant : unit -> string = \"caml_runtime_variant\"\nexternal runtime_parameters : unit -> string = \"caml_runtime_parameters\"\n\nexternal file_exists: string -> bool = \"caml_sys_file_exists\"\nexternal is_directory : string -> bool = \"caml_sys_is_directory\"\nexternal is_regular_file : string -> bool = \"caml_sys_is_regular_file\"\nexternal remove: string -> unit = \"caml_sys_remove\"\nexternal rename : string -> string -> unit = \"caml_sys_rename\"\nexternal getenv: string -> string = \"caml_sys_getenv\"\n\nlet getenv_opt s =\n  (* TODO: expose a non-raising primitive directly. *)\n  try Some (getenv s)\n  with Not_found -> None\n\nexternal command: string -> int = \"caml_sys_system_command\"\nexternal time: unit -> (float [@unboxed]) =\n  \"caml_sys_time\" \"caml_sys_time_unboxed\" [@@noalloc]\nexternal chdir: string -> unit = \"caml_sys_chdir\"\nexternal mkdir: string -> int -> unit = \"caml_sys_mkdir\"\nexternal rmdir: string -> unit = \"caml_sys_rmdir\"\nexternal getcwd: unit -> string = \"caml_sys_getcwd\"\nexternal readdir : string -> string array = \"caml_sys_read_directory\"\n\nlet interactive = ref false\n\ntype signal_behavior =\n    Signal_default\n  | Signal_ignore\n  | Signal_handle of (int -> unit)\n\nexternal signal : int -> signal_behavior -> signal_behavior\n                = \"caml_install_signal_handler\"\n\nlet set_signal sig_num sig_beh = ignore(signal sig_num sig_beh)\n\nlet sigabrt = -1\nlet sigalrm = -2\nlet sigfpe = -3\nlet sighup = -4\nlet sigill = -5\nlet sigint = -6\nlet sigkill = -7\nlet sigpipe = -8\nlet sigquit = -9\nlet sigsegv = -10\nlet sigterm = -11\nlet sigusr1 = -12\nlet sigusr2 = -13\nlet sigchld = -14\nlet sigcont = -15\nlet sigstop = -16\nlet sigtstp = -17\nlet sigttin = -18\nlet sigttou = -19\nlet sigvtalrm = -20\nlet sigprof = -21\nlet sigbus = -22\nlet sigpoll = -23\nlet sigsys = -24\nlet sigtrap = -25\nlet sigurg = -26\nlet sigxcpu = -27\nlet sigxfsz = -28\n\nexception Break\n\nlet catch_break on =\n  if on then\n    set_signal sigint (Signal_handle(fun _ -> raise Break))\n  else\n    set_signal sigint Signal_default\n\n\nexternal enable_runtime_warnings: bool -> unit =\n  \"caml_ml_enable_runtime_warnings\"\nexternal runtime_warnings_enabled: unit -> bool =\n  \"caml_ml_runtime_warnings_enabled\"\n\n(* The version string is found in file ../VERSION *)\n\nlet ocaml_version = \"@VERSION@\"\n\nlet development_version = @OCAML_DEVELOPMENT_VERSION@\n\ntype extra_prefix = Plus | Tilde\n\ntype extra_info = extra_prefix * string\n\ntype ocaml_release_info = {\n  major : int;\n  minor : int;\n  patchlevel : int;\n  extra : extra_info option\n}\n\nlet ocaml_release = {\n  major = @OCAML_VERSION_MAJOR@;\n  minor = @OCAML_VERSION_MINOR@;\n  patchlevel = @OCAML_VERSION_PATCHLEVEL@;\n  extra = @OCAML_RELEASE_EXTRA@\n}\n\n(* Optimization *)\n\nexternal opaque_identity : 'a -> 'a = \"%opaque\"\n\nmodule Immediate64 = struct\n  module type Non_immediate = sig\n    type t\n  end\n  module type Immediate = sig\n    type t [@@immediate]\n  end\n\n  module Make(Immediate : Immediate)(Non_immediate : Non_immediate) = struct\n    type t [@@immediate64]\n    type 'a repr =\n      | Immediate : Immediate.t repr\n      | Non_immediate : Non_immediate.t repr\n    external magic : _ repr -> t repr = \"%identity\"\n    let repr =\n      if word_size = 64 then\n        magic Immediate\n      else\n        magic Non_immediate\n  end\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Operations on internal representations of values *)\n\ntype t\n\ntype raw_data = nativeint\n\nexternal repr : 'a -> t = \"%identity\"\nexternal obj : t -> 'a = \"%identity\"\nexternal magic : 'a -> 'b = \"%identity\"\nexternal is_int : t -> bool = \"%obj_is_int\"\nlet [@inline always] is_block a = not (is_int a)\nexternal tag : t -> int = \"caml_obj_tag\" [@@noalloc]\nexternal size : t -> int = \"%obj_size\"\nexternal reachable_words : t -> int = \"caml_obj_reachable_words\"\nexternal field : t -> int -> t = \"%obj_field\"\nexternal set_field : t -> int -> t -> unit = \"%obj_set_field\"\nexternal floatarray_get : floatarray -> int -> float = \"caml_floatarray_get\"\nexternal floatarray_set :\n    floatarray -> int -> float -> unit = \"caml_floatarray_set\"\nlet [@inline always] double_field x i = floatarray_get (obj x : floatarray) i\nlet [@inline always] set_double_field x i v =\n  floatarray_set (obj x : floatarray) i v\nexternal raw_field : t -> int -> raw_data = \"caml_obj_raw_field\"\nexternal set_raw_field : t -> int -> raw_data -> unit\n                                          = \"caml_obj_set_raw_field\"\n\nexternal new_block : int -> int -> t = \"caml_obj_block\"\nexternal dup : t -> t = \"caml_obj_dup\"\nexternal add_offset : t -> Int32.t -> t = \"caml_obj_add_offset\"\nexternal with_tag : int -> t -> t = \"caml_obj_with_tag\"\n\nlet first_non_constant_constructor_tag = 0\nlet last_non_constant_constructor_tag = 243\n\nlet forcing_tag = 244\nlet cont_tag = 245\nlet lazy_tag = 246\nlet closure_tag = 247\nlet object_tag = 248\nlet infix_tag = 249\nlet forward_tag = 250\n\nlet no_scan_tag = 251\n\nlet abstract_tag = 251\nlet string_tag = 252\nlet double_tag = 253\nlet double_array_tag = 254\nlet custom_tag = 255\n\n\nlet int_tag = 1000\nlet out_of_heap_tag = 1001\nlet unaligned_tag = 1002\n\nmodule Closure = struct\n  type info = {\n    arity: int;\n    start_env: int;\n  }\n\n  let info_of_raw (info : nativeint) =\n    let open Nativeint in\n    let arity =\n      (* signed: negative for tupled functions *)\n      if Sys.word_size = 64 then\n        to_int (shift_right info 56)\n      else\n        to_int (shift_right info 24)\n    in\n    let start_env =\n      (* start_env is unsigned, but we know it can always fit an OCaml\n         integer so we use [to_int] instead of [unsigned_to_int]. *)\n      to_int (shift_right_logical (shift_left info 8) 9) in\n    { arity; start_env }\n\n  (* note: we expect a closure, not an infix pointer *)\n  let info (obj : t) =\n    assert (tag obj = closure_tag);\n    info_of_raw (raw_field obj 1)\nend\n\nmodule Extension_constructor =\nstruct\n  type t = extension_constructor\n  let of_val x =\n    let x = repr x in\n    let slot =\n      if (is_block x) && (tag x) <> object_tag && (size x) >= 1 then field x 0\n      else x\n    in\n    let name =\n      if (is_block slot) && (tag slot) = object_tag then field slot 0\n      else invalid_arg \"Obj.extension_constructor\"\n    in\n      if (tag name) = string_tag then (obj slot : t)\n      else invalid_arg \"Obj.extension_constructor\"\n\n  let [@inline always] name (slot : t) =\n    (obj (field (repr slot) 0) : string)\n\n  let [@inline always] id (slot : t) =\n    (obj (field (repr slot) 1) : int)\nend\n\nmodule Ephemeron = struct\n  type obj_t = t\n\n  type t (** ephemeron *)\n\n   (** To change in sync with weak.h *)\n  let additional_values = 2\n  let max_ephe_length = Sys.max_array_length - additional_values\n\n  external create : int -> t = \"caml_ephe_create\"\n  let create l =\n    if not (0 <= l && l <= max_ephe_length) then\n      invalid_arg \"Obj.Ephemeron.create\";\n    create l\n\n  let length x = size(repr x) - additional_values\n\n  let raise_if_invalid_offset e o msg =\n    if not (0 <= o && o < length e) then\n      invalid_arg msg\n\n  external get_key: t -> int -> obj_t option = \"caml_ephe_get_key\"\n  let get_key e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.get_key\";\n    get_key e o\n\n  external get_key_copy: t -> int -> obj_t option = \"caml_ephe_get_key_copy\"\n  let get_key_copy e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.get_key_copy\";\n    get_key_copy e o\n\n  external set_key: t -> int -> obj_t -> unit = \"caml_ephe_set_key\"\n  let set_key e o x =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.set_key\";\n    set_key e o x\n\n  external unset_key: t -> int -> unit = \"caml_ephe_unset_key\"\n  let unset_key e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.unset_key\";\n    unset_key e o\n\n  external check_key: t -> int -> bool = \"caml_ephe_check_key\"\n  let check_key e o =\n    raise_if_invalid_offset e o \"Obj.Ephemeron.check_key\";\n    check_key e o\n\n  external blit_key : t -> int -> t -> int -> int -> unit\n    = \"caml_ephe_blit_key\"\n\n  let blit_key e1 o1 e2 o2 l =\n    if l < 0 || o1 < 0 || o1 > length e1 - l\n       || o2 < 0 || o2 > length e2 - l\n    then invalid_arg \"Obj.Ephemeron.blit_key\"\n    else if l <> 0 then blit_key e1 o1 e2 o2 l\n\n  external get_data: t -> obj_t option = \"caml_ephe_get_data\"\n  external get_data_copy: t -> obj_t option = \"caml_ephe_get_data_copy\"\n  external set_data: t -> obj_t -> unit = \"caml_ephe_set_data\"\n  external unset_data: t -> unit = \"caml_ephe_unset_data\"\n  external check_data: t -> bool = \"caml_ephe_check_data\"\n  external blit_data : t -> t -> unit = \"caml_ephe_blit_data\"\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2022 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Type equality witness *)\n\ntype (_, _) eq = Equal: ('a, 'a) eq\n\n(* Type identifiers *)\n\nmodule Id = struct\n  type _ id = ..\n  module type ID = sig\n    type t\n    type _ id += Id : t id\n  end\n\n  type !'a t = (module ID with type t = 'a)\n\n  let make (type a) () : a t =\n    (module struct type t = a type _ id += Id : t id end)\n\n  let[@inline] uid (type a) ((module A) : a t) =\n    Obj.Extension_constructor.id (Obj.Extension_constructor.of_val A.Id)\n\n  let provably_equal\n      (type a b) ((module A) : a t) ((module B) : b t) : (a, b) eq option\n    =\n    match A.Id with B.Id -> Some Equal | _ -> None\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                 Stephen Dolan, University of Cambridge                 *)\n(*                                                                        *)\n(*   Copyright 2017-2018 University of Cambridge.                         *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype !'a t\n\nexternal make : 'a -> 'a t = \"%makemutable\"\nexternal get : 'a t -> 'a = \"%atomic_load\"\nexternal exchange : 'a t -> 'a -> 'a = \"%atomic_exchange\"\nexternal compare_and_set : 'a t -> 'a -> 'a -> bool = \"%atomic_cas\"\nexternal fetch_and_add : int t -> int -> int = \"%atomic_fetch_add\"\nexternal ignore : 'a -> unit = \"%ignore\"\n\nlet set r x = ignore (exchange r x)\nlet incr r = ignore (fetch_and_add r 1)\nlet decr r = ignore (fetch_and_add r (-1))\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Damien Doligez, projet Para, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1997 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Internals of forcing lazy values. *)\n\ntype 'a t = 'a lazy_t\n\nexception Undefined\n\n(* [update_to_forcing blk] tries to update a [blk] with [lazy_tag] to\n   [forcing_tag] using compare-and-swap (CAS), taking care to handle concurrent\n   marking of the header word by a concurrent GC thread. Returns [0] if the\n   CAS is successful. If the CAS fails, then the tag was observed to be\n   something other than [lazy_tag] due to a concurrent mutator. In this case,\n   the function returns [1]. *)\nexternal update_to_forcing : Obj.t -> int =\n  \"caml_lazy_update_to_forcing\" [@@noalloc]\n\n(* [reset_to_lazy blk] expects [blk] to be a lazy object with [Obj.forcing_tag]\n   and updates the tag to [Obj.lazy_tag], taking care to handle concurrent\n   marking of this object's header by a concurrent GC thread. *)\nexternal reset_to_lazy : Obj.t -> unit = \"caml_lazy_reset_to_lazy\" [@@noalloc]\n\n(* [update_to_forward blk] expects [blk] to be a lazy object with\n   [Obj.forcing_tag] and updates the tag to [Obj.forward_tag], taking care to\n   handle concurrent marking of this object's header by a concurrent GC thread.\n *)\nexternal update_to_forward : Obj.t -> unit =\n  \"caml_lazy_update_to_forward\" [@@noalloc]\n\n(* Assumes [blk] is a block with tag forcing *)\nlet do_force_block blk =\n  let b = Obj.repr blk in\n  let closure = (Obj.obj (Obj.field b 0) : unit -> 'arg) in\n  Obj.set_field b 0 (Obj.repr ()); (* Release the closure *)\n  try\n    let result = closure () in\n    Obj.set_field b 0 (Obj.repr result);\n    update_to_forward b;\n    result\n  with e ->\n    Obj.set_field b 0 (Obj.repr (fun () -> raise e));\n    reset_to_lazy b;\n    raise e\n\n(* Assumes [blk] is a block with tag forcing *)\nlet do_force_val_block blk =\n  let b = Obj.repr blk in\n  let closure = (Obj.obj (Obj.field b 0) : unit -> 'arg) in\n  Obj.set_field b 0 (Obj.repr ()); (* Release the closure *)\n  let result = closure () in\n  Obj.set_field b 0 (Obj.repr result);\n  update_to_forward b;\n  result\n\n(* Called by [force_gen] *)\nlet force_gen_lazy_block ~only_val (blk : 'arg lazy_t) =\n  (* We expect the tag to be [lazy_tag], but may be other tags due to\n     concurrent forcing of lazy values. *)\n  match update_to_forcing (Obj.repr blk) with\n  | 0 when only_val -> do_force_val_block blk\n  | 0 -> do_force_block blk\n  | _ -> raise Undefined\n\n(* used in the %lazy_force primitive *)\nlet force_lazy_block blk = force_gen_lazy_block ~only_val:false blk\n\n(* [force_gen ~only_val:false] is not used, since [Lazy.force] is\n   declared as a primitive whose code inlines the tag tests of its\n   argument, except when afl instrumentation is turned on. *)\nlet force_gen ~only_val (lzv : 'arg lazy_t) =\n  (* Using [Sys.opaque_identity] prevents two potential problems:\n     - If the value is known to have Forward_tag, then it could have been\n       shortcut during GC, so that information must be forgotten (see GPR#713\n       and issue #7301). This is not an issue here at the moment since\n       [Obj.tag] is not simplified by the compiler, and GPR#713 also\n       ensures that no value will be known to have Forward_tag.\n     - If the value is known to be immutable, then if the compiler\n       cannot prove that the last branch is not taken it will issue a\n       warning 59 (modification of an immutable value) *)\n  let lzv = Sys.opaque_identity lzv in\n  let x = Obj.repr lzv in\n  (* START no safe points. If a GC occurs here, then the object [x] may be\n     short-circuited, and getting the first field of [x] would get us the wrong\n     value. Luckily, the compiler does not insert GC safe points at this place,\n     so it is ok. *)\n  let t = Obj.tag x in\n  if t = Obj.forward_tag then\n    (Obj.obj (Obj.field x 0) : 'arg)\n  (* END no safe points *)\n  else if t = Obj.forcing_tag then raise Undefined\n  else if t <> Obj.lazy_tag then (Obj.obj x : 'arg)\n  else force_gen_lazy_block ~only_val lzv\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Damien Doligez, projet Para, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1997 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Lazy]: deferred computations *)\n\n\n(*\n   WARNING: some purple magic is going on here.  Do not take this file\n   as an example of how to program in OCaml.\n*)\n\n\n(* We make use of two special tags provided by the runtime:\n   [lazy_tag] and [forward_tag].\n\n   A value of type ['a Lazy.t] can be one of three things:\n   1. A block of size 1 with tag [lazy_tag].  Its field is a closure of\n      type [unit -> 'a] that computes the value.\n   2. A block of size 1 with tag [forward_tag].  Its field is the value\n      of type ['a] that was computed.\n   3. Anything else except a float.  This has type ['a] and is the value\n      that was computed.\n   Exceptions are stored in format (1).\n   The GC will magically change things from (2) to (3) according to its\n   fancy.\n\n   If OCaml was configured with the -flat-float-array option (which is\n   currently the default), the following is also true:\n   We cannot use representation (3) for a [float Lazy.t] because\n   [caml_make_array] assumes that only a [float] value can have tag\n   [Double_tag].\n\n   We have to use the built-in type constructor [lazy_t] to\n   let the compiler implement the special typing and compilation\n   rules for the [lazy] keyword.\n*)\n\ntype 'a t = 'a CamlinternalLazy.t\n\nexception Undefined = CamlinternalLazy.Undefined\nexternal make_forward : 'a -> 'a lazy_t = \"caml_lazy_make_forward\"\nexternal force : 'a t -> 'a = \"%lazy_force\"\n\nlet force_val l = CamlinternalLazy.force_gen ~only_val:true l\n\nlet from_fun (f : unit -> 'arg) =\n  let x = Obj.new_block Obj.lazy_tag 1 in\n  Obj.set_field x 0 (Obj.repr f);\n  (Obj.obj x : 'arg t)\n\nlet from_val (v : 'arg) =\n  let t = Obj.tag (Obj.repr v) in\n  if t = Obj.forward_tag || t = Obj.lazy_tag ||\n     t = Obj.forcing_tag || t = Obj.double_tag then begin\n    make_forward v\n  end else begin\n    (Obj.magic v : 'arg t)\n  end\n\nlet is_val (l : 'arg t) = Obj.tag (Obj.repr l) <> Obj.lazy_tag\n\nlet map f x =\n  lazy (f (force x))\n\nlet map_val f x =\n  if is_val x\n  then from_val (f (force x))\n  else lazy (f (force x))\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                 Simon Cruanes                                          *)\n(*                                                                        *)\n(*   Copyright 2017 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Seq]: functional iterators *)\n\ntype +'a node =\n  | Nil\n  | Cons of 'a * 'a t\n\nand 'a t = unit -> 'a node\n\nlet empty () = Nil\n\nlet return x () = Cons (x, empty)\n\nlet cons x next () = Cons (x, next)\n\nlet rec append seq1 seq2 () =\n  match seq1() with\n  | Nil -> seq2()\n  | Cons (x, next) -> Cons (x, append next seq2)\n\nlet rec map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) -> Cons (f x, map f next)\n\nlet rec filter_map f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      match f x with\n        | None -> filter_map f next ()\n        | Some y -> Cons (y, filter_map f next)\n\nlet rec filter f seq () = match seq() with\n  | Nil -> Nil\n  | Cons (x, next) ->\n      if f x\n      then Cons (x, filter f next)\n      else filter f next ()\n\nlet rec concat seq () = match seq () with\n  | Nil -> Nil\n  | Cons (x, next) ->\n     append x (concat next) ()\n\nlet rec flat_map f seq () = match seq () with\n  | Nil -> Nil\n  | Cons (x, next) ->\n    append (f x) (flat_map f next) ()\n\nlet concat_map = flat_map\n\nlet rec fold_left f acc seq =\n  match seq () with\n    | Nil -> acc\n    | Cons (x, next) ->\n        let acc = f acc x in\n        fold_left f acc next\n\nlet rec iter f seq =\n  match seq () with\n    | Nil -> ()\n    | Cons (x, next) ->\n        f x;\n        iter f next\n\nlet rec unfold f u () =\n  match f u with\n  | None -> Nil\n  | Some (x, u') -> Cons (x, unfold f u')\n\nlet is_empty xs =\n  match xs() with\n  | Nil ->\n      true\n  | Cons (_, _) ->\n      false\n\nlet uncons xs =\n  match xs() with\n  | Cons (x, xs) ->\n      Some (x, xs)\n  | Nil ->\n      None\n\n\n\nlet rec length_aux accu xs =\n  match xs() with\n  | Nil ->\n      accu\n  | Cons (_, xs) ->\n      length_aux (accu + 1) xs\n\nlet[@inline] length xs =\n  length_aux 0 xs\n\nlet rec iteri_aux f i xs =\n  match xs() with\n  | Nil ->\n      ()\n  | Cons (x, xs) ->\n      f i x;\n      iteri_aux f (i+1) xs\n\nlet[@inline] iteri f xs =\n  iteri_aux f 0 xs\n\nlet rec fold_lefti_aux f accu i xs =\n  match xs() with\n  | Nil ->\n      accu\n  | Cons (x, xs) ->\n      let accu = f accu i x in\n      fold_lefti_aux f accu (i+1) xs\n\nlet[@inline] fold_lefti f accu xs =\n  fold_lefti_aux f accu 0 xs\n\nlet rec for_all p xs =\n  match xs() with\n  | Nil ->\n      true\n  | Cons (x, xs) ->\n      p x && for_all p xs\n\nlet rec exists p xs =\n  match xs() with\n  | Nil ->\n      false\n  | Cons (x, xs) ->\n      p x || exists p xs\n\nlet rec find p xs =\n  match xs() with\n  | Nil ->\n      None\n  | Cons (x, xs) ->\n      if p x then Some x else find p xs\n\nlet find_index p xs =\n  let rec aux i xs = match xs() with\n    | Nil ->\n        None\n    | Cons (x, xs) ->\n        if p x then Some i else aux (i+1) xs in\n  aux 0 xs\n\nlet rec find_map f xs =\n  match xs() with\n  | Nil ->\n      None\n  | Cons (x, xs) ->\n      match f x with\n      | None ->\n          find_map f xs\n      | Some _ as result ->\n          result\n\nlet find_mapi f xs =\n  let rec aux i xs = match xs() with\n    | Nil ->\n        None\n    | Cons (x, xs) ->\n        match f i x with\n        | None ->\n            aux (i+1) xs\n        | Some _ as result ->\n            result in\n  aux 0 xs\n\n(* [iter2], [fold_left2], [for_all2], [exists2], [map2], [zip] work also in\n   the case where the two sequences have different lengths. They stop as soon\n   as one sequence is exhausted. Their behavior is slightly asymmetric: when\n   [xs] is empty, they do not force [ys]; however, when [ys] is empty, [xs] is\n   forced, even though the result of the function application [xs()] turns out\n   to be useless. *)\n\nlet rec iter2 f xs ys =\n  match xs() with\n  | Nil ->\n      ()\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          ()\n      | Cons (y, ys) ->\n          f x y;\n          iter2 f xs ys\n\nlet rec fold_left2 f accu xs ys =\n  match xs() with\n  | Nil ->\n      accu\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          accu\n      | Cons (y, ys) ->\n          let accu = f accu x y in\n          fold_left2 f accu xs ys\n\nlet rec for_all2 f xs ys =\n  match xs() with\n  | Nil ->\n      true\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          true\n      | Cons (y, ys) ->\n          f x y && for_all2 f xs ys\n\nlet rec exists2 f xs ys =\n  match xs() with\n  | Nil ->\n      false\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          false\n      | Cons (y, ys) ->\n          f x y || exists2 f xs ys\n\nlet rec equal eq xs ys =\n  match xs(), ys() with\n  | Nil, Nil ->\n      true\n  | Cons (x, xs), Cons (y, ys) ->\n      eq x y && equal eq xs ys\n  | Nil, Cons (_, _)\n  | Cons (_, _), Nil ->\n      false\n\nlet rec compare cmp xs ys =\n  match xs(), ys() with\n  | Nil, Nil ->\n      0\n  | Cons (x, xs), Cons (y, ys) ->\n      let c = cmp x y in\n      if c <> 0 then c else compare cmp xs ys\n  | Nil, Cons (_, _) ->\n      -1\n  | Cons (_, _), Nil ->\n      +1\n\n\n\n(* [init_aux f i j] is the sequence [f i, ..., f (j-1)]. *)\n\nlet rec init_aux f i j () =\n  if i < j then begin\n    Cons (f i, init_aux f (i + 1) j)\n  end\n  else\n    Nil\n\nlet init n f =\n  if n < 0 then\n    invalid_arg \"Seq.init\"\n  else\n    init_aux f 0 n\n\nlet rec repeat x () =\n  Cons (x, repeat x)\n\nlet rec forever f () =\n  Cons (f(), forever f)\n\n(* This preliminary definition of [cycle] requires the sequence [xs]\n   to be nonempty. Applying it to an empty sequence would produce a\n   sequence that diverges when it is forced. *)\n\nlet rec cycle_nonempty xs () =\n  append xs (cycle_nonempty xs) ()\n\n(* [cycle xs] checks whether [xs] is empty and, if so, returns an empty\n   sequence. Otherwise, [cycle xs] produces one copy of [xs] followed\n   with the infinite sequence [cycle_nonempty xs]. Thus, the nonemptiness\n   check is performed just once. *)\n\nlet cycle xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs') ->\n      Cons (x, append xs' (cycle_nonempty xs))\n\n(* [iterate1 f x] is the sequence [f x, f (f x), ...].\n   It is equivalent to [tail (iterate f x)].\n   [iterate1] is used as a building block in the definition of [iterate]. *)\n\nlet rec iterate1 f x () =\n  let y = f x in\n  Cons (y, iterate1 f y)\n\n(* [iterate f x] is the sequence [x, f x, ...]. *)\n\n(* The reason why we give this slightly indirect definition of [iterate],\n   as opposed to the more naive definition that may come to mind, is that\n   we are careful to avoid evaluating [f x] until this function call is\n   actually necessary. The naive definition (not shown here) computes the\n   second argument of the sequence, [f x], when the first argument is\n   requested by the user. *)\n\nlet iterate f x =\n  cons x (iterate1 f x)\n\n\n\nlet rec mapi_aux f i xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      Cons (f i x, mapi_aux f (i+1) xs)\n\nlet[@inline] mapi f xs =\n  mapi_aux f 0 xs\n\n(* [tail_scan f s xs] is equivalent to [tail (scan f s xs)].\n   [tail_scan] is used as a building block in the definition of [scan]. *)\n\n(* This slightly indirect definition of [scan] is meant to avoid computing\n   elements too early; see the above comment about [iterate1] and [iterate]. *)\n\nlet rec tail_scan f s xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      let s = f s x in\n      Cons (s, tail_scan f s xs)\n\nlet scan f s xs =\n  cons s (tail_scan f s xs)\n\n(* [take] is defined in such a way that [take 0 xs] returns [empty]\n   immediately, without allocating any memory. *)\n\nlet rec take_aux n xs =\n  if n = 0 then\n    empty\n  else\n    fun () ->\n      match xs() with\n      | Nil ->\n          Nil\n      | Cons (x, xs) ->\n          Cons (x, take_aux (n-1) xs)\n\nlet take n xs =\n  if n < 0 then invalid_arg \"Seq.take\";\n  take_aux n xs\n\n(* [force_drop n xs] is equivalent to [drop n xs ()].\n   [force_drop n xs] requires [n > 0].\n   [force_drop] is used as a building block in the definition of [drop]. *)\n\nlet rec force_drop n xs =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (_, xs) ->\n      let n = n - 1 in\n      if n = 0 then\n        xs()\n      else\n        force_drop n xs\n\n(* [drop] is defined in such a way that [drop 0 xs] returns [xs] immediately,\n   without allocating any memory. *)\n\nlet drop n xs =\n  if n < 0 then invalid_arg \"Seq.drop\"\n  else if n = 0 then\n    xs\n  else\n    fun () ->\n      force_drop n xs\n\nlet rec take_while p xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      if p x then Cons (x, take_while p xs) else Nil\n\nlet rec drop_while p xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) as node ->\n      if p x then drop_while p xs () else node\n\nlet rec group eq xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      Cons (cons x (take_while (eq x) xs), group eq (drop_while (eq x) xs))\n\nexception Forced_twice\n\nmodule Suspension = struct\n\n  type 'a suspension =\n    unit -> 'a\n\n  (* Conversions. *)\n\n  let to_lazy : 'a suspension -> 'a Lazy.t =\n    Lazy.from_fun\n    (* fun s -> lazy (s()) *)\n\n  let from_lazy (s : 'a Lazy.t) : 'a suspension =\n    fun () -> Lazy.force s\n\n  (* [memoize] turns an arbitrary suspension into a persistent suspension. *)\n\n  let memoize (s : 'a suspension) : 'a suspension =\n    from_lazy (to_lazy s)\n\n  (* [failure] is a suspension that fails when forced. *)\n\n  let failure : _ suspension =\n    fun () ->\n      (* A suspension created by [once] has been forced twice. *)\n      raise Forced_twice\n\n  (* If [f] is a suspension, then [once f] is a suspension that can be forced\n     at most once. If it is forced more than once, then [Forced_twice] is\n     raised. *)\n\n  let once (f : 'a suspension) : 'a suspension =\n    let action = Atomic.make f in\n    fun () ->\n      (* Get the function currently stored in [action], and write the\n         function [failure] in its place, so the next access will result\n         in a call to [failure()]. *)\n      let f = Atomic.exchange action failure in\n      f()\n\nend (* Suspension *)\n\nlet rec memoize xs =\n  Suspension.memoize (fun () ->\n    match xs() with\n    | Nil ->\n        Nil\n    | Cons (x, xs) ->\n        Cons (x, memoize xs)\n  )\n\nlet rec once xs =\n  Suspension.once (fun () ->\n    match xs() with\n    | Nil ->\n        Nil\n    | Cons (x, xs) ->\n        Cons (x, once xs)\n  )\n\n\nlet rec zip xs ys () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          Nil\n      | Cons (y, ys) ->\n          Cons ((x, y), zip xs ys)\n\nlet rec map2 f xs ys () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match ys() with\n      | Nil ->\n          Nil\n      | Cons (y, ys) ->\n          Cons (f x y, map2 f xs ys)\n\nlet rec interleave xs ys () =\n  match xs() with\n  | Nil ->\n      ys()\n  | Cons (x, xs) ->\n      Cons (x, interleave ys xs)\n\n(* [sorted_merge1l cmp x xs ys] is equivalent to\n     [sorted_merge cmp (cons x xs) ys].\n\n   [sorted_merge1r cmp xs y ys] is equivalent to\n     [sorted_merge cmp xs (cons y ys)].\n\n   [sorted_merge1 cmp x xs y ys] is equivalent to\n     [sorted_merge cmp (cons x xs) (cons y ys)].\n\n   These three functions are used as building blocks in the definition\n   of [sorted_merge]. *)\n\nlet rec sorted_merge1l cmp x xs ys () =\n  match ys() with\n  | Nil ->\n      Cons (x, xs)\n  | Cons (y, ys) ->\n      sorted_merge1 cmp x xs y ys\n\nand sorted_merge1r cmp xs y ys () =\n  match xs() with\n  | Nil ->\n      Cons (y, ys)\n  | Cons (x, xs) ->\n      sorted_merge1 cmp x xs y ys\n\nand sorted_merge1 cmp x xs y ys =\n  if cmp x y <= 0 then\n    Cons (x, sorted_merge1r cmp xs y ys)\n  else\n    Cons (y, sorted_merge1l cmp x xs ys)\n\nlet sorted_merge cmp xs ys () =\n  match xs(), ys() with\n    | Nil, Nil ->\n        Nil\n    | Nil, c\n    | c, Nil ->\n        c\n    | Cons (x, xs), Cons (y, ys) ->\n        sorted_merge1 cmp x xs y ys\n\n\nlet rec map_fst xys () =\n  match xys() with\n  | Nil ->\n      Nil\n  | Cons ((x, _), xys) ->\n      Cons (x, map_fst xys)\n\nlet rec map_snd xys () =\n  match xys() with\n  | Nil ->\n      Nil\n  | Cons ((_, y), xys) ->\n      Cons (y, map_snd xys)\n\nlet unzip xys =\n  map_fst xys, map_snd xys\n\nlet split =\n  unzip\n\n(* [filter_map_find_left_map f xs] is equivalent to\n   [filter_map Either.find_left (map f xs)]. *)\n\nlet rec filter_map_find_left_map f xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match f x with\n      | Either.Left y ->\n          Cons (y, filter_map_find_left_map f xs)\n      | Either.Right _ ->\n          filter_map_find_left_map f xs ()\n\nlet rec filter_map_find_right_map f xs () =\n  match xs() with\n  | Nil ->\n      Nil\n  | Cons (x, xs) ->\n      match f x with\n      | Either.Left _ ->\n          filter_map_find_right_map f xs ()\n      | Either.Right z ->\n          Cons (z, filter_map_find_right_map f xs)\n\nlet partition_map f xs =\n  filter_map_find_left_map f xs,\n  filter_map_find_right_map f xs\n\nlet partition p xs =\n  filter p xs, filter (fun x -> not (p x)) xs\n\n(* If [xss] is a matrix (a sequence of rows), then [peel xss] is a pair of\n   the first column (a sequence of elements) and of the remainder of the\n   matrix (a sequence of shorter rows). These two sequences have the same\n   length. The rows of the matrix [xss] are not required to have the same\n   length. An empty row is ignored. *)\n\n(* Because [peel] uses [unzip], its argument must be persistent. The same\n   remark applies to [transpose], [diagonals], [product], etc. *)\n\nlet peel xss =\n  unzip (filter_map uncons xss)\n\nlet rec transpose xss () =\n  let heads, tails = peel xss in\n  if is_empty heads then begin\n    assert (is_empty tails);\n    Nil\n  end\n  else\n    Cons (heads, transpose tails)\n\n(* The internal function [diagonals] takes an extra argument, [remainders],\n   which contains the remainders of the rows that have already been\n   discovered. *)\n\nlet rec diagonals remainders xss () =\n  match xss() with\n  | Cons (xs, xss) ->\n      begin match xs() with\n      | Cons (x, xs) ->\n          (* We discover a new nonempty row [x :: xs]. Thus, the next diagonal\n             is [x :: heads]: this diagonal begins with [x] and continues with\n             the first element of every row in [remainders]. In the recursive\n             call, the argument [remainders] is instantiated with [xs ::\n             tails], which means that we have one more remaining row, [xs],\n             and that we keep the tails of the pre-existing remaining rows. *)\n          let heads, tails = peel remainders in\n          Cons (cons x heads, diagonals (cons xs tails) xss)\n      | Nil ->\n          (* We discover a new empty row. In this case, the new diagonal is\n             just [heads], and [remainders] is instantiated with just [tails],\n             as we do not have one more remaining row. *)\n          let heads, tails = peel remainders in\n          Cons (heads, diagonals tails xss)\n      end\n  | Nil ->\n      (* There are no more rows to be discovered. There remains to exhaust\n         the remaining rows. *)\n      transpose remainders ()\n\n(* If [xss] is a matrix (a sequence of rows), then [diagonals xss] is\n   the sequence of its diagonals.\n\n   The first diagonal contains just the first element of the\n   first row. The second diagonal contains the first element of the\n   second row and the second element of the first row; and so on.\n   This kind of diagonal is in fact sometimes known as an antidiagonal.\n\n   - Every diagonal is a finite sequence.\n   - The rows of the matrix [xss] are not required to have the same length.\n   - The matrix [xss] is not required to be finite (in either direction).\n   - The matrix [xss] must be persistent. *)\n\nlet diagonals xss =\n  diagonals empty xss\n\nlet map_product f xs ys =\n  concat (diagonals (\n    map (fun x ->\n      map (fun y ->\n        f x y\n      ) ys\n    ) xs\n  ))\n\nlet product xs ys =\n  map_product (fun x y -> (x, y)) xs ys\n\nlet of_dispenser it =\n  let rec c () =\n    match it() with\n    | None ->\n        Nil\n    | Some x ->\n        Cons (x, c)\n  in\n  c\n\nlet to_dispenser xs =\n  let s = ref xs in\n  fun () ->\n    match (!s)() with\n    | Nil ->\n        None\n    | Cons (x, xs) ->\n        s := xs;\n        Some x\n\n\n\nlet rec ints i () =\n  Cons (i, ints (i + 1))\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype 'a t = 'a option = None | Some of 'a\n\nlet none = None\nlet some v = Some v\nlet value o ~default = match o with Some v -> v | None -> default\nlet get = function Some v -> v | None -> invalid_arg \"option is None\"\nlet bind o f = match o with None -> None | Some v -> f v\nlet join = function Some o -> o | None -> None\nlet map f o = match o with None -> None | Some v -> Some (f v)\nlet fold ~none ~some = function Some v -> some v | None -> none\nlet iter f = function Some v -> f v | None -> ()\nlet is_none = function None -> true | Some _ -> false\nlet is_some = function None -> false | Some _ -> true\n\nlet equal eq o0 o1 = match o0, o1 with\n| Some v0, Some v1 -> eq v0 v1\n| None, None -> true\n| _ -> false\n\nlet compare cmp o0 o1 = match o0, o1 with\n| Some v0, Some v1 -> cmp v0 v1\n| None, None -> 0\n| None, Some _ -> -1\n| Some _, None -> 1\n\nlet to_result ~none = function None -> Error none | Some v -> Ok v\nlet to_list = function None -> [] | Some v -> [v]\nlet to_seq = function None -> Seq.empty | Some v -> Seq.return v\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype ('a, 'e) t = ('a, 'e) result = Ok of 'a | Error of 'e\n\nlet ok v = Ok v\nlet error e = Error e\nlet value r ~default = match r with Ok v -> v | Error _ -> default\nlet get_ok = function Ok v -> v | Error _ -> invalid_arg \"result is Error _\"\nlet get_error = function Error e -> e | Ok _ -> invalid_arg \"result is Ok _\"\nlet bind r f = match r with Ok v -> f v | Error _ as e -> e\nlet join = function Ok r -> r | Error _ as e -> e\nlet map f = function Ok v -> Ok (f v) | Error _ as e -> e\nlet map_error f = function Error e -> Error (f e) | Ok _ as v -> v\nlet fold ~ok ~error = function Ok v -> ok v | Error e -> error e\nlet iter f = function Ok v -> f v | Error _ -> ()\nlet iter_error f = function Error e -> f e | Ok _ -> ()\nlet is_ok = function Ok _ -> true | Error _ -> false\nlet is_error = function Error _ -> true | Ok _ -> false\n\nlet equal ~ok ~error r0 r1 = match r0, r1 with\n| Ok v0, Ok v1 -> ok v0 v1\n| Error e0, Error e1 -> error e0 e1\n| _, _ -> false\n\nlet compare ~ok ~error r0 r1 = match r0, r1 with\n| Ok v0, Ok v1 -> ok v0 v1\n| Error e0, Error e1 -> error e0 e1\n| Ok _, Error _ -> -1\n| Error _, Ok _ -> 1\n\nlet to_option = function Ok v -> Some v | Error _ -> None\nlet to_list = function Ok v -> [v] | Error _ -> []\nlet to_seq = function Ok v -> Seq.return v | Error _ -> Seq.empty\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t = bool = false | true\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\nlet equal : bool -> bool -> bool = ( = )\nlet compare : bool -> bool -> int = Stdlib.compare\nexternal to_int : bool -> int = \"%identity\"\nlet to_float = function false -> 0. | true -> 1.\n\n(*\nlet of_string = function\n| \"false\" -> Some false\n| \"true\" -> Some true\n| _ -> None\n*)\n\nlet to_string = function false -> \"false\" | true -> \"true\"\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Character operations *)\n\nexternal code: char -> int = \"%identity\"\nexternal unsafe_chr: int -> char = \"%identity\"\n\nlet chr n =\n  if n < 0 || n > 255 then invalid_arg \"Char.chr\" else unsafe_chr n\n\nexternal bytes_create: int -> bytes = \"caml_create_bytes\"\nexternal bytes_unsafe_set : bytes -> int -> char -> unit\n                           = \"%bytes_unsafe_set\"\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet escaped = function\n  | '\\'' -> \"\\\\'\"\n  | '\\\\' -> \"\\\\\\\\\"\n  | '\\n' -> \"\\\\n\"\n  | '\\t' -> \"\\\\t\"\n  | '\\r' -> \"\\\\r\"\n  | '\\b' -> \"\\\\b\"\n  | ' ' .. '~' as c ->\n      let s = bytes_create 1 in\n      bytes_unsafe_set s 0 c;\n      unsafe_to_string s\n  | c ->\n      let n = code c in\n      let s = bytes_create 4 in\n      bytes_unsafe_set s 0 '\\\\';\n      bytes_unsafe_set s 1 (unsafe_chr (48 + n / 100));\n      bytes_unsafe_set s 2 (unsafe_chr (48 + (n / 10) mod 10));\n      bytes_unsafe_set s 3 (unsafe_chr (48 + n mod 10));\n      unsafe_to_string s\n\nlet lowercase_ascii = function\n  | 'A' .. 'Z' as c -> unsafe_chr(code c + 32)\n  | c -> c\n\nlet uppercase_ascii = function\n  | 'a' .. 'z' as c -> unsafe_chr(code c - 32)\n  | c -> c\n\ntype t = char\n\nlet compare c1 c2 = code c1 - code c2\nlet equal (c1: t) (c2: t) = compare c1 c2 = 0\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                           Daniel C. Buenzli                            *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\n\nlet err_no_pred = \"U+0000 has no predecessor\"\nlet err_no_succ = \"U+10FFFF has no successor\"\nlet err_not_sv i = format_int \"%X\" i ^ \" is not an Unicode scalar value\"\nlet err_not_latin1 u = \"U+\" ^ format_int \"%04X\" u ^ \" is not a latin1 character\"\n\ntype t = int\n\nlet min = 0x0000\nlet max = 0x10FFFF\nlet lo_bound = 0xD7FF\nlet hi_bound = 0xE000\n\nlet bom = 0xFEFF\nlet rep = 0xFFFD\n\nlet succ u =\n  if u = lo_bound then hi_bound else\n  if u = max then invalid_arg err_no_succ else\n  u + 1\n\nlet pred u =\n  if u = hi_bound then lo_bound else\n  if u = min then invalid_arg err_no_pred else\n  u - 1\n\nlet is_valid i = (min <= i && i <= lo_bound) || (hi_bound <= i && i <= max)\nlet of_int i = if is_valid i then i else invalid_arg (err_not_sv i)\nexternal unsafe_of_int : int -> t = \"%identity\"\nexternal to_int : t -> int = \"%identity\"\n\nlet is_char u = u < 256\nlet of_char c = Char.code c\nlet to_char u =\n  if u > 255 then invalid_arg (err_not_latin1 u) else\n  Char.unsafe_chr u\n\nlet unsafe_to_char = Char.unsafe_chr\n\nlet equal : int -> int -> bool = ( = )\nlet compare : int -> int -> int = Stdlib.compare\nlet hash = to_int\n\n(* UTF codecs tools *)\n\ntype utf_decode = int\n(* This is an int [0xDUUUUUU] decomposed as follows:\n   - [D] is four bits for decode information, the highest bit is set if the\n     decode is valid. The three lower bits indicate the number of elements\n     from the source that were consumed by the decode.\n   - [UUUUUU] is the decoded Unicode character or the Unicode replacement\n     character U+FFFD if for invalid decodes. *)\n\nlet valid_bit = 27\nlet decode_bits = 24\n\nlet[@inline] utf_decode_is_valid d = (d lsr valid_bit) = 1\nlet[@inline] utf_decode_length d = (d lsr decode_bits) land 0b111\nlet[@inline] utf_decode_uchar d = unsafe_of_int (d land 0xFFFFFF)\nlet[@inline] utf_decode n u = ((8 lor n) lsl decode_bits) lor (to_int u)\nlet[@inline] utf_decode_invalid n = (n lsl decode_bits) lor rep\n\nlet utf_8_byte_length u = match to_int u with\n| u when u < 0 -> assert false\n| u when u <= 0x007F -> 1\n| u when u <= 0x07FF -> 2\n| u when u <= 0xFFFF -> 3\n| u when u <= 0x10FFFF -> 4\n| _ -> assert false\n\nlet utf_16_byte_length u = match to_int u with\n| u when u < 0 -> assert false\n| u when u <= 0xFFFF -> 2\n| u when u <= 0x10FFFF -> 4\n| _ -> assert false\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* An alias for the type of lists. *)\ntype 'a t = 'a list = [] | (::) of 'a * 'a list\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | _::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet cons a l = a::l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::_ -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | _::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet nth_opt l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> None\n    | a::l -> if n = 0 then Some a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet[@tail_mod_cons] rec init i last f =\n  if i > last then []\n  else if i = last then [f i]\n  else\n    let r1 = f i in\n    let r2 = f (i+1) in\n    r1 :: r2 :: init (i+2) last f\n\nlet init len f =\n  if len < 0 then invalid_arg \"List.init\" else\n  init 0 (len - 1) f\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet[@tail_mod_cons] rec map f = function\n    [] -> []\n  | [a1] ->\n      let r1 = f a1 in\n      [r1]\n  | a1::a2::l ->\n      let r1 = f a1 in\n      let r2 = f a2 in\n      r1::r2::map f l\n\nlet[@tail_mod_cons] rec mapi i f = function\n    [] -> []\n  | [a1] ->\n      let r1 = f i a1 in\n      [r1]\n  | a1::a2::l ->\n      let r1 = f i a1 in\n      let r2 = f (i+1) a2 in\n      r1::r2::mapi (i+2) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet[@tail_mod_cons] rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | ([a1], [b1]) ->\n      let r1 = f a1 b1 in\n      [r1]\n  | (a1::a2::l1, b1::b2::l2) ->\n      let r1 = f a1 b1 in\n      let r2 = f a2 b2 in\n      r1::r2::map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assoc_opt x = function\n    [] -> None\n  | (a,b)::l -> if compare a x = 0 then Some b else assoc_opt x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec assq_opt x = function\n    [] -> None\n  | (a,b)::l -> if a == x then Some b else assq_opt x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, _) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, _) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, _ as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, _ as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet rec find_opt p = function\n  | [] -> None\n  | x :: l -> if p x then Some x else find_opt p l\n\nlet find_index p =\n  let rec aux i = function\n    [] -> None\n    | a::l -> if p a then Some i else aux (i+1) l in\n  aux 0\n\nlet rec find_map f = function\n  | [] -> None\n  | x :: l ->\n     begin match f x with\n       | Some _ as result -> result\n       | None -> find_map f l\n     end\n\nlet find_mapi f =\n  let rec aux i = function\n  | [] -> None\n  | x :: l ->\n     begin match f i x with\n       | Some _ as result -> result\n       | None -> aux (i+1) l\n     end in\n  aux 0\n\nlet[@tail_mod_cons] rec find_all p = function\n  | [] -> []\n  | x :: l -> if p x then x :: find_all p l else find_all p l\n\nlet filter = find_all\n\nlet[@tail_mod_cons] rec filteri p i = function\n  | [] -> []\n  | x::l ->\n      let i' = i + 1 in\n      if p i x then x :: filteri p i' l else filteri p i' l\n\nlet filteri p l = filteri p 0 l\n\nlet[@tail_mod_cons] rec filter_map f = function\n  | [] -> []\n  | x :: l ->\n      match f x with\n      | None -> filter_map f l\n      | Some v -> v :: filter_map f l\n\nlet[@tail_mod_cons] rec concat_map f = function\n  | [] -> []\n  | x::xs -> prepend_concat_map (f x) f xs\nand[@tail_mod_cons] prepend_concat_map ys f xs =\n  match ys with\n  | [] -> concat_map f xs\n  | y :: ys -> y :: prepend_concat_map ys f xs\n\nlet fold_left_map f accu l =\n  let rec aux accu l_accu = function\n    | [] -> accu, rev l_accu\n    | x :: l ->\n        let accu, x = f accu x in\n        aux accu (x :: l_accu) l in\n  aux accu [] l\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet partition_map p l =\n  let rec part left right = function\n  | [] -> (rev left, rev right)\n  | x :: l ->\n     begin match p x with\n       | Either.Left v -> part (v :: left) right l\n       | Either.Right v -> part left (v :: right) l\n     end\n  in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s = if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1] in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          if cmp x1 x2 <= 0 then\n            if cmp x2 x3 <= 0 then [x1; x2; x3]\n            else if cmp x1 x3 <= 0 then [x1; x3; x2]\n            else [x3; x1; x2]\n          else if cmp x1 x3 <= 0 then [x2; x1; x3]\n          else if cmp x2 x3 <= 0 then [x2; x3; x1]\n          else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = rev_sort n1 l in\n        let s2, tl = rev_sort n2 l2 in\n        (rev_merge_rev s1 s2 [], tl)\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s = if cmp x1 x2 > 0 then [x1; x2] else [x2; x1] in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          if cmp x1 x2 > 0 then\n            if cmp x2 x3 > 0 then [x1; x2; x3]\n            else if cmp x1 x3 > 0 then [x1; x3; x2]\n            else [x3; x1; x2]\n          else if cmp x1 x3 > 0 then [x2; x1; x3]\n          else if cmp x2 x3 > 0 then [x2; x3; x1]\n          else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = sort n1 l in\n        let s2, tl = sort n2 l2 in\n        (rev_merge s1 s2 [], tl)\n  in\n  let len = length l in\n  if len < 2 then l else fst (sort len l)\n\n\nlet sort = stable_sort\nlet fast_sort = stable_sort\n\n(* Note: on a very long list (length over about 100000), it used to be\n   faster to convert the list to an array, sort the array, and convert\n   back, truncating the array object after prepending each thousand\n   entries to the resulting list. Impossible now that Obj.truncate has\n   been removed. *)\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then [x1] else if c < 0 then [x1; x2] else [x2; x1]\n        in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x2] else if c < 0 then [x2; x3] else [x3; x2]\n          else if c < 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x1; x2]\n            else if c < 0 then [x1; x2; x3]\n            else\n              let c = cmp x1 x3 in\n              if c = 0 then [x1; x2]\n              else if c < 0 then [x1; x3; x2]\n              else [x3; x1; x2]\n          else\n            let c = cmp x1 x3 in\n            if c = 0 then [x2; x1]\n            else if c < 0 then [x2; x1; x3]\n            else\n              let c = cmp x2 x3 in\n              if c = 0 then [x2; x1]\n              else if c < 0 then [x2; x3; x1]\n              else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = rev_sort n1 l in\n        let s2, tl = rev_sort n2 l2 in\n        (rev_merge_rev s1 s2 [], tl)\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then [x1] else if c > 0 then [x1; x2] else [x2; x1]\n        in\n        (s, tl)\n    | 3, x1 :: x2 :: x3 :: tl ->\n        let s =\n          let c = cmp x1 x2 in\n          if c = 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x2] else if c > 0 then [x2; x3] else [x3; x2]\n          else if c > 0 then\n            let c = cmp x2 x3 in\n            if c = 0 then [x1; x2]\n            else if c > 0 then [x1; x2; x3]\n            else\n              let c = cmp x1 x3 in\n              if c = 0 then [x1; x2]\n              else if c > 0 then [x1; x3; x2]\n              else [x3; x1; x2]\n          else\n            let c = cmp x1 x3 in\n            if c = 0 then [x2; x1]\n            else if c > 0 then [x2; x1; x3]\n            else\n              let c = cmp x2 x3 in\n              if c = 0 then [x2; x1]\n              else if c > 0 then [x2; x3; x1]\n              else [x3; x2; x1]\n        in\n        (s, tl)\n    | n, l ->\n        let n1 = n asr 1 in\n        let n2 = n - n1 in\n        let s1, l2 = sort n1 l in\n        let s2, tl = sort n2 l2 in\n        (rev_merge s1 s2 [], tl)\n  in\n  let len = length l in\n  if len < 2 then l else fst (sort len l)\n\n\nlet rec compare_lengths l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _ -> -1\n  | _, [] -> 1\n  | _ :: l1, _ :: l2 -> compare_lengths l1 l2\n\nlet rec compare_length_with l n =\n  match l with\n  | [] ->\n    if n = 0 then 0 else\n      if n > 0 then -1 else 1\n  | _ :: l ->\n    if n <= 0 then 1 else\n      compare_length_with l (n-1)\n\nlet is_empty = function\n  | [] -> true\n  | _ :: _ -> false\n\n(** {1 Comparison} *)\n\n(* Note: we are *not* shortcutting the list by using\n   [List.compare_lengths] first; this may be slower on long lists\n   immediately start with distinct elements. It is also incorrect for\n   [compare] below, and it is better (principle of least surprise) to\n   use the same approach for both functions. *)\nlet rec equal eq l1 l2 =\n  match l1, l2 with\n  | [], [] -> true\n  | [], _::_ | _::_, [] -> false\n  | a1::l1, a2::l2 -> eq a1 a2 && equal eq l1 l2\n\nlet rec compare cmp l1 l2 =\n  match l1, l2 with\n  | [], [] -> 0\n  | [], _::_ -> -1\n  | _::_, [] -> 1\n  | a1::l1, a2::l2 ->\n    let c = cmp a1 a2 in\n    if c <> 0 then c\n    else compare cmp l1 l2\n\n(** {1 Iterators} *)\n\nlet to_seq l =\n  let rec aux l () = match l with\n    | [] -> Seq.Nil\n    | x :: tail -> Seq.Cons (x, aux tail)\n  in\n  aux l\n\nlet[@tail_mod_cons] rec of_seq seq =\n  match seq () with\n  | Seq.Nil -> []\n  | Seq.Cons (x1, seq) ->\n      begin match seq () with\n      | Seq.Nil -> [x1]\n      | Seq.Cons (x2, seq) -> x1 :: x2 :: of_seq seq\n      end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t = int\n\nlet zero = 0\nlet one = 1\nlet minus_one = -1\nexternal neg : int -> int = \"%negint\"\nexternal add : int -> int -> int = \"%addint\"\nexternal sub : int -> int -> int = \"%subint\"\nexternal mul : int -> int -> int = \"%mulint\"\nexternal div : int -> int -> int = \"%divint\"\nexternal rem : int -> int -> int = \"%modint\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nlet abs x = if x >= 0 then x else -x\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\nexternal logand : int -> int -> int = \"%andint\"\nexternal logor : int -> int -> int = \"%orint\"\nexternal logxor : int -> int -> int = \"%xorint\"\nlet lognot x = logxor x (-1)\nexternal shift_left : int -> int -> int = \"%lslint\"\nexternal shift_right : int -> int -> int = \"%asrint\"\nexternal shift_right_logical : int -> int -> int = \"%lsrint\"\nlet equal : int -> int -> bool = ( = )\nlet compare : int -> int -> int = Stdlib.compare\nlet min x y : t = if x <= y then x else y\nlet max x y : t = if x >= y then x else y\nexternal to_float : int -> float = \"%floatofint\"\nexternal of_float : float -> int = \"%intoffloat\"\n\n(*\nexternal int_of_string : string -> int = \"caml_int_of_string\"\nlet of_string s = try Some (int_of_string s) with Failure _ -> None\n*)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nlet to_string x = format_int \"%d\" x\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in string.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in string.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : bytes -> int = \"%bytes_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%bytes_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%bytes_safe_set\"\nexternal create : int -> bytes = \"caml_create_bytes\"\nexternal unsafe_get : bytes -> int -> char = \"%bytes_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_bytes\" [@@noalloc]\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\nexternal unsafe_of_string : string -> bytes = \"%bytes_of_string\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_bytes\" [@@noalloc]\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\n(* addition with an overflow check *)\nlet (++) a b =\n  let c = a + b in\n  match a < 0, b < 0, c < 0 with\n  | true , true , false\n  | false, false, true  -> invalid_arg \"Bytes.extend\" (* overflow *)\n  | _ -> c\n\nlet extend s left right =\n  let len = length s ++ left ++ right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = Int.min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\n(* duplicated in string.ml *)\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\n(* duplicated in string.ml *)\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"Bytes.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> empty\n  | l -> let seplen = length sep in\n          unsafe_blits\n            (create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n\n\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet unsafe_escape s =\n  (* We perform two passes on the input sequence, one to compute the\n     result size and one to write the result.\n\n     #11508, #11509: This logic would be incorrect in presence of\n     concurrent modification to the input, making the use of\n     [unsafe_set] below memory-unsafe.\n\n     Precondition: This function may be safely called on:\n     - an immutable byte sequence\n     - a uniquely-owned byte sequence (the function takes ownership)\n\n     In either case we return a uniquely-owned byte sequence.\n  *)\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | ' ' .. '~' -> 1\n       | _ -> 4)\n  done;\n  if !n = length s then s\n  else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\\\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | (' ' .. '~') as c -> unsafe_set s' !n c\n      | c ->\n          let a = char_code c in\n          unsafe_set s' !n '\\\\';\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a / 100));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a mod 10));\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet escaped b =\n  let b = copy b in\n  (* We copy our input to obtain a uniquely-owned byte sequence [b]\n     to satisfy [unsafe_escape]'s precondition *)\n  unsafe_escape b\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nlet exists p s =\n  let n = length s in\n  let rec loop i =\n    if i = n then false\n    else if p (unsafe_get s i) then true\n    else loop (succ i) in\n  loop 0\n\nlet for_all p s =\n  let n = length s in\n  let rec loop i =\n    if i = n then true\n    else if p (unsafe_get s i) then loop (succ i)\n    else false in\n  loop 0\n\nlet uppercase_ascii s = map Char.uppercase_ascii s\nlet lowercase_ascii s = map Char.lowercase_ascii s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize_ascii s = apply1 Char.uppercase_ascii s\nlet uncapitalize_ascii s = apply1 Char.lowercase_ascii s\n\n(* duplicated in string.ml *)\nlet starts_with ~prefix s =\n  let len_s = length s\n  and len_pre = length prefix in\n  let rec aux i =\n    if i = len_pre then true\n    else if unsafe_get s i <> unsafe_get prefix i then false\n    else aux (i + 1)\n  in len_s >= len_pre && aux 0\n\n(* duplicated in string.ml *)\nlet ends_with ~suffix s =\n  let len_s = length s\n  and len_suf = length suffix in\n  let diff = len_s - len_suf in\n  let rec aux i =\n    if i = len_suf then true\n    else if unsafe_get s (diff + i) <> unsafe_get suffix i then false\n    else aux (i + 1)\n  in diff >= 0 && aux 0\n\n(* duplicated in string.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c\n\n(* duplicated in string.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.index_from_opt / Bytes.index_from_opt\"\n  else\n    index_rec_opt s l i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n\n(* duplicated in string.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n\n(* duplicated in string.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in string.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nexternal equal : t -> t -> bool = \"caml_bytes_equal\" [@@noalloc]\n\n(* duplicated in string.ml *)\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\n(** {1 Iterators} *)\n\nlet to_seq s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi s =\n  let rec aux i () =\n    if i = length s then Seq.Nil\n    else\n      let x = get s i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet of_seq i =\n  let n = ref 0 in\n  let buf = ref (make 256 '\\000') in\n  let resize () =\n    (* resize *)\n    let new_len = Int.min (2 * length !buf) Sys.max_string_length in\n    if length !buf = new_len then failwith \"Bytes.of_seq: cannot grow bytes\";\n    let new_buf = make new_len '\\000' in\n    blit !buf 0 new_buf 0 !n;\n    buf := new_buf\n  in\n  Seq.iter\n    (fun c ->\n       if !n = length !buf then resize();\n       set !buf !n c;\n       incr n)\n    i;\n  sub !buf 0 !n\n\n(** {6 Binary encoding/decoding of integers} *)\n\n(* The get_ functions are all duplicated in string.ml *)\n\nexternal unsafe_get_uint8 : bytes -> int -> int = \"%bytes_unsafe_get\"\nexternal unsafe_get_uint16_ne : bytes -> int -> int = \"%caml_bytes_get16u\"\nexternal get_uint8 : bytes -> int -> int = \"%bytes_safe_get\"\nexternal get_uint16_ne : bytes -> int -> int = \"%caml_bytes_get16\"\nexternal get_int32_ne : bytes -> int -> int32 = \"%caml_bytes_get32\"\nexternal get_int64_ne : bytes -> int -> int64 = \"%caml_bytes_get64\"\n\nexternal unsafe_set_uint8 : bytes -> int -> int -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_set_uint16_ne : bytes -> int -> int -> unit\n                              = \"%caml_bytes_set16u\"\nexternal set_int8 : bytes -> int -> int -> unit = \"%bytes_safe_set\"\nexternal set_int16_ne : bytes -> int -> int -> unit = \"%caml_bytes_set16\"\nexternal set_int32_ne : bytes -> int -> int32 -> unit = \"%caml_bytes_set32\"\nexternal set_int64_ne : bytes -> int -> int64 -> unit = \"%caml_bytes_set64\"\nexternal swap16 : int -> int = \"%bswap16\"\nexternal swap32 : int32 -> int32 = \"%bswap_int32\"\nexternal swap64 : int64 -> int64 = \"%bswap_int64\"\n\nlet unsafe_get_uint16_le b i =\n  if Sys.big_endian\n  then swap16 (unsafe_get_uint16_ne b i)\n  else unsafe_get_uint16_ne b i\n\nlet unsafe_get_uint16_be b i =\n  if Sys.big_endian\n  then unsafe_get_uint16_ne b i\n  else swap16 (unsafe_get_uint16_ne b i)\n\nlet get_int8 b i =\n  ((get_uint8 b i) lsl (Sys.int_size - 8)) asr (Sys.int_size - 8)\n\nlet get_uint16_le b i =\n  if Sys.big_endian then swap16 (get_uint16_ne b i)\n  else get_uint16_ne b i\n\nlet get_uint16_be b i =\n  if not Sys.big_endian then swap16 (get_uint16_ne b i)\n  else get_uint16_ne b i\n\nlet get_int16_ne b i =\n  ((get_uint16_ne b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int16_le b i =\n  ((get_uint16_le b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int16_be b i =\n  ((get_uint16_be b i) lsl (Sys.int_size - 16)) asr (Sys.int_size - 16)\n\nlet get_int32_le b i =\n  if Sys.big_endian then swap32 (get_int32_ne b i)\n  else get_int32_ne b i\n\nlet get_int32_be b i =\n  if not Sys.big_endian then swap32 (get_int32_ne b i)\n  else get_int32_ne b i\n\nlet get_int64_le b i =\n  if Sys.big_endian then swap64 (get_int64_ne b i)\n  else get_int64_ne b i\n\nlet get_int64_be b i =\n  if not Sys.big_endian then swap64 (get_int64_ne b i)\n  else get_int64_ne b i\n\nlet unsafe_set_uint16_le b i x =\n  if Sys.big_endian\n  then unsafe_set_uint16_ne b i (swap16 x)\n  else unsafe_set_uint16_ne b i x\n\nlet unsafe_set_uint16_be b i x =\n  if Sys.big_endian\n  then unsafe_set_uint16_ne b i x else\n  unsafe_set_uint16_ne b i (swap16 x)\n\nlet set_int16_le b i x =\n  if Sys.big_endian then set_int16_ne b i (swap16 x)\n  else set_int16_ne b i x\n\nlet set_int16_be b i x =\n  if not Sys.big_endian then set_int16_ne b i (swap16 x)\n  else set_int16_ne b i x\n\nlet set_int32_le b i x =\n  if Sys.big_endian then set_int32_ne b i (swap32 x)\n  else set_int32_ne b i x\n\nlet set_int32_be b i x =\n  if not Sys.big_endian then set_int32_ne b i (swap32 x)\n  else set_int32_ne b i x\n\nlet set_int64_le b i x =\n  if Sys.big_endian then set_int64_ne b i (swap64 x)\n  else set_int64_ne b i x\n\nlet set_int64_be b i x =\n  if not Sys.big_endian then set_int64_ne b i (swap64 x)\n  else set_int64_ne b i x\n\nlet set_uint8 = set_int8\nlet set_uint16_ne = set_int16_ne\nlet set_uint16_be = set_int16_be\nlet set_uint16_le = set_int16_le\n\n(* UTF codecs and validations *)\n\nlet dec_invalid = Uchar.utf_decode_invalid\nlet[@inline] dec_ret n u = Uchar.utf_decode n (Uchar.unsafe_of_int u)\n\n(* In case of decoding error, if we error on the first byte, we\n   consume the byte, otherwise we consume the [n] bytes preceding\n   the erroring byte.\n\n   This means that if a client uses decodes without caring about\n   validity it naturally replace bogus data with Uchar.rep according\n   to the WHATWG Encoding standard. Other schemes are possible by\n   consulting the number of used bytes on invalid decodes. For more\n   details see https://hsivonen.fi/broken-utf-8/\n\n   For this reason in [get_utf_8_uchar] we gradually check the next\n   byte is available rather than doing it immediately after the\n   first byte. Contrast with [is_valid_utf_8]. *)\n\n(* UTF-8 *)\n\nlet[@inline] not_in_x80_to_xBF b = b lsr 6 <> 0b10\nlet[@inline] not_in_xA0_to_xBF b = b lsr 5 <> 0b101\nlet[@inline] not_in_x80_to_x9F b = b lsr 5 <> 0b100\nlet[@inline] not_in_x90_to_xBF b = b < 0x90 || 0xBF < b\nlet[@inline] not_in_x80_to_x8F b = b lsr 4 <> 0x8\n\nlet[@inline] utf_8_uchar_2 b0 b1 =\n  ((b0 land 0x1F) lsl 6) lor\n  ((b1 land 0x3F))\n\nlet[@inline] utf_8_uchar_3 b0 b1 b2 =\n  ((b0 land 0x0F) lsl 12) lor\n  ((b1 land 0x3F) lsl 6) lor\n  ((b2 land 0x3F))\n\nlet[@inline] utf_8_uchar_4 b0 b1 b2 b3 =\n  ((b0 land 0x07) lsl 18) lor\n  ((b1 land 0x3F) lsl 12) lor\n  ((b2 land 0x3F) lsl 6) lor\n  ((b3 land 0x3F))\n\nlet get_utf_8_uchar b i =\n  let b0 = get_uint8 b i in (* raises if [i] is not a valid index. *)\n  let get = unsafe_get_uint8 in\n  let max = length b - 1 in\n  match Char.unsafe_chr b0 with (* See The Unicode Standard, Table 3.7 *)\n  | '\\x00' .. '\\x7F' -> dec_ret 1 b0\n  | '\\xC2' .. '\\xDF' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_xBF b1 then dec_invalid 1 else\n      dec_ret 2 (utf_8_uchar_2 b0 b1)\n  | '\\xE0' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_xA0_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      dec_ret 3 (utf_8_uchar_3 b0 b1 b2)\n  | '\\xE1' .. '\\xEC' | '\\xEE' .. '\\xEF' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      dec_ret 3 (utf_8_uchar_3 b0 b1 b2)\n  | '\\xED' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_x9F b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      dec_ret 3 (utf_8_uchar_3 b0 b1 b2)\n  | '\\xF0' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x90_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      let i = i + 1 in if i > max then dec_invalid 3 else\n      let b3 = get b i in if not_in_x80_to_xBF b3 then dec_invalid 3 else\n      dec_ret 4 (utf_8_uchar_4 b0 b1 b2 b3)\n  | '\\xF1' .. '\\xF3' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_xBF b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      let i = i + 1 in if i > max then dec_invalid 3 else\n      let b3 = get b i in if not_in_x80_to_xBF b3 then dec_invalid 3 else\n      dec_ret 4 (utf_8_uchar_4 b0 b1 b2 b3)\n  | '\\xF4' ->\n      let i = i + 1 in if i > max then dec_invalid 1 else\n      let b1 = get b i in if not_in_x80_to_x8F b1 then dec_invalid 1 else\n      let i = i + 1 in if i > max then dec_invalid 2 else\n      let b2 = get b i in if not_in_x80_to_xBF b2 then dec_invalid 2 else\n      let i = i + 1 in if i > max then dec_invalid 3 else\n      let b3 = get b i in if not_in_x80_to_xBF b3 then dec_invalid 3 else\n      dec_ret 4 (utf_8_uchar_4 b0 b1 b2 b3)\n  | _ -> dec_invalid 1\n\nlet set_utf_8_uchar b i u =\n  let set = unsafe_set_uint8 in\n  let max = length b - 1 in\n  match Uchar.to_int u with\n  | u when u < 0 -> assert false\n  | u when u <= 0x007F ->\n      set_uint8 b i u;\n      1\n  | u when u <= 0x07FF ->\n      let last = i + 1 in\n      if last > max then 0 else\n      (set_uint8 b i (0xC0 lor (u lsr 6));\n       set b last (0x80 lor (u land 0x3F));\n       2)\n  | u when u <= 0xFFFF ->\n      let last = i + 2 in\n      if last > max then 0 else\n      (set_uint8 b i (0xE0 lor (u lsr 12));\n       set b (i + 1) (0x80 lor ((u lsr 6) land 0x3F));\n       set b last (0x80 lor (u land 0x3F));\n       3)\n  | u when u <= 0x10FFFF ->\n      let last = i + 3 in\n      if last > max then 0 else\n      (set_uint8 b i (0xF0 lor (u lsr 18));\n       set b (i + 1) (0x80 lor ((u lsr 12) land 0x3F));\n       set b (i + 2) (0x80 lor ((u lsr 6) land 0x3F));\n       set b last (0x80 lor (u land 0x3F));\n       4)\n  | _ -> assert false\n\nlet is_valid_utf_8 b =\n  let rec loop max b i =\n    if i > max then true else\n    let get = unsafe_get_uint8 in\n    match Char.unsafe_chr (get b i) with\n    | '\\x00' .. '\\x7F' -> loop max b (i + 1)\n    | '\\xC2' .. '\\xDF' ->\n        let last = i + 1 in\n        if last > max\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xE0' ->\n        let last = i + 2 in\n        if last > max\n        || not_in_xA0_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xE1' .. '\\xEC' | '\\xEE' .. '\\xEF' ->\n        let last = i + 2 in\n        if last > max\n        || not_in_x80_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xED' ->\n        let last = i + 2 in\n        if last > max\n        || not_in_x80_to_x9F (get b (i + 1))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xF0' ->\n        let last = i + 3 in\n        if last > max\n        || not_in_x90_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b (i + 2))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xF1' .. '\\xF3' ->\n        let last = i + 3 in\n        if last > max\n        || not_in_x80_to_xBF (get b (i + 1))\n        || not_in_x80_to_xBF (get b (i + 2))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | '\\xF4' ->\n        let last = i + 3 in\n        if last > max\n        || not_in_x80_to_x8F (get b (i + 1))\n        || not_in_x80_to_xBF (get b (i + 2))\n        || not_in_x80_to_xBF (get b last)\n        then false\n        else loop max b (last + 1)\n    | _ -> false\n  in\n  loop (length b - 1) b 0\n\n(* UTF-16BE *)\n\nlet get_utf_16be_uchar b i =\n  let get = unsafe_get_uint16_be in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  if i = max then dec_invalid 1 else\n  match get b i with\n  | u when u < 0xD800 || u > 0xDFFF -> dec_ret 2 u\n  | u when u > 0xDBFF -> dec_invalid 2\n  | hi -> (* combine [hi] with a low surrogate *)\n      let last = i + 3 in\n      if last > max then dec_invalid (max - i + 1) else\n      match get b (i + 2) with\n      | u when u < 0xDC00 || u > 0xDFFF -> dec_invalid 2 (* retry here *)\n      | lo ->\n          let u = (((hi land 0x3FF) lsl 10) lor (lo land 0x3FF)) + 0x10000 in\n          dec_ret 4 u\n\nlet set_utf_16be_uchar b i u =\n  let set = unsafe_set_uint16_be in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  match Uchar.to_int u with\n  | u when u < 0 -> assert false\n  | u when u <= 0xFFFF ->\n      let last = i + 1 in\n      if last > max then 0 else (set b i u; 2)\n  | u when u <= 0x10FFFF ->\n      let last = i + 3 in\n      if last > max then 0 else\n      let u' = u - 0x10000 in\n      let hi = (0xD800 lor (u' lsr 10)) in\n      let lo = (0xDC00 lor (u' land 0x3FF)) in\n      set b i hi; set b (i + 2) lo; 4\n  | _ -> assert false\n\nlet is_valid_utf_16be b =\n  let rec loop max b i =\n    let get = unsafe_get_uint16_be in\n    if i > max then true else\n    if i = max then false else\n    match get b i with\n    | u when u < 0xD800 || u > 0xDFFF -> loop max b (i + 2)\n    | u when u > 0xDBFF -> false\n    | _hi ->\n        let last = i + 3 in\n        if last > max then false else\n        match get b (i + 2) with\n        | u when u < 0xDC00 || u > 0xDFFF -> false\n        | _lo -> loop max b (i + 4)\n  in\n  loop (length b - 1) b 0\n\n(* UTF-16LE *)\n\nlet get_utf_16le_uchar b i =\n  let get = unsafe_get_uint16_le in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  if i = max then dec_invalid 1 else\n  match get b i with\n  | u when u < 0xD800 || u > 0xDFFF -> dec_ret 2 u\n  | u when u > 0xDBFF -> dec_invalid 2\n  | hi -> (* combine [hi] with a low surrogate *)\n      let last = i + 3 in\n      if last > max then dec_invalid (max - i + 1) else\n      match get b (i + 2) with\n      | u when u < 0xDC00 || u > 0xDFFF -> dec_invalid 2 (* retry here *)\n      | lo ->\n          let u = (((hi land 0x3FF) lsl 10) lor (lo land 0x3FF)) + 0x10000 in\n          dec_ret 4 u\n\nlet set_utf_16le_uchar b i u =\n  let set = unsafe_set_uint16_le in\n  let max = length b - 1 in\n  if i < 0 || i > max then invalid_arg \"index out of bounds\" else\n  match Uchar.to_int u with\n  | u when u < 0 -> assert false\n  | u when u <= 0xFFFF ->\n      let last = i + 1 in\n      if last > max then 0 else (set b i u; 2)\n  | u when u <= 0x10FFFF ->\n      let last = i + 3 in\n      if last > max then 0 else\n      let u' = u - 0x10000 in\n      let hi = (0xD800 lor (u' lsr 10)) in\n      let lo = (0xDC00 lor (u' land 0x3FF)) in\n      set b i hi; set b (i + 2) lo; 4\n  | _ -> assert false\n\nlet is_valid_utf_16le b =\n  let rec loop max b i =\n    let get = unsafe_get_uint16_le in\n    if i > max then true else\n    if i = max then false else\n    match get b i with\n    | u when u < 0xD800 || u > 0xDFFF -> loop max b (i + 2)\n    | u when u > 0xDBFF -> false\n    | _hi ->\n        let last = i + 3 in\n        if last > max then false else\n        match get b (i + 2) with\n        | u when u < 0xDC00 || u > 0xDFFF -> false\n        | _lo -> loop max b (i + 4)\n  in\n  loop (length b - 1) b 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Damien Doligez, projet Gallium, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in bytes.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in bytes.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet empty = \"\"\nlet of_bytes = B.to_string\nlet to_bytes = B.of_string\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet blit =\n  B.blit_string\n\nlet ensure_ge (x:int) y = if x >= y then x else invalid_arg \"String.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> \"\"\n  | l -> let seplen = length sep in bts @@\n          unsafe_blits\n            (B.create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat = ( ^ )\n\n(* duplicated in bytes.ml *)\nlet iter f s =\n  for i = 0 to length s - 1 do f (unsafe_get s i) done\n\n(* duplicated in bytes.ml *)\nlet iteri f s =\n  for i = 0 to length s - 1 do f i (unsafe_get s i) done\n\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\nlet fold_right f x a =\n  B.fold_right f (bos x) a\nlet fold_left f a x =\n  B.fold_left f a (bos x)\nlet exists f s =\n  B.exists f (bos s)\nlet for_all f s =\n  B.for_all f (bos s)\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let b = bos s in\n  (* We satisfy [unsafe_escape]'s precondition by passing an\n     immutable byte sequence [b]. *)\n  bts (B.unsafe_escape b)\n\n(* duplicated in bytes.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet rec index_rec_opt s lim i c =\n  if i >= lim then None else\n  if unsafe_get s i = c then Some i else index_rec_opt s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index_opt s c = index_rec_opt s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n    index_rec s l i c\n\n(* duplicated in bytes.ml *)\nlet index_from_opt s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.index_from_opt / Bytes.index_from_opt\"\n  else\n    index_rec_opt s l i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec_opt s i c =\n  if i < 0 then None else\n  if unsafe_get s i = c then Some i else rindex_rec_opt s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_opt s c = rindex_rec_opt s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from_opt s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from_opt / Bytes.rindex_from_opt\"\n  else\n    rindex_rec_opt s i c\n\n(* duplicated in bytes.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n(* duplicated in bytes.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in bytes.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\nlet uppercase_ascii s =\n  B.uppercase_ascii (bos s) |> bts\nlet lowercase_ascii s =\n  B.lowercase_ascii (bos s) |> bts\nlet capitalize_ascii s =\n  B.capitalize_ascii (bos s) |> bts\nlet uncapitalize_ascii s =\n  B.uncapitalize_ascii (bos s) |> bts\n\n(* duplicated in bytes.ml *)\nlet starts_with ~prefix s =\n  let len_s = length s\n  and len_pre = length prefix in\n  let rec aux i =\n    if i = len_pre then true\n    else if unsafe_get s i <> unsafe_get prefix i then false\n    else aux (i + 1)\n  in len_s >= len_pre && aux 0\n\n(* duplicated in bytes.ml *)\nlet ends_with ~suffix s =\n  let len_s = length s\n  and len_suf = length suffix in\n  let diff = len_s - len_suf in\n  let rec aux i =\n    if i = len_suf then true\n    else if unsafe_get s (diff + i) <> unsafe_get suffix i then false\n    else aux (i + 1)\n  in diff >= 0 && aux 0\n\nexternal seeded_hash : int -> string -> int = \"caml_string_hash\" [@@noalloc]\nlet hash x = seeded_hash 0 x\n\n(* duplicated in bytes.ml *)\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\ntype t = string\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nexternal equal : string -> string -> bool = \"caml_string_equal\" [@@noalloc]\n\n(** {1 Iterators} *)\n\nlet to_seq s = bos s |> B.to_seq\n\nlet to_seqi s = bos s |> B.to_seqi\n\nlet of_seq g = B.of_seq g |> bts\n\n(* UTF decoders and validators *)\n\nlet get_utf_8_uchar s i = B.get_utf_8_uchar (bos s) i\nlet is_valid_utf_8 s = B.is_valid_utf_8 (bos s)\n\nlet get_utf_16be_uchar s i = B.get_utf_16be_uchar (bos s) i\nlet is_valid_utf_16be s = B.is_valid_utf_16be (bos s)\n\nlet get_utf_16le_uchar s i = B.get_utf_16le_uchar (bos s) i\nlet is_valid_utf_16le s = B.is_valid_utf_16le (bos s)\n\n(** {6 Binary encoding/decoding of integers} *)\n\nexternal get_uint8 : string -> int -> int = \"%string_safe_get\"\nexternal get_uint16_ne : string -> int -> int = \"%caml_string_get16\"\nexternal get_int32_ne : string -> int -> int32 = \"%caml_string_get32\"\nexternal get_int64_ne : string -> int -> int64 = \"%caml_string_get64\"\n\nlet get_int8 s i = B.get_int8 (bos s) i\nlet get_uint16_le s i = B.get_uint16_le (bos s) i\nlet get_uint16_be s i = B.get_uint16_be (bos s) i\nlet get_int16_ne s i = B.get_int16_ne (bos s) i\nlet get_int16_le s i = B.get_int16_le (bos s) i\nlet get_int16_be s i = B.get_int16_be (bos s) i\nlet get_int32_le s i = B.get_int32_le (bos s) i\nlet get_int32_be s i = B.get_int32_be (bos s) i\nlet get_int64_le s i = B.get_int64_le (bos s) i\nlet get_int64_be s i = B.get_int64_be (bos s) i\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t = unit = ()\n\nlet equal () () = true\nlet compare () () = 0\nlet to_string () = \"()\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1997 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype extern_flags =\n    No_sharing\n  | Closures\n  | Compat_32\n\n(* note: this type definition is used in 'runtime/debugger.c' *)\n\nexternal to_channel: out_channel -> 'a -> extern_flags list -> unit\n    = \"caml_output_value\"\nexternal to_bytes: 'a -> extern_flags list -> bytes\n    = \"caml_output_value_to_bytes\"\nexternal to_string: 'a -> extern_flags list -> string\n    = \"caml_output_value_to_string\"\nexternal to_buffer_unsafe:\n      bytes -> int -> int -> 'a -> extern_flags list -> int\n    = \"caml_output_value_to_buffer\"\n\nlet to_buffer buff ofs len v flags =\n  if ofs < 0 || len < 0 || ofs > Bytes.length buff - len\n  then invalid_arg \"Marshal.to_buffer: substring out of bounds\"\n  else to_buffer_unsafe buff ofs len v flags\n\n(* The functions below use byte sequences as input, never using any\n   mutation. It makes sense to use non-mutated [bytes] rather than\n   [string], because we really work with sequences of bytes, not\n   a text representation.\n*)\n\nexternal from_channel: in_channel -> 'a = \"caml_input_value\"\nexternal from_bytes_unsafe: bytes -> int -> 'a = \"caml_input_value_from_bytes\"\nexternal data_size_unsafe: bytes -> int -> int = \"caml_marshal_data_size\"\n\nlet header_size = 16\nlet data_size buff ofs =\n  if ofs < 0 || ofs > Bytes.length buff - header_size\n  then invalid_arg \"Marshal.data_size\"\n  else data_size_unsafe buff ofs\nlet total_size buff ofs = header_size + data_size buff ofs\n\nlet from_bytes buff ofs =\n  if ofs < 0 || ofs > Bytes.length buff - header_size\n  then invalid_arg \"Marshal.from_bytes\"\n  else begin\n    let len = data_size_unsafe buff ofs in\n    if ofs > Bytes.length buff - (header_size + len)\n    then invalid_arg \"Marshal.from_bytes\"\n    else from_bytes_unsafe buff ofs\n  end\n\nlet from_string buff ofs =\n  (* Bytes.unsafe_of_string is safe here, as the produced byte\n     sequence is never mutated *)\n  from_bytes (Bytes.unsafe_of_string buff) ofs\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* An alias for the type of arrays. *)\ntype 'a t = 'a array\n\n(* Array operations *)\n\nexternal length : 'a array -> int = \"%array_length\"\nexternal get: 'a array -> int -> 'a = \"%array_safe_get\"\nexternal set: 'a array -> int -> 'a -> unit = \"%array_safe_set\"\nexternal unsafe_get: 'a array -> int -> 'a = \"%array_unsafe_get\"\nexternal unsafe_set: 'a array -> int -> 'a -> unit = \"%array_unsafe_set\"\nexternal make: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal create: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal unsafe_sub : 'a array -> int -> int -> 'a array = \"caml_array_sub\"\nexternal append_prim : 'a array -> 'a array -> 'a array = \"caml_array_append\"\nexternal concat : 'a array list -> 'a array = \"caml_array_concat\"\nexternal unsafe_blit :\n  'a array -> int -> 'a array -> int -> int -> unit = \"caml_array_blit\"\nexternal unsafe_fill :\n  'a array -> int -> int -> 'a -> unit = \"caml_array_fill\"\nexternal create_float: int -> float array = \"caml_make_float_vect\"\n\nmodule Floatarray = struct\n  external create : int -> floatarray = \"caml_floatarray_create\"\n  external length : floatarray -> int = \"%floatarray_length\"\n  external get : floatarray -> int -> float = \"%floatarray_safe_get\"\n  external set : floatarray -> int -> float -> unit = \"%floatarray_safe_set\"\n  external unsafe_get : floatarray -> int -> float = \"%floatarray_unsafe_get\"\n  external unsafe_set : floatarray -> int -> float -> unit\n      = \"%floatarray_unsafe_set\"\nend\n\nlet init l f =\n  if l = 0 then [||] else\n  if l < 0 then invalid_arg \"Array.init\"\n  (* See #6575. We could also check for maximum array size, but this depends\n     on whether we create a float array or a regular one... *)\n  else\n   let res = create l (f 0) in\n   for i = 1 to pred l do\n     unsafe_set res i (f i)\n   done;\n   res\n\nlet make_matrix sx sy init =\n  let res = create sx [||] in\n  for x = 0 to pred sx do\n    unsafe_set res x (create sy init)\n  done;\n  res\n\nlet copy a =\n  let l = length a in if l = 0 then [||] else unsafe_sub a 0 l\n\nlet append a1 a2 =\n  let l1 = length a1 in\n  if l1 = 0 then copy a2\n  else if length a2 = 0 then unsafe_sub a1 0 l1\n  else append_prim a1 a2\n\nlet sub a ofs len =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.sub\"\n  else unsafe_sub a ofs len\n\nlet fill a ofs len v =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.fill\"\n  else unsafe_fill a ofs len v\n\nlet blit a1 ofs1 a2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len\n             || ofs2 < 0 || ofs2 > length a2 - len\n  then invalid_arg \"Array.blit\"\n  else unsafe_blit a1 ofs1 a2 ofs2 len\n\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\nlet iter2 f a b =\n  if length a <> length b then\n    invalid_arg \"Array.iter2: arrays must have the same length\"\n  else\n    for i = 0 to length a - 1 do f (unsafe_get a i) (unsafe_get b i) done\n\nlet map f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f(unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f(unsafe_get a i))\n    done;\n    r\n  end\n\nlet map_inplace f a =\n  for i = 0 to length a - 1 do\n    unsafe_set a i (f (unsafe_get a i))\n  done\n\nlet mapi_inplace f a =\n  for i = 0 to length a - 1 do\n    unsafe_set a i (f i (unsafe_get a i))\n  done\n\nlet map2 f a b =\n  let la = length a in\n  let lb = length b in\n  if la <> lb then\n    invalid_arg \"Array.map2: arrays must have the same length\"\n  else begin\n    if la = 0 then [||] else begin\n      let r = create la (f (unsafe_get a 0) (unsafe_get b 0)) in\n      for i = 1 to la - 1 do\n        unsafe_set r i (f (unsafe_get a i) (unsafe_get b i))\n      done;\n      r\n    end\n  end\n\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet mapi f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f 0 (unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f i (unsafe_get a i))\n    done;\n    r\n  end\n\nlet to_list a =\n  let rec tolist i res =\n    if i < 0 then res else tolist (i - 1) (unsafe_get a i :: res) in\n  tolist (length a - 1) []\n\n(* Cannot use List.length here because the List module depends on Array. *)\nlet rec list_length accu = function\n  | [] -> accu\n  | _::t -> list_length (succ accu) t\n\nlet of_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let a = create (list_length 0 l) hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i+1) tl in\n      fill 1 tl\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_left_map f acc input_array =\n  let len = length input_array in\n  if len = 0 then (acc, [||]) else begin\n    let acc, elt = f acc (unsafe_get input_array 0) in\n    let output_array = create len elt in\n    let acc = ref acc in\n    for i = 1 to len - 1 do\n      let acc', elt = f !acc (unsafe_get input_array i) in\n      acc := acc';\n      unsafe_set output_array i elt;\n    done;\n    !acc, output_array\n  end\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nlet exists p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if p (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nlet for_all p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then true\n    else if p (unsafe_get a i) then loop (succ i)\n    else false in\n  loop 0\n\nlet for_all2 p l1 l2 =\n  let n1 = length l1\n  and n2 = length l2 in\n  if n1 <> n2 then invalid_arg \"Array.for_all2\"\n  else let rec loop i =\n    if i = n1 then true\n    else if p (unsafe_get l1 i) (unsafe_get l2 i) then loop (succ i)\n    else false in\n  loop 0\n\nlet exists2 p l1 l2 =\n  let n1 = length l1\n  and n2 = length l2 in\n  if n1 <> n2 then invalid_arg \"Array.exists2\"\n  else let rec loop i =\n    if i = n1 then false\n    else if p (unsafe_get l1 i) (unsafe_get l2 i) then true\n    else loop (succ i) in\n  loop 0\n\nlet mem x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if compare (unsafe_get a i) x = 0 then true\n    else loop (succ i) in\n  loop 0\n\nlet memq x a =\n  let n = length a in\n  let rec loop i =\n    if i = n then false\n    else if x == (unsafe_get a i) then true\n    else loop (succ i) in\n  loop 0\n\nlet find_opt p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then None\n    else\n      let x = unsafe_get a i in\n      if p x then Some x\n      else loop (succ i)\n  in\n  loop 0\n\nlet find_index p a =\n  let n = length a in\n  let rec loop i =\n    if i = n then None\n    else if p (unsafe_get a i) then Some i\n    else loop (succ i) in\n  loop 0\n\nlet find_map f a =\n  let n = length a in\n  let rec loop i =\n    if i = n then None\n    else\n      match f (unsafe_get a i) with\n      | None -> loop (succ i)\n      | Some _ as r -> r\n  in\n  loop 0\n\nlet find_mapi f a =\n  let n = length a in\n  let rec loop i =\n    if i = n then None\n    else\n      match f i (unsafe_get a i) with\n      | None -> loop (succ i)\n      | Some _ as r -> r\n  in\n  loop 0\n\nlet split x =\n  if x = [||] then [||], [||]\n  else begin\n    let a0, b0 = unsafe_get x 0 in\n    let n = length x in\n    let a = create n a0 in\n    let b = create n b0 in\n    for i = 1 to n - 1 do\n      let ai, bi = unsafe_get x i in\n      unsafe_set a i ai;\n      unsafe_set b i bi\n    done;\n    a, b\n  end\n\nlet combine a b =\n  let na = length a in\n  let nb = length b in\n  if na <> nb then invalid_arg \"Array.combine\";\n  if na = 0 then [||]\n  else begin\n    let x = create na (unsafe_get a 0, unsafe_get b 0) in\n    for i = 1 to na - 1 do\n      unsafe_set x i (unsafe_get a i, unsafe_get b i)\n    done;\n    x\n  end\n\nexception Bottom of int\nlet sort cmp a =\n  let maxson l i =\n    let i31 = i+i+i+1 in\n    let x = ref i31 in\n    if i31+2 < l then begin\n      if cmp (get a i31) (get a (i31+1)) < 0 then x := i31+1;\n      if cmp (get a !x) (get a (i31+2)) < 0 then x := i31+2;\n      !x\n    end else\n      if i31+1 < l && cmp (get a i31) (get a (i31+1)) < 0\n      then i31+1\n      else if i31 < l then i31 else raise (Bottom i)\n  in\n  let rec trickledown l i e =\n    let j = maxson l i in\n    if cmp (get a j) e > 0 then begin\n      set a i (get a j);\n      trickledown l j e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let trickle l i e = try trickledown l i e with Bottom i -> set a i e in\n  let rec bubbledown l i =\n    let j = maxson l i in\n    set a i (get a j);\n    bubbledown l j\n  in\n  let bubble l i = try bubbledown l i with Bottom i -> i in\n  let rec trickleup i e =\n    let father = (i - 1) / 3 in\n    assert (i <> father);\n    if cmp (get a father) e < 0 then begin\n      set a i (get a father);\n      if father > 0 then trickleup father e else set a 0 e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let l = length a in\n  for i = (l + 1) / 3 - 1 downto 0 do trickle l i (get a i); done;\n  for i = l - 1 downto 2 do\n    let e = (get a i) in\n    set a i (get a 0);\n    trickleup (bubble i 0) e;\n  done;\n  if l > 1 then (let e = (get a 1) in set a 1 (get a 0); set a 0 e)\n\n\nlet cutoff = 5\nlet stable_sort cmp a =\n  let merge src1ofs src1len src2 src2ofs src2len dst dstofs =\n    let src1r = src1ofs + src1len and src2r = src2ofs + src2len in\n    let rec loop i1 s1 i2 s2 d =\n      if cmp s1 s2 <= 0 then begin\n        set dst d s1;\n        let i1 = i1 + 1 in\n        if i1 < src1r then\n          loop i1 (get a i1) i2 s2 (d + 1)\n        else\n          blit src2 i2 dst (d + 1) (src2r - i2)\n      end else begin\n        set dst d s2;\n        let i2 = i2 + 1 in\n        if i2 < src2r then\n          loop i1 s1 i2 (get src2 i2) (d + 1)\n        else\n          blit a i1 dst (d + 1) (src1r - i1)\n      end\n    in loop src1ofs (get a src1ofs) src2ofs (get src2 src2ofs) dstofs;\n  in\n  let isortto srcofs dst dstofs len =\n    for i = 0 to len - 1 do\n      let e = (get a (srcofs + i)) in\n      let j = ref (dstofs + i - 1) in\n      while (!j >= dstofs && cmp (get dst !j) e > 0) do\n        set dst (!j + 1) (get dst !j);\n        decr j;\n      done;\n      set dst (!j + 1) e;\n    done;\n  in\n  let rec sortto srcofs dst dstofs len =\n    if len <= cutoff then isortto srcofs dst dstofs len else begin\n      let l1 = len / 2 in\n      let l2 = len - l1 in\n      sortto (srcofs + l1) dst (dstofs + l1) l2;\n      sortto srcofs a (srcofs + l2) l1;\n      merge (srcofs + l2) l1 dst (dstofs + l1) l2 dst dstofs;\n    end;\n  in\n  let l = length a in\n  if l <= cutoff then isortto 0 a 0 l else begin\n    let l1 = l / 2 in\n    let l2 = l - l1 in\n    let t = make l2 (get a 0) in\n    sortto l1 t 0 l2;\n    sortto 0 a l2 l1;\n    merge l2 l1 t 0 l2 a 0;\n  end\n\n\nlet fast_sort = stable_sort\n\n(** {1 Iterators} *)\n\nlet to_seq a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons (x, aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet to_seqi a =\n  let rec aux i () =\n    if i < length a\n    then\n      let x = unsafe_get a i in\n      Seq.Cons ((i,x), aux (i+1))\n    else Seq.Nil\n  in\n  aux 0\n\nlet of_rev_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let len = list_length 0 l in\n      let a = create len hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i-1) tl\n      in\n      fill (len-2) tl\n\nlet of_seq i =\n  let l = Seq.fold_left (fun acc x -> x::acc) [] i in\n  of_rev_list l\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                        Nicolas Ojeda Bar, LexiFi                       *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nexternal neg : float -> float = \"%negfloat\"\nexternal add : float -> float -> float = \"%addfloat\"\nexternal sub : float -> float -> float = \"%subfloat\"\nexternal mul : float -> float -> float = \"%mulfloat\"\nexternal div : float -> float -> float = \"%divfloat\"\nexternal rem : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal fma : float -> float -> float -> float = \"caml_fma_float\" \"caml_fma\"\n  [@@unboxed] [@@noalloc]\nexternal abs : float -> float = \"%absfloat\"\n\nlet zero = 0.\nlet one = 1.\nlet minus_one = -1.\nlet infinity = Stdlib.infinity\nlet neg_infinity = Stdlib.neg_infinity\nlet nan = Stdlib.nan\nlet quiet_nan = nan\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\nlet signaling_nan = float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet is_finite (x: float) = x -. x = 0.\nlet is_infinite (x: float) = 1. /. x = 0.\nlet is_nan (x: float) = x <> x\n\nlet pi = 0x1.921fb54442d18p+1\nlet max_float = Stdlib.max_float\nlet min_float = Stdlib.min_float\nlet epsilon = Stdlib.epsilon_float\nexternal of_int : int -> float = \"%floatofint\"\nexternal to_int : float -> int = \"%intoffloat\"\nexternal of_string : string -> float = \"caml_float_of_string\"\nlet of_string_opt = Stdlib.float_of_string_opt\nlet to_string = Stdlib.string_of_float\ntype fpclass = Stdlib.fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\nexternal pow : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal cbrt : float -> float = \"caml_cbrt_float\" \"caml_cbrt\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal exp2 : float -> float = \"caml_exp2_float\" \"caml_exp2\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log2 : float -> float = \"caml_log2_float\" \"caml_log2\"\n  [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal acosh : float -> float = \"caml_acosh_float\" \"caml_acosh\"\n  [@@unboxed] [@@noalloc]\nexternal asinh : float -> float = \"caml_asinh_float\" \"caml_asinh\"\n  [@@unboxed] [@@noalloc]\nexternal atanh : float -> float = \"caml_atanh_float\" \"caml_atanh\"\n  [@@unboxed] [@@noalloc]\nexternal erf : float -> float = \"caml_erf_float\" \"caml_erf\"\n  [@@unboxed] [@@noalloc]\nexternal erfc : float -> float = \"caml_erfc_float\" \"caml_erfc\"\n  [@@unboxed] [@@noalloc]\nexternal trunc : float -> float = \"caml_trunc_float\" \"caml_trunc\"\n  [@@unboxed] [@@noalloc]\nexternal round : float -> float = \"caml_round_float\" \"caml_round\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n[@@unboxed] [@@noalloc]\n\nlet is_integer x = x = trunc x && is_finite x\n\nexternal next_after : float -> float -> float\n  = \"caml_nextafter_float\" \"caml_nextafter\" [@@unboxed] [@@noalloc]\n\nlet succ x = next_after x infinity\nlet pred x = next_after x neg_infinity\n\nexternal copy_sign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal sign_bit : (float [@unboxed]) -> bool\n  = \"caml_signbit_float\" \"caml_signbit\" [@@noalloc]\n\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\ntype t = float\nexternal compare : float -> float -> int = \"%compare\"\nlet equal x y = compare x y = 0\n\nlet[@inline] min (x: float) (y: float) =\n  if y > x || (not(sign_bit y) && sign_bit x) then\n    if is_nan y then y else x\n  else if is_nan x then x else y\n\nlet[@inline] max (x: float) (y: float) =\n  if y > x || (not(sign_bit y) && sign_bit x) then\n    if is_nan x then x else y\n  else if is_nan y then y else x\n\nlet[@inline] min_max (x: float) (y: float) =\n  if is_nan x || is_nan y then (nan, nan)\n  else if y > x || (not(sign_bit y) && sign_bit x) then (x, y) else (y, x)\n\nlet[@inline] min_num (x: float) (y: float) =\n  if y > x || (not(sign_bit y) && sign_bit x) then\n    if is_nan x then y else x\n  else if is_nan y then x else y\n\nlet[@inline] max_num (x: float) (y: float) =\n  if y > x || (not(sign_bit y) && sign_bit x) then\n    if is_nan y then x else y\n  else if is_nan x then y else x\n\nlet[@inline] min_max_num (x: float) (y: float) =\n  if is_nan x then (y,y)\n  else if is_nan y then (x,x)\n  else if y > x || (not(sign_bit y) && sign_bit x) then (x,y) else (y,x)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n\nmodule Array = struct\n\n  type t = floatarray\n\n  external length : t -> int = \"%floatarray_length\"\n  external get : t -> int -> float = \"%floatarray_safe_get\"\n  external set : t -> int -> float -> unit = \"%floatarray_safe_set\"\n  external create : int -> t = \"caml_floatarray_create\"\n  external unsafe_get : t -> int -> float = \"%floatarray_unsafe_get\"\n  external unsafe_set : t -> int -> float -> unit = \"%floatarray_unsafe_set\"\n\n  let unsafe_fill a ofs len v =\n    for i = ofs to ofs + len - 1 do unsafe_set a i v done\n\n  external unsafe_blit: t -> int -> t -> int -> int -> unit =\n    \"caml_floatarray_blit\" [@@noalloc]\n\n  let check a ofs len msg =\n    if ofs < 0 || len < 0 || ofs + len < 0 || ofs + len > length a then\n      invalid_arg msg\n\n  let make n v =\n    let result = create n in\n    unsafe_fill result 0 n v;\n    result\n\n  let init l f =\n    if l < 0 then invalid_arg \"Float.Array.init\"\n    else\n      let res = create l in\n      for i = 0 to l - 1 do\n        unsafe_set res i (f i)\n      done;\n      res\n\n  let append a1 a2 =\n    let l1 = length a1 in\n    let l2 = length a2 in\n    let result = create (l1 + l2) in\n    unsafe_blit a1 0 result 0 l1;\n    unsafe_blit a2 0 result l1 l2;\n    result\n\n  (* next 3 functions: modified copy of code from string.ml *)\n  let ensure_ge (x:int) y =\n    if x >= y then x else invalid_arg \"Float.Array.concat\"\n\n  let rec sum_lengths acc = function\n    | [] -> acc\n    | hd :: tl -> sum_lengths (ensure_ge (length hd + acc) acc) tl\n\n  let concat l =\n    let len = sum_lengths 0 l in\n    let result = create len in\n    let rec loop l i =\n      match l with\n      | [] -> assert (i = len)\n      | hd :: tl ->\n        let hlen = length hd in\n        unsafe_blit hd 0 result i hlen;\n        loop tl (i + hlen)\n    in\n    loop l 0;\n    result\n\n  let sub a ofs len =\n    check a ofs len \"Float.Array.sub\";\n    let result = create len in\n    unsafe_blit a ofs result 0 len;\n    result\n\n  let copy a =\n    let l = length a in\n    let result = create l in\n    unsafe_blit a 0 result 0 l;\n    result\n\n  let fill a ofs len v =\n    check a ofs len \"Float.Array.fill\";\n    unsafe_fill a ofs len v\n\n  let blit src sofs dst dofs len =\n    check src sofs len \"Float.array.blit\";\n    check dst dofs len \"Float.array.blit\";\n    unsafe_blit src sofs dst dofs len\n\n  let to_list a =\n    List.init (length a) (unsafe_get a)\n\n  let of_list l =\n    let result = create (List.length l) in\n    let rec fill i l =\n      match l with\n      | [] -> result\n      | h :: t -> unsafe_set result i h; fill (i + 1) t\n    in\n    fill 0 l\n\n  (* duplicated from array.ml *)\n  let iter f a =\n    for i = 0 to length a - 1 do f (unsafe_get a i) done\n\n  (* duplicated from array.ml *)\n  let iter2 f a b =\n    if length a <> length b then\n      invalid_arg \"Float.Array.iter2: arrays must have the same length\"\n    else\n      for i = 0 to length a - 1 do f (unsafe_get a i) (unsafe_get b i) done\n\n  let map f a =\n    let l = length a in\n    let r = create l in\n    for i = 0 to l - 1 do\n      unsafe_set r i (f (unsafe_get a i))\n    done;\n    r\n\n  (* duplicated from array.ml *)\n  let map_inplace f a =\n    for i = 0 to length a - 1 do\n      unsafe_set a i (f (unsafe_get a i))\n    done\n\n  let map2 f a b =\n    let la = length a in\n    let lb = length b in\n    if la <> lb then\n      invalid_arg \"Float.Array.map2: arrays must have the same length\"\n    else begin\n      let r = create la in\n      for i = 0 to la - 1 do\n        unsafe_set r i (f (unsafe_get a i) (unsafe_get b i))\n      done;\n      r\n    end\n\n  (* duplicated from array.ml *)\n  let iteri f a =\n    for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\n  let mapi f a =\n    let l = length a in\n    let r = create l in\n    for i = 0 to l - 1 do\n      unsafe_set r i (f i (unsafe_get a i))\n    done;\n    r\n\n  (* duplicated from array.ml *)\n  let mapi_inplace f a =\n    for i = 0 to length a - 1 do\n      unsafe_set a i (f i (unsafe_get a i))\n    done\n\n  (* duplicated from array.ml *)\n  let fold_left f x a =\n    let r = ref x in\n    for i = 0 to length a - 1 do\n      r := f !r (unsafe_get a i)\n    done;\n    !r\n\n  (* duplicated from array.ml *)\n  let fold_right f a x =\n    let r = ref x in\n    for i = length a - 1 downto 0 do\n      r := f (unsafe_get a i) !r\n    done;\n    !r\n\n  (* duplicated from array.ml *)\n  let exists p a =\n    let n = length a in\n    let rec loop i =\n      if i = n then false\n      else if p (unsafe_get a i) then true\n      else loop (i + 1) in\n    loop 0\n\n  (* duplicated from array.ml *)\n  let for_all p a =\n    let n = length a in\n    let rec loop i =\n      if i = n then true\n      else if p (unsafe_get a i) then loop (i + 1)\n      else false in\n    loop 0\n\n  (* duplicated from array.ml *)\n  let mem x a =\n    let n = length a in\n    let rec loop i =\n      if i = n then false\n      else if compare (unsafe_get a i) x = 0 then true\n      else loop (i + 1)\n    in\n    loop 0\n\n  (* mostly duplicated from array.ml, but slightly different *)\n  let mem_ieee x a =\n    let n = length a in\n    let rec loop i =\n      if i = n then false\n      else if x = (unsafe_get a i) then true\n      else loop (i + 1)\n    in\n    loop 0\n\n  (* duplicated from array.ml *)\n  let find_opt p a =\n    let n = length a in\n    let rec loop i =\n      if i = n then None\n      else\n        let x = unsafe_get a i in\n        if p x then Some x\n        else loop (i + 1)\n    in\n    loop 0\n\n  (* duplicated from array.ml *)\n  let find_index p a =\n    let n = length a in\n    let rec loop i =\n      if i = n then None\n      else if p (unsafe_get a i) then Some i\n      else loop (i + 1) in\n    loop 0\n\n  (* duplicated from array.ml *)\n  let find_map f a =\n    let n = length a in\n    let rec loop i =\n      if i = n then None\n      else\n        match f (unsafe_get a i) with\n        | None -> loop (i + 1)\n        | Some _ as r -> r\n    in\n    loop 0\n\n  (* duplicated from array.ml *)\n  let find_mapi f a =\n    let n = length a in\n    let rec loop i =\n      if i = n then None\n      else\n        match f i (unsafe_get a i) with\n        | None -> loop (i + 1)\n        | Some _ as r -> r\n    in\n    loop 0\n\n  (* duplicated from array.ml *)\n  exception Bottom of int\n  let sort cmp a =\n    let maxson l i =\n      let i31 = i+i+i+1 in\n      let x = ref i31 in\n      if i31+2 < l then begin\n        if cmp (get a i31) (get a (i31+1)) < 0 then x := i31+1;\n        if cmp (get a !x) (get a (i31+2)) < 0 then x := i31+2;\n        !x\n      end else\n        if i31+1 < l && cmp (get a i31) (get a (i31+1)) < 0\n        then i31+1\n        else if i31 < l then i31 else raise (Bottom i)\n    in\n    let rec trickledown l i e =\n      let j = maxson l i in\n      if cmp (get a j) e > 0 then begin\n        set a i (get a j);\n        trickledown l j e;\n      end else begin\n        set a i e;\n      end;\n    in\n    let trickle l i e = try trickledown l i e with Bottom i -> set a i e in\n    let rec bubbledown l i =\n      let j = maxson l i in\n      set a i (get a j);\n      bubbledown l j\n    in\n    let bubble l i = try bubbledown l i with Bottom i -> i in\n    let rec trickleup i e =\n      let father = (i - 1) / 3 in\n      assert (i <> father);\n      if cmp (get a father) e < 0 then begin\n        set a i (get a father);\n        if father > 0 then trickleup father e else set a 0 e;\n      end else begin\n        set a i e;\n      end;\n    in\n    let l = length a in\n    for i = (l + 1) / 3 - 1 downto 0 do trickle l i (get a i); done;\n    for i = l - 1 downto 2 do\n      let e = (get a i) in\n      set a i (get a 0);\n      trickleup (bubble i 0) e;\n    done;\n    if l > 1 then (let e = (get a 1) in set a 1 (get a 0); set a 0 e)\n\n  (* duplicated from array.ml, except for the call to [create] *)\n  let cutoff = 5\n  let stable_sort cmp a =\n    let merge src1ofs src1len src2 src2ofs src2len dst dstofs =\n      let src1r = src1ofs + src1len and src2r = src2ofs + src2len in\n      let rec loop i1 s1 i2 s2 d =\n        if cmp s1 s2 <= 0 then begin\n          set dst d s1;\n          let i1 = i1 + 1 in\n          if i1 < src1r then\n            loop i1 (get a i1) i2 s2 (d + 1)\n          else\n            blit src2 i2 dst (d + 1) (src2r - i2)\n        end else begin\n          set dst d s2;\n          let i2 = i2 + 1 in\n          if i2 < src2r then\n            loop i1 s1 i2 (get src2 i2) (d + 1)\n          else\n            blit a i1 dst (d + 1) (src1r - i1)\n        end\n      in loop src1ofs (get a src1ofs) src2ofs (get src2 src2ofs) dstofs;\n    in\n    let isortto srcofs dst dstofs len =\n      for i = 0 to len - 1 do\n        let e = (get a (srcofs + i)) in\n        let j = ref (dstofs + i - 1) in\n        while (!j >= dstofs && cmp (get dst !j) e > 0) do\n          set dst (!j + 1) (get dst !j);\n          decr j;\n        done;\n        set dst (!j + 1) e;\n      done;\n    in\n    let rec sortto srcofs dst dstofs len =\n      if len <= cutoff then isortto srcofs dst dstofs len else begin\n        let l1 = len / 2 in\n        let l2 = len - l1 in\n        sortto (srcofs + l1) dst (dstofs + l1) l2;\n        sortto srcofs a (srcofs + l2) l1;\n        merge (srcofs + l2) l1 dst (dstofs + l1) l2 dst dstofs;\n      end;\n    in\n    let l = length a in\n    if l <= cutoff then isortto 0 a 0 l else begin\n      let l1 = l / 2 in\n      let l2 = l - l1 in\n      let t = create l2 in\n      sortto l1 t 0 l2;\n      sortto 0 a l2 l1;\n      merge l2 l1 t 0 l2 a 0;\n    end\n\n  let fast_sort = stable_sort\n\n  (* duplicated from array.ml *)\n  let to_seq a =\n    let rec aux i () =\n      if i < length a\n      then\n        let x = unsafe_get a i in\n        Seq.Cons (x, aux (i+1))\n      else Seq.Nil\n    in\n    aux 0\n\n  (* duplicated from array.ml *)\n  let to_seqi a =\n    let rec aux i () =\n      if i < length a\n      then\n        let x = unsafe_get a i in\n        Seq.Cons ((i,x), aux (i+1))\n      else Seq.Nil\n    in\n    aux 0\n\n  (* mostly duplicated from array.ml *)\n  let of_rev_list l =\n    let len = List.length l in\n    let a = create len in\n    let rec fill i = function\n        [] -> a\n      | hd::tl -> unsafe_set a i hd; fill (i-1) tl\n    in\n    fill (len-1) l\n\n  (* duplicated from array.ml *)\n  let of_seq i =\n    let l = Seq.fold_left (fun acc x -> x::acc) [] i in\n    of_rev_list l\n\n\n  let map_to_array f a =\n    let l = length a in\n    if l = 0 then [| |] else begin\n      let r = Array.make l (f (unsafe_get a 0)) in\n      for i = 1 to l - 1 do\n        Array.unsafe_set r i (f (unsafe_get a i))\n      done;\n      r\n    end\n\n  let map_from_array f a =\n    let l = Array.length a in\n    let r = create l in\n    for i = 0 to l - 1 do\n      unsafe_set r i (f (Array.unsafe_get a i))\n    done;\n    r\n\nend\n\nmodule ArrayLabels = Array\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Int32]: 32-bit integers *)\n\nexternal neg : int32 -> int32 = \"%int32_neg\"\nexternal add : int32 -> int32 -> int32 = \"%int32_add\"\nexternal sub : int32 -> int32 -> int32 = \"%int32_sub\"\nexternal mul : int32 -> int32 -> int32 = \"%int32_mul\"\nexternal div : int32 -> int32 -> int32 = \"%int32_div\"\nexternal rem : int32 -> int32 -> int32 = \"%int32_mod\"\nexternal logand : int32 -> int32 -> int32 = \"%int32_and\"\nexternal logor : int32 -> int32 -> int32 = \"%int32_or\"\nexternal logxor : int32 -> int32 -> int32 = \"%int32_xor\"\nexternal shift_left : int32 -> int -> int32 = \"%int32_lsl\"\nexternal shift_right : int32 -> int -> int32 = \"%int32_asr\"\nexternal shift_right_logical : int32 -> int -> int32 = \"%int32_lsr\"\nexternal of_int : int -> int32 = \"%int32_of_int\"\nexternal to_int : int32 -> int = \"%int32_to_int\"\nexternal of_float : float -> int32\n  = \"caml_int32_of_float\" \"caml_int32_of_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal to_float : int32 -> float\n  = \"caml_int32_to_float\" \"caml_int32_to_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal bits_of_float : float -> int32\n  = \"caml_int32_bits_of_float\" \"caml_int32_bits_of_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal float_of_bits : int32 -> float\n  = \"caml_int32_float_of_bits\" \"caml_int32_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\n\nlet zero = 0l\nlet one = 1l\nlet minus_one = -1l\nlet succ n = add n 1l\nlet pred n = sub n 1l\nlet abs n = if n >= 0l then n else neg n\nlet min_int = 0x80000000l\nlet max_int = 0x7FFFFFFFl\nlet lognot n = logxor n (-1l)\n\nlet unsigned_to_int =\n  match Sys.word_size with\n  | 32 ->\n      let max_int = of_int Stdlib.max_int in\n      fun n ->\n        if compare zero n <= 0 && compare n max_int <= 0 then\n          Some (to_int n)\n        else\n          None\n  | 64 ->\n      (* So that it compiles in 32-bit *)\n      let mask = 0xFFFF lsl 16 lor 0xFFFF in\n      fun n -> Some (to_int n land mask)\n  | _ ->\n      assert false\n\nexternal format : string -> int32 -> string = \"caml_int32_format\"\nlet to_string n = format \"%d\" n\n\nexternal of_string : string -> int32 = \"caml_int32_of_string\"\n\nlet of_string_opt s =\n  (* TODO: expose a non-raising primitive directly. *)\n  try Some (of_string s)\n  with Failure _ -> None\n\ntype t = int32\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nlet equal (x: t) (y: t) = compare x y = 0\n\nlet unsigned_compare n m =\n  compare (sub n min_int) (sub m min_int)\n\nlet min x y : t = if x <= y then x else y\nlet max x y : t = if x >= y then x else y\n\n(* Unsigned division from signed division of the same\n   bitness. See Warren Jr., Henry S. (2013). Hacker's Delight (2 ed.), Sec 9-3.\n*)\nlet unsigned_div n d =\n  if d < zero then\n    if unsigned_compare n d < 0 then zero else one\n  else\n    let q = shift_left (div (shift_right_logical n 1) d) 1 in\n    let r = sub n (mul q d) in\n    if unsigned_compare r d >= 0 then succ q else q\n\nlet unsigned_rem n d =\n  sub n (mul (unsigned_div n d) d)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Int64]: 64-bit integers *)\n\nexternal neg : int64 -> int64 = \"%int64_neg\"\nexternal add : int64 -> int64 -> int64 = \"%int64_add\"\nexternal sub : int64 -> int64 -> int64 = \"%int64_sub\"\nexternal mul : int64 -> int64 -> int64 = \"%int64_mul\"\nexternal div : int64 -> int64 -> int64 = \"%int64_div\"\nexternal rem : int64 -> int64 -> int64 = \"%int64_mod\"\nexternal logand : int64 -> int64 -> int64 = \"%int64_and\"\nexternal logor : int64 -> int64 -> int64 = \"%int64_or\"\nexternal logxor : int64 -> int64 -> int64 = \"%int64_xor\"\nexternal shift_left : int64 -> int -> int64 = \"%int64_lsl\"\nexternal shift_right : int64 -> int -> int64 = \"%int64_asr\"\nexternal shift_right_logical : int64 -> int -> int64 = \"%int64_lsr\"\nexternal of_int : int -> int64 = \"%int64_of_int\"\nexternal to_int : int64 -> int = \"%int64_to_int\"\nexternal of_float : float -> int64\n  = \"caml_int64_of_float\" \"caml_int64_of_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal to_float : int64 -> float\n  = \"caml_int64_to_float\" \"caml_int64_to_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal of_int32 : int32 -> int64 = \"%int64_of_int32\"\nexternal to_int32 : int64 -> int32 = \"%int64_to_int32\"\nexternal of_nativeint : nativeint -> int64 = \"%int64_of_nativeint\"\nexternal to_nativeint : int64 -> nativeint = \"%int64_to_nativeint\"\n\nlet zero = 0L\nlet one = 1L\nlet minus_one = -1L\nlet succ n = add n 1L\nlet pred n = sub n 1L\nlet abs n = if n >= 0L then n else neg n\nlet min_int = 0x8000000000000000L\nlet max_int = 0x7FFFFFFFFFFFFFFFL\nlet lognot n = logxor n (-1L)\n\nlet unsigned_to_int =\n  let max_int = of_int Stdlib.max_int in\n  fun n ->\n    if compare zero n <= 0 && compare n max_int <= 0 then\n      Some (to_int n)\n    else\n      None\n\nexternal format : string -> int64 -> string = \"caml_int64_format\"\nlet to_string n = format \"%d\" n\n\nexternal of_string : string -> int64 = \"caml_int64_of_string\"\n\nlet of_string_opt s =\n  (* TODO: expose a non-raising primitive directly. *)\n  try Some (of_string s)\n  with Failure _ -> None\n\n\n\nexternal bits_of_float : float -> int64\n  = \"caml_int64_bits_of_float\" \"caml_int64_bits_of_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal float_of_bits : int64 -> float\n  = \"caml_int64_float_of_bits\" \"caml_int64_float_of_bits_unboxed\"\n  [@@unboxed] [@@noalloc]\n\ntype t = int64\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nlet equal (x: t) (y: t) = compare x y = 0\n\nlet unsigned_compare n m =\n  compare (sub n min_int) (sub m min_int)\n\nlet min x y : t = if x <= y then x else y\nlet max x y : t = if x >= y then x else y\n\n(* Unsigned division from signed division of the same\n   bitness. See Warren Jr., Henry S. (2013). Hacker's Delight (2 ed.), Sec 9-3.\n*)\nlet unsigned_div n d =\n  if d < zero then\n    if unsigned_compare n d < 0 then zero else one\n  else\n    let q = shift_left (div (shift_right_logical n 1) d) 1 in\n    let r = sub n (mul q d) in\n    if unsigned_compare r d >= 0 then succ q else q\n\nlet unsigned_rem n d =\n  sub n (mul (unsigned_div n d) d)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Nativeint]: processor-native integers *)\n\nexternal neg: nativeint -> nativeint = \"%nativeint_neg\"\nexternal add: nativeint -> nativeint -> nativeint = \"%nativeint_add\"\nexternal sub: nativeint -> nativeint -> nativeint = \"%nativeint_sub\"\nexternal mul: nativeint -> nativeint -> nativeint = \"%nativeint_mul\"\nexternal div: nativeint -> nativeint -> nativeint = \"%nativeint_div\"\nexternal rem: nativeint -> nativeint -> nativeint = \"%nativeint_mod\"\nexternal logand: nativeint -> nativeint -> nativeint = \"%nativeint_and\"\nexternal logor: nativeint -> nativeint -> nativeint = \"%nativeint_or\"\nexternal logxor: nativeint -> nativeint -> nativeint = \"%nativeint_xor\"\nexternal shift_left: nativeint -> int -> nativeint = \"%nativeint_lsl\"\nexternal shift_right: nativeint -> int -> nativeint = \"%nativeint_asr\"\nexternal shift_right_logical: nativeint -> int -> nativeint = \"%nativeint_lsr\"\nexternal of_int: int -> nativeint = \"%nativeint_of_int\"\nexternal to_int: nativeint -> int = \"%nativeint_to_int\"\nexternal of_float : float -> nativeint\n  = \"caml_nativeint_of_float\" \"caml_nativeint_of_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal to_float : nativeint -> float\n  = \"caml_nativeint_to_float\" \"caml_nativeint_to_float_unboxed\"\n  [@@unboxed] [@@noalloc]\nexternal of_int32: int32 -> nativeint = \"%nativeint_of_int32\"\nexternal to_int32: nativeint -> int32 = \"%nativeint_to_int32\"\n\nlet zero = 0n\nlet one = 1n\nlet minus_one = -1n\nlet succ n = add n 1n\nlet pred n = sub n 1n\nlet abs n = if n >= 0n then n else neg n\nlet size = Sys.word_size\nlet min_int = shift_left 1n (size - 1)\nlet max_int = sub min_int 1n\nlet lognot n = logxor n (-1n)\n\nlet unsigned_to_int =\n  let max_int = of_int Stdlib.max_int in\n  fun n ->\n    if compare zero n <= 0 && compare n max_int <= 0 then\n      Some (to_int n)\n    else\n      None\n\nexternal format : string -> nativeint -> string = \"caml_nativeint_format\"\nlet to_string n = format \"%d\" n\n\nexternal of_string: string -> nativeint = \"caml_nativeint_of_string\"\n\nlet of_string_opt s =\n  (* TODO: expose a non-raising primitive directly. *)\n  try Some (of_string s)\n  with Failure _ -> None\n\ntype t = nativeint\n\nlet compare (x: t) (y: t) = Stdlib.compare x y\nlet equal (x: t) (y: t) = compare x y = 0\n\nlet unsigned_compare n m =\n  compare (sub n min_int) (sub m min_int)\n\nlet min x y : t = if x <= y then x else y\nlet max x y : t = if x >= y then x else y\n\n(* Unsigned division from signed division of the same\n   bitness. See Warren Jr., Henry S. (2013). Hacker's Delight (2 ed.), Sec 9-3.\n*)\nlet unsigned_div n d =\n  if d < zero then\n    if unsigned_compare n d < 0 then zero else one\n  else\n    let q = shift_left (div (shift_right_logical n 1) d) 1 in\n    let r = sub n (mul q d) in\n    if unsigned_compare r d >= 0 then succ q else q\n\nlet unsigned_rem n d =\n  sub n (mul (unsigned_div n d) d)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\nlet hash x = seeded_hash_param 10 100 0 x\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* The run-time library for lexers generated by camllex *)\n\ntype position = {\n  pos_fname : string;\n  pos_lnum : int;\n  pos_bol : int;\n  pos_cnum : int;\n}\n\nlet dummy_pos = {\n  pos_fname = \"\";\n  pos_lnum = 0;\n  pos_bol = 0;\n  pos_cnum = -1;\n}\n\ntype lexbuf =\n  { refill_buff : lexbuf -> unit;\n    mutable lex_buffer : bytes;\n    mutable lex_buffer_len : int;\n    mutable lex_abs_pos : int;\n    mutable lex_start_pos : int;\n    mutable lex_curr_pos : int;\n    mutable lex_last_pos : int;\n    mutable lex_last_action : int;\n    mutable lex_eof_reached : bool;\n    mutable lex_mem : int array;\n    mutable lex_start_p : position;\n    mutable lex_curr_p : position;\n  }\n\ntype lex_tables =\n  { lex_base: string;\n    lex_backtrk: string;\n    lex_default: string;\n    lex_trans: string;\n    lex_check: string;\n    lex_base_code : string;\n    lex_backtrk_code : string;\n    lex_default_code : string;\n    lex_trans_code : string;\n    lex_check_code : string;\n    lex_code: string;}\n\nexternal c_engine : lex_tables -> int -> lexbuf -> int = \"caml_lex_engine\"\nexternal c_new_engine : lex_tables -> int -> lexbuf -> int\n                      = \"caml_new_lex_engine\"\n\nlet engine tbl state buf =\n  let result = c_engine tbl state buf in\n  if result >= 0 && buf.lex_curr_p != dummy_pos then begin\n    buf.lex_start_p <- buf.lex_curr_p;\n    buf.lex_curr_p <- {buf.lex_curr_p\n                       with pos_cnum = buf.lex_abs_pos + buf.lex_curr_pos};\n  end;\n  result\n\n\nlet new_engine tbl state buf =\n  let result = c_new_engine tbl state buf in\n  if result >= 0 && buf.lex_curr_p != dummy_pos then begin\n    buf.lex_start_p <- buf.lex_curr_p;\n    buf.lex_curr_p <- {buf.lex_curr_p\n                       with pos_cnum = buf.lex_abs_pos + buf.lex_curr_pos};\n  end;\n  result\n\nlet lex_refill read_fun aux_buffer lexbuf =\n  let read =\n    read_fun aux_buffer (Bytes.length aux_buffer) in\n  let n =\n    if read > 0\n    then read\n    else (lexbuf.lex_eof_reached <- true; 0) in\n  (* Current state of the buffer:\n        <-------|---------------------|----------->\n        |  junk |      valid data     |   junk    |\n        ^       ^                     ^           ^\n        0    start_pos             buffer_end    Bytes.length buffer\n  *)\n  if lexbuf.lex_buffer_len + n > Bytes.length lexbuf.lex_buffer then begin\n    (* There is not enough space at the end of the buffer *)\n    if lexbuf.lex_buffer_len - lexbuf.lex_start_pos + n\n       <= Bytes.length lexbuf.lex_buffer\n    then begin\n      (* But there is enough space if we reclaim the junk at the beginning\n         of the buffer *)\n      Bytes.blit lexbuf.lex_buffer lexbuf.lex_start_pos\n                  lexbuf.lex_buffer 0\n                  (lexbuf.lex_buffer_len - lexbuf.lex_start_pos)\n    end else begin\n      (* We must grow the buffer.  Doubling its size will provide enough\n         space since n <= String.length aux_buffer <= String.length buffer.\n         Watch out for string length overflow, though. *)\n      let newlen =\n        Int.min (2 * Bytes.length lexbuf.lex_buffer) Sys.max_string_length in\n      if lexbuf.lex_buffer_len - lexbuf.lex_start_pos + n > newlen\n      then failwith \"Lexing.lex_refill: cannot grow buffer\";\n      let newbuf = Bytes.create newlen in\n      (* Copy the valid data to the beginning of the new buffer *)\n      Bytes.blit lexbuf.lex_buffer lexbuf.lex_start_pos\n                  newbuf 0\n                  (lexbuf.lex_buffer_len - lexbuf.lex_start_pos);\n      lexbuf.lex_buffer <- newbuf\n    end;\n    (* Reallocation or not, we have shifted the data left by\n       start_pos characters; update the positions *)\n    let s = lexbuf.lex_start_pos in\n    lexbuf.lex_abs_pos <- lexbuf.lex_abs_pos + s;\n    lexbuf.lex_curr_pos <- lexbuf.lex_curr_pos - s;\n    lexbuf.lex_start_pos <- 0;\n    lexbuf.lex_last_pos <- lexbuf.lex_last_pos - s;\n    lexbuf.lex_buffer_len <- lexbuf.lex_buffer_len - s ;\n    let t = lexbuf.lex_mem in\n    for i = 0 to Array.length t-1 do\n      let v = t.(i) in\n      if v >= 0 then\n        t.(i) <- v-s\n    done\n  end;\n  (* There is now enough space at the end of the buffer *)\n  Bytes.blit aux_buffer 0 lexbuf.lex_buffer lexbuf.lex_buffer_len n;\n  lexbuf.lex_buffer_len <- lexbuf.lex_buffer_len + n\n\nlet zero_pos = {\n  pos_fname = \"\";\n  pos_lnum = 1;\n  pos_bol = 0;\n  pos_cnum = 0;\n}\n\nlet from_function ?(with_positions = true) f =\n  { refill_buff = lex_refill f (Bytes.create 512);\n    lex_buffer = Bytes.create 1024;\n    lex_buffer_len = 0;\n    lex_abs_pos = 0;\n    lex_start_pos = 0;\n    lex_curr_pos = 0;\n    lex_last_pos = 0;\n    lex_last_action = 0;\n    lex_mem = [||];\n    lex_eof_reached = false;\n    lex_start_p = if with_positions then zero_pos else dummy_pos;\n    lex_curr_p = if with_positions then zero_pos else dummy_pos;\n  }\n\nlet from_channel ?with_positions ic =\n  from_function ?with_positions (fun buf n -> input ic buf 0 n)\n\nlet from_string ?(with_positions = true) s =\n  { refill_buff = (fun lexbuf -> lexbuf.lex_eof_reached <- true);\n    lex_buffer = Bytes.of_string s; (* have to make a copy for compatibility\n                                       with unsafe-string mode *)\n    lex_buffer_len = String.length s;\n    lex_abs_pos = 0;\n    lex_start_pos = 0;\n    lex_curr_pos = 0;\n    lex_last_pos = 0;\n    lex_last_action = 0;\n    lex_mem = [||];\n    lex_eof_reached = true;\n    lex_start_p = if with_positions then zero_pos else dummy_pos;\n    lex_curr_p = if with_positions then zero_pos else dummy_pos;\n  }\n\nlet set_position lexbuf position =\n  lexbuf.lex_curr_p  <- {position with pos_fname = lexbuf.lex_curr_p.pos_fname};\n  lexbuf.lex_abs_pos <- position.pos_cnum\n\nlet set_filename lexbuf fname =\n  lexbuf.lex_curr_p <- {lexbuf.lex_curr_p with pos_fname = fname}\n\nlet with_positions lexbuf = lexbuf.lex_curr_p != dummy_pos\n\nlet lexeme lexbuf =\n  let len = lexbuf.lex_curr_pos - lexbuf.lex_start_pos in\n  Bytes.sub_string lexbuf.lex_buffer lexbuf.lex_start_pos len\n\nlet sub_lexeme lexbuf i1 i2 =\n  let len = i2-i1 in\n  Bytes.sub_string lexbuf.lex_buffer i1 len\n\nlet sub_lexeme_opt lexbuf i1 i2 =\n  if i1 >= 0 then begin\n    let len = i2-i1 in\n    Some (Bytes.sub_string lexbuf.lex_buffer i1 len)\n  end else begin\n    None\n  end\n\nlet sub_lexeme_char lexbuf i = Bytes.get lexbuf.lex_buffer i\n\nlet sub_lexeme_char_opt lexbuf i =\n  if i >= 0 then\n    Some (Bytes.get lexbuf.lex_buffer i)\n  else\n    None\n\n\nlet lexeme_char lexbuf i =\n  Bytes.get lexbuf.lex_buffer (lexbuf.lex_start_pos + i)\n\nlet lexeme_start lexbuf = lexbuf.lex_start_p.pos_cnum\nlet lexeme_end lexbuf = lexbuf.lex_curr_p.pos_cnum\n\nlet lexeme_start_p lexbuf = lexbuf.lex_start_p\nlet lexeme_end_p lexbuf = lexbuf.lex_curr_p\n\nlet new_line lexbuf =\n  let lcp = lexbuf.lex_curr_p in\n  if lcp != dummy_pos then\n    lexbuf.lex_curr_p <-\n      { lcp with\n        pos_lnum = lcp.pos_lnum + 1;\n        pos_bol = lcp.pos_cnum;\n      }\n\n\n\n(* Discard data left in lexer buffer. *)\n\nlet flush_input lb =\n  lb.lex_curr_pos <- 0;\n  lb.lex_abs_pos <- 0;\n  let lcp = lb.lex_curr_p in\n  if lcp != dummy_pos then\n    lb.lex_curr_p <- {zero_pos with pos_fname = lcp.pos_fname};\n  lb.lex_buffer_len <- 0;\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* The parsing engine *)\n\nopen Lexing\n\n(* Internal interface to the parsing engine *)\n\ntype parser_env =\n  { mutable s_stack : int array;        (* States *)\n    mutable v_stack : Obj.t array;      (* Semantic attributes *)\n    mutable symb_start_stack : position array; (* Start positions *)\n    mutable symb_end_stack : position array;   (* End positions *)\n    mutable stacksize : int;            (* Size of the stacks *)\n    mutable stackbase : int;            (* Base sp for current parse *)\n    mutable curr_char : int;            (* Last token read *)\n    mutable lval : Obj.t;               (* Its semantic attribute *)\n    mutable symb_start : position;      (* Start pos. of the current symbol*)\n    mutable symb_end : position;        (* End pos. of the current symbol *)\n    mutable asp : int;                  (* The stack pointer for attributes *)\n    mutable rule_len : int;             (* Number of rhs items in the rule *)\n    mutable rule_number : int;          (* Rule number to reduce by *)\n    mutable sp : int;                   (* Saved sp for parse_engine *)\n    mutable state : int;                (* Saved state for parse_engine *)\n    mutable errflag : int }             (* Saved error flag for parse_engine *)\n[@@warning \"-unused-field\"]\n\ntype parse_tables =\n  { actions : (parser_env -> Obj.t) array;\n    transl_const : int array;\n    transl_block : int array;\n    lhs : string;\n    len : string;\n    defred : string;\n    dgoto : string;\n    sindex : string;\n    rindex : string;\n    gindex : string;\n    tablesize : int;\n    table : string;\n    check : string;\n    error_function : string -> unit;\n    names_const : string;\n    names_block : string }\n\nexception YYexit of Obj.t\nexception Parse_error\n\ntype parser_input =\n    Start\n  | Token_read\n  | Stacks_grown_1\n  | Stacks_grown_2\n  | Semantic_action_computed\n  | Error_detected\n\ntype parser_output =\n    Read_token\n  | Raise_parse_error\n  | Grow_stacks_1\n  | Grow_stacks_2\n  | Compute_semantic_action\n  | Call_error_function\n\n(* to avoid warnings *)\nlet _ = [Read_token; Raise_parse_error; Grow_stacks_1; Grow_stacks_2;\n         Compute_semantic_action; Call_error_function]\n\nexternal parse_engine :\n    parse_tables -> parser_env -> parser_input -> Obj.t -> parser_output\n    = \"caml_parse_engine\"\n\nexternal set_trace: bool -> bool\n    = \"caml_set_parser_trace\"\n\nlet env =\n  { s_stack = Array.make 100 0;\n    v_stack = Array.make 100 (Obj.repr ());\n    symb_start_stack = Array.make 100 dummy_pos;\n    symb_end_stack = Array.make 100 dummy_pos;\n    stacksize = 100;\n    stackbase = 0;\n    curr_char = 0;\n    lval = Obj.repr ();\n    symb_start = dummy_pos;\n    symb_end = dummy_pos;\n    asp = 0;\n    rule_len = 0;\n    rule_number = 0;\n    sp = 0;\n    state = 0;\n    errflag = 0 }\n\nlet grow_stacks() =\n  let oldsize = env.stacksize in\n  let newsize = oldsize * 2 in\n  let new_s = Array.make newsize 0\n  and new_v = Array.make newsize (Obj.repr ())\n  and new_start = Array.make newsize dummy_pos\n  and new_end = Array.make newsize dummy_pos in\n    Array.blit env.s_stack 0 new_s 0 oldsize;\n    env.s_stack <- new_s;\n    Array.blit env.v_stack 0 new_v 0 oldsize;\n    env.v_stack <- new_v;\n    Array.blit env.symb_start_stack 0 new_start 0 oldsize;\n    env.symb_start_stack <- new_start;\n    Array.blit env.symb_end_stack 0 new_end 0 oldsize;\n    env.symb_end_stack <- new_end;\n    env.stacksize <- newsize\n\nlet clear_parser() =\n  Array.fill env.v_stack 0 env.stacksize (Obj.repr ());\n  env.lval <- Obj.repr ()\n\nlet current_lookahead_fun = ref (fun (_ : Obj.t) -> false)\n\nlet yyparse tables start lexer lexbuf =\n  let rec loop cmd arg =\n    match parse_engine tables env cmd arg with\n      Read_token ->\n        let t = Obj.repr(lexer lexbuf) in\n        env.symb_start <- lexbuf.lex_start_p;\n        env.symb_end <- lexbuf.lex_curr_p;\n        loop Token_read t\n    | Raise_parse_error ->\n        raise Parse_error\n    | Compute_semantic_action ->\n        let (action, value) =\n          try\n            (Semantic_action_computed, tables.actions.(env.rule_number) env)\n          with Parse_error ->\n            (Error_detected, Obj.repr ()) in\n        loop action value\n    | Grow_stacks_1 ->\n        grow_stacks(); loop Stacks_grown_1 (Obj.repr ())\n    | Grow_stacks_2 ->\n        grow_stacks(); loop Stacks_grown_2 (Obj.repr ())\n    | Call_error_function ->\n        tables.error_function \"syntax error\";\n        loop Error_detected (Obj.repr ()) in\n  let init_asp = env.asp\n  and init_sp = env.sp\n  and init_stackbase = env.stackbase\n  and init_state = env.state\n  and init_curr_char = env.curr_char\n  and init_lval = env.lval\n  and init_errflag = env.errflag in\n  env.stackbase <- env.sp + 1;\n  env.curr_char <- start;\n  env.symb_end <- lexbuf.lex_curr_p;\n  try\n    loop Start (Obj.repr ())\n  with exn ->\n    let curr_char = env.curr_char in\n    env.asp <- init_asp;\n    env.sp <- init_sp;\n    env.stackbase <- init_stackbase;\n    env.state <- init_state;\n    env.curr_char <- init_curr_char;\n    env.lval <- init_lval;\n    env.errflag <- init_errflag;\n    match exn with\n      YYexit v ->\n        Obj.magic v\n    | _ ->\n        current_lookahead_fun :=\n          (fun tok ->\n            if Obj.is_block tok\n            then tables.transl_block.(Obj.tag tok) = curr_char\n            else tables.transl_const.(Obj.magic tok) = curr_char);\n        raise exn\n\nlet peek_val env n =\n  Obj.magic env.v_stack.(env.asp - n)\n\nlet symbol_start_pos () =\n  let rec loop i =\n    if i <= 0 then env.symb_end_stack.(env.asp)\n    else begin\n      let st = env.symb_start_stack.(env.asp - i + 1) in\n      let en = env.symb_end_stack.(env.asp - i + 1) in\n      if st <> en then st else loop (i - 1)\n    end\n  in\n  loop env.rule_len\n\nlet symbol_end_pos () = env.symb_end_stack.(env.asp)\nlet rhs_start_pos n = env.symb_start_stack.(env.asp - (env.rule_len - n))\nlet rhs_end_pos n = env.symb_end_stack.(env.asp - (env.rule_len - n))\n\nlet symbol_start () = (symbol_start_pos ()).pos_cnum\nlet symbol_end () = (symbol_end_pos ()).pos_cnum\nlet rhs_start n = (rhs_start_pos n).pos_cnum\nlet rhs_end n = (rhs_end_pos n).pos_cnum\n\nlet is_current_lookahead tok =\n  (!current_lookahead_fun)(Obj.repr tok)\n\nlet parse_error (_ : string) = ()\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Sets over ordered types *)\n\nmodule type OrderedType =\n  sig\n    type t\n    val compare: t -> t -> int\n  end\n\nmodule type S =\n  sig\n    type elt\n    type t\n    val empty: t\n    val add: elt -> t -> t\n    val singleton: elt -> t\n    val remove: elt -> t -> t\n    val union: t -> t -> t\n    val inter: t -> t -> t\n    val disjoint: t -> t -> bool\n    val diff: t -> t -> t\n    val cardinal: t -> int\n    val elements: t -> elt list\n    val min_elt: t -> elt\n    val min_elt_opt: t -> elt option\n    val max_elt: t -> elt\n    val max_elt_opt: t -> elt option\n    val choose: t -> elt\n    val choose_opt: t -> elt option\n    val find: elt -> t -> elt\n    val find_opt: elt -> t -> elt option\n    val find_first: (elt -> bool) -> t -> elt\n    val find_first_opt: (elt -> bool) -> t -> elt option\n    val find_last: (elt -> bool) -> t -> elt\n    val find_last_opt: (elt -> bool) -> t -> elt option\n    val iter: (elt -> unit) -> t -> unit\n    val fold: (elt -> 'a -> 'a) -> t -> 'a -> 'a\n    val map: (elt -> elt) -> t -> t\n    val filter: (elt -> bool) -> t -> t\n    val filter_map: (elt -> elt option) -> t -> t\n    val partition: (elt -> bool) -> t -> t * t\n    val split: elt -> t -> t * bool * t\n    val is_empty: t -> bool\n    val mem: elt -> t -> bool\n    val equal: t -> t -> bool\n    val compare: t -> t -> int\n    val subset: t -> t -> bool\n    val for_all: (elt -> bool) -> t -> bool\n    val exists: (elt -> bool) -> t -> bool\n    val to_list : t -> elt list\n    val of_list: elt list -> t\n    val to_seq_from : elt -> t -> elt Seq.t\n    val to_seq : t -> elt Seq.t\n    val to_rev_seq : t -> elt Seq.t\n    val add_seq : elt Seq.t -> t -> t\n    val of_seq : elt Seq.t -> t\n  end\n\nmodule Make(Ord: OrderedType) =\n  struct\n    type elt = Ord.t\n    type t = Empty | Node of {l:t; v:elt; r:t; h:int}\n\n    (* Sets are represented by balanced binary trees (the heights of the\n       children differ by at most 2 *)\n\n    let height = function\n        Empty -> 0\n      | Node {h} -> h\n\n    (* Creates a new node with left son l, value v and right son r.\n       We must have all elements of l < v < all elements of r.\n       l and r must be balanced and | height l - height r | <= 2.\n       Inline expansion of height for better speed. *)\n\n    let create l v r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      Node{l; v; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    (* Same as create, but performs one step of rebalancing if necessary.\n       Assumes l and r balanced and | height l - height r | <= 3.\n       Inline expansion of create for better speed in the most frequent case\n       where no rebalancing is required. *)\n\n    let bal l v r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Set.bal\"\n        | Node{l=ll; v=lv; r=lr} ->\n            if height ll >= height lr then\n              create ll lv (create lr v r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Set.bal\"\n              | Node{l=lrl; v=lrv; r=lrr}->\n                  create (create ll lv lrl) lrv (create lrr v r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Set.bal\"\n        | Node{l=rl; v=rv; r=rr} ->\n            if height rr >= height rl then\n              create (create l v rl) rv rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Set.bal\"\n              | Node{l=rll; v=rlv; r=rlr} ->\n                  create (create l v rll) rlv (create rlr rv rr)\n            end\n      end else\n        Node{l; v; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    (* Insertion of one element *)\n\n    let rec add x = function\n        Empty -> Node{l=Empty; v=x; r=Empty; h=1}\n      | Node{l; v; r} as t ->\n          let c = Ord.compare x v in\n          if c = 0 then t else\n          if c < 0 then\n            let ll = add x l in\n            if l == ll then t else bal ll v r\n          else\n            let rr = add x r in\n            if r == rr then t else bal l v rr\n\n    let singleton x = Node{l=Empty; v=x; r=Empty; h=1}\n\n    (* Beware: those two functions assume that the added v is *strictly*\n       smaller (or bigger) than all the present elements in the tree; it\n       does not test for equality with the current min (or max) element.\n       Indeed, they are only used during the \"join\" operation which\n       respects this precondition.\n    *)\n\n    let rec add_min_element x = function\n      | Empty -> singleton x\n      | Node {l; v; r} ->\n        bal (add_min_element x l) v r\n\n    let rec add_max_element x = function\n      | Empty -> singleton x\n      | Node {l; v; r} ->\n        bal l v (add_max_element x r)\n\n    (* Same as create and bal, but no assumptions are made on the\n       relative heights of l and r. *)\n\n    let rec join l v r =\n      match (l, r) with\n        (Empty, _) -> add_min_element v r\n      | (_, Empty) -> add_max_element v l\n      | (Node{l=ll; v=lv; r=lr; h=lh}, Node{l=rl; v=rv; r=rr; h=rh}) ->\n          if lh > rh + 2 then bal ll lv (join lr v r) else\n          if rh > lh + 2 then bal (join l v rl) rv rr else\n          create l v r\n\n    (* Smallest and greatest element of a set *)\n\n    let rec min_elt = function\n        Empty -> raise Not_found\n      | Node{l=Empty; v} -> v\n      | Node{l} -> min_elt l\n\n    let rec min_elt_opt = function\n        Empty -> None\n      | Node{l=Empty; v} -> Some v\n      | Node{l} -> min_elt_opt l\n\n    let rec max_elt = function\n        Empty -> raise Not_found\n      | Node{v; r=Empty} -> v\n      | Node{r} -> max_elt r\n\n    let rec max_elt_opt = function\n        Empty -> None\n      | Node{v; r=Empty} -> Some v\n      | Node{r} -> max_elt_opt r\n\n    (* Remove the smallest element of the given set *)\n\n    let rec remove_min_elt = function\n        Empty -> invalid_arg \"Set.remove_min_elt\"\n      | Node{l=Empty; r} -> r\n      | Node{l; v; r} -> bal (remove_min_elt l) v r\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       Assume | height l - height r | <= 2. *)\n\n    let merge t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) -> bal t1 (min_elt t2) (remove_min_elt t2)\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       No assumption on the heights of l and r. *)\n\n    let concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) -> join t1 (min_elt t2) (remove_min_elt t2)\n\n    (* Splitting.  split x s returns a triple (l, present, r) where\n        - l is the set of elements of s that are < x\n        - r is the set of elements of s that are > x\n        - present is false if s contains no element equal to x,\n          or true if s contains an element equal to x. *)\n\n    let rec split x = function\n        Empty ->\n          (Empty, false, Empty)\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, true, r)\n          else if c < 0 then\n            let (ll, pres, rl) = split x l in (ll, pres, join rl v r)\n          else\n            let (lr, pres, rr) = split x r in (join l v lr, pres, rr)\n\n    (* Implementation of the set operations *)\n\n    let empty = Empty\n\n    let is_empty = function Empty -> true | _ -> false\n\n    let rec mem x = function\n        Empty -> false\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          c = 0 || mem x (if c < 0 then l else r)\n\n    let rec remove x = function\n        Empty -> Empty\n      | (Node{l; v; r} as t) ->\n          let c = Ord.compare x v in\n          if c = 0 then merge l r\n          else\n            if c < 0 then\n              let ll = remove x l in\n              if l == ll then t\n              else bal ll v r\n            else\n              let rr = remove x r in\n              if r == rr then t\n              else bal l v rr\n\n    let rec union s1 s2 =\n      match (s1, s2) with\n        (Empty, t2) -> t2\n      | (t1, Empty) -> t1\n      | (Node{l=l1; v=v1; r=r1; h=h1}, Node{l=l2; v=v2; r=r2; h=h2}) ->\n          if h1 >= h2 then\n            if h2 = 1 then add v2 s1 else begin\n              let (l2, _, r2) = split v1 s2 in\n              join (union l1 l2) v1 (union r1 r2)\n            end\n          else\n            if h1 = 1 then add v1 s2 else begin\n              let (l1, _, r1) = split v2 s1 in\n              join (union l1 l2) v2 (union r1 r2)\n            end\n\n    let rec inter s1 s2 =\n      match (s1, s2) with\n        (Empty, _) -> Empty\n      | (_, Empty) -> Empty\n      | (Node{l=l1; v=v1; r=r1}, t2) ->\n          match split v1 t2 with\n            (l2, false, r2) ->\n              concat (inter l1 l2) (inter r1 r2)\n          | (l2, true, r2) ->\n              join (inter l1 l2) v1 (inter r1 r2)\n\n    (* Same as split, but compute the left and right subtrees\n       only if the pivot element is not in the set.  The right subtree\n       is computed on demand. *)\n\n    type split_bis =\n      | Found\n      | NotFound of t * (unit -> t)\n\n    let rec split_bis x = function\n        Empty ->\n          NotFound (Empty, (fun () -> Empty))\n      | Node{l; v; r; _} ->\n          let c = Ord.compare x v in\n          if c = 0 then Found\n          else if c < 0 then\n            match split_bis x l with\n            | Found -> Found\n            | NotFound (ll, rl) -> NotFound (ll, (fun () -> join (rl ()) v r))\n          else\n            match split_bis x r with\n            | Found -> Found\n            | NotFound (lr, rr) -> NotFound (join l v lr, rr)\n\n    let rec disjoint s1 s2 =\n      match (s1, s2) with\n        (Empty, _) | (_, Empty) -> true\n      | (Node{l=l1; v=v1; r=r1}, t2) ->\n          if s1 == s2 then false\n          else match split_bis v1 t2 with\n              NotFound(l2, r2) -> disjoint l1 l2 && disjoint r1 (r2 ())\n            | Found -> false\n\n    let rec diff s1 s2 =\n      match (s1, s2) with\n        (Empty, _) -> Empty\n      | (t1, Empty) -> t1\n      | (Node{l=l1; v=v1; r=r1}, t2) ->\n          match split v1 t2 with\n            (l2, false, r2) ->\n              join (diff l1 l2) v1 (diff r1 r2)\n          | (l2, true, r2) ->\n              concat (diff l1 l2) (diff r1 r2)\n\n    type enumeration = End | More of elt * t * enumeration\n\n    let rec cons_enum s e =\n      match s with\n        Empty -> e\n      | Node{l; v; r} -> cons_enum l (More(v, r, e))\n\n    let rec compare_aux e1 e2 =\n        match (e1, e2) with\n        (End, End) -> 0\n      | (End, _)  -> -1\n      | (_, End) -> 1\n      | (More(v1, r1, e1), More(v2, r2, e2)) ->\n          let c = Ord.compare v1 v2 in\n          if c <> 0\n          then c\n          else compare_aux (cons_enum r1 e1) (cons_enum r2 e2)\n\n    let compare s1 s2 =\n      compare_aux (cons_enum s1 End) (cons_enum s2 End)\n\n    let equal s1 s2 =\n      compare s1 s2 = 0\n\n    let rec subset s1 s2 =\n      match (s1, s2) with\n        Empty, _ ->\n          true\n      | _, Empty ->\n          false\n      | Node {l=l1; v=v1; r=r1}, (Node {l=l2; v=v2; r=r2} as t2) ->\n          let c = Ord.compare v1 v2 in\n          if c = 0 then\n            subset l1 l2 && subset r1 r2\n          else if c < 0 then\n            subset (Node {l=l1; v=v1; r=Empty; h=0}) l2 && subset r1 t2\n          else\n            subset (Node {l=Empty; v=v1; r=r1; h=0}) r2 && subset l1 t2\n\n    let rec iter f = function\n        Empty -> ()\n      | Node{l; v; r} -> iter f l; f v; iter f r\n\n    let rec fold f s accu =\n      match s with\n        Empty -> accu\n      | Node{l; v; r} -> fold f r (f v (fold f l accu))\n\n    let rec for_all p = function\n        Empty -> true\n      | Node{l; v; r} -> p v && for_all p l && for_all p r\n\n    let rec exists p = function\n        Empty -> false\n      | Node{l; v; r} -> p v || exists p l || exists p r\n\n    let rec filter p = function\n        Empty -> Empty\n      | (Node{l; v; r}) as t ->\n          (* call [p] in the expected left-to-right order *)\n          let l' = filter p l in\n          let pv = p v in\n          let r' = filter p r in\n          if pv then\n            if l==l' && r==r' then t else join l' v r'\n          else concat l' r'\n\n    let rec partition p = function\n        Empty -> (Empty, Empty)\n      | Node{l; v; r} ->\n          (* call [p] in the expected left-to-right order *)\n          let (lt, lf) = partition p l in\n          let pv = p v in\n          let (rt, rf) = partition p r in\n          if pv\n          then (join lt v rt, concat lf rf)\n          else (concat lt rt, join lf v rf)\n\n    let rec cardinal = function\n        Empty -> 0\n      | Node{l; r} -> cardinal l + 1 + cardinal r\n\n    let rec elements_aux accu = function\n        Empty -> accu\n      | Node{l; v; r} -> elements_aux (v :: elements_aux accu r) l\n\n    let elements s =\n      elements_aux [] s\n\n    let choose = min_elt\n\n    let choose_opt = min_elt_opt\n\n    let rec find x = function\n        Empty -> raise Not_found\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then v\n          else find x (if c < 0 then l else r)\n\n    let rec find_first_aux v0 f = function\n        Empty ->\n          v0\n      | Node{l; v; r} ->\n          if f v then\n            find_first_aux v f l\n          else\n            find_first_aux v0 f r\n\n    let rec find_first f = function\n        Empty ->\n          raise Not_found\n      | Node{l; v; r} ->\n          if f v then\n            find_first_aux v f l\n          else\n            find_first f r\n\n    let rec find_first_opt_aux v0 f = function\n        Empty ->\n          Some v0\n      | Node{l; v; r} ->\n          if f v then\n            find_first_opt_aux v f l\n          else\n            find_first_opt_aux v0 f r\n\n    let rec find_first_opt f = function\n        Empty ->\n          None\n      | Node{l; v; r} ->\n          if f v then\n            find_first_opt_aux v f l\n          else\n            find_first_opt f r\n\n    let rec find_last_aux v0 f = function\n        Empty ->\n          v0\n      | Node{l; v; r} ->\n          if f v then\n            find_last_aux v f r\n          else\n            find_last_aux v0 f l\n\n    let rec find_last f = function\n        Empty ->\n          raise Not_found\n      | Node{l; v; r} ->\n          if f v then\n            find_last_aux v f r\n          else\n            find_last f l\n\n    let rec find_last_opt_aux v0 f = function\n        Empty ->\n          Some v0\n      | Node{l; v; r} ->\n          if f v then\n            find_last_opt_aux v f r\n          else\n            find_last_opt_aux v0 f l\n\n    let rec find_last_opt f = function\n        Empty ->\n          None\n      | Node{l; v; r} ->\n          if f v then\n            find_last_opt_aux v f r\n          else\n            find_last_opt f l\n\n    let rec find_opt x = function\n        Empty -> None\n      | Node{l; v; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then Some v\n          else find_opt x (if c < 0 then l else r)\n\n    let try_join l v r =\n      (* [join l v r] can only be called when (elements of l < v <\n         elements of r); use [try_join l v r] when this property may\n         not hold, but you hope it does hold in the common case *)\n      if (l = Empty || Ord.compare (max_elt l) v < 0)\n      && (r = Empty || Ord.compare v (min_elt r) < 0)\n      then join l v r\n      else union l (add v r)\n\n    let rec map f = function\n      | Empty -> Empty\n      | Node{l; v; r} as t ->\n         (* enforce left-to-right evaluation order *)\n         let l' = map f l in\n         let v' = f v in\n         let r' = map f r in\n         if l == l' && v == v' && r == r' then t\n         else try_join l' v' r'\n\n    let try_concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) -> try_join t1 (min_elt t2) (remove_min_elt t2)\n\n    let rec filter_map f = function\n      | Empty -> Empty\n      | Node{l; v; r} as t ->\n         (* enforce left-to-right evaluation order *)\n         let l' = filter_map f l in\n         let v' = f v in\n         let r' = filter_map f r in\n         begin match v' with\n           | Some v' ->\n              if l == l' && v == v' && r == r' then t\n              else try_join l' v' r'\n           | None ->\n              try_concat l' r'\n         end\n\n    let of_sorted_list l =\n      let rec sub n l =\n        match n, l with\n        | 0, l -> Empty, l\n        | 1, x0 :: l -> Node {l=Empty; v=x0; r=Empty; h=1}, l\n        | 2, x0 :: x1 :: l ->\n            Node{l=Node{l=Empty; v=x0; r=Empty; h=1}; v=x1; r=Empty; h=2}, l\n        | 3, x0 :: x1 :: x2 :: l ->\n            Node{l=Node{l=Empty; v=x0; r=Empty; h=1}; v=x1;\n                 r=Node{l=Empty; v=x2; r=Empty; h=1}; h=2}, l\n        | n, l ->\n          let nl = n / 2 in\n          let left, l = sub nl l in\n          match l with\n          | [] -> assert false\n          | mid :: l ->\n            let right, l = sub (n - nl - 1) l in\n            create left mid right, l\n      in\n      fst (sub (List.length l) l)\n\n    let to_list = elements\n\n    let of_list l =\n      match l with\n      | [] -> empty\n      | [x0] -> singleton x0\n      | [x0; x1] -> add x1 (singleton x0)\n      | [x0; x1; x2] -> add x2 (add x1 (singleton x0))\n      | [x0; x1; x2; x3] -> add x3 (add x2 (add x1 (singleton x0)))\n      | [x0; x1; x2; x3; x4] -> add x4 (add x3 (add x2 (add x1 (singleton x0))))\n      | _ -> of_sorted_list (List.sort_uniq Ord.compare l)\n\n    let add_seq i m =\n      Seq.fold_left (fun s x -> add x s) m i\n\n    let of_seq i = add_seq i empty\n\n    let rec seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (x, t, rest) -> Seq.Cons (x, seq_of_enum_ (cons_enum t rest))\n\n    let to_seq c = seq_of_enum_ (cons_enum c End)\n\n    let rec snoc_enum s e =\n      match s with\n        Empty -> e\n      | Node{l; v; r} -> snoc_enum r (More(v, l, e))\n\n    let rec rev_seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (x, t, rest) -> Seq.Cons (x, rev_seq_of_enum_ (snoc_enum t rest))\n\n    let to_rev_seq c = rev_seq_of_enum_ (snoc_enum c End)\n\n    let to_seq_from low s =\n      let rec aux low s c = match s with\n        | Empty -> c\n        | Node {l; r; v; _} ->\n            begin match Ord.compare v low with\n              | 0 -> More (v, r, c)\n              | n when n<0 -> aux low r c\n              | _ -> aux low l (More (v, r, c))\n            end\n      in\n      seq_of_enum_ (aux low s End)\n  end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule type OrderedType =\n  sig\n    type t\n    val compare: t -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type !+'a t\n    val empty: 'a t\n    val add: key -> 'a -> 'a t -> 'a t\n    val add_to_list: key -> 'a -> 'a list t -> 'a list t\n    val update: key -> ('a option -> 'a option) -> 'a t -> 'a t\n    val singleton: key -> 'a -> 'a t\n    val remove: key -> 'a t -> 'a t\n    val merge:\n      (key -> 'a option -> 'b option -> 'c option) ->\n      'a t -> 'b t -> 'c t\n    val union: (key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t\n    val cardinal: 'a t -> int\n    val bindings: 'a t -> (key * 'a) list\n    val min_binding: 'a t -> (key * 'a)\n    val min_binding_opt: 'a t -> (key * 'a) option\n    val max_binding: 'a t -> (key * 'a)\n    val max_binding_opt: 'a t -> (key * 'a) option\n    val choose: 'a t -> (key * 'a)\n    val choose_opt: 'a t -> (key * 'a) option\n    val find: key -> 'a t -> 'a\n    val find_opt: key -> 'a t -> 'a option\n    val find_first: (key -> bool) -> 'a t -> key * 'a\n    val find_first_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val find_last: (key -> bool) -> 'a t -> key * 'a\n    val find_last_opt: (key -> bool) -> 'a t -> (key * 'a) option\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val map: ('a -> 'b) -> 'a t -> 'b t\n    val mapi: (key -> 'a -> 'b) -> 'a t -> 'b t\n    val filter: (key -> 'a -> bool) -> 'a t -> 'a t\n    val filter_map: (key -> 'a -> 'b option) -> 'a t -> 'b t\n    val partition: (key -> 'a -> bool) -> 'a t -> 'a t * 'a t\n    val split: key -> 'a t -> 'a t * 'a option * 'a t\n    val is_empty: 'a t -> bool\n    val mem: key -> 'a t -> bool\n    val equal: ('a -> 'a -> bool) -> 'a t -> 'a t -> bool\n    val compare: ('a -> 'a -> int) -> 'a t -> 'a t -> int\n    val for_all: (key -> 'a -> bool) -> 'a t -> bool\n    val exists: (key -> 'a -> bool) -> 'a t -> bool\n    val to_list : 'a t -> (key * 'a) list\n    val of_list : (key * 'a) list -> 'a t\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_rev_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_from : key -> 'a t -> (key * 'a) Seq.t\n    val add_seq : (key * 'a) Seq.t -> 'a t -> 'a t\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule Make(Ord: OrderedType) = struct\n\n    type key = Ord.t\n\n    type 'a t =\n        Empty\n      | Node of {l:'a t; v:key; d:'a; r:'a t; h:int}\n\n    let height = function\n        Empty -> 0\n      | Node {h} -> h\n\n    let create l x d r =\n      let hl = height l and hr = height r in\n      Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let singleton x d = Node{l=Empty; v=x; d; r=Empty; h=1}\n\n    let bal l x d r =\n      let hl = match l with Empty -> 0 | Node {h} -> h in\n      let hr = match r with Empty -> 0 | Node {h} -> h in\n      if hl > hr + 2 then begin\n        match l with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=ll; v=lv; d=ld; r=lr} ->\n            if height ll >= height lr then\n              create ll lv ld (create lr x d r)\n            else begin\n              match lr with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=lrl; v=lrv; d=lrd; r=lrr}->\n                  create (create ll lv ld lrl) lrv lrd (create lrr x d r)\n            end\n      end else if hr > hl + 2 then begin\n        match r with\n          Empty -> invalid_arg \"Map.bal\"\n        | Node{l=rl; v=rv; d=rd; r=rr} ->\n            if height rr >= height rl then\n              create (create l x d rl) rv rd rr\n            else begin\n              match rl with\n                Empty -> invalid_arg \"Map.bal\"\n              | Node{l=rll; v=rlv; d=rld; r=rlr} ->\n                  create (create l x d rll) rlv rld (create rlr rv rd rr)\n            end\n      end else\n        Node{l; v=x; d; r; h=(if hl >= hr then hl + 1 else hr + 1)}\n\n    let empty = Empty\n\n    let is_empty = function Empty -> true | _ -> false\n\n    let rec add x data = function\n        Empty ->\n          Node{l=Empty; v=x; d=data; r=Empty; h=1}\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then\n            if d == data then m else Node{l; v=x; d=data; r; h}\n          else if c < 0 then\n            let ll = add x data l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = add x data r in\n            if r == rr then m else bal l v d rr\n\n    let rec find x = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then d\n          else find x (if c < 0 then l else r)\n\n    let rec find_first_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first_aux v0 d0 f r\n\n    let rec find_first f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_aux v d f l\n          else\n            find_first f r\n\n    let rec find_first_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt_aux v0 d0 f r\n\n    let rec find_first_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_first_opt_aux v d f l\n          else\n            find_first_opt f r\n\n    let rec find_last_aux v0 d0 f = function\n        Empty ->\n          (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last_aux v0 d0 f l\n\n    let rec find_last f = function\n        Empty ->\n          raise Not_found\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_aux v d f r\n          else\n            find_last f l\n\n    let rec find_last_opt_aux v0 d0 f = function\n        Empty ->\n          Some (v0, d0)\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt_aux v0 d0 f l\n\n    let rec find_last_opt f = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          if f v then\n            find_last_opt_aux v d f r\n          else\n            find_last_opt f l\n\n    let rec find_opt x = function\n        Empty ->\n          None\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then Some d\n          else find_opt x (if c < 0 then l else r)\n\n    let rec mem x = function\n        Empty ->\n          false\n      | Node {l; v; r} ->\n          let c = Ord.compare x v in\n          c = 0 || mem x (if c < 0 then l else r)\n\n    let rec min_binding = function\n        Empty -> raise Not_found\n      | Node {l=Empty; v; d} -> (v, d)\n      | Node {l} -> min_binding l\n\n    let rec min_binding_opt = function\n        Empty -> None\n      | Node {l=Empty; v; d} -> Some (v, d)\n      | Node {l}-> min_binding_opt l\n\n    let rec max_binding = function\n        Empty -> raise Not_found\n      | Node {v; d; r=Empty} -> (v, d)\n      | Node {r} -> max_binding r\n\n    let rec max_binding_opt = function\n        Empty -> None\n      | Node {v; d; r=Empty} -> Some (v, d)\n      | Node {r} -> max_binding_opt r\n\n    let rec remove_min_binding = function\n        Empty -> invalid_arg \"Map.remove_min_elt\"\n      | Node {l=Empty; r} -> r\n      | Node {l; v; d; r} -> bal (remove_min_binding l) v d r\n\n    let merge t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          bal t1 x d (remove_min_binding t2)\n\n    let rec remove x = function\n        Empty ->\n          Empty\n      | (Node {l; v; d; r} as m) ->\n          let c = Ord.compare x v in\n          if c = 0 then merge l r\n          else if c < 0 then\n            let ll = remove x l in if l == ll then m else bal ll v d r\n          else\n            let rr = remove x r in if r == rr then m else bal l v d rr\n\n    let rec update x f = function\n        Empty ->\n          begin match f None with\n          | None -> Empty\n          | Some data -> Node{l=Empty; v=x; d=data; r=Empty; h=1}\n          end\n      | Node {l; v; d; r; h} as m ->\n          let c = Ord.compare x v in\n          if c = 0 then begin\n            match f (Some d) with\n            | None -> merge l r\n            | Some data ->\n                if d == data then m else Node{l; v=x; d=data; r; h}\n          end else if c < 0 then\n            let ll = update x f l in\n            if l == ll then m else bal ll v d r\n          else\n            let rr = update x f r in\n            if r == rr then m else bal l v d rr\n\n    let add_to_list x data m =\n      let add = function None -> Some [data] | Some l -> Some (data :: l) in\n      update x add m\n\n    let rec iter f = function\n        Empty -> ()\n      | Node {l; v; d; r} ->\n          iter f l; f v d; iter f r\n\n    let rec map f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = map f l in\n          let d' = f d in\n          let r' = map f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec mapi f = function\n        Empty ->\n          Empty\n      | Node {l; v; d; r; h} ->\n          let l' = mapi f l in\n          let d' = f v d in\n          let r' = mapi f r in\n          Node{l=l'; v; d=d'; r=r'; h}\n\n    let rec fold f m accu =\n      match m with\n        Empty -> accu\n      | Node {l; v; d; r} ->\n          fold f r (f v d (fold f l accu))\n\n    let rec for_all p = function\n        Empty -> true\n      | Node {l; v; d; r} -> p v d && for_all p l && for_all p r\n\n    let rec exists p = function\n        Empty -> false\n      | Node {l; v; d; r} -> p v d || exists p l || exists p r\n\n    (* Beware: those two functions assume that the added k is *strictly*\n       smaller (or bigger) than all the present keys in the tree; it\n       does not test for equality with the current min (or max) key.\n\n       Indeed, they are only used during the \"join\" operation which\n       respects this precondition.\n    *)\n\n    let rec add_min_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal (add_min_binding k x l) v d r\n\n    let rec add_max_binding k x = function\n      | Empty -> singleton k x\n      | Node {l; v; d; r} ->\n        bal l v d (add_max_binding k x r)\n\n    (* Same as create and bal, but no assumptions are made on the\n       relative heights of l and r. *)\n\n    let rec join l v d r =\n      match (l, r) with\n        (Empty, _) -> add_min_binding v d r\n      | (_, Empty) -> add_max_binding v d l\n      | (Node{l=ll; v=lv; d=ld; r=lr; h=lh},\n         Node{l=rl; v=rv; d=rd; r=rr; h=rh}) ->\n          if lh > rh + 2 then bal ll lv ld (join lr v d r) else\n          if rh > lh + 2 then bal (join l v d rl) rv rd rr else\n          create l v d r\n\n    (* Merge two trees l and r into one.\n       All elements of l must precede the elements of r.\n       No assumption on the heights of l and r. *)\n\n    let concat t1 t2 =\n      match (t1, t2) with\n        (Empty, t) -> t\n      | (t, Empty) -> t\n      | (_, _) ->\n          let (x, d) = min_binding t2 in\n          join t1 x d (remove_min_binding t2)\n\n    let concat_or_join t1 v d t2 =\n      match d with\n      | Some d -> join t1 v d t2\n      | None -> concat t1 t2\n\n    let rec split x = function\n        Empty ->\n          (Empty, None, Empty)\n      | Node {l; v; d; r} ->\n          let c = Ord.compare x v in\n          if c = 0 then (l, Some d, r)\n          else if c < 0 then\n            let (ll, pres, rl) = split x l in (ll, pres, join rl v d r)\n          else\n            let (lr, pres, rr) = split x r in (join l v d lr, pres, rr)\n\n    let rec merge f s1 s2 =\n      match (s1, s2) with\n        (Empty, Empty) -> Empty\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1}, _) when h1 >= height s2 ->\n          let (l2, d2, r2) = split v1 s2 in\n          concat_or_join (merge f l1 l2) v1 (f v1 (Some d1) d2) (merge f r1 r2)\n      | (_, Node {l=l2; v=v2; d=d2; r=r2}) ->\n          let (l1, d1, r1) = split v2 s1 in\n          concat_or_join (merge f l1 l2) v2 (f v2 d1 (Some d2)) (merge f r1 r2)\n      | _ ->\n          assert false\n\n    let rec union f s1 s2 =\n      match (s1, s2) with\n      | (Empty, s) | (s, Empty) -> s\n      | (Node {l=l1; v=v1; d=d1; r=r1; h=h1},\n         Node {l=l2; v=v2; d=d2; r=r2; h=h2}) ->\n          if h1 >= h2 then\n            let (l2, d2, r2) = split v1 s2 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d2 with\n            | None -> join l v1 d1 r\n            | Some d2 -> concat_or_join l v1 (f v1 d1 d2) r\n          else\n            let (l1, d1, r1) = split v2 s1 in\n            let l = union f l1 l2 and r = union f r1 r2 in\n            match d1 with\n            | None -> join l v2 d2 r\n            | Some d1 -> concat_or_join l v2 (f v2 d1 d2) r\n\n    let rec filter p = function\n        Empty -> Empty\n      | Node {l; v; d; r} as m ->\n          (* call [p] in the expected left-to-right order *)\n          let l' = filter p l in\n          let pvd = p v d in\n          let r' = filter p r in\n          if pvd then if l==l' && r==r' then m else join l' v d r'\n          else concat l' r'\n\n    let rec filter_map f = function\n        Empty -> Empty\n      | Node {l; v; d; r} ->\n          (* call [f] in the expected left-to-right order *)\n          let l' = filter_map f l in\n          let fvd = f v d in\n          let r' = filter_map f r in\n          begin match fvd with\n            | Some d' -> join l' v d' r'\n            | None -> concat l' r'\n          end\n\n    let rec partition p = function\n        Empty -> (Empty, Empty)\n      | Node {l; v; d; r} ->\n          (* call [p] in the expected left-to-right order *)\n          let (lt, lf) = partition p l in\n          let pvd = p v d in\n          let (rt, rf) = partition p r in\n          if pvd\n          then (join lt v d rt, concat lf rf)\n          else (concat lt rt, join lf v d rf)\n\n    type 'a enumeration = End | More of key * 'a * 'a t * 'a enumeration\n\n    let rec cons_enum m e =\n      match m with\n        Empty -> e\n      | Node {l; v; d; r} -> cons_enum l (More(v, d, r, e))\n\n    let compare cmp m1 m2 =\n      let rec compare_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> 0\n        | (End, _)  -> -1\n        | (_, End) -> 1\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            let c = Ord.compare v1 v2 in\n            if c <> 0 then c else\n            let c = cmp d1 d2 in\n            if c <> 0 then c else\n            compare_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in compare_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let equal cmp m1 m2 =\n      let rec equal_aux e1 e2 =\n          match (e1, e2) with\n          (End, End) -> true\n        | (End, _)  -> false\n        | (_, End) -> false\n        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->\n            Ord.compare v1 v2 = 0 && cmp d1 d2 &&\n            equal_aux (cons_enum r1 e1) (cons_enum r2 e2)\n      in equal_aux (cons_enum m1 End) (cons_enum m2 End)\n\n    let rec cardinal = function\n        Empty -> 0\n      | Node {l; r} -> cardinal l + 1 + cardinal r\n\n    let rec bindings_aux accu = function\n        Empty -> accu\n      | Node {l; v; d; r} -> bindings_aux ((v, d) :: bindings_aux accu r) l\n\n    let bindings s =\n      bindings_aux [] s\n\n    let choose = min_binding\n\n    let choose_opt = min_binding_opt\n\n    let to_list = bindings\n    let of_list bs = List.fold_left (fun m (k, v) -> add k v m) empty bs\n\n    let add_seq i m =\n      Seq.fold_left (fun m (k,v) -> add k v m) m i\n\n    let of_seq i = add_seq i empty\n\n    let rec seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (k,v,t,rest) -> Seq.Cons ((k,v), seq_of_enum_ (cons_enum t rest))\n\n    let to_seq m =\n      seq_of_enum_ (cons_enum m End)\n\n    let rec snoc_enum s e =\n      match s with\n        Empty -> e\n      | Node{l; v; d; r} -> snoc_enum r (More(v, d, l, e))\n\n    let rec rev_seq_of_enum_ c () = match c with\n      | End -> Seq.Nil\n      | More (k,v,t,rest) ->\n          Seq.Cons ((k,v), rev_seq_of_enum_ (snoc_enum t rest))\n\n    let to_rev_seq c =\n      rev_seq_of_enum_ (snoc_enum c End)\n\n    let to_seq_from low m =\n      let rec aux low m c = match m with\n        | Empty -> c\n        | Node {l; v; d; r; _} ->\n            begin match Ord.compare v low with\n              | 0 -> More (v, d, r, c)\n              | n when n<0 -> aux low r c\n              | _ -> aux low l (More (v, d, r, c))\n            end\n      in\n      seq_of_enum_ (aux low m End)\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype 'a t = { mutable c : 'a list; mutable len : int; }\n\nexception Empty\n\nlet create () = { c = []; len = 0; }\n\nlet clear s = s.c <- []; s.len <- 0\n\nlet copy s = { c = s.c; len = s.len; }\n\nlet push x s = s.c <- x :: s.c; s.len <- s.len + 1\n\nlet pop s =\n  match s.c with\n  | hd::tl -> s.c <- tl; s.len <- s.len - 1; hd\n  | []     -> raise Empty\n\nlet pop_opt s =\n  match s.c with\n  | hd::tl -> s.c <- tl; s.len <- s.len - 1; Some hd\n  | []     -> None\n\nlet drop s =\n  match s.c with\n  | _hd::tl -> s.c <- tl; s.len <- s.len - 1\n  | [] -> raise Empty\n\nlet top s =\n  match s.c with\n  | hd::_ -> hd\n  | []    -> raise Empty\n\nlet top_opt s =\n  match s.c with\n  | hd::_ -> Some hd\n  | []    -> None\n\nlet is_empty s = (s.c = [])\n\nlet length s = s.len\n\nlet iter f s = List.iter f s.c\n\nlet fold f acc s = List.fold_left f acc s.c\n\n(** {1 Iterators} *)\n\nlet to_seq s = List.to_seq s.c\n\nlet add_seq q i = Seq.iter (fun x -> push x q) i\n\nlet of_seq g =\n  let s = create() in\n  add_seq s g;\n  s\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*         Francois Pottier, projet Cristal, INRIA Rocquencourt           *)\n(*                  Jeremie Dimino, Jane Street Europe                    *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nexception Empty\n\ntype 'a cell =\n  | Nil\n  | Cons of { content: 'a; mutable next: 'a cell }\n\ntype 'a t = {\n  mutable length: int;\n  mutable first: 'a cell;\n  mutable last: 'a cell\n}\n\nlet create () = {\n  length = 0;\n  first = Nil;\n  last = Nil\n}\n\nlet clear q =\n  q.length <- 0;\n  q.first <- Nil;\n  q.last <- Nil\n\nlet add x q =\n  let cell = Cons {\n    content = x;\n    next = Nil\n  } in\n  match q.last with\n  | Nil ->\n    q.length <- 1;\n    q.first <- cell;\n    q.last <- cell\n  | Cons last ->\n    q.length <- q.length + 1;\n    last.next <- cell;\n    q.last <- cell\n\nlet push =\n  add\n\nlet peek q =\n  match q.first with\n  | Nil -> raise Empty\n  | Cons { content } -> content\n\nlet peek_opt q =\n  match q.first with\n  | Nil -> None\n  | Cons { content } -> Some content\n\nlet top =\n  peek\n\nlet take q =\n  match q.first with\n  | Nil -> raise Empty\n  | Cons { content; next = Nil } ->\n    clear q;\n    content\n  | Cons { content; next } ->\n    q.length <- q.length - 1;\n    q.first <- next;\n    content\n\nlet take_opt q =\n  match q.first with\n  | Nil -> None\n  | Cons { content; next = Nil } ->\n    clear q;\n    Some content\n  | Cons { content; next } ->\n    q.length <- q.length - 1;\n    q.first <- next;\n    Some content\n\nlet pop =\n  take\n\nlet copy =\n  let rec copy q_res prev cell =\n    match cell with\n    | Nil -> q_res.last <- prev; q_res\n    | Cons { content; next } ->\n      let res = Cons { content; next = Nil } in\n      begin match prev with\n      | Nil -> q_res.first <- res\n      | Cons p -> p.next <- res\n      end;\n      copy q_res res next\n  in\n  fun q -> copy { length = q.length; first = Nil; last = Nil } Nil q.first\n\nlet is_empty q =\n  q.length = 0\n\nlet length q =\n  q.length\n\nlet iter =\n  let rec iter f cell =\n    match cell with\n    | Nil -> ()\n    | Cons { content; next } ->\n      f content;\n      iter f next\n  in\n  fun f q -> iter f q.first\n\nlet fold =\n  let rec fold f accu cell =\n    match cell with\n    | Nil -> accu\n    | Cons { content; next } ->\n      let accu = f accu content in\n      fold f accu next\n  in\n  fun f accu q -> fold f accu q.first\n\nlet transfer q1 q2 =\n  if q1.length > 0 then\n    match q2.last with\n    | Nil ->\n      q2.length <- q1.length;\n      q2.first <- q1.first;\n      q2.last <- q1.last;\n      clear q1\n    | Cons last ->\n      q2.length <- q2.length + q1.length;\n      last.next <- q1.first;\n      q2.last <- q1.last;\n      clear q1\n\n(** {1 Iterators} *)\n\nlet to_seq q =\n  let rec aux c () = match c with\n    | Nil -> Seq.Nil\n    | Cons { content=x; next; } -> Seq.Cons (x, aux next)\n  in\n  aux q.first\n\nlet add_seq q i = Seq.iter (fun x -> push x q) i\n\nlet of_seq g =\n  let q = create() in\n  add_seq q g;\n  q\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)\n(*                                                                        *)\n(*   Copyright 1999 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Extensible buffers *)\n\n(* The [inner_buffer] type ensures that the [length] and [buffer] fields are\n   always synchronized, [length = Bytes.length buffer], even in presence\n   of data races.\n*)\ntype inner_buffer = {\n  buffer: bytes;\n  length: int;\n}\n\ntype t =\n {mutable inner : inner_buffer;\n  mutable position : int;\n  initial_buffer : bytes}\n(* Invariants: all parts of the code preserve the invariants that:\n   - [inner.length = Bytes.length inner.buffer]\n   In absence of data races, we also have\n   - [0 <= b.position <= b.inner.length]\n\n   Note in particular that [b.position = b.inner.length] is legal,\n   it means that the buffer is full and will have to be extended\n   before any further addition. *)\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n { inner = { buffer = s; length = n}; position = 0; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.inner.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.inner.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.inner.buffer ofs len\n\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.blit src.inner.buffer srcoff dst dstoff len\n\n\nlet nth b ofs =\n  let position = b.position in\n  let {buffer;length} = b.inner in\n  if ofs < 0 || ofs >= position || position > length then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get buffer ofs\n\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0;\n  let inner =\n    { buffer = b.initial_buffer; length = Bytes.length b.initial_buffer }\n  in\n  b.inner <- inner\n\n(* [resize b more] ensures that [b.position + more <= b.inner.length] holds\n   by dynamically extending [b.inner] if necessary -- and thus\n   increasing [b.inner.length].\n*)\nlet resize b more =\n  let old_pos = b.position in\n  let old_len = b.inner.length in\n  let new_len = ref old_len in\n  while old_pos + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if old_pos + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in\n     this tricky function that is slow anyway. *)\n  Bytes.blit b.inner.buffer 0 new_buffer 0 b.position;\n  b.inner <- { buffer = new_buffer; length = !new_len }\n\n(* Note:\n    Some of the functions below have a fast path when the inner\n  buffer doesn't need to be extended.\n    In this case, it is possible to use unsafe accesses on the\n  contents of the [inner] field since its fields are immutable.\n  In presence of data races, we may access the wrong inner buffer, but we\n  will use this buffer safely.\n  As soon as we need to resize the buffer, we fall back to safe accesses.\n*)\n\nlet add_char b c =\n  let pos = b.position in\n  let {buffer;length} = b.inner in\n  if pos >= length then (\n    resize b 1;\n    Bytes.set b.inner.buffer b.position c\n  ) else\n    Bytes.unsafe_set buffer pos c;\n  b.position <- pos + 1\n\nlet uchar_utf_8_byte_length_max = 4\nlet uchar_utf_16_byte_length_max = 4\n\nlet rec add_utf_8_uchar b u =\n  let pos = b.position in\n  if pos >= b.inner.length then resize b uchar_utf_8_byte_length_max;\n  let n = Bytes.set_utf_8_uchar b.inner.buffer pos u in\n  if n = 0\n  then (resize b uchar_utf_8_byte_length_max; add_utf_8_uchar b u)\n  else (b.position <- pos + n)\n\nlet rec add_utf_16be_uchar b u =\n  let pos = b.position in\n  if pos >= b.inner.length then resize b uchar_utf_16_byte_length_max;\n  let n = Bytes.set_utf_16be_uchar b.inner.buffer pos u in\n  if n = 0\n  then (resize b uchar_utf_16_byte_length_max; add_utf_16be_uchar b u)\n  else (b.position <- pos + n)\n\nlet rec add_utf_16le_uchar b u =\n  let pos = b.position in\n  if pos >= b.inner.length then resize b uchar_utf_16_byte_length_max;\n  let n = Bytes.set_utf_16le_uchar b.inner.buffer pos u in\n  if n = 0\n  then (resize b uchar_utf_16_byte_length_max; add_utf_16le_uchar b u)\n  else (b.position <- pos + n)\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset > String.length s - len\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let position = b.position in\n  let {buffer;length} = b.inner in\n  let new_position = position + len in\n  if new_position > length then (\n    resize b len;\n    Bytes.blit_string s offset b.inner.buffer b.position len\n  ) else\n    Bytes.unsafe_blit_string s offset buffer position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let position = b.position in\n  let {buffer; length} = b.inner in\n  let new_position = position + len in\n  if new_position > length then (\n    resize b len;\n    Bytes.blit_string s 0 b.inner.buffer b.position len;\n  ) else\n    Bytes.unsafe_blit_string s 0 buffer position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.inner.buffer 0 bs.position\n\n(* this (private) function could move into the standard library *)\nlet really_input_up_to ic buf ofs len =\n  let rec loop ic buf ~already_read ~ofs ~to_read =\n    if to_read = 0 then already_read\n    else begin\n      let r = input ic buf ofs to_read in\n      if r = 0 then already_read\n      else begin\n        let already_read = already_read + r in\n        let ofs = ofs + r in\n        let to_read = to_read - r in\n        loop ic buf ~already_read ~ofs ~to_read\n      end\n    end\n  in loop ic buf ~already_read:0 ~ofs ~to_read:len\n\n\nlet unsafe_add_channel_up_to b ic len =\n  if b.position + len > b.inner.length then resize b len;\n  let n = really_input_up_to ic b.inner.buffer b.position len in\n  b.position <- b.position + n;\n  n\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  let n = unsafe_add_channel_up_to b ic len in\n  (* It is intentional that a consumer catching End_of_file\n     will see the data written (see #6719, #7136). *)\n  if n < len then raise End_of_file;\n  ()\n\nlet output_buffer oc b =\n  output oc b.inner.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s)\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s)\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0\n\nlet truncate b len =\n    if len < 0 || len > length b then\n      invalid_arg \"Buffer.truncate\"\n    else\n      b.position <- len\n\n(** {1 Iterators} *)\n\nlet to_seq b =\n  let rec aux i () =\n    (* Note that b.position is not a constant and cannot be lifted out of aux *)\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.get b.inner.buffer i in\n      Seq.Cons (x, aux (i+1))\n  in\n  aux 0\n\nlet to_seqi b =\n  let rec aux i () =\n    (* Note that b.position is not a constant and cannot be lifted out of aux *)\n    if i >= b.position then Seq.Nil\n    else\n      let x = Bytes.get b.inner.buffer i in\n      Seq.Cons ((i,x), aux (i+1))\n  in\n  aux 0\n\nlet add_seq b seq = Seq.iter (add_char b) seq\n\nlet of_seq i =\n  let b = create 32 in\n  add_seq b i;\n  b\n\n(** {6 Binary encoding of integers} *)\n\nexternal unsafe_set_int8 : bytes -> int -> int -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_set_int16 : bytes -> int -> int -> unit = \"%caml_bytes_set16u\"\nexternal unsafe_set_int32 : bytes -> int -> int32 -> unit = \"%caml_bytes_set32u\"\nexternal unsafe_set_int64 : bytes -> int -> int64 -> unit = \"%caml_bytes_set64u\"\nexternal set_int8 : bytes -> int -> int -> unit = \"%bytes_safe_set\"\nexternal set_int16 : bytes -> int -> int -> unit = \"%caml_bytes_set16\"\nexternal set_int32 : bytes -> int -> int32 -> unit = \"%caml_bytes_set32\"\nexternal set_int64 : bytes -> int -> int64 -> unit = \"%caml_bytes_set64\"\n\nexternal swap16 : int -> int = \"%bswap16\"\nexternal swap32 : int32 -> int32 = \"%bswap_int32\"\nexternal swap64 : int64 -> int64 = \"%bswap_int64\"\n\n\nlet add_int8 b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 1 in\n  if new_position > length then (\n    resize b 1;\n    set_int8 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int8 buffer position x;\n  b.position <- new_position\n\nlet add_int16_ne b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 2 in\n  if new_position > length then (\n    resize b 2;\n    set_int16 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int16 buffer position x;\n  b.position <- new_position\n\nlet add_int32_ne b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 4 in\n  if new_position > length then (\n    resize b 4;\n    set_int32 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int32 buffer position x;\n  b.position <- new_position\n\nlet add_int64_ne b x =\n  let position = b.position in\n  let {length; buffer} = b.inner in\n  let new_position = position + 8 in\n  if new_position > length then (\n    resize b 8;\n    set_int64 b.inner.buffer b.position x\n  ) else\n    unsafe_set_int64 buffer position x;\n  b.position <- new_position\n\nlet add_int16_le b x =\n  add_int16_ne b (if Sys.big_endian then swap16 x else x)\n\nlet add_int16_be b x =\n  add_int16_ne b (if Sys.big_endian then x else swap16 x)\n\nlet add_int32_le b x =\n  add_int32_ne b (if Sys.big_endian then swap32 x else x)\n\nlet add_int32_be b x =\n  add_int32_ne b (if Sys.big_endian then x else swap32 x)\n\nlet add_int64_le b x =\n  add_int64_ne b (if Sys.big_endian then swap64 x else x)\n\nlet add_int64_be b x =\n  add_int64_ne b (if Sys.big_endian then x else swap64 x)\n\nlet add_uint8 = add_int8\nlet add_uint16_ne = add_int16_ne\nlet add_uint16_le = add_int16_le\nlet add_uint16_be = add_int16_be\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Xavier Leroy and Pascal Cuoq, INRIA Rocquencourt             *)\n(*                                                                        *)\n(*   Copyright 1995 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t\nexternal create: unit -> t = \"caml_ml_mutex_new\"\nexternal lock: t -> unit = \"caml_ml_mutex_lock\"\nexternal try_lock: t -> bool = \"caml_ml_mutex_try_lock\"\nexternal unlock: t -> unit = \"caml_ml_mutex_unlock\"\n\n(* private re-export *)\nexternal reraise : exn -> 'a = \"%reraise\"\n\n(* cannot inline, otherwise flambda might move code around. *)\nlet[@inline never] protect m f =\n  lock m;\n  match f() with\n  | x ->\n    unlock m; x\n  | exception e ->\n    (* NOTE: [unlock] does not poll for asynchronous exceptions *)\n    unlock m;\n    reraise e\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*          Xavier Leroy, Collège de France and INRIA Paris               *)\n(*                                                                        *)\n(*   Copyright 2020 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** Semaphores *)\n\ntype sem = {\n  mut: Mutex.t;                         (* protects [v] *)\n  mutable v: int;                       (* the current value *)\n  nonzero: Condition.t                  (* signaled when [v > 0] *)\n}\n\nmodule Counting = struct\n\ntype t = sem\n\nlet make v =\n  if v < 0 then invalid_arg \"Semaphore.Counting.init: wrong initial value\";\n  { mut = Mutex.create(); v; nonzero = Condition.create() }\n\nlet release s =\n  Mutex.lock s.mut;\n  if s.v < max_int then begin\n    s.v <- s.v + 1;\n    Condition.signal s.nonzero;\n    Mutex.unlock s.mut\n  end else begin\n    Mutex.unlock s.mut;\n    raise (Sys_error \"Semaphore.Counting.release: overflow\")\n  end\n\nlet acquire s =\n  Mutex.lock s.mut;\n  while s.v = 0 do Condition.wait s.nonzero s.mut done;\n  s.v <- s.v - 1;\n  Mutex.unlock s.mut\n\nlet try_acquire s =\n  Mutex.lock s.mut;\n  let ret = if s.v = 0 then false else (s.v <- s.v - 1; true) in\n  Mutex.unlock s.mut;\n  ret\n\nlet get_value s = s.v\n\nend\n\nmodule Binary = struct\n\ntype t = sem\n\nlet make b =\n  { mut = Mutex.create();\n    v = if b then 1 else 0;\n    nonzero = Condition.create() }\n\nlet release s =\n  Mutex.lock s.mut;\n  s.v <- 1;\n  Condition.signal s.nonzero;\n  Mutex.unlock s.mut\n\nlet acquire s =\n  Mutex.lock s.mut;\n  while s.v = 0 do Condition.wait s.nonzero s.mut done;\n  s.v <- 0;\n  Mutex.unlock s.mut\n\nlet try_acquire s =\n  Mutex.lock s.mut;\n  let ret = if s.v = 0 then false else (s.v <- 0; true) in\n  Mutex.unlock s.mut;\n  ret\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*      KC Sivaramakrishnan, Indian Institute of Technology, Madras       *)\n(*                 Stephen Dolan, University of Cambridge                 *)\n(*                   Tom Kelly, OCaml Labs Consultancy                    *)\n(*                                                                        *)\n(*   Copyright 2019 Indian Institute of Technology, Madras                *)\n(*   Copyright 2014 University of Cambridge                               *)\n(*   Copyright 2021 OCaml Labs Consultancy Ltd                            *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule Raw = struct\n  (* Low-level primitives provided by the runtime *)\n  type t = private int\n  external spawn : (unit -> unit) -> Mutex.t -> t\n    = \"caml_domain_spawn\"\n  external self : unit -> t\n    = \"caml_ml_domain_id\"\n  external cpu_relax : unit -> unit\n    = \"caml_ml_domain_cpu_relax\"\n  external get_recommended_domain_count: unit -> int\n    = \"caml_recommended_domain_count\" [@@noalloc]\nend\n\nlet cpu_relax () = Raw.cpu_relax ()\n\ntype id = Raw.t\n\ntype 'a state =\n| Running\n| Finished of ('a, exn) result\n\ntype 'a t = {\n  domain : Raw.t;\n  term_mutex: Mutex.t;\n  term_condition: Condition.t;\n  term_state: 'a state ref (* protected by [term_mutex] *)\n}\n\nmodule DLS = struct\n\n  type dls_state = Obj.t array\n\n  let unique_value = Obj.repr (ref 0)\n\n  external get_dls_state : unit -> dls_state = \"%dls_get\"\n\n  external set_dls_state : dls_state -> unit =\n    \"caml_domain_dls_set\" [@@noalloc]\n\n  let create_dls () =\n    let st = Array.make 8 unique_value in\n    set_dls_state st\n\n  let _ = create_dls ()\n\n  type 'a key = int * (unit -> 'a)\n\n  let key_counter = Atomic.make 0\n\n  type key_initializer =\n    KI: 'a key * ('a -> 'a) -> key_initializer\n\n  let parent_keys = Atomic.make ([] : key_initializer list)\n\n  let rec add_parent_key ki =\n    let l = Atomic.get parent_keys in\n    if not (Atomic.compare_and_set parent_keys l (ki :: l))\n    then add_parent_key ki\n\n  let new_key ?split_from_parent init_orphan =\n    let idx = Atomic.fetch_and_add key_counter 1 in\n    let k = (idx, init_orphan) in\n    begin match split_from_parent with\n    | None -> ()\n    | Some split -> add_parent_key (KI(k, split))\n    end;\n    k\n\n  (* If necessary, grow the current domain's local state array such that [idx]\n   * is a valid index in the array. *)\n  let maybe_grow idx =\n    let st = get_dls_state () in\n    let sz = Array.length st in\n    if idx < sz then st\n    else begin\n      let rec compute_new_size s =\n        if idx < s then s else compute_new_size (2 * s)\n      in\n      let new_sz = compute_new_size sz in\n      let new_st = Array.make new_sz unique_value in\n      Array.blit st 0 new_st 0 sz;\n      set_dls_state new_st;\n      new_st\n    end\n\n  let set (idx, _init) x =\n    let st = maybe_grow idx in\n    (* [Sys.opaque_identity] ensures that flambda does not look at the type of\n     * [x], which may be a [float] and conclude that the [st] is a float array.\n     * We do not want OCaml's float array optimisation kicking in here. *)\n    st.(idx) <- Obj.repr (Sys.opaque_identity x)\n\n  let get (idx, init) =\n    let st = maybe_grow idx in\n    let v = st.(idx) in\n    if v == unique_value then\n      let v' = Obj.repr (init ()) in\n      st.(idx) <- (Sys.opaque_identity v');\n      Obj.magic v'\n    else Obj.magic v\n\n  let get_initial_keys () : (int * Obj.t) list =\n    List.map\n      (fun (KI ((idx, _) as k, split)) ->\n           (idx, Obj.repr (split (get k))))\n      (Atomic.get parent_keys)\n\n  let set_initial_keys (l: (int * Obj.t) list) =\n    List.iter\n      (fun (idx, v) ->\n        let st = maybe_grow idx in st.(idx) <- v)\n      l\n\nend\n\n(******** Identity **********)\n\nlet get_id { domain; _ } = domain\n\nlet self () = Raw.self ()\n\nlet is_main_domain () = (self () :> int) = 0\n\n(******** Callbacks **********)\n\n(* first spawn, domain startup and at exit functionality *)\nlet first_domain_spawned = Atomic.make false\n\nlet first_spawn_function = ref (fun () -> ())\n\nlet before_first_spawn f =\n  if Atomic.get first_domain_spawned then\n    raise (Invalid_argument \"first domain already spawned\")\n  else begin\n    let old_f = !first_spawn_function in\n    let new_f () = old_f (); f () in\n    first_spawn_function := new_f\n  end\n\nlet do_before_first_spawn () =\n  if not (Atomic.get first_domain_spawned) then begin\n    Atomic.set first_domain_spawned true;\n    !first_spawn_function();\n    (* Release the old function *)\n    first_spawn_function := (fun () -> ())\n  end\n\nlet at_exit_key = DLS.new_key (fun () -> (fun () -> ()))\n\nlet at_exit f =\n  let old_exit : unit -> unit = DLS.get at_exit_key in\n  let new_exit () =\n    (* The domain termination callbacks ([at_exit]) are run in\n       last-in-first-out (LIFO) order in order to be symmetric with the domain\n       creation callbacks ([at_each_spawn]) which run in first-in-fisrt-out\n       (FIFO) order. *)\n    f (); old_exit ()\n  in\n  DLS.set at_exit_key new_exit\n\nlet do_at_exit () =\n  let f : unit -> unit = DLS.get at_exit_key in\n  f ()\n\nlet _ = Stdlib.do_domain_local_at_exit := do_at_exit\n\n(******* Creation and Termination ********)\n\nlet spawn f =\n  do_before_first_spawn ();\n  let pk = DLS.get_initial_keys () in\n\n  (* The [term_mutex] and [term_condition] are used to\n     synchronize with the joining domains *)\n  let term_mutex = Mutex.create () in\n  let term_condition = Condition.create () in\n  let term_state = ref Running in\n\n  let body () =\n    let result =\n      match\n        DLS.create_dls ();\n        DLS.set_initial_keys pk;\n        let res = f () in\n        res\n      with\n      | x -> Ok x\n      | exception ex -> Error ex\n    in\n\n    let result' =\n      (* Run the [at_exit] callbacks when the domain computation either\n         terminates normally or exceptionally. *)\n      match do_at_exit () with\n      | () -> result\n      | exception ex ->\n          begin match result with\n          | Ok _ ->\n              (* If the domain computation terminated normally, but the\n                 [at_exit] callbacks raised an exception, then return the\n                 exception. *)\n              Error ex\n          | Error _ ->\n              (* If both the domain computation and the [at_exit] callbacks\n                 raised exceptions, then ignore the exception from the\n                 [at_exit] callbacks and return the original exception. *)\n              result\n          end\n    in\n\n    (* Synchronize with joining domains *)\n    Mutex.lock term_mutex;\n    match !term_state with\n    | Running ->\n        term_state := Finished result';\n        Condition.broadcast term_condition;\n    | Finished _ ->\n        failwith \"internal error: Am I already finished?\"\n    (* [term_mutex] is unlocked in the runtime after the cleanup functions on\n       the C side are finished. *)\n  in\n  { domain = Raw.spawn body term_mutex;\n    term_mutex;\n    term_condition;\n    term_state }\n\nlet join { term_mutex; term_condition; term_state; _ } =\n  Mutex.lock term_mutex;\n  let rec loop () =\n    match !term_state with\n    | Running ->\n        Condition.wait term_condition term_mutex;\n        loop ()\n    | Finished res ->\n        Mutex.unlock term_mutex;\n        res\n  in\n  match loop () with\n  | Ok x -> x\n  | Error ex -> raise ex\n\nlet recommended_domain_count = Raw.get_recommended_domain_count\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\n\n(******************************************************************************)\n           (* Tools to manipulate scanning set of chars (see %[...]) *)\n\ntype mutable_char_set = bytes\n\n(* Create a fresh, empty, mutable char set. *)\nlet create_char_set () = Bytes.make 32 '\\000'\n\n(* Add a char in a mutable char set. *)\nlet add_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  Bytes.set char_set str_ind\n    (char_of_int (int_of_char (Bytes.get char_set str_ind) lor mask))\n\nlet freeze_char_set char_set =\n  Bytes.to_string char_set\n\n(* Compute the complement of a char set. *)\nlet rev_char_set char_set =\n  let char_set' = create_char_set () in\n  for i = 0 to 31 do\n    Bytes.set char_set' i\n      (char_of_int (int_of_char (String.get char_set i) lxor 0xFF));\n  done;\n  Bytes.unsafe_to_string char_set'\n\n(* Return true if a `c' is in `char_set'. *)\nlet is_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  (int_of_char (String.get char_set str_ind) land mask) <> 0\n\n\n(******************************************************************************)\n                         (* Ignored param conversion *)\n\n(* GADT used to abstract an existential type parameter. *)\n(* See param_format_of_ignored_format. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb = Param_format_EBB :\n    ('x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb\n\n(* Compute a padding associated to a pad_option (see \"%_42d\"). *)\nlet pad_of_pad_opt pad_opt = match pad_opt with\n  | None -> No_padding\n  | Some width -> Lit_padding (Right, width)\n\n(* Compute a precision associated to a prec_option (see \"%_.42f\"). *)\nlet prec_of_prec_opt prec_opt = match prec_opt with\n  | None -> No_precision\n  | Some ndec -> Lit_precision ndec\n\n(* Turn an ignored param into its equivalent not-ignored format node. *)\n(* Used for format pretty-printing and Scanf. *)\nlet param_format_of_ignored_format : type a b c d e f x y .\n    (a, b, c, d, y, x) ignored -> (x, b, c, y, e, f) fmt ->\n      (a, b, c, d, e, f) param_format_ebb =\nfun ign fmt -> match ign with\n  | Ignored_char ->\n    Param_format_EBB (Char fmt)\n  | Ignored_caml_char ->\n    Param_format_EBB (Caml_char fmt)\n  | Ignored_string pad_opt ->\n    Param_format_EBB (String (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_caml_string pad_opt ->\n    Param_format_EBB (Caml_string (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_int (iconv, pad_opt) ->\n    Param_format_EBB (Int (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int32 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int32 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_nativeint (iconv, pad_opt) ->\n    Param_format_EBB\n      (Nativeint (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int64 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int64 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_float (pad_opt, prec_opt) ->\n    Param_format_EBB\n      (Float ((Float_flag_, Float_f),\n              pad_of_pad_opt pad_opt, prec_of_prec_opt prec_opt, fmt))\n  | Ignored_bool pad_opt ->\n    Param_format_EBB (Bool (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_format_arg (pad_opt, fmtty) ->\n    Param_format_EBB (Format_arg (pad_opt, fmtty, fmt))\n  | Ignored_format_subst (pad_opt, fmtty) ->\n    Param_format_EBB\n      (Format_subst (pad_opt, fmtty, fmt))\n  | Ignored_reader ->\n    Param_format_EBB (Reader fmt)\n  | Ignored_scan_char_set (width_opt, char_set) ->\n    Param_format_EBB (Scan_char_set (width_opt, char_set, fmt))\n  | Ignored_scan_get_counter counter ->\n    Param_format_EBB (Scan_get_counter (counter, fmt))\n  | Ignored_scan_next_char ->\n    Param_format_EBB (Scan_next_char fmt)\n\n\n(******************************************************************************)\n                                 (* Types *)\n\ntype ('b, 'c) acc_formatting_gen =\n  | Acc_open_tag of ('b, 'c) acc\n  | Acc_open_box of ('b, 'c) acc\n\n(* Reversed list of printing atoms. *)\n(* Used to accumulate printf arguments. *)\nand ('b, 'c) acc =\n  | Acc_formatting_lit of ('b, 'c) acc * formatting_lit\n      (* Special fmtting (box) *)\n  | Acc_formatting_gen of ('b, 'c) acc * ('b, 'c) acc_formatting_gen\n      (* Special fmtting (box) *)\n  | Acc_string_literal of ('b, 'c) acc * string     (* Literal string *)\n  | Acc_char_literal   of ('b, 'c) acc * char       (* Literal char *)\n  | Acc_data_string    of ('b, 'c) acc * string     (* Generated string *)\n  | Acc_data_char      of ('b, 'c) acc * char       (* Generated char *)\n  | Acc_delay          of ('b, 'c) acc * ('b -> 'c)\n                                                (* Delayed printing (%a, %t) *)\n  | Acc_flush          of ('b, 'c) acc              (* Flush *)\n  | Acc_invalid_arg    of ('b, 'c) acc * string\n      (* Raise Invalid_argument msg *)\n  | End_of_acc\n\n(* List of heterogeneous values. *)\n(* Used to accumulate scanf callback arguments. *)\ntype ('a, 'b) heter_list =\n  | Cons : 'c * ('a, 'b) heter_list -> ('c -> 'a, 'b) heter_list\n  | Nil : ('b, 'b) heter_list\n\n(* Existential Black Boxes. *)\n(* Used to abstract some existential type parameters. *)\n\n(* GADT type associating a padding and an fmtty. *)\n(* See the type_padding function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb = Padding_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb\n\n(* GADT type associating a padding, a precision and an fmtty. *)\n(* See the type_padprec function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb = Padprec_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'z) precision * ('z, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb\n\n(* GADT type associating a padding and an fmt. *)\n(* See make_padding_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) padding_fmt_ebb = Padding_fmt_EBB :\n     (_, 'x -> 'a) padding *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) padding_fmt_ebb\n\n(* GADT type associating a precision and an fmt. *)\n(* See make_precision_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) precision_fmt_ebb = Precision_fmt_EBB :\n     (_, 'x -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) precision_fmt_ebb\n\n(* GADT type associating a padding, a precision and an fmt. *)\n(* See make_padprec_fmt_ebb and parse_format functions. *)\ntype ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb = Padprec_fmt_EBB :\n     ('x, 'y) padding * ('y, 'p -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb\n\n(* Abstract the 'a and 'd parameters of an fmt. *)\n(* Output type of the format parsing function. *)\ntype ('b, 'c, 'e, 'f) fmt_ebb = Fmt_EBB :\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('b, 'c, 'e, 'f) fmt_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_format_gen function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb = Fmt_fmtty_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmt *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmtty ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_ignored_format_substitution function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb = Fmtty_fmt_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmtty *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmt_fmtty_ebb ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb\n\n(* Abstract all fmtty type parameters. *)\n(* Used to compare format types. *)\ntype fmtty_ebb = Fmtty_EBB : ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> fmtty_ebb\n\n(* Abstract all padding type parameters. *)\n(* Used to compare paddings. *)\ntype padding_ebb = Padding_EBB : ('a, 'b) padding -> padding_ebb\n\n(* Abstract all precision type parameters. *)\n(* Used to compare precisions. *)\ntype precision_ebb = Precision_EBB : ('a, 'b) precision -> precision_ebb\n\n(******************************************************************************)\n                               (* Constants *)\n\n(* Default precision for float printing. *)\nlet default_float_precision fconv =\n  match snd fconv with\n  | Float_f | Float_e | Float_E | Float_g | Float_G | Float_h | Float_H\n  | Float_CF -> -6\n  (* For %h %H and %#F formats, a negative precision means \"as many digits as\n     necessary\".  For the other FP formats, we take the absolute value\n     of the precision, hence 6 digits by default. *)\n  | Float_F -> 12\n  (* Default precision for OCaml float printing (%F). *)\n\n(******************************************************************************)\n                               (* Externals *)\n\nexternal format_float: string -> float -> string\n  = \"caml_format_float\"\nexternal format_int: string -> int -> string\n  = \"caml_format_int\"\nexternal format_int32: string -> int32 -> string\n  = \"caml_int32_format\"\nexternal format_nativeint: string -> nativeint -> string\n  = \"caml_nativeint_format\"\nexternal format_int64: string -> int64 -> string\n  = \"caml_int64_format\"\nexternal hexstring_of_float: float -> int -> char -> string\n  = \"caml_hexstring_of_float\"\n\n(******************************************************************************)\n                     (* Tools to pretty-print formats *)\n\n(* Type of extensible character buffers. *)\ntype buffer = {\n  mutable ind : int;\n  mutable bytes : bytes;\n}\n\n(* Create a fresh buffer. *)\nlet buffer_create init_size = { ind = 0; bytes = Bytes.create init_size }\n\n(* Check size of the buffer and grow it if needed. *)\nlet buffer_check_size buf overhead =\n  let len = Bytes.length buf.bytes in\n  let min_len = buf.ind + overhead in\n  if min_len > len then (\n    let new_len = Int.max (len * 2) min_len in\n    let new_str = Bytes.create new_len in\n    Bytes.blit buf.bytes 0 new_str 0 len;\n    buf.bytes <- new_str;\n  )\n\n(* Add the character `c' to the buffer `buf'. *)\nlet buffer_add_char buf c =\n  buffer_check_size buf 1;\n  Bytes.set buf.bytes buf.ind c;\n  buf.ind <- buf.ind + 1\n\n(* Add the string `s' to the buffer `buf'. *)\nlet buffer_add_string buf s =\n  let str_len = String.length s in\n  buffer_check_size buf str_len;\n  String.blit s 0 buf.bytes buf.ind str_len;\n  buf.ind <- buf.ind + str_len\n\n(* Get the content of the buffer. *)\nlet buffer_contents buf =\n  Bytes.sub_string buf.bytes 0 buf.ind\n\n(***)\n\n(* Convert an integer conversion to char. *)\nlet char_of_iconv iconv = match iconv with\n  | Int_d | Int_pd | Int_sd | Int_Cd -> 'd' | Int_i | Int_pi | Int_si\n  | Int_Ci -> 'i' | Int_x | Int_Cx -> 'x' | Int_X | Int_CX -> 'X' | Int_o\n  | Int_Co -> 'o' | Int_u | Int_Cu -> 'u'\n\n(* Convert a float conversion to char. *)\n(* `cF' will be 'F' for displaying format and 'g' to call libc printf *)\nlet char_of_fconv ?(cF='F') fconv = match snd fconv with\n  | Float_f -> 'f' | Float_e -> 'e'\n  | Float_E -> 'E' | Float_g -> 'g'\n  | Float_G -> 'G' | Float_F -> cF\n  | Float_h -> 'h' | Float_H -> 'H'\n  | Float_CF -> 'F'\n\n\n(* Convert a scanning counter to char. *)\nlet char_of_counter counter = match counter with\n  | Line_counter  -> 'l'\n  | Char_counter  -> 'n'\n  | Token_counter -> 'N'\n\n(***)\n\n(* Print a char_set in a buffer with the OCaml format lexical convention. *)\nlet bprint_char_set buf char_set =\n  let rec print_start set =\n    let is_alone c =\n      let before, after = Char.(chr (code c - 1), chr (code c + 1)) in\n      is_in_char_set set c\n      && not (is_in_char_set set before && is_in_char_set set after) in\n    if is_alone ']' then buffer_add_char buf ']';\n    print_out set 1;\n    if is_alone '-' then buffer_add_char buf '-';\n  and print_out set i =\n    if i < 256 then\n      if is_in_char_set set (char_of_int i) then print_first set i\n      else print_out set (i + 1)\n  and print_first set i =\n    match char_of_int i with\n    | '\\255' -> print_char buf 255;\n    | ']' | '-' -> print_out set (i + 1);\n    | _ -> print_second set (i + 1);\n  and print_second set i =\n    if is_in_char_set set (char_of_int i) then\n      match char_of_int i with\n      | '\\255' ->\n        print_char buf 254;\n        print_char buf 255;\n      | ']' | '-' when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_out set (i + 1);\n      | _ when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_char buf i;\n        print_out set (i + 2);\n      | _ ->\n        print_in set (i - 1) (i + 2);\n    else (\n      print_char buf (i - 1);\n      print_out set (i + 1);\n    )\n  and print_in set i j =\n    if j = 256 || not (is_in_char_set set (char_of_int j)) then (\n      print_char buf i;\n      print_char buf (int_of_char '-');\n      print_char buf (j - 1);\n      if j < 256 then print_out set (j + 1);\n    ) else\n      print_in set i (j + 1);\n  and print_char buf i = match char_of_int i with\n    | '%' -> buffer_add_char buf '%'; buffer_add_char buf '%';\n    | '@' -> buffer_add_char buf '%'; buffer_add_char buf '@';\n    | c   -> buffer_add_char buf c;\n  in\n  buffer_add_char buf '[';\n  print_start (\n    if is_in_char_set char_set '\\000'\n    then ( buffer_add_char buf '^'; rev_char_set char_set )\n    else char_set\n  );\n  buffer_add_char buf ']'\n\n(***)\n\n(* Print a padty in a buffer with the format-like syntax. *)\nlet bprint_padty buf padty = match padty with\n  | Left  -> buffer_add_char buf '-'\n  | Right -> ()\n  | Zeros -> buffer_add_char buf '0'\n\n(* Print the '_' of an ignored flag if needed. *)\nlet bprint_ignored_flag buf ign_flag =\n  if ign_flag then buffer_add_char buf '_'\n\n(***)\n\nlet bprint_pad_opt buf pad_opt = match pad_opt with\n  | None -> ()\n  | Some width -> buffer_add_string buf (Int.to_string width)\n\n(***)\n\n(* Print padding in a buffer with the format-like syntax. *)\nlet bprint_padding : type a b . buffer -> (a, b) padding -> unit =\nfun buf pad -> match pad with\n  | No_padding -> ()\n  | Lit_padding (padty, n) ->\n    bprint_padty buf padty;\n    buffer_add_string buf (Int.to_string n);\n  | Arg_padding padty ->\n    bprint_padty buf padty;\n    buffer_add_char buf '*'\n\n(* Print precision in a buffer with the format-like syntax. *)\nlet bprint_precision : type a b . buffer -> (a, b) precision -> unit =\n  fun buf prec -> match prec with\n  | No_precision -> ()\n  | Lit_precision n ->\n    buffer_add_char buf '.';\n    buffer_add_string buf (Int.to_string n);\n  | Arg_precision ->\n    buffer_add_string buf \".*\"\n\n(***)\n\n(* Print the optional '+', ' ' or '#' associated to an int conversion. *)\nlet bprint_iconv_flag buf iconv = match iconv with\n  | Int_pd | Int_pi -> buffer_add_char buf '+'\n  | Int_sd | Int_si -> buffer_add_char buf ' '\n  | Int_Cx | Int_CX | Int_Co | Int_Cd | Int_Ci | Int_Cu ->\n      buffer_add_char buf '#'\n  | Int_d | Int_i | Int_x | Int_X | Int_o | Int_u -> ()\n\n(* Print an complete int format in a buffer (ex: \"%3.*d\"). *)\nlet bprint_int_fmt buf ign_flag iconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(* Print a complete int32, nativeint or int64 format in a buffer. *)\nlet bprint_altint_fmt buf ign_flag iconv pad prec c =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf c;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(***)\n\n(* Print the optional '+', ' ' and/or '#' associated to a float conversion. *)\nlet bprint_fconv_flag buf fconv =\n  begin match fst fconv with\n  | Float_flag_p -> buffer_add_char buf '+'\n  | Float_flag_s -> buffer_add_char buf ' '\n  | Float_flag_ -> () end;\n  match snd fconv with\n  | Float_CF -> buffer_add_char buf '#'\n  | Float_f | Float_e | Float_E | Float_g | Float_G\n  | Float_F | Float_h | Float_H -> ()\n\n(* Print a complete float format in a buffer (ex: \"%+*.3f\"). *)\nlet bprint_float_fmt buf ign_flag fconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_fconv_flag buf fconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_fconv fconv)\n\n(* Compute the literal string representation of a Formatting_lit. *)\n(* Used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_lit formatting_lit = match formatting_lit with\n  | Close_box            -> \"@]\"\n  | Close_tag            -> \"@}\"\n  | Break (str, _, _)    -> str\n  | FFlush               -> \"@?\"\n  | Force_newline        -> \"@\\n\"\n  | Flush_newline        -> \"@.\"\n  | Magic_size (str, _)  -> str\n  | Escaped_at           -> \"@@\"\n  | Escaped_percent      -> \"@%\"\n  | Scan_indic c -> \"@\" ^ (String.make 1 c)\n\n(***)\n\n(* Print a literal char in a buffer, escape '%' by \"%%\". *)\nlet bprint_char_literal buf chr = match chr with\n  | '%' -> buffer_add_string buf \"%%\"\n  | _ -> buffer_add_char buf chr\n\n(* Print a literal string in a buffer, escape all '%' by \"%%\". *)\nlet bprint_string_literal buf str =\n  for i = 0 to String.length str - 1 do\n    bprint_char_literal buf str.[i]\n  done\n\n(******************************************************************************)\n                          (* Format pretty-printing *)\n\n(* Print a complete format type (an fmtty) in a buffer. *)\nlet rec bprint_fmtty : type a b c d e f g h i j k l .\n    buffer -> (a, b, c, d, e, f, g, h, i, j, k, l) fmtty_rel -> unit =\nfun buf fmtty -> match fmtty with\n  | Char_ty rest      -> buffer_add_string buf \"%c\";  bprint_fmtty buf rest;\n  | String_ty rest    -> buffer_add_string buf \"%s\";  bprint_fmtty buf rest;\n  | Int_ty rest       -> buffer_add_string buf \"%i\";  bprint_fmtty buf rest;\n  | Int32_ty rest     -> buffer_add_string buf \"%li\"; bprint_fmtty buf rest;\n  | Nativeint_ty rest -> buffer_add_string buf \"%ni\"; bprint_fmtty buf rest;\n  | Int64_ty rest     -> buffer_add_string buf \"%Li\"; bprint_fmtty buf rest;\n  | Float_ty rest     -> buffer_add_string buf \"%f\";  bprint_fmtty buf rest;\n  | Bool_ty rest      -> buffer_add_string buf \"%B\";  bprint_fmtty buf rest;\n  | Alpha_ty rest     -> buffer_add_string buf \"%a\";  bprint_fmtty buf rest;\n  | Theta_ty rest     -> buffer_add_string buf \"%t\";  bprint_fmtty buf rest;\n  | Any_ty rest       -> buffer_add_string buf \"%?\";  bprint_fmtty buf rest;\n  | Reader_ty rest    -> buffer_add_string buf \"%r\";  bprint_fmtty buf rest;\n\n  | Ignored_reader_ty rest ->\n    buffer_add_string buf \"%_r\";\n    bprint_fmtty buf rest;\n\n  | Format_arg_ty (sub_fmtty, rest) ->\n    buffer_add_string buf \"%{\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%}\"; bprint_fmtty buf rest;\n  | Format_subst_ty (sub_fmtty, _, rest) ->\n    buffer_add_string buf \"%(\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%)\"; bprint_fmtty buf rest;\n\n  | End_of_fmtty -> ()\n\n(***)\n\nlet rec int_of_custom_arity : type a b c .\n  (a, b, c) custom_arity -> int =\n  function\n  | Custom_zero -> 0\n  | Custom_succ x -> 1 + int_of_custom_arity x\n\n(* Print a complete format in a buffer. *)\nlet bprint_fmt buf fmt =\n  let rec fmtiter : type a b c d e f .\n      (a, b, c, d, e, f) fmt -> bool -> unit =\n  fun fmt ign_flag -> match fmt with\n    | String (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 's';\n      fmtiter rest false;\n    | Caml_string (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'S';\n      fmtiter rest false;\n\n    | Int (iconv, pad, prec, rest) ->\n      bprint_int_fmt buf ign_flag iconv pad prec;\n      fmtiter rest false;\n    | Int32 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'l';\n      fmtiter rest false;\n    | Nativeint (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'n';\n      fmtiter rest false;\n    | Int64 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'L';\n      fmtiter rest false;\n    | Float (fconv, pad, prec, rest) ->\n      bprint_float_fmt buf ign_flag fconv pad prec;\n      fmtiter rest false;\n\n    | Char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'c'; fmtiter rest false;\n    | Caml_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'C'; fmtiter rest false;\n    | Bool (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'B';\n      fmtiter rest false;\n    | Alpha rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'a'; fmtiter rest false;\n    | Theta rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 't'; fmtiter rest false;\n    | Custom (arity, _, rest) ->\n      for _i = 1 to int_of_custom_arity arity do\n        buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n        buffer_add_char buf '?';\n      done;\n      fmtiter rest false;\n    | Reader rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'r'; fmtiter rest false;\n    | Flush rest ->\n      buffer_add_string buf \"%!\";\n      fmtiter rest ign_flag;\n\n    | String_literal (str, rest) ->\n      bprint_string_literal buf str;\n      fmtiter rest ign_flag;\n    | Char_literal (chr, rest) ->\n      bprint_char_literal buf chr;\n      fmtiter rest ign_flag;\n\n    | Format_arg (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '{';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf '}';\n      fmtiter rest false;\n    | Format_subst (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '(';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf ')';\n      fmtiter rest false;\n\n    | Scan_char_set (width_opt, char_set, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf width_opt; bprint_char_set buf char_set;\n      fmtiter rest false;\n    | Scan_get_counter (counter, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf (char_of_counter counter);\n      fmtiter rest false;\n    | Scan_next_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_string_literal buf \"0c\"; fmtiter rest false;\n\n    | Ignored_param (ign, rest) ->\n      let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n      fmtiter fmt' true;\n\n    | Formatting_lit (fmting_lit, rest) ->\n      bprint_string_literal buf (string_of_formatting_lit fmting_lit);\n      fmtiter rest ign_flag;\n    | Formatting_gen (fmting_gen, rest) ->\n      begin match fmting_gen with\n      | Open_tag (Format (_, str)) ->\n        buffer_add_string buf \"@{\"; buffer_add_string buf str\n      | Open_box (Format (_, str)) ->\n        buffer_add_string buf \"@[\"; buffer_add_string buf str\n      end;\n      fmtiter rest ign_flag;\n\n    | End_of_format -> ()\n\n  in fmtiter fmt false\n\n(***)\n\n(* Convert a format to string. *)\nlet string_of_fmt fmt =\n  let buf = buffer_create 16 in\n  bprint_fmt buf fmt;\n  buffer_contents buf\n\n(******************************************************************************)\n                          (* Type extraction *)\n\ntype (_, _) eq = Refl : ('a, 'a) eq\n\n(* Invariant: this function is the identity on values.\n\n   In particular, if (ty1, ty2) have equal values, then\n   (trans (symm ty1) ty2) respects the 'trans' precondition. *)\nlet rec symm : type a1 b1 c1 d1 e1 f1 a2 b2 c2 d2 e2 f2 .\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a1, b1, c1, d1, e1, f1) fmtty_rel\n= function\n  | Char_ty rest -> Char_ty (symm rest)\n  | Int_ty rest -> Int_ty (symm rest)\n  | Int32_ty rest -> Int32_ty (symm rest)\n  | Int64_ty rest -> Int64_ty (symm rest)\n  | Nativeint_ty rest -> Nativeint_ty (symm rest)\n  | Float_ty rest -> Float_ty (symm rest)\n  | Bool_ty rest -> Bool_ty (symm rest)\n  | String_ty rest -> String_ty (symm rest)\n  | Theta_ty rest -> Theta_ty (symm rest)\n  | Alpha_ty rest -> Alpha_ty (symm rest)\n  | Any_ty rest -> Any_ty (symm rest)\n  | Reader_ty rest -> Reader_ty (symm rest)\n  | Ignored_reader_ty rest -> Ignored_reader_ty (symm rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, symm rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty2, ty1, symm rest)\n  | End_of_fmtty -> End_of_fmtty\n\nlet rec fmtty_rel_det : type a1 b c d1 e1 f1 a2 d2 e2 f2 .\n  (a1, b, c, d1, e1, f1,\n   a2, b, c, d2, e2, f2) fmtty_rel ->\n    ((f1, f2) eq -> (a1, a2) eq)\n  * ((a1, a2) eq -> (f1, f2) eq)\n  * ((e1, e2) eq -> (d1, d2) eq)\n  * ((d1, d2) eq -> (e1, e2) eq)\n= function\n  | End_of_fmtty ->\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl)\n  | Char_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | String_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int32_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int64_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Nativeint_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Float_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Bool_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n\n  | Theta_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Alpha_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Any_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Ignored_reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Format_arg_ty (_ty, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    let ty = trans (symm ty1) ty2 in\n    let ag, ga, dj, jd = fmtty_rel_det ty in\n    (fun Refl -> let Refl = fa Refl in let Refl = ag Refl in Refl),\n    (fun Refl -> let Refl = ga Refl in let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in let Refl = dj Refl in Refl),\n    (fun Refl -> let Refl = jd Refl in let Refl = de Refl in Refl)\n\n(* Precondition: we assume that the two fmtty_rel arguments have equal\n   values (at possibly distinct types); this invariant comes from the way\n   fmtty_rel witnesses are produced by the type-checker\n\n   The code below uses (assert false) when this assumption is broken. The\n   code pattern is the following:\n\n     | Foo x, Foo y ->\n       (* case where indeed both values\n          start with constructor Foo *)\n     | Foo _, _\n     | _, Foo _ ->\n       (* different head constructors: broken precondition *)\n       assert false\n*)\nand trans : type\n  a1 b1 c1 d1 e1 f1\n  a2 b2 c2 d2 e2 f2\n  a3 b3 c3 d3 e3 f3\n.\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n-> (a1, b1, c1, d1, e1, f1,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n= fun ty1 ty2 -> match ty1, ty2 with\n  | Char_ty rest1, Char_ty rest2 -> Char_ty (trans rest1 rest2)\n  | String_ty rest1, String_ty rest2 -> String_ty (trans rest1 rest2)\n  | Bool_ty rest1, Bool_ty rest2 -> Bool_ty (trans rest1 rest2)\n  | Int_ty rest1, Int_ty rest2 -> Int_ty (trans rest1 rest2)\n  | Int32_ty rest1, Int32_ty rest2 -> Int32_ty (trans rest1 rest2)\n  | Int64_ty rest1, Int64_ty rest2 -> Int64_ty (trans rest1 rest2)\n  | Nativeint_ty rest1, Nativeint_ty rest2 -> Nativeint_ty (trans rest1 rest2)\n  | Float_ty rest1, Float_ty rest2 -> Float_ty (trans rest1 rest2)\n\n  | Alpha_ty rest1, Alpha_ty rest2 -> Alpha_ty (trans rest1 rest2)\n  | Alpha_ty _, _ -> assert false\n  | _, Alpha_ty _ -> assert false\n\n  | Theta_ty rest1, Theta_ty rest2 -> Theta_ty (trans rest1 rest2)\n  | Theta_ty _, _ -> assert false\n  | _, Theta_ty _ -> assert false\n\n  | Any_ty rest1, Any_ty rest2 -> Any_ty (trans rest1 rest2)\n  | Any_ty _, _ -> assert false\n  | _, Any_ty _ -> assert false\n\n  | Reader_ty rest1, Reader_ty rest2 -> Reader_ty (trans rest1 rest2)\n  | Reader_ty _, _ -> assert false\n  | _, Reader_ty _ -> assert false\n\n  | Ignored_reader_ty rest1, Ignored_reader_ty rest2 ->\n    Ignored_reader_ty (trans rest1 rest2)\n  | Ignored_reader_ty _, _ -> assert false\n  | _, Ignored_reader_ty _ -> assert false\n\n  | Format_arg_ty (ty1, rest1), Format_arg_ty (ty2, rest2) ->\n    Format_arg_ty (trans ty1 ty2, trans rest1 rest2)\n  | Format_arg_ty _, _ -> assert false\n  | _, Format_arg_ty _ -> assert false\n\n  | Format_subst_ty (ty11, ty12, rest1),\n    Format_subst_ty (ty21, ty22, rest2) ->\n    let ty = trans (symm ty12) ty21 in\n    let _, f2, _, f4 = fmtty_rel_det ty in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    Format_subst_ty (ty11, ty22, trans rest1 rest2)\n  | Format_subst_ty _, _ -> assert false\n  | _, Format_subst_ty _ -> assert false\n\n  | End_of_fmtty, End_of_fmtty -> End_of_fmtty\n  | End_of_fmtty, _ -> assert false\n  | _, End_of_fmtty -> assert false\n\nlet rec fmtty_of_formatting_gen : type a b c d e f .\n  (a, b, c, d, e, f) formatting_gen ->\n    (a, b, c, d, e, f) fmtty =\nfun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (fmt, _)) -> fmtty_of_fmt fmt\n  | Open_box (Format (fmt, _)) -> fmtty_of_fmt fmt\n\n(* Extract the type representation (an fmtty) of a format. *)\nand fmtty_of_fmt : type a b c d e f .\n  (a, b, c, d, e, f) fmt -> (a, b, c, d, e, f) fmtty =\nfun fmtty -> match fmtty with\n  | String (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n  | Caml_string (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n\n  | Int (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int32 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int32_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Nativeint (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Nativeint_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int64 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int64_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Float (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Float_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n\n  | Char rest                  -> Char_ty (fmtty_of_fmt rest)\n  | Caml_char rest             -> Char_ty (fmtty_of_fmt rest)\n  | Bool (pad, rest)           ->\n      fmtty_of_padding_fmtty pad (Bool_ty (fmtty_of_fmt rest))\n  | Alpha rest                 -> Alpha_ty (fmtty_of_fmt rest)\n  | Theta rest                 -> Theta_ty (fmtty_of_fmt rest)\n  | Custom (arity, _, rest)    -> fmtty_of_custom arity (fmtty_of_fmt rest)\n  | Reader rest                -> Reader_ty (fmtty_of_fmt rest)\n\n  | Format_arg (_, ty, rest) ->\n    Format_arg_ty (ty, fmtty_of_fmt rest)\n  | Format_subst (_, ty, rest) ->\n    Format_subst_ty (ty, ty, fmtty_of_fmt rest)\n\n  | Flush rest                 -> fmtty_of_fmt rest\n  | String_literal (_, rest)   -> fmtty_of_fmt rest\n  | Char_literal (_, rest)     -> fmtty_of_fmt rest\n\n  | Scan_char_set (_, _, rest) -> String_ty (fmtty_of_fmt rest)\n  | Scan_get_counter (_, rest) -> Int_ty (fmtty_of_fmt rest)\n  | Scan_next_char rest        -> Char_ty (fmtty_of_fmt rest)\n  | Ignored_param (ign, rest)  -> fmtty_of_ignored_format ign rest\n  | Formatting_lit (_, rest)   -> fmtty_of_fmt rest\n  | Formatting_gen (fmting_gen, rest)  ->\n    concat_fmtty (fmtty_of_formatting_gen fmting_gen) (fmtty_of_fmt rest)\n\n  | End_of_format              -> End_of_fmtty\n\nand fmtty_of_custom : type x y a b c d e f .\n  (a, x, y) custom_arity -> (a, b, c, d, e, f) fmtty ->\n  (y, b, c, d, e, f) fmtty =\nfun arity fmtty -> match arity with\n  | Custom_zero -> fmtty\n  | Custom_succ arity -> Any_ty (fmtty_of_custom arity fmtty)\n\n(* Extract the fmtty of an ignored parameter followed by the rest of\n   the format. *)\nand fmtty_of_ignored_format : type x y a b c d e f .\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt ->\n    (a, b, c, d, e, f) fmtty =\nfun ign fmt -> match ign with\n  | Ignored_char                    -> fmtty_of_fmt fmt\n  | Ignored_caml_char               -> fmtty_of_fmt fmt\n  | Ignored_string _                -> fmtty_of_fmt fmt\n  | Ignored_caml_string _           -> fmtty_of_fmt fmt\n  | Ignored_int (_, _)              -> fmtty_of_fmt fmt\n  | Ignored_int32 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_nativeint (_, _)        -> fmtty_of_fmt fmt\n  | Ignored_int64 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_float (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_bool _                  -> fmtty_of_fmt fmt\n  | Ignored_format_arg _            -> fmtty_of_fmt fmt\n  | Ignored_format_subst (_, fmtty) -> concat_fmtty fmtty (fmtty_of_fmt fmt)\n  | Ignored_reader                  -> Ignored_reader_ty (fmtty_of_fmt fmt)\n  | Ignored_scan_char_set _         -> fmtty_of_fmt fmt\n  | Ignored_scan_get_counter _      -> fmtty_of_fmt fmt\n  | Ignored_scan_next_char          -> fmtty_of_fmt fmt\n\n(* Add an Int_ty node if padding is taken as an extra argument (ex: \"%*s\"). *)\nand fmtty_of_padding_fmtty : type x a b c d e f .\n    (x, a) padding -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun pad fmtty -> match pad with\n    | No_padding    -> fmtty\n    | Lit_padding _ -> fmtty\n    | Arg_padding _ -> Int_ty fmtty\n\n(* Add an Int_ty node if precision is taken as an extra argument (ex: \"%.*f\").*)\nand fmtty_of_precision_fmtty : type x a b c d e f .\n    (x, a) precision -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun prec fmtty -> match prec with\n    | No_precision    -> fmtty\n    | Lit_precision _ -> fmtty\n    | Arg_precision   -> Int_ty fmtty\n\n(******************************************************************************)\n                            (* Format typing *)\n\n(* Exception raised when a format does not match a given format type. *)\nexception Type_mismatch\n\n(* Type a padding. *)\n(* Take an Int_ty from the fmtty if the integer should be kept as argument. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padding : type a b c d e f x y .\n    (x, y) padding -> (a, b, c, d, e, f) fmtty ->\n      (a, b, c, d, e, f) padding_fmtty_ebb =\nfun pad fmtty -> match pad, fmtty with\n  | No_padding, _ -> Padding_fmtty_EBB (No_padding, fmtty)\n  | Lit_padding (padty, w), _ -> Padding_fmtty_EBB (Lit_padding (padty,w),fmtty)\n  | Arg_padding padty, Int_ty rest -> Padding_fmtty_EBB (Arg_padding padty,rest)\n  | _ -> raise Type_mismatch\n\n(* Convert a (upadding, uprecision) to a (padding, precision). *)\n(* Take one or two Int_ty from the fmtty if needed. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padprec : type a b c d e f x y z .\n  (x, y) padding -> (y, z) precision -> (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) padprec_fmtty_ebb =\nfun pad prec fmtty -> match prec, type_padding pad fmtty with\n  | No_precision, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, No_precision, rest)\n  | Lit_precision p, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, Lit_precision p, rest)\n  | Arg_precision, Padding_fmtty_EBB (pad, Int_ty rest) ->\n    Padprec_fmtty_EBB (pad, Arg_precision, rest)\n  | _, Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n\n(* Type a format according to an fmtty. *)\n(* If typing succeed, generate a copy of the format with the same\n    type parameters as the fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet rec type_format :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty -> match type_format_gen fmt fmtty with\n  | Fmt_fmtty_EBB (fmt', End_of_fmtty) -> fmt'\n  | _ -> raise Type_mismatch\n\nand type_format_gen :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun fmt fmtty -> match fmt, fmtty with\n  | Char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char fmt', fmtty')\n  | Caml_char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Caml_char fmt', fmtty')\n  | String (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (String (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Caml_string (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Caml_string (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Int (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int32 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int32_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int32 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Nativeint (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Nativeint_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Nativeint (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int64 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int64_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int64 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Float (fconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Float_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Float (fconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Bool (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, Bool_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Bool (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Flush fmt_rest, fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Flush fmt', fmtty')\n\n  | String_literal (str, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (String_literal (str, fmt'), fmtty')\n  | Char_literal (chr, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char_literal (chr, fmt'), fmtty')\n\n  | Format_arg (pad_opt, sub_fmtty, fmt_rest),\n    Format_arg_ty (sub_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub_fmtty <> Fmtty_EBB sub_fmtty' then raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Format_arg (pad_opt, sub_fmtty', fmt'), fmtty')\n  | Format_subst (pad_opt, sub_fmtty, fmt_rest),\n    Format_subst_ty (sub_fmtty1, _sub_fmtty2, fmtty_rest) ->\n    if Fmtty_EBB (erase_rel sub_fmtty) <> Fmtty_EBB (erase_rel sub_fmtty1) then\n      raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') =\n      type_format_gen fmt_rest (erase_rel fmtty_rest)\n    in\n    Fmt_fmtty_EBB (Format_subst (pad_opt, sub_fmtty1, fmt'), fmtty')\n  (* Printf and Format specific constructors: *)\n  | Alpha fmt_rest, Alpha_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Alpha fmt', fmtty')\n  | Theta fmt_rest, Theta_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Theta fmt', fmtty')\n\n  (* Format specific constructors: *)\n  | Formatting_lit (formatting_lit, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Formatting_lit (formatting_lit, fmt'), fmtty')\n  | Formatting_gen (formatting_gen, fmt_rest), fmtty_rest ->\n    type_formatting_gen formatting_gen fmt_rest fmtty_rest\n\n  (* Scanf specific constructors: *)\n  | Reader fmt_rest, Reader_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Reader fmt', fmtty')\n  | Scan_char_set (width_opt, char_set, fmt_rest), String_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_char_set (width_opt, char_set, fmt'), fmtty')\n  | Scan_get_counter (counter, fmt_rest), Int_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_get_counter (counter, fmt'), fmtty')\n  | Ignored_param (ign, rest), fmtty_rest ->\n    type_ignored_param ign rest fmtty_rest\n\n  | End_of_format, fmtty_rest -> Fmt_fmtty_EBB (End_of_format, fmtty_rest)\n\n  | _ -> raise Type_mismatch\n\nand type_formatting_gen : type a1 a3 b1 b3 c1 c3 d1 d3 e1 e2 e3 f1 f2 f3 .\n    (a1, b1, c1, d1, e1, f1) formatting_gen ->\n    (f1, b1, c1, e1, e2, f2) fmt ->\n    (a3, b3, c3, d3, e3, f3) fmtty ->\n    (a3, b3, c3, d3, e3, f3) fmt_fmtty_ebb =\nfun formatting_gen fmt0 fmtty0 -> match formatting_gen with\n  | Open_tag (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_tag (Format (fmt2, str)), fmt3), fmtty3)\n  | Open_box (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_box (Format (fmt2, str)), fmt3), fmtty3)\n\n(* Type an Ignored_param node according to an fmtty. *)\nand type_ignored_param : type p q x y z t u v a b c d e f .\n    (x, y, z, t, q, p) ignored ->\n    (p, y, z, q, u, v) fmt ->\n    (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) fmt_fmtty_ebb =\nfun ign fmt fmtty -> match ign with\n  | Ignored_char               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_char          as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_string _           as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_string _      as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int _              as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int32 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_nativeint _        as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int64 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_float _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_bool _             as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_char_set _    as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_get_counter _ as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_next_char     as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_format_arg (pad_opt, sub_fmtty) ->\n    type_ignored_param_one (Ignored_format_arg (pad_opt, sub_fmtty)) fmt fmtty\n  | Ignored_format_subst (pad_opt, sub_fmtty) ->\n    let Fmtty_fmt_EBB (sub_fmtty', Fmt_fmtty_EBB (fmt', fmtty')) =\n      type_ignored_format_substitution sub_fmtty fmt fmtty in\n    Fmt_fmtty_EBB (Ignored_param (Ignored_format_subst (pad_opt, sub_fmtty'),\n                                  fmt'),\n                   fmtty')\n  | Ignored_reader -> (\n    match fmtty with\n    | Ignored_reader_ty fmtty_rest ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty_rest in\n      Fmt_fmtty_EBB (Ignored_param (Ignored_reader, fmt'), fmtty')\n    | _ -> raise Type_mismatch\n  )\n\nand type_ignored_param_one : type a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 .\n    (a2, b2, c2, d2, d2, a2) ignored ->\n    (a1, b1, c1, d1, e1, f1) fmt ->\n    (a2, b2, c2, d2, e2, f2) fmtty ->\n    (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun ign fmt fmtty ->\n  let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty in\n  Fmt_fmtty_EBB (Ignored_param (ign, fmt'), fmtty')\n\n(* Typing of the complex case: \"%_(...%)\". *)\nand type_ignored_format_substitution : type w x y z p s t u a b c d e f .\n    (w, x, y, z, s, p) fmtty ->\n    (p, x, y, s, t, u) fmt ->\n    (a, b, c, d, e, f) fmtty -> (a, b, c, d, e, f) fmtty_fmt_ebb =\nfun sub_fmtty fmt fmtty -> match sub_fmtty, fmtty with\n  | Char_ty sub_fmtty_rest, Char_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Char_ty sub_fmtty_rest', fmt')\n  | String_ty sub_fmtty_rest, String_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (String_ty sub_fmtty_rest', fmt')\n  | Int_ty sub_fmtty_rest, Int_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int_ty sub_fmtty_rest', fmt')\n  | Int32_ty sub_fmtty_rest, Int32_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int32_ty sub_fmtty_rest', fmt')\n  | Nativeint_ty sub_fmtty_rest, Nativeint_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Nativeint_ty sub_fmtty_rest', fmt')\n  | Int64_ty sub_fmtty_rest, Int64_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int64_ty sub_fmtty_rest', fmt')\n  | Float_ty sub_fmtty_rest, Float_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Float_ty sub_fmtty_rest', fmt')\n  | Bool_ty sub_fmtty_rest, Bool_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Bool_ty sub_fmtty_rest', fmt')\n  | Alpha_ty sub_fmtty_rest, Alpha_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Alpha_ty sub_fmtty_rest', fmt')\n  | Theta_ty sub_fmtty_rest, Theta_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Theta_ty sub_fmtty_rest', fmt')\n  | Reader_ty sub_fmtty_rest, Reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Reader_ty sub_fmtty_rest', fmt')\n  | Ignored_reader_ty sub_fmtty_rest, Ignored_reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Ignored_reader_ty sub_fmtty_rest', fmt')\n\n  | Format_arg_ty (sub2_fmtty, sub_fmtty_rest),\n    Format_arg_ty (sub2_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub2_fmtty <> Fmtty_EBB sub2_fmtty' then raise Type_mismatch;\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Format_arg_ty (sub2_fmtty', sub_fmtty_rest'), fmt')\n  | Format_subst_ty (sub1_fmtty,  sub2_fmtty,  sub_fmtty_rest),\n    Format_subst_ty (sub1_fmtty', sub2_fmtty', fmtty_rest) ->\n    (* TODO define Fmtty_rel_EBB to remove those erase_rel *)\n    if Fmtty_EBB (erase_rel sub1_fmtty) <> Fmtty_EBB (erase_rel sub1_fmtty')\n    then raise Type_mismatch;\n    if Fmtty_EBB (erase_rel sub2_fmtty) <> Fmtty_EBB (erase_rel sub2_fmtty')\n    then raise Type_mismatch;\n    let sub_fmtty' = trans (symm sub1_fmtty') sub2_fmtty' in\n    let _, f2, _, f4 = fmtty_rel_det sub_fmtty' in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution (erase_rel sub_fmtty_rest) fmt fmtty_rest\n    in\n    Fmtty_fmt_EBB (Format_subst_ty (sub1_fmtty', sub2_fmtty',\n                                    symm sub_fmtty_rest'),\n                   fmt')\n  | End_of_fmtty, fmtty ->\n    Fmtty_fmt_EBB (End_of_fmtty, type_format_gen fmt fmtty)\n  | _ -> raise Type_mismatch\n\n(* This implementation of `recast` is a bit disappointing. The\n   invariant provided by the type are very strong: the input format's\n   type is in relation to the output type's as witnessed by the\n   fmtty_rel argument. One would at first expect this function to be\n   total, and implementable by exhaustive pattern matching. Instead,\n   we reuse the highly partial and much less well-defined function\n   `type_format` that has lost all knowledge of the correspondence\n   between the argument's types.\n\n   Besides the fact that this function reuses a lot of the\n   `type_format` logic (eg.: seeing Int_ty in the fmtty parameter does\n   not let you match on Int only, as you may in fact have Float\n   (Arg_padding, ...) (\"%.*d\") beginning with an Int_ty), it is also\n   a partial function, because the typing information in a format is\n   not quite enough to reconstruct it unambiguously. For example, the\n   format types of \"%d%_r\" and \"%_r%d\" have the same format6\n   parameters, but they are not at all exchangeable, and putting one\n   in place of the other must result in a dynamic failure.\n\n   Given that:\n   - we'd have to duplicate a lot of non-trivial typing logic from type_format\n   - this wouldn't even eliminate (all) the dynamic failures\n   we decided to just reuse type_format directly for now.\n*)\nlet recast :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a1, b1, c1, d1, e1, f1,\n      a2, b2, c2, d2, e2, f2) fmtty_rel\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty ->\n  type_format fmt (erase_rel (symm fmtty))\n\n(******************************************************************************)\n                             (* Printing tools *)\n\n(* Add padding spaces around a string. *)\nlet fix_padding padty width str =\n  let len = String.length str in\n  let width, padty =\n    abs width,\n    (* while literal padding widths are always non-negative,\n       dynamically-set widths (Arg_padding, eg. %*d) may be negative;\n       we interpret those as specifying a padding-to-the-left; this\n       means that '0' may get dropped even if it was explicitly set,\n       but:\n       - this is what the legacy implementation does, and\n         we preserve compatibility if possible\n       - we could only signal this issue by failing at runtime,\n         which is not very nice... *)\n    if width < 0 then Left else padty in\n  if width <= len then str else\n    let res = Bytes.make width (if padty = Zeros then '0' else ' ') in\n    begin match padty with\n    | Left  -> String.blit str 0 res 0 len\n    | Right -> String.blit str 0 res (width - len) len\n    | Zeros when len > 0 && (str.[0] = '+' || str.[0] = '-' || str.[0] = ' ') ->\n      Bytes.set res 0 str.[0];\n      String.blit str 1 res (width - len + 1) (len - 1)\n    | Zeros when len > 1 && str.[0] = '0' && (str.[1] = 'x' || str.[1] = 'X') ->\n      Bytes.set res 1 str.[1];\n      String.blit str 2 res (width - len + 2) (len - 2)\n    | Zeros ->\n      String.blit str 0 res (width - len) len\n    end;\n    Bytes.unsafe_to_string res\n\n(* Add '0' padding to int, int32, nativeint or int64 string representation. *)\nlet fix_int_precision prec str =\n  let prec = abs prec in\n  let len = String.length str in\n  match str.[0] with\n  | ('+' | '-' | ' ') as c when prec + 1 > len ->\n    let res = Bytes.make (prec + 1) '0' in\n    Bytes.set res 0 c;\n    String.blit str 1 res (prec - len + 2) (len - 1);\n    Bytes.unsafe_to_string res\n  | '0' when prec + 2 > len && len > 1 && (str.[1] = 'x' || str.[1] = 'X') ->\n    let res = Bytes.make (prec + 2) '0' in\n    Bytes.set res 1 str.[1];\n    String.blit str 2 res (prec - len + 4) (len - 2);\n    Bytes.unsafe_to_string res\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' when prec > len ->\n    let res = Bytes.make prec '0' in\n    String.blit str 0 res (prec - len) len;\n    Bytes.unsafe_to_string res\n  | _ ->\n    str\n\n(* Escape a string according to the OCaml lexing convention. *)\nlet string_to_caml_string str =\n  let str = String.escaped str in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\\"' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Generate the format_int/int32/nativeint/int64 first argument\n   from an int_conv. *)\nlet format_of_iconv = function\n  | Int_d | Int_Cd -> \"%d\" | Int_pd -> \"%+d\" | Int_sd -> \"% d\"\n  | Int_i | Int_Ci -> \"%i\" | Int_pi -> \"%+i\" | Int_si -> \"% i\"\n  | Int_x -> \"%x\" | Int_Cx -> \"%#x\"\n  | Int_X -> \"%X\" | Int_CX -> \"%#X\"\n  | Int_o -> \"%o\" | Int_Co -> \"%#o\"\n  | Int_u | Int_Cu -> \"%u\"\n\nlet format_of_iconvL = function\n  | Int_d | Int_Cd -> \"%Ld\" | Int_pd -> \"%+Ld\" | Int_sd -> \"% Ld\"\n  | Int_i | Int_Ci -> \"%Li\" | Int_pi -> \"%+Li\" | Int_si -> \"% Li\"\n  | Int_x -> \"%Lx\" | Int_Cx -> \"%#Lx\"\n  | Int_X -> \"%LX\" | Int_CX -> \"%#LX\"\n  | Int_o -> \"%Lo\" | Int_Co -> \"%#Lo\"\n  | Int_u | Int_Cu -> \"%Lu\"\n\nlet format_of_iconvl = function\n  | Int_d | Int_Cd -> \"%ld\" | Int_pd -> \"%+ld\" | Int_sd -> \"% ld\"\n  | Int_i | Int_Ci -> \"%li\" | Int_pi -> \"%+li\" | Int_si -> \"% li\"\n  | Int_x -> \"%lx\" | Int_Cx -> \"%#lx\"\n  | Int_X -> \"%lX\" | Int_CX -> \"%#lX\"\n  | Int_o -> \"%lo\" | Int_Co -> \"%#lo\"\n  | Int_u | Int_Cu -> \"%lu\"\n\nlet format_of_iconvn = function\n  | Int_d | Int_Cd -> \"%nd\" | Int_pd -> \"%+nd\" | Int_sd -> \"% nd\"\n  | Int_i | Int_Ci -> \"%ni\" | Int_pi -> \"%+ni\" | Int_si -> \"% ni\"\n  | Int_x -> \"%nx\" | Int_Cx -> \"%#nx\"\n  | Int_X -> \"%nX\" | Int_CX -> \"%#nX\"\n  | Int_o -> \"%no\" | Int_Co -> \"%#no\"\n  | Int_u | Int_Cu -> \"%nu\"\n\n(* Generate the format_float first argument from a float_conv. *)\nlet format_of_fconv fconv prec =\n    let prec = abs prec in\n    let symb = char_of_fconv ~cF:'g' fconv in\n    let buf = buffer_create 16 in\n    buffer_add_char buf '%';\n    bprint_fconv_flag buf fconv;\n    buffer_add_char buf '.';\n    buffer_add_string buf (Int.to_string prec);\n    buffer_add_char buf symb;\n    buffer_contents buf\n\nlet transform_int_alt iconv s =\n  match iconv with\n  | Int_Cd | Int_Ci | Int_Cu ->\n    let digits =\n      let n = ref 0 in\n      for i = 0 to String.length s - 1 do\n        match String.unsafe_get s i with\n        | '0'..'9' -> incr n\n        | _ -> ()\n      done;\n      !n\n    in\n    let buf = Bytes.create (String.length s + (digits - 1) / 3) in\n    let pos = ref 0 in\n    let put c = Bytes.set buf !pos c; incr pos in\n    let left = ref ((digits - 1) mod 3 + 1) in\n    for i = 0 to String.length s - 1 do\n      match String.unsafe_get s i with\n      | '0'..'9' as c ->\n          if !left = 0 then (put '_'; left := 3); decr left; put c\n      | c -> put c\n    done;\n    Bytes.unsafe_to_string buf\n  | _ -> s\n\n(* Convert an integer to a string according to a conversion. *)\nlet convert_int iconv n =\n  transform_int_alt iconv (format_int (format_of_iconv iconv) n)\nlet convert_int32 iconv n =\n  transform_int_alt iconv (format_int32 (format_of_iconvl iconv) n)\nlet convert_nativeint iconv n =\n  transform_int_alt iconv (format_nativeint (format_of_iconvn iconv) n)\nlet convert_int64 iconv n =\n  transform_int_alt iconv (format_int64 (format_of_iconvL iconv) n)\n\n(* Convert a float to string. *)\n(* Fix special case of \"OCaml float format\". *)\nlet convert_float fconv prec x =\n  let hex () =\n    let sign =\n      match fst fconv with\n      | Float_flag_p -> '+'\n      | Float_flag_s -> ' '\n      | _ -> '-' in\n    hexstring_of_float x prec sign in\n  let add_dot_if_needed str =\n    let len = String.length str in\n    let rec is_valid i =\n      if i = len then false else\n        match str.[i] with\n        | '.' | 'e' | 'E' -> true\n        | _ -> is_valid (i + 1) in\n    if is_valid 0 then str else str ^ \".\" in\n  let caml_special_val str = match classify_float x with\n    | FP_normal | FP_subnormal | FP_zero -> str\n    | FP_infinite -> if x < 0.0 then \"neg_infinity\" else \"infinity\"\n    | FP_nan -> \"nan\" in\n  match snd fconv with\n  | Float_h -> hex ()\n  | Float_H -> String.uppercase_ascii (hex ())\n  | Float_CF -> caml_special_val (hex ())\n  | Float_F ->\n    let str = format_float (format_of_fconv fconv prec) x in\n    caml_special_val (add_dot_if_needed str)\n  | Float_f | Float_e | Float_E | Float_g | Float_G ->\n    format_float (format_of_fconv fconv prec) x\n\n(* Convert a char to a string according to the OCaml lexical convention. *)\nlet format_caml_char c =\n  let str = Char.escaped c in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\'' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Convert a format type to string *)\nlet string_of_fmtty fmtty =\n  let buf = buffer_create 16 in\n  bprint_fmtty buf fmtty;\n  buffer_contents buf\n\n(******************************************************************************)\n                        (* Generic printing function *)\n\n(* Make a generic printing function. *)\n(* Used to generate Printf and Format printing functions. *)\n(* Parameters:\n     k: a continuation finally applied to the output stream and the accumulator.\n     o: the output stream (see k, %a and %t).\n     acc: rev list of printing entities (string, char, flush, formatting, ...).\n     fmt: the format. *)\nlet rec make_printf : type a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k acc fmt -> match fmt with\n  | Char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k new_acc rest\n  | Caml_char rest ->\n    fun c ->\n      let new_acc = Acc_data_string (acc, format_caml_char c) in\n      make_printf k new_acc rest\n  | String (pad, rest) ->\n    make_padding k acc rest pad (fun str -> str)\n  | Caml_string (pad, rest) ->\n    make_padding k acc rest pad string_to_caml_string\n  | Int (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int iconv\n  | Int32 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int32 iconv\n  | Nativeint (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_nativeint iconv\n  | Int64 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k acc rest pad prec convert_int64 iconv\n  | Float (fconv, pad, prec, rest) ->\n    make_float_padding_precision k acc rest pad prec fconv\n  | Bool (pad, rest) ->\n    make_padding k acc rest pad string_of_bool\n  | Alpha rest ->\n    fun f x -> make_printf k (Acc_delay (acc, fun o -> f o x)) rest\n  | Theta rest ->\n    fun f -> make_printf k (Acc_delay (acc, f)) rest\n  | Custom (arity, f, rest) ->\n    make_custom k acc rest arity (f ())\n  | Reader _ ->\n    (* This case is impossible, by typing of formats. *)\n    (* Indeed, since printf and co. take a format4 as argument, the 'd and 'e\n       type parameters of fmt are obviously equals. The Reader is the\n       only constructor which touch 'd and 'e type parameters of the format\n       type, it adds an (->) to the 'd parameters. Consequently, a format4\n       cannot contain a Reader node, except in the sub-format associated to\n       an %{...%}. It's not a problem because make_printf do not call\n       itself recursively on the sub-format associated to %{...%}. *)\n    assert false\n  | Flush rest ->\n    make_printf k (Acc_flush acc) rest\n\n  | String_literal (str, rest) ->\n    make_printf k (Acc_string_literal (acc, str)) rest\n  | Char_literal (chr, rest) ->\n    make_printf k (Acc_char_literal (acc, chr)) rest\n\n  | Format_arg (_, sub_fmtty, rest) ->\n    let ty = string_of_fmtty sub_fmtty in\n    (fun str ->\n      ignore str;\n      make_printf k (Acc_data_string (acc, ty)) rest)\n  | Format_subst (_, fmtty, rest) ->\n    fun (Format (fmt, _)) -> make_printf k acc\n      (concat_fmt (recast fmt fmtty) rest)\n\n  | Scan_char_set (_, _, rest) ->\n    let new_acc = Acc_invalid_arg (acc, \"Printf: bad conversion %[\") in\n    fun _ -> make_printf k new_acc rest\n  | Scan_get_counter (_, rest) ->\n    (* This case should be refused for Printf. *)\n    (* Accepted for backward compatibility. *)\n    (* Interpret %l, %n and %L as %u. *)\n    fun n ->\n      let new_acc = Acc_data_string (acc, format_int \"%u\" n) in\n      make_printf k new_acc rest\n  | Scan_next_char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k new_acc rest\n  | Ignored_param (ign, rest) ->\n    make_ignored_param k acc ign rest\n\n  | Formatting_lit (fmting_lit, rest) ->\n    make_printf k (Acc_formatting_lit (acc, fmting_lit)) rest\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    let k' kacc =\n      make_printf k (Acc_formatting_gen (acc, Acc_open_tag kacc)) rest in\n    make_printf k' End_of_acc fmt'\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    let k' kacc =\n      make_printf k (Acc_formatting_gen (acc, Acc_open_box kacc)) rest in\n    make_printf k' End_of_acc fmt'\n\n  | End_of_format ->\n    k acc\n\n(* Delay the error (Invalid_argument \"Printf: bad conversion %_\"). *)\n(* Generate functions to take remaining arguments (after the \"%_\"). *)\nand make_ignored_param : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k acc ign fmt -> match ign with\n  | Ignored_char                    -> make_invalid_arg k acc fmt\n  | Ignored_caml_char               -> make_invalid_arg k acc fmt\n  | Ignored_string _                -> make_invalid_arg k acc fmt\n  | Ignored_caml_string _           -> make_invalid_arg k acc fmt\n  | Ignored_int (_, _)              -> make_invalid_arg k acc fmt\n  | Ignored_int32 (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_nativeint (_, _)        -> make_invalid_arg k acc fmt\n  | Ignored_int64 (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_float (_, _)            -> make_invalid_arg k acc fmt\n  | Ignored_bool _                  -> make_invalid_arg k acc fmt\n  | Ignored_format_arg _            -> make_invalid_arg k acc fmt\n  | Ignored_format_subst (_, fmtty) -> make_from_fmtty k acc fmtty fmt\n  | Ignored_reader                  -> assert false\n  | Ignored_scan_char_set _         -> make_invalid_arg k acc fmt\n  | Ignored_scan_get_counter _      -> make_invalid_arg k acc fmt\n  | Ignored_scan_next_char          -> make_invalid_arg k acc fmt\n\n\n(* Special case of printf \"%_(\". *)\nand make_from_fmtty : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, y, x) fmtty ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k acc fmtty fmt -> match fmtty with\n  | Char_ty rest            -> fun _ -> make_from_fmtty k acc rest fmt\n  | String_ty rest          -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int_ty rest             -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int32_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Nativeint_ty rest       -> fun _ -> make_from_fmtty k acc rest fmt\n  | Int64_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Float_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Bool_ty rest            -> fun _ -> make_from_fmtty k acc rest fmt\n  | Alpha_ty rest           -> fun _ _ -> make_from_fmtty k acc rest fmt\n  | Theta_ty rest           -> fun _ -> make_from_fmtty k acc rest fmt\n  | Any_ty rest             -> fun _ -> make_from_fmtty k acc rest fmt\n  | Reader_ty _             -> assert false\n  | Ignored_reader_ty _     -> assert false\n  | Format_arg_ty (_, rest) -> fun _ -> make_from_fmtty k acc rest fmt\n  | End_of_fmtty            -> make_invalid_arg k acc fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    fun _ -> make_from_fmtty k acc (concat_fmtty ty rest) fmt\n\n(* Insert an Acc_invalid_arg in the accumulator and continue to generate\n   closures to get the remaining arguments. *)\nand make_invalid_arg : type a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k acc fmt ->\n  make_printf k (Acc_invalid_arg (acc, \"Printf: bad conversion %_\")) fmt\n\n(* Fix padding, take it as an extra integer argument if needed. *)\nand make_padding : type x z a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, z -> a) padding -> (z -> string) -> x =\n  fun k acc fmt pad trans -> match pad with\n  | No_padding ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, trans x) in\n      make_printf k new_acc fmt\n  | Lit_padding (padty, width) ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty width (trans x)) in\n      make_printf k new_acc fmt\n  | Arg_padding padty ->\n    fun w x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty w (trans x)) in\n      make_printf k new_acc fmt\n\n(* Fix padding and precision for int, int32, nativeint or int64. *)\n(* Take one or two extra integer arguments if needed. *)\nand make_int_padding_precision : type x y z a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, z -> a) precision -> (int_conv -> z -> string) ->\n    int_conv -> x =\n  fun k acc fmt pad prec trans iconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = trans iconv x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n\n(* Convert a float, fix padding and precision if needed. *)\n(* Take the float argument and one or two extra integer arguments if needed. *)\nand make_float_padding_precision : type x y a b c d e f .\n    ((b, c) acc -> f) -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, float -> a) precision -> float_conv -> x =\n  fun k acc fmt pad prec fconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = convert_float fconv p x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = convert_float fconv p x in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      let str' = fix_padding padty w str in\n      make_printf k (Acc_data_string (acc, str')) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = convert_float fconv (default_float_precision fconv) x in\n      let str' = fix_padding padty w str in\n      make_printf k (Acc_data_string (acc, str')) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k (Acc_data_string (acc, str)) fmt\nand make_custom : type x y a b c d e f .\n  ((b, c) acc -> f) -> (b, c) acc ->\n  (a, b, c, d, e, f) fmt ->\n  (a, x, y) custom_arity -> x -> y =\n  fun k acc rest arity f -> match arity with\n  | Custom_zero -> make_printf k (Acc_data_string (acc, f)) rest\n  | Custom_succ arity ->\n    fun x ->\n      make_custom k acc rest arity (f x)\n\nlet const x _ = x\n\nlet rec make_iprintf : type a b c d e f state.\n  (state -> f) -> state -> (a, b, c, d, e, f) fmt -> a =\n  fun k o fmt -> match fmt with\n    | Char rest ->\n        const (make_iprintf k o rest)\n    | Caml_char rest ->\n        const (make_iprintf k o rest)\n    | String (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | String (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | String (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Caml_string (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Int (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int32 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Nativeint (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int64 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Float (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Bool (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Bool (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Alpha rest ->\n        const (const (make_iprintf k o rest))\n    | Theta rest ->\n        const (make_iprintf k o rest)\n    | Custom (arity, _, rest) ->\n        fn_of_custom_arity k o rest arity\n    | Reader _ ->\n        (* This case is impossible, by typing of formats.  See the\n           note in the corresponding case for make_printf. *)\n        assert false\n    | Flush rest ->\n        make_iprintf k o rest\n    | String_literal (_, rest) ->\n        make_iprintf k o rest\n    | Char_literal (_, rest) ->\n        make_iprintf k o rest\n    | Format_arg (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Format_subst (_, fmtty, rest) ->\n        fun (Format (fmt, _)) ->\n          make_iprintf k o\n            (concat_fmt (recast fmt fmtty) rest)\n    | Scan_char_set (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_get_counter (_, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_next_char rest ->\n        const (make_iprintf k o rest)\n    | Ignored_param (ign, rest) ->\n        make_ignored_param (fun _ -> k o) (End_of_acc) ign rest\n    | Formatting_lit (_, rest) ->\n        make_iprintf k o rest\n    | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | End_of_format ->\n        k o\nand fn_of_padding_precision :\n  type x y z a b c d e f state.\n  (state -> f) -> state -> (a, b, c, d, e, f) fmt ->\n  (x, y) padding -> (y, z -> a) precision -> x =\n  fun k o fmt pad prec -> match pad, prec with\n    | No_padding   , No_precision    ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Lit_padding _, No_precision    ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, No_precision    ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Lit_precision _ ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Arg_precision   ->\n        const (const (const (make_iprintf k o fmt)))\nand fn_of_custom_arity : type x y a b c d e f state.\n  (state -> f) ->\n  state -> (a, b, c, d, e, f) fmt -> (a, x, y) custom_arity -> y =\n  fun k o fmt -> function\n    | Custom_zero ->\n        make_iprintf k o fmt\n    | Custom_succ arity ->\n        const (fn_of_custom_arity k o fmt arity)\n\n(******************************************************************************)\n                          (* Continuations for make_printf *)\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Used as a continuation of make_printf. *)\nlet rec output_acc o acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    output_acc o p; output_string o s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc o p; output_string o \"@{\"; output_acc o acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc o p; output_string o \"@[\"; output_acc o acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc o p; output_string o s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc o p; output_char o c\n  | Acc_delay (p, f)         -> output_acc o p; f o\n  | Acc_flush p              -> output_acc o p; flush o\n  | Acc_invalid_arg (p, msg) -> output_acc o p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Used as a continuation of make_printf. *)\nlet rec bufput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    bufput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    bufput_acc b p; Buffer.add_string b \"@{\"; bufput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    bufput_acc b p; Buffer.add_string b \"@[\"; bufput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> bufput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> bufput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> bufput_acc b p; f b\n  | Acc_flush p              -> bufput_acc b p;\n  | Acc_invalid_arg (p, msg) -> bufput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from bufput_acc by the interpretation of %a and %t. *)\n(* Used as a continuation of make_printf. *)\nlet rec strput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    strput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc b p; Buffer.add_string b \"@{\"; strput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc b p; Buffer.add_string b \"@[\"; strput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> strput_acc b p; Buffer.add_string b (f ())\n  | Acc_flush p              -> strput_acc b p;\n  | Acc_invalid_arg (p, msg) -> strput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(******************************************************************************)\n                          (* Error management *)\n\n(* Raise [Failure] with a pretty-printed error message. *)\nlet failwith_message (Format (fmt, _)) =\n  let buf = Buffer.create 256 in\n  let k acc = strput_acc buf acc; failwith (Buffer.contents buf) in\n  make_printf k End_of_acc fmt\n\n(******************************************************************************)\n                            (* Formatting tools *)\n\n(* Convert a string to an open block description (indent, block_type) *)\nlet open_box_of_string str =\n  if str = \"\" then (0, Pp_box) else\n    let len = String.length str in\n    let invalid_box () = failwith_message \"invalid box description %S\" str in\n    let rec parse_spaces i =\n      if i = len then i else\n        match str.[i] with\n        | ' ' | '\\t' -> parse_spaces (i + 1)\n        | _ -> i\n    and parse_lword i j =\n      if j = len then j else\n        match str.[j] with\n        | 'a' .. 'z' -> parse_lword i (j + 1)\n        | _ -> j\n    and parse_int i j =\n      if j = len then j else\n        match str.[j] with\n        | '0' .. '9' | '-' -> parse_int i (j + 1)\n        | _ -> j in\n    let wstart = parse_spaces 0 in\n    let wend = parse_lword wstart wstart in\n    let box_name = String.sub str wstart (wend - wstart) in\n    let nstart = parse_spaces wend in\n    let nend = parse_int nstart nstart in\n    let indent =\n      if nstart = nend then 0 else\n        try int_of_string (String.sub str nstart (nend - nstart))\n        with Failure _ -> invalid_box () in\n    let exp_end = parse_spaces nend in\n    if exp_end <> len then invalid_box ();\n    let box_type = match box_name with\n      | \"\" | \"b\" -> Pp_box\n      | \"h\"      -> Pp_hbox\n      | \"v\"      -> Pp_vbox\n      | \"hv\"     -> Pp_hvbox\n      | \"hov\"    -> Pp_hovbox\n      | _        -> invalid_box () in\n    (indent, box_type)\n\n(******************************************************************************)\n                            (* Parsing tools *)\n\n(* Create a padding_fmt_ebb from a padding and a format. *)\n(* Copy the padding to disjoin the type parameters of argument and result. *)\nlet make_padding_fmt_ebb : type x y .\n    (x, y) padding -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) padding_fmt_ebb =\nfun pad fmt -> match pad with\n  | No_padding         -> Padding_fmt_EBB (No_padding, fmt)\n  | Lit_padding (s, w) -> Padding_fmt_EBB (Lit_padding (s, w), fmt)\n  | Arg_padding s      -> Padding_fmt_EBB (Arg_padding s, fmt)\n\n(* Create a precision_fmt_ebb from a precision and a format. *)\n(* Copy the precision to disjoin the type parameters of argument and result. *)\nlet make_precision_fmt_ebb : type x y .\n    (x, y) precision -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) precision_fmt_ebb =\nfun prec fmt -> match prec with\n  | No_precision    -> Precision_fmt_EBB (No_precision, fmt)\n  | Lit_precision p -> Precision_fmt_EBB (Lit_precision p, fmt)\n  | Arg_precision   -> Precision_fmt_EBB (Arg_precision, fmt)\n\n(* Create a padprec_fmt_ebb from a padding, a precision and a format. *)\n(* Copy the padding and the precision to disjoin type parameters of arguments\n   and result. *)\nlet make_padprec_fmt_ebb : type x y z t .\n    (x, y) padding -> (z, t) precision ->\n    (_, _, _, _, _, _) fmt ->\n    (_, _, _, _, _) padprec_fmt_ebb =\nfun pad prec fmt ->\n  let Precision_fmt_EBB (prec, fmt') = make_precision_fmt_ebb prec fmt in\n  match pad with\n  | No_padding         -> Padprec_fmt_EBB (No_padding, prec, fmt')\n  | Lit_padding (s, w) -> Padprec_fmt_EBB (Lit_padding (s, w), prec, fmt')\n  | Arg_padding s      -> Padprec_fmt_EBB (Arg_padding s, prec, fmt')\n\n(******************************************************************************)\n                             (* Format parsing *)\n\n(* Parse a string representing a format and create a fmt_ebb. *)\n(* Raise [Failure] in case of invalid format. *)\nlet fmt_ebb_of_string ?legacy_behavior str =\n  (* Parameters naming convention:                                    *)\n  (*   - lit_start: start of the literal sequence.                    *)\n  (*   - str_ind: current index in the string.                        *)\n  (*   - end_ind: end of the current (sub-)format.                    *)\n  (*   - pct_ind: index of the '%' in the current micro-format.       *)\n  (*   - zero:  is the '0' flag defined in the current micro-format.  *)\n  (*   - minus: is the '-' flag defined in the current micro-format.  *)\n  (*   - plus:  is the '+' flag defined in the current micro-format.  *)\n  (*   - hash:  is the '#' flag defined in the current micro-format.  *)\n  (*   - space: is the ' ' flag defined in the current micro-format.  *)\n  (*   - ign:   is the '_' flag defined in the current micro-format.  *)\n  (*   - pad: padding of the current micro-format.                    *)\n  (*   - prec: precision of the current micro-format.                 *)\n  (*   - symb: char representing the conversion ('c', 's', 'd', ...). *)\n  (*   - char_set: set of characters as bitmap (see scanf %[...]).    *)\n\n  let legacy_behavior = match legacy_behavior with\n    | Some flag -> flag\n    | None -> true\n  (*  When this flag is enabled, the format parser tries to behave as\n      the <4.02 implementations, in particular it ignores most benine\n      nonsensical format. When the flag is disabled, it will reject any\n      format that is not accepted by the specification.\n\n      A typical example would be \"%+ d\": specifying both '+' (if the\n      number is positive, pad with a '+' to get the same width as\n      negative numbers) and ' ' (if the number is positive, pad with\n      a space) does not make sense, but the legacy (< 4.02)\n      implementation was happy to just ignore the space.\n  *)\n  in\n\n  (* Raise [Failure] with a friendly error message. *)\n  let invalid_format_message str_ind msg =\n    failwith_message\n      \"invalid format %S: at character number %d, %s\"\n      str str_ind msg\n  in\n\n  (* Used when the end of the format (or the current sub-format) was encountered\n      unexpectedly. *)\n  let unexpected_end_of_format end_ind =\n    invalid_format_message end_ind\n      \"unexpected end of format\"\n  in\n\n  (* Used for %0c: no other widths are implemented *)\n  let invalid_nonnull_char_width str_ind =\n    invalid_format_message str_ind\n      \"non-zero widths are unsupported for %c conversions\"\n  in\n  (* Raise [Failure] with a friendly error message about an option dependency\n     problem. *)\n  let invalid_format_without str_ind c s =\n    failwith_message\n      \"invalid format %S: at character number %d, '%c' without %s\"\n      str str_ind c s\n  in\n\n  (* Raise [Failure] with a friendly error message about an unexpected\n     character. *)\n  let expected_character str_ind expected read =\n    failwith_message\n     \"invalid format %S: at character number %d, %s expected, read %C\"\n      str str_ind expected read\n  in\n\n  (* Parse the string from beg_ind (included) to end_ind (excluded). *)\n  let rec parse : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun beg_ind end_ind -> parse_literal beg_ind beg_ind end_ind\n\n  (* Read literal characters up to '%' or '@' special characters. *)\n  and parse_literal : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind end_ind ->\n    if str_ind = end_ind then add_literal lit_start str_ind End_of_format else\n      match str.[str_ind] with\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse_format str_ind end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse_after_at (str_ind + 1) end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | _ ->\n        parse_literal lit_start (str_ind + 1) end_ind\n\n  (* Parse a format after '%' *)\n  and parse_format : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind end_ind -> parse_ign pct_ind (pct_ind + 1) end_ind\n\n  and parse_ign : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n      | '_' -> parse_flags pct_ind (str_ind+1) end_ind true\n      | _ -> parse_flags pct_ind str_ind end_ind false\n\n  and parse_flags : type e f . int -> int -> int -> bool -> (_, _, e, f) fmt_ebb\n  =\n  fun pct_ind str_ind end_ind ign ->\n    let zero = ref false and minus = ref false\n    and plus = ref false and space = ref false\n    and hash = ref false in\n    let set_flag str_ind flag =\n      (* in legacy mode, duplicate flags are accepted *)\n      if !flag && not legacy_behavior then\n        failwith_message\n          \"invalid format %S: at character number %d, duplicate flag %C\"\n          str str_ind str.[str_ind];\n      flag := true;\n    in\n    let rec read_flags str_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      begin match str.[str_ind] with\n      | '0' -> set_flag str_ind zero;  read_flags (str_ind + 1)\n      | '-' -> set_flag str_ind minus; read_flags (str_ind + 1)\n      | '+' -> set_flag str_ind plus;  read_flags (str_ind + 1)\n      | '#' -> set_flag str_ind hash; read_flags (str_ind + 1)\n      | ' ' -> set_flag str_ind space; read_flags (str_ind + 1)\n      | _ ->\n        parse_padding pct_ind str_ind end_ind\n          !zero !minus !plus !hash !space ign\n      end\n    in\n    read_flags str_ind\n\n  (* Try to read a digital or a '*' padding. *)\n  and parse_padding : type e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool -> bool ->\n        (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind zero minus plus hash space ign ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let padty = match zero, minus with\n      | false, false -> Right\n      | false, true  -> Left\n      |  true, false -> Zeros\n      |  true, true  ->\n        if legacy_behavior then Left\n        else incompatible_flag pct_ind str_ind '-' \"0\" in\n    match str.[str_ind] with\n    | '0' .. '9' ->\n      let new_ind, width = parse_positive str_ind end_ind 0 in\n      parse_after_padding pct_ind new_ind end_ind minus plus hash space ign\n        (Lit_padding (padty, width))\n    | '*' ->\n      parse_after_padding pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign (Arg_padding padty)\n    | _ ->\n      begin match padty with\n      | Left  ->\n        if not legacy_behavior then\n          invalid_format_without (str_ind - 1) '-' \"padding\";\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      | Zeros ->\n         (* a '0' padding indication not followed by anything should\n           be interpreted as a Right padding of width 0. This is used\n           by scanning conversions %0s and %0c *)\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          (Lit_padding (Right, 0))\n      | Right ->\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      end\n\n  (* Is precision defined? *)\n  and parse_after_padding : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '.' ->\n      parse_precision pct_ind (str_ind + 1) end_ind minus plus hash space ign\n        pad\n    | symb ->\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        No_precision pad symb\n\n  (* Read the digital or '*' precision. *)\n  and parse_precision : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_literal minus str_ind =\n      let new_ind, prec = parse_positive str_ind end_ind 0 in\n      parse_after_precision pct_ind new_ind end_ind minus plus hash space ign\n        pad (Lit_precision prec) in\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_literal minus str_ind\n    | ('+' | '-') as symb when legacy_behavior ->\n      (* Legacy mode would accept and ignore '+' or '-' before the\n         integer describing the desired precision; note that this\n         cannot happen for padding width, as '+' and '-' already have\n         a semantics there.\n\n         That said, the idea (supported by this tweak) that width and\n         precision literals are \"integer literals\" in the OCaml sense is\n         still blatantly wrong, as 123_456 or 0xFF are rejected. *)\n      parse_literal (minus || symb = '-') (str_ind + 1)\n    | '*' ->\n      parse_after_precision pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign pad Arg_precision\n    | _ ->\n      if legacy_behavior then\n        (* note that legacy implementation did not ignore '.' without\n           a number (as it does for padding indications), but\n           interprets it as '.0' *)\n        parse_after_precision pct_ind str_ind end_ind minus plus hash space ign\n          pad (Lit_precision 0)\n      else\n        invalid_format_without (str_ind - 1) '.' \"precision\"\n\n  (* Try to read the conversion. *)\n  and parse_after_precision : type x y z t e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, y) padding -> (z, t) precision -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad prec ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_conv (type u) (type v) (padprec : (u, v) padding) =\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        prec padprec str.[str_ind] in\n    (* in legacy mode, some formats (%s and %S) accept a weird mix of\n       padding and precision, which is merged as a single padding\n       information. For example, in %.10s the precision is implicitly\n       understood as padding %10s, but the left-padding component may\n       be specified either as a left padding or a negative precision:\n       %-.3s and %.-3s are equivalent to %-3s *)\n    match pad with\n    | No_padding -> (\n      match minus, prec with\n        | _, No_precision -> parse_conv No_padding\n        | false, Lit_precision n -> parse_conv (Lit_padding (Right, n))\n        | true, Lit_precision n -> parse_conv (Lit_padding (Left, n))\n        | false, Arg_precision -> parse_conv (Arg_padding Right)\n        | true, Arg_precision -> parse_conv (Arg_padding Left)\n    )\n    | pad -> parse_conv pad\n\n  (* Case analysis on conversion. *)\n  and parse_conversion : type x y z t u v e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> (x, y) padding ->\n        (z, t) precision -> (u, v) padding -> char -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind plus hash space ign pad prec padprec symb ->\n    (* Flags used to check option usages/compatibilities. *)\n    let plus_used  = ref false and hash_used = ref false\n    and space_used = ref false and ign_used   = ref false\n    and pad_used   = ref false and prec_used  = ref false in\n\n    (* Access to options, update flags. *)\n    let get_plus    () = plus_used  := true; plus\n    and get_hash   () = hash_used := true; hash\n    and get_space   () = space_used := true; space\n    and get_ign     () = ign_used   := true; ign\n    and get_pad     () = pad_used   := true; pad\n    and get_prec    () = prec_used  := true; prec\n    and get_padprec () = pad_used   := true; padprec in\n\n    let get_int_pad () : (x,y) padding =\n      (* %5.3d is accepted and meaningful: pad to length 5 with\n         spaces, but first pad with zeros upto length 3 (0-padding\n         is the interpretation of \"precision\" for integer formats).\n\n         %05.3d is redundant: pad to length 5 *with zeros*, but\n         first pad with zeros... To add insult to the injury, the\n         legacy implementation ignores the 0-padding indication and\n         does the 5 padding with spaces instead. We reuse this\n         interpretation for compatibility, but statically reject this\n         format when the legacy mode is disabled, to protect strict\n         users from this corner case. *)\n       match get_pad (), get_prec () with\n         | pad, No_precision -> pad\n         | No_padding, _     -> No_padding\n         | Lit_padding (Zeros, n), _ ->\n           if legacy_behavior then Lit_padding (Right, n)\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Arg_padding Zeros, _ ->\n           if legacy_behavior then Arg_padding Right\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Lit_padding _ as pad, _ -> pad\n         | Arg_padding _ as pad, _ -> pad in\n\n    (* Check that padty <> Zeros. *)\n    let check_no_0 symb (type a b) (pad : (a, b) padding) : (a,b) padding =\n      match pad with\n      | No_padding -> pad\n      | Lit_padding ((Left | Right), _) -> pad\n      | Arg_padding (Left | Right) -> pad\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Lit_padding (Right, width)\n        else incompatible_flag pct_ind str_ind symb \"0\"\n      | Arg_padding Zeros ->\n        if legacy_behavior then Arg_padding Right\n        else incompatible_flag pct_ind str_ind symb \"0\"\n    in\n\n    (* Get padding as a pad_option (see \"%_\", \"%{\", \"%(\" and \"%[\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let opt_of_pad c (type a) (type b) (pad : (a, b) padding) = match pad with\n      | No_padding -> None\n      | Lit_padding (Right, width) -> Some width\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'0'\"\n      | Lit_padding (Left, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'-'\"\n      | Arg_padding _ -> incompatible_flag pct_ind str_ind c \"'*'\"\n    in\n    let get_pad_opt c = opt_of_pad c (get_pad ()) in\n    let get_padprec_opt c = opt_of_pad c (get_padprec ()) in\n\n    (* Get precision as a prec_option (see \"%_f\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let get_prec_opt () = match get_prec () with\n      | No_precision       -> None\n      | Lit_precision ndec -> Some ndec\n      | Arg_precision      -> incompatible_flag pct_ind str_ind '_' \"'*'\"\n    in\n\n    let fmt_result = match symb with\n    | ',' ->\n      parse str_ind end_ind\n    | 'c' ->\n      let char_format fmt_rest = (* %c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_char, fmt_rest))\n        else Fmt_EBB (Char fmt_rest)\n      in\n      let scan_format fmt_rest = (* %0c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_scan_next_char, fmt_rest))\n        else Fmt_EBB (Scan_next_char fmt_rest)\n      in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      begin match get_pad_opt 'c' with\n        | None -> char_format fmt_rest\n        | Some 0 -> scan_format fmt_rest\n        | Some _n ->\n           if not legacy_behavior\n           then invalid_nonnull_char_width str_ind\n           else (* legacy ignores %c widths *) char_format fmt_rest\n      end\n    | 'C' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_caml_char,fmt_rest))\n      else Fmt_EBB (Caml_char fmt_rest)\n    | 's' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (String (pad', fmt_rest'))\n    | 'S' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_caml_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Caml_string (pad', fmt_rest'))\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' ->\n      let iconv = compute_int_conv pct_ind str_ind (get_plus ()) (get_hash ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_int (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int (iconv, pad', prec', fmt_rest'))\n    | 'N' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = Token_counter in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' | 'n' | 'L' when str_ind=end_ind || not (is_int_base str.[str_ind]) ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = counter_of_char symb in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int32 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int32 (iconv, pad', prec', fmt_rest'))\n    | 'n' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ())\n          (get_hash ()) (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_nativeint (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Nativeint (iconv, pad', prec', fmt_rest'))\n    | 'L' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int64 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int64 (iconv, pad', prec', fmt_rest'))\n    | 'f' | 'e' | 'E' | 'g' | 'G' | 'F' | 'h' | 'H' ->\n      let fconv =\n        compute_float_conv pct_ind str_ind\n          (get_plus ()) (get_hash ()) (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_float (get_pad_opt '_', get_prec_opt ()) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Float (fconv, pad', prec', fmt_rest'))\n    | 'b' | 'B' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_bool (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Bool (pad', fmt_rest'))\n    | 'a' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Alpha fmt_rest)\n    | 't' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Theta fmt_rest)\n    | 'r' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_reader, fmt_rest))\n      else Fmt_EBB (Reader fmt_rest)\n    | '!' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Flush fmt_rest)\n    | ('%' | '@') as c ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Char_literal (c, fmt_rest))\n    | '{' ->\n      let sub_end = search_subformat_end str_ind end_ind '}' in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_arg (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_arg (get_pad_opt '{', sub_fmtty, fmt_rest))\n    | '(' ->\n      let sub_end = search_subformat_end str_ind end_ind ')' in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_subst (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_subst (get_pad_opt '(', sub_fmtty, fmt_rest))\n    | '[' ->\n      let next_ind, char_set = parse_char_set str_ind end_ind in\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_scan_char_set (get_pad_opt '_', char_set) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_char_set (get_pad_opt '[', char_set, fmt_rest))\n    | '-' | '+' | '#' | ' ' | '_' ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         flag %C is only allowed after the '%%', before padding and precision\"\n        str pct_ind symb\n    | _ ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         invalid conversion \\\"%%%c\\\"\" str (str_ind - 1) symb\n    in\n    (* Check for unused options, and reject them as incompatible.\n\n       Such checks need to be disabled in legacy mode, as the legacy\n       parser silently ignored incompatible flags. *)\n    if not legacy_behavior then begin\n    if not !plus_used && plus then\n      incompatible_flag pct_ind str_ind symb \"'+'\";\n    if not !hash_used && hash then\n      incompatible_flag pct_ind str_ind symb \"'#'\";\n    if not !space_used && space then\n      incompatible_flag pct_ind str_ind symb \"' '\";\n    if not !pad_used  && Padding_EBB pad <> Padding_EBB No_padding then\n      incompatible_flag pct_ind str_ind symb \"`padding'\";\n    if not !prec_used && Precision_EBB prec <> Precision_EBB No_precision then\n      incompatible_flag pct_ind str_ind (if ign then '_' else symb)\n        \"`precision'\";\n    if ign && plus then incompatible_flag pct_ind str_ind '_' \"'+'\";\n    end;\n    (* this last test must not be disabled in legacy mode,\n       as ignoring it would typically result in a different typing\n       than what the legacy parser used *)\n    if not !ign_used && ign then\n      begin match symb with\n        (* argument-less formats can safely be ignored in legacy mode *)\n        | ('@' | '%' | '!' | ',') when legacy_behavior -> ()\n        | _ ->\n          incompatible_flag pct_ind str_ind symb \"'_'\"\n      end;\n    fmt_result\n\n  (* Parse formatting information (after '@'). *)\n  and parse_after_at : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    if str_ind = end_ind then Fmt_EBB (Char_literal ('@', End_of_format))\n    else\n      match str.[str_ind] with\n      | '[' ->\n        parse_tag false (str_ind + 1) end_ind\n      | ']' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_box, fmt_rest))\n      | '{' ->\n        parse_tag true (str_ind + 1) end_ind\n      | '}' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_tag, fmt_rest))\n      | ',' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@,\", 0, 0), fmt_rest))\n      | ' ' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@ \", 1, 0), fmt_rest))\n      | ';' ->\n        parse_good_break (str_ind + 1) end_ind\n      | '?' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (FFlush, fmt_rest))\n      | '\\n' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Force_newline, fmt_rest))\n      | '.' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Flush_newline, fmt_rest))\n      | '<' ->\n        parse_magic_size (str_ind + 1) end_ind\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_at, fmt_rest))\n      | '%' when str_ind + 1 < end_ind && str.[str_ind + 1] = '%' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 2) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_percent, fmt_rest))\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse str_ind end_ind in\n        Fmt_EBB (Char_literal ('@', fmt_rest))\n      | c ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Scan_indic c, fmt_rest))\n\n  (* Try to read the optional <name> after \"@{\" or \"@[\". *)\n  and parse_tag : type e f . bool -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun is_open_tag str_ind end_ind ->\n    try\n      if str_ind = end_ind then raise Not_found;\n      match str.[str_ind] with\n      | '<' ->\n        let ind = String.index_from str (str_ind + 1) '>' in\n        if ind >= end_ind then raise Not_found;\n        let sub_str = String.sub str str_ind (ind - str_ind + 1) in\n        let Fmt_EBB fmt_rest = parse (ind + 1) end_ind in\n        let Fmt_EBB sub_fmt = parse str_ind (ind + 1) in\n        let sub_format = Format (sub_fmt, sub_str) in\n        let formatting =\n          if is_open_tag then Open_tag sub_format else Open_box sub_format in\n        Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n      | _ ->\n        raise Not_found\n    with Not_found ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let sub_format = Format (End_of_format, \"\") in\n      let formatting =\n        if is_open_tag then Open_tag sub_format else Open_box sub_format in\n      Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n\n  (* Try to read the optional <width offset> after \"@;\". *)\n  and parse_good_break : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    let next_ind, formatting_lit =\n      try\n        if str_ind = end_ind || str.[str_ind] <> '<' then raise Not_found;\n        let str_ind_1 = parse_spaces (str_ind + 1) end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' -> (\n          let str_ind_2, width = parse_integer str_ind_1 end_ind in\n            let str_ind_3 = parse_spaces str_ind_2 end_ind in\n            match str.[str_ind_3] with\n              | '>' ->\n                let s = String.sub str (str_ind-2) (str_ind_3-str_ind+3) in\n                str_ind_3 + 1, Break (s, width, 0)\n              | '0' .. '9' | '-' ->\n                let str_ind_4, offset = parse_integer str_ind_3 end_ind in\n                let str_ind_5 = parse_spaces str_ind_4 end_ind in\n                if str.[str_ind_5] <> '>' then raise Not_found;\n                let s = String.sub str (str_ind-2) (str_ind_5-str_ind+3) in\n                str_ind_5 + 1, Break (s, width, offset)\n              | _ -> raise Not_found\n        )\n        | _ -> raise Not_found\n      with Not_found | Failure _ ->\n        str_ind, Break (\"@;\", 1, 0)\n    in\n    let Fmt_EBB fmt_rest = parse next_ind end_ind in\n    Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n\n  (* Parse the size in a <n>. *)\n  and parse_magic_size : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    match\n      try\n        let str_ind_1 = parse_spaces str_ind end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' ->\n          let str_ind_2, size = parse_integer str_ind_1 end_ind in\n          let str_ind_3 = parse_spaces str_ind_2 end_ind in\n          if str.[str_ind_3] <> '>' then raise Not_found;\n          let s = String.sub str (str_ind - 2) (str_ind_3 - str_ind + 3) in\n          Some (str_ind_3 + 1, Magic_size (s, size))\n        | _ -> None\n      with Not_found | Failure _ ->\n        None\n    with\n    | Some (next_ind, formatting_lit) ->\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n    | None ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Formatting_lit (Scan_indic '<', fmt_rest))\n\n  (* Parse and construct a char set. *)\n  and parse_char_set str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n\n    let char_set = create_char_set () in\n    let add_char c =\n      add_in_char_set char_set c;\n    in\n    let add_range c c' =\n      for i = int_of_char c to int_of_char c' do\n        add_in_char_set char_set (char_of_int i);\n      done;\n    in\n\n    let fail_single_percent str_ind =\n      failwith_message\n        \"invalid format %S: '%%' alone is not accepted in character sets, \\\n         use %%%% instead at position %d.\" str str_ind\n    in\n\n    (* Parse the first character of a char set. *)\n    let rec parse_char_set_start str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      let c = str.[str_ind] in\n      parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Parse the content of a char set until the first ']'. *)\n    and parse_char_set_content str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        str_ind + 1\n      | '-' ->\n        add_char '-';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c ->\n        parse_char_set_after_char (str_ind + 1) end_ind c\n\n    (* Test for range in char set. *)\n    and parse_char_set_after_char str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        str_ind + 1\n      | '-' ->\n        parse_char_set_after_minus (str_ind + 1) end_ind c\n      | ('%' | '@') as c' when c = '%' ->\n        add_char c';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c' ->\n        if c = '%' then fail_single_percent str_ind;\n        (* note that '@' alone is accepted, as done by the legacy\n           implementation; the documentation specifically requires %@\n           so we could warn on that *)\n        add_char c;\n        parse_char_set_after_char (str_ind + 1) end_ind c'\n\n    (* Manage range in char set (except if the '-' the last char before ']') *)\n    and parse_char_set_after_minus str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        add_char '-';\n        str_ind + 1\n      | '%' ->\n        if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n        begin match str.[str_ind + 1] with\n          | ('%' | '@') as c' ->\n            add_range c c';\n            parse_char_set_content (str_ind + 2) end_ind\n          | _ -> fail_single_percent str_ind\n        end\n      | c' ->\n        add_range c c';\n        parse_char_set_content (str_ind + 1) end_ind\n    in\n    let str_ind, reverse =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n        | '^' -> str_ind + 1, true\n        | _ -> str_ind, false in\n    let next_ind = parse_char_set_start str_ind end_ind in\n    let char_set = freeze_char_set char_set in\n    next_ind, (if reverse then rev_char_set char_set else char_set)\n\n  (* Consume all next spaces, raise an Failure if end_ind is reached. *)\n  and parse_spaces str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    if str.[str_ind] = ' ' then parse_spaces (str_ind + 1) end_ind else str_ind\n\n  (* Read a positive integer from the string, raise a Failure if end_ind is\n     reached. *)\n  and parse_positive str_ind end_ind acc =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' as c ->\n      let new_acc = acc * 10 + (int_of_char c - int_of_char '0') in\n      if new_acc > Sys.max_string_length then\n        failwith_message\n          \"invalid format %S: integer %d is greater than the limit %d\"\n          str new_acc Sys.max_string_length\n      else\n        parse_positive (str_ind + 1) end_ind new_acc\n    | _ -> str_ind, acc\n\n  (* Read a positive or negative integer from the string, raise a Failure\n     if end_ind is reached. *)\n  and parse_integer str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_positive str_ind end_ind 0\n    | '-' -> (\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind + 1] with\n      | '0' .. '9' ->\n        let next_ind, n = parse_positive (str_ind + 1) end_ind 0 in\n        next_ind, -n\n      | c ->\n        expected_character (str_ind + 1) \"digit\" c\n    )\n    | _ -> assert false\n\n  (* Add a literal to a format from a literal character sub-sequence. *)\n  and add_literal : type a d e f .\n      int -> int -> (a, _, _, d, e, f) fmt ->\n      (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind fmt -> match str_ind - lit_start with\n    | 0    -> Fmt_EBB fmt\n    | 1    -> Fmt_EBB (Char_literal (str.[lit_start], fmt))\n    | size -> Fmt_EBB (String_literal (String.sub str lit_start size, fmt))\n\n  (* Search the end of the current sub-format\n     (i.e. the corresponding \"%}\" or \"%)\") *)\n  and search_subformat_end str_ind end_ind c =\n    if str_ind = end_ind then\n      failwith_message\n        \"invalid format %S: unclosed sub-format, \\\n         expected \\\"%%%c\\\" at character number %d\" str c end_ind;\n    match str.[str_ind] with\n    | '%' ->\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      if str.[str_ind + 1] = c then (* End of format found *) str_ind else\n        begin match str.[str_ind + 1] with\n        | '_' ->\n          (* Search for \"%_(\" or \"%_{\". *)\n          if str_ind + 2 = end_ind then unexpected_end_of_format end_ind;\n          begin match str.[str_ind + 2] with\n          | '{' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind '}' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | '(' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind ')' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | _ -> search_subformat_end (str_ind + 3) end_ind c\n          end\n        | '{' ->\n          (* %{...%} sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind '}' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '(' ->\n          (* %(...%) sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind ')' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '}' ->\n          (* Error: %(...%}. *)\n          expected_character (str_ind + 1) \"character ')'\" '}'\n        | ')' ->\n          (* Error: %{...%). *)\n          expected_character (str_ind + 1) \"character '}'\" ')'\n        | _ ->\n          search_subformat_end (str_ind + 2) end_ind c\n        end\n    | _ -> search_subformat_end (str_ind + 1) end_ind c\n\n  (* Check if symb is a valid int conversion after \"%l\", \"%n\" or \"%L\" *)\n  and is_int_base symb = match symb with\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' -> true\n    | _ -> false\n\n  (* Convert a char (l, n or L) to its associated counter. *)\n  and counter_of_char symb = match symb with\n    | 'l' -> Line_counter  | 'n' -> Char_counter\n    | 'L' -> Token_counter | _ -> assert false\n\n  (* Convert (plus, symb) to its associated int_conv. *)\n  and compute_int_conv pct_ind str_ind plus hash space symb =\n    match plus, hash, space, symb with\n    | false, false, false, 'd' -> Int_d  | false, false, false, 'i' -> Int_i\n    | false, false,  true, 'd' -> Int_sd | false, false,  true, 'i' -> Int_si\n    |  true, false, false, 'd' -> Int_pd |  true, false, false, 'i' -> Int_pi\n    | false, false, false, 'x' -> Int_x  | false, false, false, 'X' -> Int_X\n    | false,  true, false, 'x' -> Int_Cx | false,  true, false, 'X' -> Int_CX\n    | false, false, false, 'o' -> Int_o\n    | false,  true, false, 'o' -> Int_Co\n    | false, false, false, 'u' -> Int_u\n    | false,  true, false, 'd' -> Int_Cd\n    | false,  true, false, 'i' -> Int_Ci\n    | false,  true, false, 'u' -> Int_Cu\n    | _, true, _, 'x' when legacy_behavior -> Int_Cx\n    | _, true, _, 'X' when legacy_behavior -> Int_CX\n    | _, true, _, 'o' when legacy_behavior -> Int_Co\n    | _, true, _, ('d' | 'i' | 'u') ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus false space symb\n      else incompatible_flag pct_ind str_ind symb \"'#'\"\n    | true, _, true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false, _, true, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    | true, _, false, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind false hash space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, _, false, _ -> assert false\n\n  (* Convert (plus, space, symb) to its associated float_conv. *)\n  and compute_float_conv pct_ind str_ind plus hash space symb =\n    let flag = match plus, space with\n    | false, false -> Float_flag_\n    | false,  true -> Float_flag_s\n    |  true, false -> Float_flag_p\n    |  true,  true ->\n      (* plus and space: legacy implementation prefers plus *)\n      if legacy_behavior then Float_flag_p\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\" in\n    let kind = match hash, symb with\n    | _, 'f' -> Float_f\n    | _, 'e' -> Float_e\n    | _, 'E' -> Float_E\n    | _, 'g' -> Float_g\n    | _, 'G' -> Float_G\n    | _, 'h' -> Float_h\n    | _, 'H' -> Float_H\n    | false, 'F' -> Float_F\n    | true, 'F' -> Float_CF\n    | _ -> assert false in\n    flag, kind\n\n  (* Raise [Failure] with a friendly error message about incompatible options.*)\n  and incompatible_flag : type a . int -> int -> char -> string -> a =\n    fun pct_ind str_ind symb option ->\n      let subfmt = String.sub str pct_ind (str_ind - pct_ind) in\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         %s is incompatible with '%c' in sub-format %S\"\n        str pct_ind option symb subfmt\n\n  in parse 0 (String.length str)\n\n(******************************************************************************)\n                  (* Guarded string to format conversions *)\n\n(* Convert a string to a format according to an fmtty. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_fmtty str fmtty =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt fmtty, str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\"\n      str (string_of_fmtty fmtty)\n\n(* Convert a string to a format compatible with an other format. *)\n(* Raise [Failure] with an error message in case of type mismatch. *)\nlet format_of_string_format str (Format (fmt', str')) =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt (fmtty_of_fmt fmt'), str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\" str str'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*   Xavier Leroy and Pierre Weis, projet Cristal, INRIA Rocquencourt     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\nlet kfprintf k o (Format (fmt, _)) =\n  make_printf (fun acc -> output_acc o acc; k o) End_of_acc fmt\nlet kbprintf k b (Format (fmt, _)) =\n  make_printf (fun acc -> bufput_acc b acc; k b) End_of_acc fmt\nlet ikfprintf k oc (Format (fmt, _)) =\n  make_iprintf k oc fmt\nlet ikbprintf = ikfprintf\n\nlet fprintf oc fmt = kfprintf ignore oc fmt\nlet bprintf b fmt = kbprintf ignore b fmt\nlet ifprintf oc fmt = ikfprintf ignore oc fmt\nlet ibprintf b fmt = ikbprintf ignore b fmt\nlet printf fmt = fprintf stdout fmt\nlet eprintf fmt = fprintf stderr fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let k' acc =\n    let buf = Buffer.create 64 in\n    strput_acc buf acc;\n    k (Buffer.contents buf) in\n  make_printf k' End_of_acc fmt\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kprintf = ksprintf\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*              Damien Doligez, projet Para, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype key = string\ntype doc = string\ntype usage_msg = string\ntype anon_fun = (string -> unit)\n\ntype spec =\n  | Unit of (unit -> unit)     (* Call the function with unit argument *)\n  | Bool of (bool -> unit)     (* Call the function with a bool argument *)\n  | Set of bool ref            (* Set the reference to true *)\n  | Clear of bool ref          (* Set the reference to false *)\n  | String of (string -> unit) (* Call the function with a string argument *)\n  | Set_string of string ref   (* Set the reference to the string argument *)\n  | Int of (int -> unit)       (* Call the function with an int argument *)\n  | Set_int of int ref         (* Set the reference to the int argument *)\n  | Float of (float -> unit)   (* Call the function with a float argument *)\n  | Set_float of float ref     (* Set the reference to the float argument *)\n  | Tuple of spec list         (* Take several arguments according to the\n                                  spec list *)\n  | Symbol of string list * (string -> unit)\n                               (* Take one of the symbols as argument and\n                                  call the function with the symbol. *)\n  | Rest of (string -> unit)   (* Stop interpreting keywords and call the\n                                  function with each remaining argument *)\n  | Rest_all of (string list -> unit)\n                               (* Stop interpreting keywords and call the\n                                  function with all remaining arguments. *)\n  | Expand of (string -> string array) (* If the remaining arguments to process\n                                          are of the form\n                                          [[\"-foo\"; \"arg\"] @ rest] where \"foo\"\n                                          is registered as [Expand f], then the\n                                          arguments [f \"arg\" @ rest] are\n                                          processed. Only allowed in\n                                          [parse_and_expand_argv_dynamic]. *)\n\nexception Bad of string\nexception Help of string\n\ntype error =\n  | Unknown of string\n  | Wrong of string * string * string  (* option, actual, expected *)\n  | Missing of string\n  | Message of string\n\nexception Stop of error (* used internally *)\n\nopen Printf\n\nlet rec assoc3 x l =\n  match l with\n  | [] -> raise Not_found\n  | (y1, y2, _) :: _ when y1 = x -> y2\n  | _ :: t -> assoc3 x t\n\n\nlet split s =\n  let i = String.index s '=' in\n  let len = String.length s in\n  String.sub s 0 i, String.sub s (i+1) (len-(i+1))\n\n\nlet make_symlist prefix sep suffix l =\n  match l with\n  | [] -> \"<none>\"\n  | h::t -> (List.fold_left (fun x y -> x ^ sep ^ y) (prefix ^ h) t) ^ suffix\n\n\nlet print_spec buf (key, spec, doc) =\n  if String.length doc > 0 then\n    match spec with\n    | Symbol (l, _) ->\n        bprintf buf \"  %s %s%s\\n\" key (make_symlist \"{\" \"|\" \"}\" l) doc\n    | _ ->\n        bprintf buf \"  %s %s\\n\" key doc\n\n\nlet help_action () = raise (Stop (Unknown \"-help\"))\n\nlet add_help speclist =\n  let add1 =\n    try ignore (assoc3 \"-help\" speclist); []\n    with Not_found ->\n            [\"-help\", Unit help_action, \" Display this list of options\"]\n  and add2 =\n    try ignore (assoc3 \"--help\" speclist); []\n    with Not_found ->\n            [\"--help\", Unit help_action, \" Display this list of options\"]\n  in\n  speclist @ (add1 @ add2)\n\n\nlet usage_b buf speclist errmsg =\n  bprintf buf \"%s\\n\" errmsg;\n  List.iter (print_spec buf) (add_help speclist)\n\n\nlet usage_string speclist errmsg =\n  let b = Buffer.create 200 in\n  usage_b b speclist errmsg;\n  Buffer.contents b\n\n\nlet usage speclist errmsg =\n  eprintf \"%s\" (usage_string speclist errmsg)\n\n\nlet current = ref 0\n\nlet bool_of_string_opt x =\n  try Some (bool_of_string x)\n  with Invalid_argument _ -> None\n\nlet int_of_string_opt x =\n  try Some (int_of_string x)\n  with Failure _ -> None\n\nlet float_of_string_opt x =\n  try Some (float_of_string x)\n  with Failure _ -> None\n\nlet parse_and_expand_argv_dynamic_aux allow_expand current argv speclist anonfun\n                                      errmsg =\n  let initpos = !current in\n  let convert_error error =\n    (* convert an internal error to a Bad/Help exception\n       *or* add the program name as a prefix and the usage message as a suffix\n       to an user-raised Bad exception.\n    *)\n    let b = Buffer.create 200 in\n    let progname =\n      if initpos < (Array.length !argv) then !argv.(initpos) else \"(?)\" in\n    begin match error with\n      | Unknown \"-help\" -> ()\n      | Unknown \"--help\" -> ()\n      | Unknown s ->\n          bprintf b \"%s: unknown option '%s'.\\n\" progname s\n      | Missing s ->\n          bprintf b \"%s: option '%s' needs an argument.\\n\" progname s\n      | Wrong (opt, arg, expected) ->\n          bprintf b \"%s: wrong argument '%s'; option '%s' expects %s.\\n\"\n                  progname arg opt expected\n      | Message s -> (* user error message *)\n          bprintf b \"%s: %s.\\n\" progname s\n    end;\n    usage_b b !speclist errmsg;\n    if error = Unknown \"-help\" || error = Unknown \"--help\"\n    then Help (Buffer.contents b)\n    else Bad (Buffer.contents b)\n  in\n  incr current;\n  while !current < (Array.length !argv) do\n    begin try\n      let s = !argv.(!current) in\n      if String.starts_with ~prefix:\"-\" s then begin\n        let action, follow =\n          try assoc3 s !speclist, None\n          with Not_found ->\n          try\n            let keyword, arg = split s in\n            assoc3 keyword !speclist, Some arg\n          with Not_found -> raise (Stop (Unknown s))\n        in\n        let no_arg () =\n          match follow with\n          | None -> ()\n          | Some arg -> raise (Stop (Wrong (s, arg, \"no argument\"))) in\n        let get_arg () =\n          match follow with\n          | None ->\n              if !current + 1 < (Array.length !argv) then !argv.(!current + 1)\n              else raise (Stop (Missing s))\n          | Some arg -> arg\n        in\n        let consume_arg () =\n          match follow with\n          | None -> incr current\n          | Some _ -> ()\n        in\n        let rec treat_action = function\n        | Unit f -> no_arg (); f ();\n        | Bool f ->\n            let arg = get_arg () in\n            begin match bool_of_string_opt arg with\n            | None -> raise (Stop (Wrong (s, arg, \"a boolean\")))\n            | Some s -> f s\n            end;\n            consume_arg ();\n        | Set r -> no_arg (); r := true;\n        | Clear r -> no_arg (); r := false;\n        | String f ->\n            let arg = get_arg () in\n            f arg;\n            consume_arg ();\n        | Symbol (symb, f) ->\n            let arg = get_arg () in\n            if List.mem arg symb then begin\n              f arg;\n              consume_arg ();\n            end else begin\n              raise (Stop (Wrong (s, arg, \"one of: \"\n                                          ^ (make_symlist \"\" \" \" \"\" symb))))\n            end\n        | Set_string r ->\n            r := get_arg ();\n            consume_arg ();\n        | Int f ->\n            let arg = get_arg () in\n            begin match int_of_string_opt arg with\n            | None -> raise (Stop (Wrong (s, arg, \"an integer\")))\n            | Some x -> f x\n            end;\n            consume_arg ();\n        | Set_int r ->\n            let arg = get_arg () in\n            begin match int_of_string_opt arg with\n            | None -> raise (Stop (Wrong (s, arg, \"an integer\")))\n            | Some x -> r := x\n            end;\n            consume_arg ();\n        | Float f ->\n            let arg = get_arg () in\n            begin match float_of_string_opt arg with\n            | None -> raise (Stop (Wrong (s, arg, \"a float\")))\n            | Some x -> f x\n            end;\n            consume_arg ();\n        | Set_float r ->\n            let arg = get_arg () in\n            begin match float_of_string_opt arg with\n            | None -> raise (Stop (Wrong (s, arg, \"a float\")))\n            | Some x -> r := x\n            end;\n            consume_arg ();\n        | Tuple specs ->\n            no_arg ();\n            List.iter treat_action specs;\n        | Rest f ->\n            no_arg ();\n            while !current < (Array.length !argv) - 1 do\n              f !argv.(!current + 1);\n              consume_arg ();\n            done;\n        | Rest_all f ->\n            no_arg ();\n            let acc = ref [] in\n            while !current < Array.length !argv - 1 do\n              acc := !argv.(!current + 1) :: !acc;\n              consume_arg ();\n            done;\n            f (List.rev !acc)\n        | Expand f ->\n            if not allow_expand then\n              raise (Invalid_argument \"Arg.Expand is is only allowed with \\\n                                       Arg.parse_and_expand_argv_dynamic\");\n            let arg = get_arg () in\n            let newarg = f arg in\n            consume_arg ();\n            let before = Array.sub !argv 0 (!current + 1)\n            and after =\n              Array.sub !argv (!current + 1)\n                        ((Array.length !argv) - !current - 1) in\n            argv:= Array.concat [before;newarg;after];\n        in\n        treat_action action end\n      else anonfun s\n    with | Bad m -> raise (convert_error (Message m));\n         | Stop e -> raise (convert_error e);\n    end;\n    incr current\n  done\n\nlet parse_and_expand_argv_dynamic current argv speclist anonfun errmsg =\n  parse_and_expand_argv_dynamic_aux true current argv speclist anonfun errmsg\n\nlet parse_argv_dynamic ?(current=current) argv speclist anonfun errmsg =\n  parse_and_expand_argv_dynamic_aux false current (ref argv) speclist anonfun\n    errmsg\n\n\nlet parse_argv ?(current=current) argv speclist anonfun errmsg =\n  parse_argv_dynamic ~current:current argv (ref speclist) anonfun errmsg\n\n\nlet parse l f msg =\n  try\n    parse_argv Sys.argv l f msg\n  with\n  | Bad msg -> eprintf \"%s\" msg; exit 2\n  | Help msg -> printf \"%s\" msg; exit 0\n\n\nlet parse_dynamic l f msg =\n  try\n    parse_argv_dynamic Sys.argv l f msg\n  with\n  | Bad msg -> eprintf \"%s\" msg; exit 2\n  | Help msg -> printf \"%s\" msg; exit 0\n\nlet parse_expand l f msg =\n  try\n    let argv = ref Sys.argv in\n    let spec = ref l in\n    let current = ref (!current) in\n    parse_and_expand_argv_dynamic current argv spec f msg\n  with\n  | Bad msg -> eprintf \"%s\" msg; exit 2\n  | Help msg -> printf \"%s\" msg; exit 0\n\n\nlet second_word s =\n  let len = String.length s in\n  let rec loop n =\n    if n >= len then len\n    else if s.[n] = ' ' then loop (n+1)\n    else n\n  in\n  match String.index s '\\t' with\n  | n -> loop (n+1)\n  | exception Not_found ->\n      begin match String.index s ' ' with\n      | n -> loop (n+1)\n      | exception Not_found -> len\n      end\n\n\nlet max_arg_len cur (kwd, spec, doc) =\n  match spec with\n  | Symbol _ -> Int.max cur (String.length kwd)\n  | _ -> Int.max cur (String.length kwd + second_word doc)\n\n\nlet replace_leading_tab s =\n  let seen = ref false in\n  String.map (function '\\t' when not !seen -> seen := true; ' ' | c -> c) s\n\nlet add_padding len ksd =\n  match ksd with\n  | (_, _, \"\") ->\n      (* Do not pad undocumented options, so that they still don't show up when\n       * run through [usage] or [parse]. *)\n      ksd\n  | (kwd, (Symbol _ as spec), msg) ->\n      let cutcol = second_word msg in\n      let spaces = String.make ((Int.max 0 (len - cutcol)) + 3) ' ' in\n      (kwd, spec, \"\\n\" ^ spaces ^ replace_leading_tab msg)\n  | (kwd, spec, msg) ->\n      let cutcol = second_word msg in\n      let kwd_len = String.length kwd in\n      let diff = len - kwd_len - cutcol in\n      if diff <= 0 then\n        (kwd, spec, replace_leading_tab msg)\n      else\n        let spaces = String.make diff ' ' in\n        let prefix = String.sub (replace_leading_tab msg) 0 cutcol in\n        let suffix = String.sub msg cutcol (String.length msg - cutcol) in\n        (kwd, spec, prefix ^ spaces ^ suffix)\n\n\nlet align ?(limit=max_int) speclist =\n  let completed = add_help speclist in\n  let len = List.fold_left max_arg_len 0 completed in\n  let len = Int.min len limit in\n  List.map (add_padding len) completed\n\nlet trim_cr s =\n  let len = String.length s in\n  if len > 0 && String.get s (len - 1) = '\\r' then\n    String.sub s 0 (len - 1)\n  else\n    s\n\nlet read_aux trim sep file =\n  let ic = open_in_bin file in\n  let buf = Buffer.create 200 in\n  let words = ref [] in\n  let stash () =\n    let word = Buffer.contents buf in\n    let word = if trim then trim_cr word else word in\n    words := word :: !words;\n    Buffer.clear buf\n  in\n  begin\n    try while true do\n        let c = input_char ic in\n        if c = sep then stash () else Buffer.add_char buf c\n      done\n    with End_of_file -> ()\n  end;\n  if Buffer.length buf > 0 then stash ();\n  close_in ic;\n  Array.of_list (List.rev !words)\n\nlet read_arg = read_aux true '\\n'\n\nlet read_arg0 = read_aux false '\\x00'\n\nlet write_aux sep file args =\n  let oc = open_out_bin file in\n  Array.iter (fun s -> fprintf oc \"%s%c\" s sep) args;\n  close_out oc\n\nlet write_arg = write_aux '\\n'\n\nlet write_arg0 = write_aux '\\x00'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen Printf\n\ntype t = exn = ..\n\nlet printers = Atomic.make []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\"\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | _ -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n\nlet use_printers x =\n  let rec conv = function\n    | hd :: tl ->\n        (match hd x with\n         | None | exception _ -> conv tl\n         | Some s -> Some s)\n    | [] -> None in\n  conv (Atomic.get printers)\n\nlet destruct_ext_constructor x =\n  if Obj.tag x <> 0 then\n    ((Obj.magic (Obj.field x 0) : string), None)\n  else\n    let constructor =\n      (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n    (constructor, Some (fields x))\n\nlet string_of_extension_constructor t =\n  let constructor, fields_opt = destruct_ext_constructor t in\n  match fields_opt with\n  | None -> constructor\n  | Some f -> constructor ^ f\n\nlet to_string_default = function\n  | Out_of_memory -> \"Out of memory\"\n  | Stack_overflow -> \"Stack overflow\"\n  | Match_failure(file, line, char) ->\n      sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n  | Assert_failure(file, line, char) ->\n      sprintf locfmt file line char (char+6) \"Assertion failed\"\n  | Undefined_recursive_module(file, line, char) ->\n      sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n  | x ->\n      string_of_extension_constructor (Obj.repr x)\n\nlet to_string e =\n  match use_printers e with\n  | Some s -> s\n  | None -> to_string_default e\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace_entry = private int\ntype raw_backtrace = raw_backtrace_entry array\n\nlet raw_backtrace_entries bt = bt\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\nexternal raise_with_backtrace: exn -> raw_backtrace -> 'a\n  = \"%raise_with_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of {\n      is_raise    : bool;\n      filename    : string;\n      line_number : int;\n      start_char  : int;\n      end_char    : int;\n      is_inline   : bool;\n      defname     : string;\n    }\n  | Unknown_location of {\n      is_raise : bool\n    }\n\n(* to avoid warning *)\nlet _ = [Known_location { is_raise = false; filename = \"\";\n                          line_number = 0; start_char = 0; end_char = 0;\n                          is_inline = false; defname = \"\" };\n         Unknown_location { is_raise = false }]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nexternal convert_raw_backtrace:\n  raw_backtrace -> backtrace_slot array = \"caml_convert_raw_backtrace\"\n\nlet convert_raw_backtrace bt =\n  try Some (convert_raw_backtrace bt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location l ->\n      if l.is_raise then\n        (* compiler-inserted re-raise, skipped *) None\n      else\n        Some (sprintf \"%s unknown location\" (info false))\n  | Known_location l ->\n      Some (sprintf \"%s %s in file \\\"%s\\\"%s, line %d, characters %d-%d\"\n              (info l.is_raise) l.defname l.filename\n              (if l.is_inline then \" (inlined)\" else \"\")\n              l.line_number l.start_char l.end_char)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location l -> l.is_raise\n  | Unknown_location l -> l.is_raise\n\nlet backtrace_slot_is_inline = function\n  | Known_location l -> l.is_inline\n  | Unknown_location _ -> false\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location l ->\n    Some {\n      filename    = l.filename;\n      line_number = l.line_number;\n      start_char  = l.start_char;\n      end_char    = l.end_char;\n    }\n\nlet backtrace_slot_defname = function\n  | Unknown_location _\n  | Known_location { defname = \"\" } -> None\n  | Known_location l -> Some l.defname\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nlet backtrace_slots_of_raw_entry entry =\n  backtrace_slots [| entry |]\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let is_inline = backtrace_slot_is_inline\n  let location = backtrace_slot_location\n  let name = backtrace_slot_defname\nend\n\nlet raw_backtrace_length bt = Array.length bt\n\nexternal get_raw_backtrace_slot :\n  raw_backtrace -> int -> raw_backtrace_slot = \"caml_raw_backtrace_slot\"\n\nexternal get_raw_backtrace_next_slot :\n  raw_backtrace_slot -> raw_backtrace_slot option\n  = \"caml_raw_backtrace_next_slot\"\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () = raw_backtrace_to_string (get_raw_backtrace ())\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet rec register_printer fn =\n  let old_printers = Atomic.get printers in\n  let new_printers = fn :: old_printers in\n  let success = Atomic.compare_and_set printers old_printers new_printers in\n  if not success then register_printer fn\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\nexternal get_debug_info_status : unit -> int = \"caml_ml_debug_info_status\"\n\n(* Descriptions for errors in startup.h. See also backtrace.c *)\nlet errors = [| \"\";\n  (* FILE_NOT_FOUND *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file not found)\";\n  (* BAD_BYTECODE *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file appears to be corrupt)\";\n  (* WRONG_MAGIC *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file has wrong magic number)\";\n  (* NO_FDS *)\n  \"(Cannot print locations:\\n \\\n      bytecode executable program file cannot be opened;\\n \\\n      -- too many open files. Try running with OCAMLRUNPARAM=b=2)\"\n|]\n\nlet default_uncaught_exception_handler exn raw_backtrace =\n  eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n  print_raw_backtrace stderr raw_backtrace;\n  let status = get_debug_info_status () in\n  if status < 0 then\n    prerr_endline errors.(abs status);\n  flush stderr\n\nlet uncaught_exception_handler = ref default_uncaught_exception_handler\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := fn\n\nlet empty_backtrace : raw_backtrace = [| |]\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [runtime/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Stdlib.do_at_exit () with _ -> ());\n    try\n      !uncaught_exception_handler exn raw_backtrace\n    with exn' ->\n      let raw_backtrace' = try_get_raw_backtrace () in\n      eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n      print_raw_backtrace stderr raw_backtrace;\n      eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n        (to_string exn');\n      print_raw_backtrace stderr raw_backtrace';\n      flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [runtime/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                         The OCaml programmers                          *)\n(*                                                                        *)\n(*   Copyright 2018 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nexternal id : 'a -> 'a = \"%identity\"\nlet const c _ = c\nlet flip f x y = f y x\nlet negate p v = not (p v)\n\nexception Finally_raised of exn\n\nlet () = Printexc.register_printer @@ function\n| Finally_raised exn -> Some (\"Fun.Finally_raised: \" ^ Printexc.to_string exn)\n| _ -> None\n\nlet protect ~(finally : unit -> unit) work =\n  let finally_no_exn () =\n    try finally () with e ->\n      let bt = Printexc.get_raw_backtrace () in\n      Printexc.raise_with_backtrace (Finally_raised e) bt\n  in\n  match work () with\n  | result -> finally_no_exn () ; result\n  | exception work_exn ->\n      let work_bt = Printexc.get_raw_backtrace () in\n      finally_no_exn () ;\n      Printexc.raise_with_backtrace work_exn work_bt\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*            Damien Doligez, projet Para, INRIA Rocquencourt             *)\n(*            Jacques-Henri Jourdan, projet Gallium, INRIA Paris          *)\n(*                                                                        *)\n(*   Copyright 1996-2016 Institut National de Recherche en Informatique   *)\n(*     et en Automatique.                                                 *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype stat = {\n  minor_words : float;\n  promoted_words : float;\n  major_words : float;\n  minor_collections : int;\n  major_collections : int;\n  heap_words : int;\n  heap_chunks : int;\n  live_words : int;\n  live_blocks : int;\n  free_words : int;\n  free_blocks : int;\n  largest_free : int;\n  fragments : int;\n  compactions : int;\n  top_heap_words : int;\n  stack_size : int;\n  forced_major_collections: int;\n}\n\ntype control = {\n  minor_heap_size : int;\n  major_heap_increment : int;\n  space_overhead : int;\n  verbose : int;\n  max_overhead : int;\n  stack_limit : int;\n  allocation_policy : int;\n  window_size : int;\n  custom_major_ratio : int;\n  custom_minor_ratio : int;\n  custom_minor_max_size : int;\n}\n\nexternal stat : unit -> stat = \"caml_gc_stat\"\nexternal quick_stat : unit -> stat = \"caml_gc_quick_stat\"\nexternal counters : unit -> (float * float * float) = \"caml_gc_counters\"\nexternal minor_words : unit -> (float [@unboxed])\n  = \"caml_gc_minor_words\" \"caml_gc_minor_words_unboxed\"\nexternal get : unit -> control = \"caml_gc_get\"\nexternal set : control -> unit = \"caml_gc_set\"\nexternal minor : unit -> unit = \"caml_gc_minor\"\nexternal major_slice : int -> int = \"caml_gc_major_slice\"\nexternal major : unit -> unit = \"caml_gc_major\"\nexternal full_major : unit -> unit = \"caml_gc_full_major\"\nexternal compact : unit -> unit = \"caml_gc_compaction\"\nexternal get_minor_free : unit -> int = \"caml_get_minor_free\"\n\nlet eventlog_pause () = ()\nlet eventlog_resume () = ()\n\nopen Printf\n\nlet print_stat c =\n  let st = stat () in\n  fprintf c \"minor_collections:      %d\\n\" st.minor_collections;\n  fprintf c \"major_collections:      %d\\n\" st.major_collections;\n  fprintf c \"compactions:            %d\\n\" st.compactions;\n  fprintf c \"forced_major_collections: %d\\n\" st.forced_major_collections;\n  fprintf c \"\\n\";\n  let l1 = String.length (sprintf \"%.0f\" st.minor_words) in\n  fprintf c \"minor_words:    %*.0f\\n\" l1 st.minor_words;\n  fprintf c \"promoted_words: %*.0f\\n\" l1 st.promoted_words;\n  fprintf c \"major_words:    %*.0f\\n\" l1 st.major_words;\n  fprintf c \"\\n\";\n  let l2 = String.length (sprintf \"%d\" st.top_heap_words) in\n  fprintf c \"top_heap_words: %*d\\n\" l2 st.top_heap_words;\n  fprintf c \"heap_words:     %*d\\n\" l2 st.heap_words;\n  fprintf c \"live_words:     %*d\\n\" l2 st.live_words;\n  fprintf c \"free_words:     %*d\\n\" l2 st.free_words;\n  fprintf c \"largest_free:   %*d\\n\" l2 st.largest_free;\n  fprintf c \"fragments:      %*d\\n\" l2 st.fragments;\n  fprintf c \"\\n\";\n  fprintf c \"live_blocks: %d\\n\" st.live_blocks;\n  fprintf c \"free_blocks: %d\\n\" st.free_blocks;\n  fprintf c \"heap_chunks: %d\\n\" st.heap_chunks\n\n\nlet allocated_bytes () =\n  let (mi, pro, ma) = counters () in\n  (mi +. ma -. pro) *. float_of_int (Sys.word_size / 8)\n\n\nexternal finalise : ('a -> unit) -> 'a -> unit = \"caml_final_register\"\nexternal finalise_last : (unit -> unit) -> 'a -> unit =\n  \"caml_final_register_called_without_value\"\nexternal finalise_release : unit -> unit = \"caml_final_release\"\n\n\ntype alarm = bool Atomic.t\ntype alarm_rec = {active : alarm; f : unit -> unit}\n\nlet rec call_alarm arec =\n  if Atomic.get arec.active then begin\n    let finally () = finalise call_alarm arec in\n    Fun.protect ~finally arec.f\n  end\n\n\nlet create_alarm f =\n  let arec = { active = Atomic.make true; f = f } in\n  finalise call_alarm arec;\n  arec.active\n\n\nlet delete_alarm a = Atomic.set a false\n\nmodule Memprof =\n  struct\n    type allocation_source = Normal | Marshal | Custom\n    type allocation =\n      { n_samples : int;\n        size : int;\n        source : allocation_source;\n        callstack : Printexc.raw_backtrace }\n\n    type ('minor, 'major) tracker = {\n      alloc_minor: allocation -> 'minor option;\n      alloc_major: allocation -> 'major option;\n      promote: 'minor -> 'major option;\n      dealloc_minor: 'minor -> unit;\n      dealloc_major: 'major -> unit;\n    }\n\n    let null_tracker = {\n      alloc_minor = (fun _ -> None);\n      alloc_major = (fun _ -> None);\n      promote = (fun _ -> None);\n      dealloc_minor = (fun _ -> ());\n      dealloc_major = (fun _ -> ());\n    }\n\n    external c_start :\n      float -> int -> ('minor, 'major) tracker -> unit\n      = \"caml_memprof_start\"\n\n    let start\n      ~sampling_rate\n      ?(callstack_size = max_int)\n      tracker =\n      c_start sampling_rate callstack_size tracker\n\n    external stop : unit -> unit = \"caml_memprof_stop\"\n  end\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Message digest (MD5) *)\n\ntype t = string\n\nlet compare = String.compare\nlet equal = String.equal\n\nexternal unsafe_string: string -> int -> int -> t = \"caml_md5_string\"\nexternal channel: in_channel -> int -> t = \"caml_md5_chan\"\n\nlet string str =\n  unsafe_string str 0 (String.length str)\n\nlet bytes b = string (Bytes.unsafe_to_string b)\n\nlet substring str ofs len =\n  if ofs < 0 || len < 0 || ofs > String.length str - len\n  then invalid_arg \"Digest.substring\"\n  else unsafe_string str ofs len\n\nlet subbytes b ofs len = substring (Bytes.unsafe_to_string b) ofs len\n\nlet file filename =\n  let ic = open_in_bin filename in\n  match channel ic (-1) with\n    | d -> close_in ic; d\n    | exception e -> close_in ic; raise e\n\nlet output chan digest =\n  output_string chan digest\n\nlet input chan = really_input_string chan 16\n\nlet char_hex n =\n  Char.unsafe_chr (n + if n < 10 then Char.code '0' else (Char.code 'a' - 10))\n\nlet to_hex d =\n  if String.length d <> 16 then invalid_arg \"Digest.to_hex\";\n  let result = Bytes.create 32 in\n  for i = 0 to 15 do\n    let x = Char.code d.[i] in\n    Bytes.unsafe_set result (i*2) (char_hex (x lsr 4));\n    Bytes.unsafe_set result (i*2+1) (char_hex (x land 0x0f));\n  done;\n  Bytes.unsafe_to_string result\n\nlet from_hex s =\n  if String.length s <> 32 then invalid_arg \"Digest.from_hex\";\n  let digit c =\n    match c with\n    | '0'..'9' -> Char.code c - Char.code '0'\n    | 'A'..'F' -> Char.code c - Char.code 'A' + 10\n    | 'a'..'f' -> Char.code c - Char.code 'a' + 10\n    | _ -> raise (Invalid_argument \"Digest.from_hex\")\n  in\n  let byte i = digit s.[i] lsl 4 + digit s.[i+1] in\n  let result = Bytes.create 16 in\n  for i = 0 to 15 do\n    Bytes.set result i (Char.chr (byte (2 * i)));\n  done;\n  Bytes.unsafe_to_string result\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Manuel Serrano et Xavier Leroy, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2000 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Module [Bigarray]: large, multi-dimensional, numerical arrays *)\n\n(* These types in must be kept in sync with the tables in\n   ../typing/typeopt.ml *)\n\ntype float32_elt = Float32_elt\ntype float64_elt = Float64_elt\ntype int8_signed_elt = Int8_signed_elt\ntype int8_unsigned_elt = Int8_unsigned_elt\ntype int16_signed_elt = Int16_signed_elt\ntype int16_unsigned_elt = Int16_unsigned_elt\ntype int32_elt = Int32_elt\ntype int64_elt = Int64_elt\ntype int_elt = Int_elt\ntype nativeint_elt = Nativeint_elt\ntype complex32_elt = Complex32_elt\ntype complex64_elt = Complex64_elt\n\ntype ('a, 'b) kind =\n    Float32 : (float, float32_elt) kind\n  | Float64 : (float, float64_elt) kind\n  | Int8_signed : (int, int8_signed_elt) kind\n  | Int8_unsigned : (int, int8_unsigned_elt) kind\n  | Int16_signed : (int, int16_signed_elt) kind\n  | Int16_unsigned : (int, int16_unsigned_elt) kind\n  | Int32 : (int32, int32_elt) kind\n  | Int64 : (int64, int64_elt) kind\n  | Int : (int, int_elt) kind\n  | Nativeint : (nativeint, nativeint_elt) kind\n  | Complex32 : (Complex.t, complex32_elt) kind\n  | Complex64 : (Complex.t, complex64_elt) kind\n  | Char : (char, int8_unsigned_elt) kind\n\ntype c_layout = C_layout_typ\ntype fortran_layout = Fortran_layout_typ (**)\n\ntype 'a layout =\n    C_layout: c_layout layout\n  | Fortran_layout: fortran_layout layout\n\n(* Keep those constants in sync with the caml_ba_kind enumeration\n   in bigarray.h *)\n\nlet float32 = Float32\nlet float64 = Float64\nlet int8_signed = Int8_signed\nlet int8_unsigned = Int8_unsigned\nlet int16_signed = Int16_signed\nlet int16_unsigned = Int16_unsigned\nlet int32 = Int32\nlet int64 = Int64\nlet int = Int\nlet nativeint = Nativeint\nlet complex32 = Complex32\nlet complex64 = Complex64\nlet char = Char\n\nlet kind_size_in_bytes : type a b. (a, b) kind -> int = function\n  | Float32 -> 4\n  | Float64 -> 8\n  | Int8_signed -> 1\n  | Int8_unsigned -> 1\n  | Int16_signed -> 2\n  | Int16_unsigned -> 2\n  | Int32 -> 4\n  | Int64 -> 8\n  | Int -> Sys.word_size / 8\n  | Nativeint -> Sys.word_size / 8\n  | Complex32 -> 8\n  | Complex64 -> 16\n  | Char -> 1\n\n(* Keep those constants in sync with the caml_ba_layout enumeration\n   in bigarray.h *)\n\nlet c_layout = C_layout\nlet fortran_layout = Fortran_layout\n\nmodule Genarray = struct\n  type (!'a, !'b, !'c) t\n  external create: ('a, 'b) kind -> 'c layout -> int array -> ('a, 'b, 'c) t\n     = \"caml_ba_create\"\n  external get: ('a, 'b, 'c) t -> int array -> 'a\n     = \"caml_ba_get_generic\"\n  external set: ('a, 'b, 'c) t -> int array -> 'a -> unit\n     = \"caml_ba_set_generic\"\n\n  let rec cloop arr idx f col max =\n    if col = Array.length idx then set arr idx (f idx)\n    else for j = 0 to pred max.(col) do\n           idx.(col) <- j;\n           cloop arr idx f (succ col) max\n         done\n  let rec floop arr idx f col max =\n    if col < 0 then set arr idx (f idx)\n    else for j = 1 to max.(col) do\n           idx.(col) <- j;\n           floop arr idx f (pred col) max\n         done\n  let init (type t) kind (layout : t layout) dims f =\n    let arr = create kind layout dims in\n    let dlen = Array.length dims in\n    match layout with\n    | C_layout -> cloop arr (Array.make dlen 0) f 0 dims; arr\n    | Fortran_layout -> floop arr (Array.make dlen 1) f (pred dlen) dims; arr\n\n  external num_dims: ('a, 'b, 'c) t -> int = \"caml_ba_num_dims\"\n  external nth_dim: ('a, 'b, 'c) t -> int -> int = \"caml_ba_dim\"\n  let dims a =\n    let n = num_dims a in\n    let d = Array.make n 0 in\n    for i = 0 to n-1 do d.(i) <- nth_dim a i done;\n    d\n\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n     = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (Array.fold_left ( * ) 1 (dims arr))\n\n  external sub_left: ('a, 'b, c_layout) t -> int -> int -> ('a, 'b, c_layout) t\n     = \"caml_ba_sub\"\n  external sub_right: ('a, 'b, fortran_layout) t -> int -> int ->\n                          ('a, 'b, fortran_layout) t\n     = \"caml_ba_sub\"\n  external slice_left: ('a, 'b, c_layout) t -> int array ->\n                          ('a, 'b, c_layout) t\n     = \"caml_ba_slice\"\n  external slice_right: ('a, 'b, fortran_layout) t -> int array ->\n                          ('a, 'b, fortran_layout) t\n     = \"caml_ba_slice\"\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit\n     = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\nend\n\nmodule Array0 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout =\n    Genarray.create kind layout [||]\n  let get arr = Genarray.get arr [||]\n  let set arr = Genarray.set arr [||]\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr = kind_size_in_bytes (kind arr)\n\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n\n  let of_value kind layout v =\n    let a = create kind layout in\n    set a v;\n    a\n  let init = of_value\nend\n\nmodule Array1 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout dim =\n    Genarray.create kind layout [|dim|]\n  external get: ('a, 'b, 'c) t -> int -> 'a = \"%caml_ba_ref_1\"\n  external set: ('a, 'b, 'c) t -> int -> 'a -> unit = \"%caml_ba_set_1\"\n  external unsafe_get: ('a, 'b, 'c) t -> int -> 'a = \"%caml_ba_unsafe_ref_1\"\n  external unsafe_set: ('a, 'b, 'c) t -> int -> 'a -> unit\n     = \"%caml_ba_unsafe_set_1\"\n  external dim: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_1\"\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (dim arr)\n\n  external sub: ('a, 'b, 'c) t -> int -> int -> ('a, 'b, 'c) t = \"caml_ba_sub\"\n  let slice (type t) (a : (_, _, t) Genarray.t) n =\n    match layout a with\n    | C_layout -> (Genarray.slice_left a [|n|] : (_, _, t) Genarray.t)\n    | Fortran_layout -> (Genarray.slice_right a [|n|]: (_, _, t) Genarray.t)\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n  let c_init arr dim f =\n    for i = 0 to pred dim do unsafe_set arr i (f i) done\n  let fortran_init arr dim f =\n    for i = 1 to dim do unsafe_set arr i (f i) done\n  let init (type t) kind (layout : t layout) dim f =\n    let arr = create kind layout dim in\n    match layout with\n    | C_layout -> c_init arr dim f; arr\n    | Fortran_layout -> fortran_init arr dim f; arr\n  let of_array (type t) kind (layout: t layout) data =\n    let ba = create kind layout (Array.length data) in\n    let ofs =\n      match layout with\n        C_layout -> 0\n      | Fortran_layout -> 1\n    in\n    for i = 0 to Array.length data - 1 do unsafe_set ba (i + ofs) data.(i) done;\n    ba\nend\n\nmodule Array2 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout dim1 dim2 =\n    Genarray.create kind layout [|dim1; dim2|]\n  external get: ('a, 'b, 'c) t -> int -> int -> 'a = \"%caml_ba_ref_2\"\n  external set: ('a, 'b, 'c) t -> int -> int -> 'a -> unit = \"%caml_ba_set_2\"\n  external unsafe_get: ('a, 'b, 'c) t -> int -> int -> 'a\n     = \"%caml_ba_unsafe_ref_2\"\n  external unsafe_set: ('a, 'b, 'c) t -> int -> int -> 'a -> unit\n     = \"%caml_ba_unsafe_set_2\"\n  external dim1: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_1\"\n  external dim2: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_2\"\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (dim1 arr) * (dim2 arr)\n\n  external sub_left: ('a, 'b, c_layout) t -> int -> int -> ('a, 'b, c_layout) t\n     = \"caml_ba_sub\"\n  external sub_right:\n    ('a, 'b, fortran_layout) t -> int -> int -> ('a, 'b, fortran_layout) t\n     = \"caml_ba_sub\"\n  let slice_left a n = Genarray.slice_left a [|n|]\n  let slice_right a n = Genarray.slice_right a [|n|]\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n  let c_init arr dim1 dim2 f =\n    for i = 0 to pred dim1 do\n      for j = 0 to pred dim2 do\n        unsafe_set arr i j (f i j)\n      done\n    done\n  let fortran_init arr dim1 dim2 f =\n    for j = 1 to dim2 do\n      for i = 1 to dim1 do\n        unsafe_set arr i j (f i j)\n      done\n    done\n  let init (type t) kind (layout : t layout) dim1 dim2 f =\n    let arr = create kind layout dim1 dim2 in\n    match layout with\n    | C_layout -> c_init arr dim1 dim2 f; arr\n    | Fortran_layout -> fortran_init arr dim1 dim2 f; arr\n  let of_array (type t) kind (layout: t layout) data =\n    let dim1 = Array.length data in\n    let dim2 = if dim1 = 0 then 0 else Array.length data.(0) in\n    let ba = create kind layout dim1 dim2 in\n    let ofs =\n      match layout with\n        C_layout -> 0\n      | Fortran_layout -> 1\n    in\n    for i = 0 to dim1 - 1 do\n      let row = data.(i) in\n      if Array.length row <> dim2 then\n        invalid_arg(\"Bigarray.Array2.of_array: non-rectangular data\");\n      for j = 0 to dim2 - 1 do\n        unsafe_set ba (i + ofs) (j + ofs) row.(j)\n      done\n    done;\n    ba\nend\n\nmodule Array3 = struct\n  type (!'a, !'b, !'c) t = ('a, 'b, 'c) Genarray.t\n  let create kind layout dim1 dim2 dim3 =\n    Genarray.create kind layout [|dim1; dim2; dim3|]\n  external get: ('a, 'b, 'c) t -> int -> int -> int -> 'a = \"%caml_ba_ref_3\"\n  external set: ('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit\n     = \"%caml_ba_set_3\"\n  external unsafe_get: ('a, 'b, 'c) t -> int -> int -> int -> 'a\n     = \"%caml_ba_unsafe_ref_3\"\n  external unsafe_set: ('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit\n     = \"%caml_ba_unsafe_set_3\"\n  external dim1: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_1\"\n  external dim2: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_2\"\n  external dim3: ('a, 'b, 'c) t -> int = \"%caml_ba_dim_3\"\n  external kind: ('a, 'b, 'c) t -> ('a, 'b) kind = \"caml_ba_kind\"\n  external layout: ('a, 'b, 'c) t -> 'c layout = \"caml_ba_layout\"\n\n  external change_layout: ('a, 'b, 'c) t -> 'd layout -> ('a, 'b, 'd) t\n    = \"caml_ba_change_layout\"\n\n  let size_in_bytes arr =\n    (kind_size_in_bytes (kind arr)) * (dim1 arr) * (dim2 arr) * (dim3 arr)\n\n  external sub_left: ('a, 'b, c_layout) t -> int -> int -> ('a, 'b, c_layout) t\n     = \"caml_ba_sub\"\n  external sub_right:\n     ('a, 'b, fortran_layout) t -> int -> int -> ('a, 'b, fortran_layout) t\n     = \"caml_ba_sub\"\n  let slice_left_1 a n m = Genarray.slice_left a [|n; m|]\n  let slice_right_1 a n m = Genarray.slice_right a [|n; m|]\n  let slice_left_2 a n = Genarray.slice_left a [|n|]\n  let slice_right_2 a n = Genarray.slice_right a [|n|]\n  external blit: ('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit = \"caml_ba_blit\"\n  external fill: ('a, 'b, 'c) t -> 'a -> unit = \"caml_ba_fill\"\n  let c_init arr dim1 dim2 dim3 f =\n    for i = 0 to pred dim1 do\n      for j = 0 to pred dim2 do\n        for k = 0 to pred dim3 do\n          unsafe_set arr i j k (f i j k)\n        done\n      done\n    done\n  let fortran_init arr dim1 dim2 dim3 f =\n    for k = 1 to dim3 do\n      for j = 1 to dim2 do\n        for i = 1 to dim1 do\n          unsafe_set arr i j k (f i j k)\n        done\n      done\n    done\n  let init (type t) kind (layout : t layout) dim1 dim2 dim3 f =\n    let arr = create kind layout dim1 dim2 dim3 in\n    match layout with\n    | C_layout -> c_init arr dim1 dim2 dim3 f; arr\n    | Fortran_layout -> fortran_init arr dim1 dim2 dim3 f; arr\n  let of_array (type t) kind (layout: t layout) data =\n    let dim1 = Array.length data in\n    let dim2 = if dim1 = 0 then 0 else Array.length data.(0) in\n    let dim3 = if dim2 = 0 then 0 else Array.length data.(0).(0) in\n    let ba = create kind layout dim1 dim2 dim3 in\n    let ofs =\n      match layout with\n        C_layout -> 0\n      | Fortran_layout -> 1\n    in\n    for i = 0 to dim1 - 1 do\n      let row = data.(i) in\n      if Array.length row <> dim2 then\n        invalid_arg(\"Bigarray.Array3.of_array: non-cubic data\");\n      for j = 0 to dim2 - 1 do\n        let col = row.(j) in\n        if Array.length col <> dim3 then\n          invalid_arg(\"Bigarray.Array3.of_array: non-cubic data\");\n        for k = 0 to dim3 - 1 do\n          unsafe_set ba (i + ofs) (j + ofs) (k + ofs) col.(k)\n        done\n      done\n    done;\n    ba\nend\n\nexternal genarray_of_array0: ('a, 'b, 'c) Array0.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nexternal genarray_of_array1: ('a, 'b, 'c) Array1.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nexternal genarray_of_array2: ('a, 'b, 'c) Array2.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nexternal genarray_of_array3: ('a, 'b, 'c) Array3.t -> ('a, 'b, 'c) Genarray.t\n   = \"%identity\"\nlet array0_of_genarray a =\n  if Genarray.num_dims a = 0 then a\n  else invalid_arg \"Bigarray.array0_of_genarray\"\nlet array1_of_genarray a =\n  if Genarray.num_dims a = 1 then a\n  else invalid_arg \"Bigarray.array1_of_genarray\"\nlet array2_of_genarray a =\n  if Genarray.num_dims a = 2 then a\n  else invalid_arg \"Bigarray.array2_of_genarray\"\nlet array3_of_genarray a =\n  if Genarray.num_dims a = 3 then a\n  else invalid_arg \"Bigarray.array3_of_genarray\"\n\nexternal reshape:\n   ('a, 'b, 'c) Genarray.t -> int array -> ('a, 'b, 'c) Genarray.t\n   = \"caml_ba_reshape\"\nlet reshape_0 a = reshape a [||]\nlet reshape_1 a dim1 = reshape a [|dim1|]\nlet reshape_2 a dim1 dim2 = reshape a [|dim1;dim2|]\nlet reshape_3 a dim1 dim2 dim3 = reshape a [|dim1;dim2;dim3|]\n\n(* Force caml_ba_get_{1,2,3,N} to be linked in, since we don't refer\n   to those primitives directly in this file *)\n\nlet _ =\n  let _ = Genarray.get in\n  let _ = Array1.get in\n  let _ = Array2.get in\n  let _ = Array3.get in\n  ()\n\n[@@@ocaml.warning \"-32\"]\nexternal get1: unit -> unit = \"caml_ba_get_1\"\nexternal get2: unit -> unit = \"caml_ba_get_2\"\nexternal get3: unit -> unit = \"caml_ba_get_3\"\nexternal set1: unit -> unit = \"caml_ba_set_1\"\nexternal set2: unit -> unit = \"caml_ba_set_2\"\nexternal set3: unit -> unit = \"caml_ba_set_3\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*               Damien Doligez, projet Para, INRIA Rocquencourt          *)\n(*          Xavier Leroy, projet Cambium, College de France and Inria     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Pseudo-random number generator *)\n\nexternal random_seed: unit -> int array = \"caml_sys_random_seed\"\n\nmodule State = struct\n\n  open Bigarray\n\n  type t = (int64, int64_elt, c_layout) Array1.t\n\n  external next: t -> (int64[@unboxed])\n      = \"caml_lxm_next\" \"caml_lxm_next_unboxed\" [@@noalloc]\n\n  let create () : t =\n    Array1.create Int64 C_layout 4\n\n  let set s i1 i2 i3 i4 =\n    Array1.unsafe_set s 0 (Int64.logor i1 1L); (* must be odd *)\n    Array1.unsafe_set s 1 i2;\n    Array1.unsafe_set s 2 (if i3 <> 0L then i3 else 1L); (* must not be 0 *)\n    Array1.unsafe_set s 3 (if i4 <> 0L then i4 else 2L) (* must not be 0 *)\n\n  let mk i1 i2 i3 i4 =\n    let s = create () in\n    set s i1 i2 i3 i4; s\n\n  let serialization_prefix =\n    \"lxm1:\"\n    (* \"lxm\" denotes the algorithm currently in use, and '1' is\n       a version number. We should update this prefix if we change\n       the Random algorithm or the serialization format, so that users\n       get a clean error instead of believing that they faithfully\n       reproduce their previous state and in fact get a differrent\n       stream.\n\n       Note that there is no constraint to keep the same\n       \"<name><ver>:<data>\" format or message size in future versions,\n       we could change the format completely if we wanted as long\n       as there is no confusion possible with the previous formats. *)\n\n  let serialization_prefix_len =\n    String.length serialization_prefix\n\n  let to_binary_string s =\n    let prefix = serialization_prefix in\n    let preflen = serialization_prefix_len in\n    let buf = Bytes.create (preflen + 4 * 8) in\n    Bytes.blit_string prefix 0 buf 0 preflen;\n    for i = 0 to 3 do\n      Bytes.set_int64_le buf (preflen + i * 8) (Array1.get s i)\n    done;\n    Bytes.unsafe_to_string buf\n\n  let of_binary_string buf =\n    let prefix = serialization_prefix in\n    let preflen = serialization_prefix_len in\n    if String.length buf <> preflen + 4 * 8\n       || not (String.starts_with ~prefix buf)\n    then\n      failwith\n        (\"Random.State.of_binary_string: expected a format \\\n          compatible with OCaml \" ^ Sys.ocaml_version);\n    let i1 = String.get_int64_le buf (preflen + 0 * 8) in\n    let i2 = String.get_int64_le buf (preflen + 1 * 8) in\n    let i3 = String.get_int64_le buf (preflen + 2 * 8) in\n    let i4 = String.get_int64_le buf (preflen + 3 * 8) in\n    mk i1 i2 i3 i4\n\n  let assign (dst: t) (src: t) =\n    Array1.blit src dst\n\n  let copy s =\n    let s' = create() in assign s' s; s'\n\n  (* The seed is an array of integers.  It can be just one integer,\n     but it can also be 12 or more bytes.  To hide the difference,\n     we serialize the array as a sequence of bytes, then hash the\n     sequence with MD5 (Digest.bytes).  MD5 gives only 128 bits while\n     we need 256 bits, so we hash twice with different suffixes. *)\n  let reinit s seed =\n    let n = Array.length seed in\n    let b = Bytes.create (n * 8 + 1) in\n    for i = 0 to n-1 do\n      Bytes.set_int64_le b (i * 8) (Int64.of_int seed.(i))\n    done;\n    Bytes.set b (n * 8) '\\x01';\n    let d1 = Digest.bytes b in\n    Bytes.set b (n * 8) '\\x02';\n    let d2 = Digest.bytes b in\n    set s (String.get_int64_le d1 0)\n          (String.get_int64_le d1 8)\n          (String.get_int64_le d2 0)\n          (String.get_int64_le d2 8)\n\n  let make seed =\n    let s = create() in reinit s seed; s\n\n  let make_self_init () =\n    make (random_seed ())\n\n  (* Return 30 random bits as an integer 0 <= x < 1073741824 *)\n  let bits s =\n    Int64.to_int (next s) land 0x3FFF_FFFF\n\n  (* Return an integer between 0 (included) and [bound] (excluded) *)\n  let rec intaux s n =\n    let r = bits s in\n    let v = r mod n in\n    if r - v > 0x3FFFFFFF - n + 1 then intaux s n else v\n\n  let int s bound =\n    if bound > 0x3FFFFFFF || bound <= 0\n    then invalid_arg \"Random.int\"\n    else intaux s bound\n\n  (* Return an integer between 0 (included) and [bound] (excluded).\n     [bound] may be any positive [int]. *)\n  let rec int63aux s n =\n    let r = Int64.to_int (next s) land max_int in\n    let v = r mod n in\n    if r - v > max_int - n + 1 then int63aux s n else v\n\n  let full_int s bound =\n    if bound <= 0 then\n      invalid_arg \"Random.full_int\"\n    else if bound > 0x3FFFFFFF then\n      int63aux s bound\n    else\n      intaux s bound\n\n  (* Return 32 random bits as an [int32] *)\n  let bits32 s =\n    Int64.to_int32 (next s)\n\n  (* Return an [int32] between 0 (included) and [bound] (excluded). *)\n  let rec int32aux s n =\n    let r = Int32.shift_right_logical (bits32 s) 1 in\n    let v = Int32.rem r n in\n    if Int32.(sub r v > add (sub max_int n) 1l)\n    then int32aux s n\n    else v\n\n  let int32 s bound =\n    if bound <= 0l\n    then invalid_arg \"Random.int32\"\n    else int32aux s bound\n\n  (* Return 64 random bits as an [int64] *)\n  let bits64 s =\n    next s\n\n  (* Return an [int64] between 0 (included) and [bound] (excluded). *)\n  let rec int64aux s n =\n    let r = Int64.shift_right_logical (bits64 s) 1 in\n    let v = Int64.rem r n in\n    if Int64.(sub r v > add (sub max_int n) 1L)\n    then int64aux s n\n    else v\n\n  let int64 s bound =\n    if bound <= 0L\n    then invalid_arg \"Random.int64\"\n    else int64aux s bound\n\n  (* Return 32 or 64 random bits as a [nativeint] *)\n  let nativebits =\n    if Nativeint.size = 32\n    then fun s -> Nativeint.of_int32 (bits32 s)\n    else fun s -> Int64.to_nativeint (bits64 s)\n\n  (* Return a [nativeint] between 0 (included) and [bound] (excluded). *)\n  let nativeint =\n    if Nativeint.size = 32\n    then fun s bound -> Nativeint.of_int32 (int32 s (Nativeint.to_int32 bound))\n    else fun s bound -> Int64.to_nativeint (int64 s (Int64.of_nativeint bound))\n\n  (* Return a float 0 < x < 1 uniformly distributed among the\n     multiples of 2^-53 *)\n  let rec rawfloat s =\n    let b = next s in\n    let n = Int64.shift_right_logical b 11 in\n    if n <> 0L then Int64.to_float n *. 0x1.p-53 else rawfloat s\n\n  (* Return a float between 0 and [bound] *)\n  let float s bound = rawfloat s *. bound\n\n  (* Return a random Boolean *)\n  let bool s = next s < 0L\n\n  (* Split a new PRNG off the given PRNG *)\n  let split s =\n    let i1 = bits64 s in let i2 = bits64 s in\n    let i3 = bits64 s in let i4 = bits64 s in\n    mk i1 i2 i3 i4\nend\n\nlet mk_default () =\n  (* This is the state obtained with [State.make [| 314159265 |]]. *)\n  State.mk (-6196874289567705097L)\n           586573249833713189L\n           (-8591268803865043407L)\n           6388613595849772044L\n\nlet random_key =\n  Domain.DLS.new_key ~split_from_parent:State.split mk_default\n\nlet bits () = State.bits (Domain.DLS.get random_key)\nlet int bound = State.int (Domain.DLS.get random_key) bound\nlet full_int bound = State.full_int (Domain.DLS.get random_key) bound\nlet int32 bound = State.int32 (Domain.DLS.get random_key) bound\nlet nativeint bound = State.nativeint (Domain.DLS.get random_key) bound\nlet int64 bound = State.int64 (Domain.DLS.get random_key) bound\nlet float scale = State.float (Domain.DLS.get random_key) scale\nlet bool () = State.bool (Domain.DLS.get random_key)\nlet bits32 () = State.bits32 (Domain.DLS.get random_key)\nlet bits64 () = State.bits64 (Domain.DLS.get random_key)\nlet nativebits () = State.nativebits (Domain.DLS.get random_key)\n\nlet full_init seed = State.reinit (Domain.DLS.get random_key) seed\nlet init seed = full_init [| seed |]\nlet self_init () = full_init (random_seed())\n\n(* Splitting *)\n\nlet split () = State.split (Domain.DLS.get random_key)\n\n(* Manipulating the current state. *)\n\nlet get_state () = State.copy (Domain.DLS.get random_key)\nlet set_state s = State.assign (Domain.DLS.get random_key) s\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Hash tables *)\n\n(* We do dynamic hashing, and resize the table and rehash the elements\n   when the load factor becomes too high. *)\n\ntype ('a, 'b) t =\n  { mutable size: int;                        (* number of entries *)\n    mutable data: ('a, 'b) bucketlist array;  (* the buckets *)\n    seed: int;                        (* for randomization *)\n    mutable initial_size: int;                (* initial array size *)\n  }\n\nand ('a, 'b) bucketlist =\n    Empty\n  | Cons of { mutable key: 'a;\n              mutable data: 'b;\n              mutable next: ('a, 'b) bucketlist }\n\n(* The sign of initial_size encodes the fact that a traversal is\n   ongoing or not.\n\n   This disables the efficient in place implementation of resizing.\n*)\n\nlet ongoing_traversal h =\n  Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n  || h.initial_size < 0\n\nlet flip_ongoing_traversal h =\n  h.initial_size <- - h.initial_size\n\n(* To pick random seeds if requested *)\n\nlet randomized_default =\n  let params =\n    try Sys.getenv \"OCAMLRUNPARAM\" with Not_found ->\n    try Sys.getenv \"CAMLRUNPARAM\" with Not_found -> \"\" in\n  String.contains params 'R'\n\nlet randomized = Atomic.make randomized_default\n\nlet randomize () = Atomic.set randomized true\nlet is_randomized () = Atomic.get randomized\n\nlet prng_key = Domain.DLS.new_key Random.State.make_self_init\n\n(* Functions which appear before the functorial interface must either be\n   independent of the hash function or take it as a parameter (see #2202 and\n   code below the functor definitions. *)\n\n(* Creating a fresh, empty table *)\n\nlet rec power_2_above x n =\n  if x >= n then x\n  else if x * 2 > Sys.max_array_length then x\n  else power_2_above (x * 2) n\n\nlet create ?(random = Atomic.get randomized) initial_size =\n  let s = power_2_above 16 initial_size in\n  let seed =\n    if random then Random.State.bits (Domain.DLS.get prng_key) else 0\n  in\n  { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }\n\nlet clear h =\n  if h.size > 0 then begin\n    h.size <- 0;\n    Array.fill h.data 0 (Array.length h.data) Empty\n  end\n\nlet reset h =\n  let len = Array.length h.data in\n  if Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n    || len = abs h.initial_size then\n    clear h\n  else begin\n    h.size <- 0;\n    h.data <- Array.make (abs h.initial_size) Empty\n  end\n\nlet copy_bucketlist = function\n  | Empty -> Empty\n  | Cons {key; data; next} ->\n      let rec loop prec = function\n        | Empty -> ()\n        | Cons {key; data; next} ->\n            let r = Cons {key; data; next} in\n            begin match prec with\n            | Empty -> assert false\n            | Cons prec ->  prec.next <- r\n            end;\n            loop r next\n      in\n      let r = Cons {key; data; next} in\n      loop r next;\n      r\n\nlet copy h = { h with data = Array.map copy_bucketlist h.data }\n\nlet length h = h.size\n\nlet insert_all_buckets indexfun inplace odata ndata =\n  let nsize = Array.length ndata in\n  let ndata_tail = Array.make nsize Empty in\n  let rec insert_bucket = function\n    | Empty -> ()\n    | Cons {key; data; next} as cell ->\n        let cell =\n          if inplace then cell\n          else Cons {key; data; next = Empty}\n        in\n        let nidx = indexfun key in\n        begin match ndata_tail.(nidx) with\n        | Empty -> ndata.(nidx) <- cell;\n        | Cons tail -> tail.next <- cell;\n        end;\n        ndata_tail.(nidx) <- cell;\n        insert_bucket next\n  in\n  for i = 0 to Array.length odata - 1 do\n    insert_bucket odata.(i)\n  done;\n  if inplace then\n    for i = 0 to nsize - 1 do\n      match ndata_tail.(i) with\n      | Empty -> ()\n      | Cons tail -> tail.next <- Empty\n    done\n\nlet resize indexfun h =\n  let odata = h.data in\n  let osize = Array.length odata in\n  let nsize = osize * 2 in\n  if nsize < Sys.max_array_length then begin\n    let ndata = Array.make nsize Empty in\n    let inplace = not (ongoing_traversal h) in\n    h.data <- ndata;          (* so that indexfun sees the new bucket count *)\n    insert_all_buckets (indexfun h) inplace odata ndata\n  end\n\nlet iter f h =\n  let rec do_bucket = function\n    | Empty ->\n        ()\n    | Cons{key; data; next} ->\n        f key data; do_bucket next in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    for i = 0 to Array.length d - 1 do\n      do_bucket d.(i)\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet rec filter_map_inplace_bucket f h i prec = function\n  | Empty ->\n      begin match prec with\n      | Empty -> h.data.(i) <- Empty\n      | Cons c -> c.next <- Empty\n      end\n  | (Cons ({key; data; next} as c)) as slot ->\n      begin match f key data with\n      | None ->\n          h.size <- h.size - 1;\n          filter_map_inplace_bucket f h i prec next\n      | Some data ->\n          begin match prec with\n          | Empty -> h.data.(i) <- slot\n          | Cons c -> c.next <- slot\n          end;\n          c.data <- data;\n          filter_map_inplace_bucket f h i slot next\n      end\n\nlet filter_map_inplace f h =\n  let d = h.data in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    for i = 0 to Array.length d - 1 do\n      filter_map_inplace_bucket f h i Empty h.data.(i)\n    done;\n    if not old_trav then flip_ongoing_traversal h\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\nlet fold f h init =\n  let rec do_bucket b accu =\n    match b with\n      Empty ->\n        accu\n    | Cons{key; data; next} ->\n        do_bucket next (f key data accu) in\n  let old_trav = ongoing_traversal h in\n  if not old_trav then flip_ongoing_traversal h;\n  try\n    let d = h.data in\n    let accu = ref init in\n    for i = 0 to Array.length d - 1 do\n      accu := do_bucket d.(i) !accu\n    done;\n    if not old_trav then flip_ongoing_traversal h;\n    !accu\n  with exn when not old_trav ->\n    flip_ongoing_traversal h;\n    raise exn\n\ntype statistics = {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: int array\n}\n\nlet rec bucket_length accu = function\n  | Empty -> accu\n  | Cons{next} -> bucket_length (accu + 1) next\n\nlet stats h =\n  let mbl =\n    Array.fold_left (fun m b -> Int.max m (bucket_length 0 b)) 0 h.data in\n  let histo = Array.make (mbl + 1) 0 in\n  Array.iter\n    (fun b ->\n      let l = bucket_length 0 b in\n      histo.(l) <- histo.(l) + 1)\n    h.data;\n  { num_bindings = h.size;\n    num_buckets = Array.length h.data;\n    max_bucket_length = mbl;\n    bucket_histogram = histo }\n\n(** {1 Iterators} *)\n\nlet to_seq tbl =\n  (* capture current array, so that even if the table is resized we\n     keep iterating on the same array *)\n  let tbl_data = tbl.data in\n  (* state: index * next bucket to traverse *)\n  let rec aux i buck () = match buck with\n    | Empty ->\n        if i = Array.length tbl_data\n        then Seq.Nil\n        else aux(i+1) tbl_data.(i) ()\n    | Cons {key; data; next} ->\n        Seq.Cons ((key, data), aux i next)\n  in\n  aux 0 Empty\n\nlet to_seq_keys m = Seq.map fst (to_seq m)\n\nlet to_seq_values m = Seq.map snd (to_seq m)\n\n(* Functorial interface *)\n\nmodule type HashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: t -> int\n  end\n\nmodule type SeededHashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val seeded_hash: int -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type !'a t\n    val create: int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy: 'a t -> 'a t\n    val add: 'a t -> key -> 'a -> unit\n    val remove: 'a t -> key -> unit\n    val find: 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all: 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length: 'a t -> int\n    val stats: 'a t -> statistics\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_keys : _ t -> key Seq.t\n    val to_seq_values : 'a t -> 'a Seq.t\n    val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule type SeededS =\n  sig\n    type key\n    type !'a t\n    val create : ?random:bool -> int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy : 'a t -> 'a t\n    val add : 'a t -> key -> 'a -> unit\n    val remove : 'a t -> key -> unit\n    val find : 'a t -> key -> 'a\n    val find_opt: 'a t -> key -> 'a option\n    val find_all : 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter : (key -> 'a -> unit) -> 'a t -> unit\n    val filter_map_inplace: (key -> 'a -> 'a option) -> 'a t -> unit\n    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length : 'a t -> int\n    val stats: 'a t -> statistics\n    val to_seq : 'a t -> (key * 'a) Seq.t\n    val to_seq_keys : _ t -> key Seq.t\n    val to_seq_values : 'a t -> 'a Seq.t\n    val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n    val of_seq : (key * 'a) Seq.t -> 'a t\n  end\n\nmodule MakeSeeded(H: SeededHashedType): (SeededS with type key = H.t) =\n  struct\n    type key = H.t\n    type 'a hashtbl = (key, 'a) t\n    type 'a t = 'a hashtbl\n    let create = create\n    let clear = clear\n    let reset = reset\n    let copy = copy\n\n    let key_index h key =\n      (H.seeded_hash h.seed key) land (Array.length h.data - 1)\n\n    let add h key data =\n      let i = key_index h key in\n      let bucket = Cons{key; data; next=h.data.(i)} in\n      h.data.(i) <- bucket;\n      h.size <- h.size + 1;\n      if h.size > Array.length h.data lsl 1 then resize key_index h\n\n    let rec remove_bucket h i key prec = function\n      | Empty ->\n          ()\n      | (Cons {key=k; next}) as c ->\n          if H.equal k key\n          then begin\n            h.size <- h.size - 1;\n            match prec with\n            | Empty -> h.data.(i) <- next\n            | Cons c -> c.next <- next\n          end\n          else remove_bucket h i key c next\n\n    let remove h key =\n      let i = key_index h key in\n      remove_bucket h i key Empty h.data.(i)\n\n    let rec find_rec key = function\n      | Empty ->\n          raise Not_found\n      | Cons{key=k; data; next} ->\n          if H.equal key k then data else find_rec key next\n\n    let find h key =\n      match h.data.(key_index h key) with\n      | Empty -> raise Not_found\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then d1 else\n          match next1 with\n          | Empty -> raise Not_found\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then d2 else\n              match next2 with\n              | Empty -> raise Not_found\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then d3 else find_rec key next3\n\n    let rec find_rec_opt key = function\n      | Empty ->\n          None\n      | Cons{key=k; data; next} ->\n          if H.equal key k then Some data else find_rec_opt key next\n\n    let find_opt h key =\n      match h.data.(key_index h key) with\n      | Empty -> None\n      | Cons{key=k1; data=d1; next=next1} ->\n          if H.equal key k1 then Some d1 else\n          match next1 with\n          | Empty -> None\n          | Cons{key=k2; data=d2; next=next2} ->\n              if H.equal key k2 then Some d2 else\n              match next2 with\n              | Empty -> None\n              | Cons{key=k3; data=d3; next=next3} ->\n                  if H.equal key k3 then Some d3 else find_rec_opt key next3\n\n    let find_all h key =\n      let[@tail_mod_cons] rec find_in_bucket = function\n      | Empty ->\n          []\n      | Cons{key=k; data=d; next} ->\n          if H.equal k key\n          then d :: find_in_bucket next\n          else find_in_bucket next in\n      find_in_bucket h.data.(key_index h key)\n\n    let rec replace_bucket key data = function\n      | Empty ->\n          true\n      | Cons ({key=k; next} as slot) ->\n          if H.equal k key\n          then (slot.key <- key; slot.data <- data; false)\n          else replace_bucket key data next\n\n    let replace h key data =\n      let i = key_index h key in\n      let l = h.data.(i) in\n      if replace_bucket key data l then begin\n        h.data.(i) <- Cons{key; data; next=l};\n        h.size <- h.size + 1;\n        if h.size > Array.length h.data lsl 1 then resize key_index h\n      end\n\n    let rec mem_in_bucket key = function\n      | Empty ->\n          false\n      | Cons{key=k; next} ->\n          H.equal k key || mem_in_bucket key next\n\n    let mem h key =\n      mem_in_bucket key h.data.(key_index h key)\n\n    let add_seq tbl i =\n      Seq.iter (fun (k,v) -> add tbl k v) i\n\n    let replace_seq tbl i =\n      Seq.iter (fun (k,v) -> replace tbl k v) i\n\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n\n    let iter = iter\n    let filter_map_inplace = filter_map_inplace\n    let fold = fold\n    let length = length\n    let stats = stats\n    let to_seq = to_seq\n    let to_seq_keys = to_seq_keys\n    let to_seq_values = to_seq_values\n  end\n\nmodule Make(H: HashedType): (S with type key = H.t) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let seeded_hash (_seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n  end\n\n(* Polymorphic hash function-based tables *)\n(* Code included below the functorial interface to guard against accidental\n   use - see #2202 *)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" [@@noalloc]\n\nlet hash x = seeded_hash_param 10 100 0 x\nlet hash_param n1 n2 x = seeded_hash_param n1 n2 0 x\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\n\nlet key_index h key =\n  if Obj.size (Obj.repr h) >= 4\n  then (seeded_hash_param 10 100 h.seed key) land (Array.length h.data - 1)\n  else invalid_arg \"Hashtbl: unsupported hash table format\"\n\nlet add h key data =\n  let i = key_index h key in\n  let bucket = Cons{key; data; next=h.data.(i)} in\n  h.data.(i) <- bucket;\n  h.size <- h.size + 1;\n  if h.size > Array.length h.data lsl 1 then resize key_index h\n\nlet rec remove_bucket h i key prec = function\n  | Empty ->\n      ()\n  | (Cons {key=k; next}) as c ->\n      if compare k key = 0\n      then begin\n        h.size <- h.size - 1;\n        match prec with\n        | Empty -> h.data.(i) <- next\n        | Cons c -> c.next <- next\n      end\n      else remove_bucket h i key c next\n\nlet remove h key =\n  let i = key_index h key in\n  remove_bucket h i key Empty h.data.(i)\n\nlet rec find_rec key = function\n  | Empty ->\n      raise Not_found\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then data else find_rec key next\n\nlet find h key =\n  match h.data.(key_index h key) with\n  | Empty -> raise Not_found\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then d1 else\n      match next1 with\n      | Empty -> raise Not_found\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then d2 else\n          match next2 with\n          | Empty -> raise Not_found\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then d3 else find_rec key next3\n\nlet rec find_rec_opt key = function\n  | Empty ->\n      None\n  | Cons{key=k; data; next} ->\n      if compare key k = 0 then Some data else find_rec_opt key next\n\nlet find_opt h key =\n  match h.data.(key_index h key) with\n  | Empty -> None\n  | Cons{key=k1; data=d1; next=next1} ->\n      if compare key k1 = 0 then Some d1 else\n      match next1 with\n      | Empty -> None\n      | Cons{key=k2; data=d2; next=next2} ->\n          if compare key k2 = 0 then Some d2 else\n          match next2 with\n          | Empty -> None\n          | Cons{key=k3; data=d3; next=next3} ->\n              if compare key k3 = 0 then Some d3 else find_rec_opt key next3\n\nlet find_all h key =\n  let[@tail_mod_cons] rec find_in_bucket = function\n  | Empty ->\n      []\n  | Cons{key=k; data; next} ->\n      if compare k key = 0\n      then data :: find_in_bucket next\n      else find_in_bucket next in\n  find_in_bucket h.data.(key_index h key)\n\nlet rec replace_bucket key data = function\n  | Empty ->\n      true\n  | Cons ({key=k; next} as slot) ->\n      if compare k key = 0\n      then (slot.key <- key; slot.data <- data; false)\n      else replace_bucket key data next\n\nlet replace h key data =\n  let i = key_index h key in\n  let l = h.data.(i) in\n  if replace_bucket key data l then begin\n    h.data.(i) <- Cons{key; data; next=l};\n    h.size <- h.size + 1;\n    if h.size > Array.length h.data lsl 1 then resize key_index h\n  end\n\nlet rec mem_in_bucket key = function\n  | Empty ->\n      false\n  | Cons{key=k; next} ->\n      compare k key = 0 || mem_in_bucket key next\n\nlet mem h key =\n  mem_in_bucket key h.data.(key_index h key)\n\nlet add_seq tbl i =\n  Seq.iter (fun (k,v) -> add tbl k v) i\n\nlet replace_seq tbl i =\n  Seq.iter (fun (k,v) -> replace tbl k v) i\n\nlet of_seq i =\n  let tbl = create 16 in\n  replace_seq tbl i;\n  tbl\n\nlet rebuild ?(random = Atomic.get randomized) h =\n  let s = power_2_above 16 (Array.length h.data) in\n  let seed =\n    if random then Random.State.bits (Domain.DLS.get prng_key)\n    else if Obj.size (Obj.repr h) >= 4 then h.seed\n    else 0 in\n  let h' = {\n    size = h.size;\n    data = Array.make s Empty;\n    seed = seed;\n    initial_size = if Obj.size (Obj.repr h) >= 4 then h.initial_size else s\n  } in\n  insert_all_buckets (key_index h') false h.data h'.data;\n  h'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Damien Doligez, projet Para, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1997 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** Weak array operations *)\n\ntype !'a t\n\nexternal create : int -> 'a t = \"caml_weak_create\"\n\n(** number of additional values in a weak pointer\n *    - Link\n *    - Data *)\nlet additional_values = 2 (* CAML_EPHE_FIRST_KEY in weak.h *)\n\nlet create l =\n  if not (0 <= l && l <= Obj.Ephemeron.max_ephe_length) then\n    invalid_arg(\"Weak.create\");\n  create l\n\n\nlet length x = Obj.size(Obj.repr x) - additional_values\n\nlet raise_if_invalid_offset e o msg =\n  if not (0 <= o && o < length e) then\n    invalid_arg(msg)\n\nexternal set' : 'a t -> int -> 'a -> unit = \"caml_ephe_set_key\"\nexternal unset : 'a t -> int -> unit = \"caml_ephe_unset_key\"\nlet set e o x =\n  raise_if_invalid_offset e o \"Weak.set\";\n  match x with\n  | None -> unset e o\n  | Some x -> set' e o x\n\nexternal get : 'a t -> int -> 'a option = \"caml_weak_get\"\nlet get e o =\n  raise_if_invalid_offset e o \"Weak.get\";\n  get e o\n\nexternal get_copy : 'a t -> int -> 'a option = \"caml_weak_get_copy\"\nlet get_copy e o =\n  raise_if_invalid_offset e o \"Weak.get_copy\";\n  get_copy e o\n\nexternal check : 'a t -> int -> bool = \"caml_weak_check\"\nlet check e o =\n  raise_if_invalid_offset e o \"Weak.check\";\n  check e o\n\nexternal blit : 'a t -> int -> 'a t -> int -> int -> unit = \"caml_weak_blit\"\n\n(* blit: src srcoff dst dstoff len *)\nlet blit e1 o1 e2 o2 l =\n  if l < 0 || o1 < 0 || o1 > length e1 - l\n     || o2 < 0 || o2 > length e2 - l\n  then invalid_arg \"Weak.blit\"\n  else if l <> 0 then blit e1 o1 e2 o2 l\n\nlet fill ar ofs len x =\n  if ofs < 0 || len < 0 || ofs > length ar - len\n  then raise (Invalid_argument \"Weak.fill\")\n  else begin\n    for i = ofs to (ofs + len - 1) do\n      set ar i x\n    done\n  end\n\n\n(** Weak hash tables *)\n\nmodule type S = sig\n  type data\n  type t\n  val create : int -> t\n  val clear : t -> unit\n  val merge : t -> data -> data\n  val add : t -> data -> unit\n  val remove : t -> data -> unit\n  val find : t -> data -> data\n  val find_opt : t -> data -> data option\n  val find_all : t -> data -> data list\n  val mem : t -> data -> bool\n  val iter : (data -> unit) -> t -> unit\n  val fold : (data -> 'acc -> 'acc) -> t -> 'acc -> 'acc\n  val count : t -> int\n  val stats : t -> int * int * int * int * int * int\nend\n\nmodule Make (H : Hashtbl.HashedType) : (S with type data = H.t) = struct\n\n  type 'a weak_t = 'a t\n  let weak_create = create\n  let emptybucket = weak_create 0\n\n  type data = H.t\n\n  type t = {\n    mutable table : data weak_t array;\n    mutable hashes : int array array;\n    mutable limit : int;               (* bucket size limit *)\n    mutable oversize : int;            (* number of oversize buckets *)\n    mutable rover : int;               (* for internal bookkeeping *)\n  }\n\n  let get_index t h = (h land max_int) mod (Array.length t.table)\n\n  let limit = 7\n  let over_limit = 2\n\n  let create sz =\n    let sz = if sz < 7 then 7 else sz in\n    let sz = if sz > Sys.max_array_length then Sys.max_array_length else sz in\n    {\n      table = Array.make sz emptybucket;\n      hashes = Array.make sz [| |];\n      limit = limit;\n      oversize = 0;\n      rover = 0;\n    }\n\n  let clear t =\n    for i = 0 to Array.length t.table - 1 do\n      t.table.(i) <- emptybucket;\n      t.hashes.(i) <- [| |];\n    done;\n    t.limit <- limit;\n    t.oversize <- 0\n\n\n  let fold f t init =\n    let rec fold_bucket i b accu =\n      if i >= length b then accu else\n      match get b i with\n      | Some v -> fold_bucket (i+1) b (f v accu)\n      | None -> fold_bucket (i+1) b accu\n    in\n    Array.fold_right (fold_bucket 0) t.table init\n\n\n  let iter f t =\n    let rec iter_bucket i b =\n      if i >= length b then () else\n      match get b i with\n      | Some v -> f v; iter_bucket (i+1) b\n      | None -> iter_bucket (i+1) b\n    in\n    Array.iter (iter_bucket 0) t.table\n\n\n  let iter_weak f t =\n    let rec iter_bucket i j b =\n      if i >= length b then () else\n      match check b i with\n      | true -> f b t.hashes.(j) i; iter_bucket (i+1) j b\n      | false -> iter_bucket (i+1) j b\n    in\n    Array.iteri (iter_bucket 0) t.table\n\n\n  let rec count_bucket i b accu =\n    if i >= length b then accu else\n    count_bucket (i+1) b (accu + (if check b i then 1 else 0))\n\n\n  let count t =\n    Array.fold_right (count_bucket 0) t.table 0\n\n\n  let next_sz n = Int.min (3 * n / 2 + 3) Sys.max_array_length\n  let prev_sz n = ((n - 3) * 2 + 2) / 3\n\n  let test_shrink_bucket t =\n    let bucket = t.table.(t.rover) in\n    let hbucket = t.hashes.(t.rover) in\n    let len = length bucket in\n    let prev_len = prev_sz len in\n    let live = count_bucket 0 bucket 0 in\n    if live <= prev_len then begin\n      let rec loop i j =\n        if j >= prev_len then begin\n          if check bucket i then loop (i + 1) j\n          else if check bucket j then begin\n            blit bucket j bucket i 1;\n            hbucket.(i) <- hbucket.(j);\n            loop (i + 1) (j - 1);\n          end else loop i (j - 1);\n        end;\n      in\n      loop 0 (length bucket - 1);\n      if prev_len = 0 then begin\n        t.table.(t.rover) <- emptybucket;\n        t.hashes.(t.rover) <- [| |];\n      end else begin\n        let newbucket = weak_create prev_len in\n        blit bucket 0 newbucket 0 prev_len;\n        t.table.(t.rover) <- newbucket;\n        t.hashes.(t.rover) <- Array.sub hbucket 0 prev_len\n      end;\n      if len > t.limit && prev_len <= t.limit then t.oversize <- t.oversize - 1;\n    end;\n    t.rover <- (t.rover + 1) mod (Array.length t.table)\n\n\n  let rec resize t =\n    let oldlen = Array.length t.table in\n    let newlen = next_sz oldlen in\n    if newlen > oldlen then begin\n      let newt = create newlen in\n      let add_weak ob oh oi =\n        let setter nb ni _ = blit ob oi nb ni 1 in\n        let h = oh.(oi) in\n        add_aux newt setter None h (get_index newt h);\n      in\n      iter_weak add_weak t;\n      t.table <- newt.table;\n      t.hashes <- newt.hashes;\n      t.limit <- newt.limit;\n      t.oversize <- newt.oversize;\n      t.rover <- t.rover mod Array.length newt.table;\n    end else begin\n      t.limit <- max_int;             (* maximum size already reached *)\n      t.oversize <- 0;\n    end\n\n  and add_aux t setter d h index =\n    let bucket = t.table.(index) in\n    let hashes = t.hashes.(index) in\n    let sz = length bucket in\n    let rec loop i =\n      if i >= sz then begin\n        let newsz =\n          Int.min (3 * sz / 2 + 3) (Sys.max_array_length - additional_values)\n        in\n        if newsz <= sz then failwith \"Weak.Make: hash bucket cannot grow more\";\n        let newbucket = weak_create newsz in\n        let newhashes = Array.make newsz 0 in\n        blit bucket 0 newbucket 0 sz;\n        Array.blit hashes 0 newhashes 0 sz;\n        setter newbucket sz d;\n        newhashes.(sz) <- h;\n        t.table.(index) <- newbucket;\n        t.hashes.(index) <- newhashes;\n        if sz <= t.limit && newsz > t.limit then begin\n          t.oversize <- t.oversize + 1;\n          for _i = 0 to over_limit do test_shrink_bucket t done;\n        end;\n        if t.oversize > Array.length t.table / over_limit then resize t;\n      end else if check bucket i then begin\n        loop (i + 1)\n      end else begin\n        setter bucket i d;\n        hashes.(i) <- h;\n      end;\n    in\n    loop 0\n\n\n  let add t d =\n    let h = H.hash d in\n    add_aux t set (Some d) h (get_index t h)\n\n  (* General auxiliary function for searching for a particular value\n   * in a hash-set, and acting according to whether or not it's found *)\n\n  let find_aux t d found notfound =\n    let h = H.hash d in\n    let index = get_index t h in\n    let bucket = t.table.(index) in\n    let hashes = t.hashes.(index) in\n    let sz = length bucket in\n    let rec loop i =\n      if i >= sz then notfound h index\n      else if h = hashes.(i) then begin\n        match get bucket i with\n        | Some v as opt when H.equal v d -> found bucket i opt v\n        | _ -> loop (i + 1)\n      end else loop (i + 1)\n    in\n    loop 0\n\n  let find_opt t d = find_aux t d (fun _b _i  o _v -> o)\n                                  (fun _h _i -> None)\n\n  let merge t d    = find_aux t d (fun _b _i _o  v -> v)\n                                  (fun  h  i ->\n                                        add_aux t set (Some d) h i; d)\n\n  let find t d     = find_aux t d (fun _b _i _o  v -> v)\n                                  (fun _h _i -> raise Not_found)\n\n  let remove t d   = find_aux t d (fun  b  i _o _v -> set b i None)\n                                  (fun _h _i -> ())\n\n  let mem t d      = find_aux t d (fun _b _i _o _v -> true)\n                                  (fun _h _i -> false)\n\n  let find_all t d =\n    let h = H.hash d in\n    let index = get_index t h in\n    let bucket = t.table.(index) in\n    let hashes = t.hashes.(index) in\n    let sz = length bucket in\n    let rec loop i accu =\n      if i >= sz then accu\n      else if h = hashes.(i) then begin\n        match get bucket i with\n        | Some v when H.equal v d -> loop (i + 1) (v :: accu)\n        | _ -> loop (i + 1) accu\n      end else loop (i + 1) accu\n    in\n    loop 0 []\n\n  let stats t =\n    let len = Array.length t.table in\n    let lens = Array.map length t.table in\n    Array.sort compare lens;\n    let totlen = Array.fold_left ( + ) 0 lens in\n    (len, count t, totlen, lens.(0), lens.(len/2), lens.(len-1))\n\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Pierre Weis, projet Cristal, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* A pretty-printing facility and definition of formatters for 'parallel'\n   (i.e. unrelated or independent) pretty-printing on multiple out channels. *)\n\n(*\n   The pretty-printing engine internal data structures.\n*)\n\nlet id x = x\n\n(* A devoted type for sizes to avoid confusion\n   between sizes and mere integers. *)\nmodule Size : sig\n  type t\n\n  val to_int : t -> int\n  val of_int : int -> t\n  val zero : t\n  val unknown : t\n  val is_known : t -> bool\nend  = struct\n  type t = int\n\n  let to_int = id\n  let of_int = id\n  let zero = 0\n  let unknown = -1\n  let is_known n = n >= 0\nend\n\n\n\n(* The pretty-printing boxes definition:\n   a pretty-printing box is either\n   - hbox: horizontal box (no line splitting)\n   - vbox: vertical box (every break hint splits the line)\n   - hvbox: horizontal/vertical box\n     (the box behaves as an horizontal box if it fits on\n      the current line, otherwise the box behaves as a vertical box)\n   - hovbox: horizontal or vertical compacting box\n     (the box is compacting material, printing as much material as possible\n      on every lines)\n   - box: horizontal or vertical compacting box with enhanced box structure\n     (the box behaves as an horizontal or vertical box but break hints split\n      the line if splitting would move to the left)\n*)\ntype box_type = CamlinternalFormatBasics.block_type =\n  | Pp_hbox | Pp_vbox | Pp_hvbox | Pp_hovbox | Pp_box | Pp_fits\n\n\n(* The pretty-printing tokens definition:\n   are either text to print or pretty printing\n   elements that drive indentation and line splitting. *)\ntype pp_token =\n  | Pp_text of string          (* normal text *)\n  | Pp_break of {              (* complete break *)\n      fits: string * int * string;   (* line is not split *)\n      breaks: string * int * string; (* line is split *)\n    }\n  | Pp_tbreak of int * int     (* go to next tabulation *)\n  | Pp_stab                    (* set a tabulation *)\n  | Pp_begin of int * box_type (* beginning of a box *)\n  | Pp_end                     (* end of a box *)\n  | Pp_tbegin of tbox          (* beginning of a tabulation box *)\n  | Pp_tend                    (* end of a tabulation box *)\n  | Pp_newline                 (* to force a newline inside a box *)\n  | Pp_if_newline              (* to do something only if this very\n                                  line has been broken *)\n  | Pp_open_tag of stag         (* opening a tag name *)\n  | Pp_close_tag               (* closing the most recently open tag *)\n\nand stag = ..\n\nand tbox = Pp_tbox of int list ref  (* Tabulation box *)\n\ntype tag = string\ntype stag += String_tag of tag\n\n\n(* The pretty-printer queue:\n   pretty-printing material is not written in the output as soon as emitted;\n   instead, the material is simply recorded in the pretty-printer queue,\n   until the enclosing box has a known computed size and proper splitting\n   decisions can be made.\n\n   The pretty-printer queue contains formatting elements to be printed.\n   Each formatting element is a tuple (size, token, length), where\n   - length is the declared length of the token,\n   - size is effective size of the token when it is printed\n     (size is set when the size of the box is known, so that size of break\n      hints are definitive). *)\ntype pp_queue_elem = {\n  mutable size : Size.t;\n  token : pp_token;\n  length : int;\n}\n\n\n(* The pretty-printer queue definition. *)\ntype pp_queue = pp_queue_elem Queue.t\n\n(* The pretty-printer scanning stack. *)\n\n(* The pretty-printer scanning stack: scanning element definition. *)\ntype pp_scan_elem = {\n  left_total : int; (* Value of pp_left_total when the element was enqueued. *)\n  queue_elem : pp_queue_elem\n}\n\n(* The pretty-printer formatting stack:\n   the formatting stack contains the description of all the currently active\n   boxes; the pretty-printer formatting stack is used to split the lines\n   while printing tokens. *)\n\n(* The pretty-printer formatting stack: formatting stack element definition.\n   Each stack element describes a pretty-printing box. *)\ntype pp_format_elem = { box_type : box_type; width : int }\n\n(* The formatter definition.\n   Each formatter value is a pretty-printer instance with all its\n   machinery. *)\ntype formatter = {\n  (* The pretty-printer scanning stack. *)\n  pp_scan_stack : pp_scan_elem Stack.t;\n  (* The pretty-printer formatting stack. *)\n  pp_format_stack : pp_format_elem Stack.t;\n  pp_tbox_stack : tbox Stack.t;\n  (* The pretty-printer semantics tag stack. *)\n  pp_tag_stack : stag Stack.t;\n  pp_mark_stack : stag Stack.t;\n  (* Value of right margin. *)\n  mutable pp_margin : int;\n  (* Minimal space left before margin, when opening a box. *)\n  mutable pp_min_space_left : int;\n  (* Maximum value of indentation:\n     no box can be opened further. *)\n  mutable pp_max_indent : int;\n  (* Space remaining on the current line. *)\n  mutable pp_space_left : int;\n  (* Current value of indentation. *)\n  mutable pp_current_indent : int;\n  (* True when the line has been broken by the pretty-printer. *)\n  mutable pp_is_new_line : bool;\n  (* Total width of tokens already printed. *)\n  mutable pp_left_total : int;\n  (* Total width of tokens ever put in queue. *)\n  mutable pp_right_total : int;\n  (* Current number of open boxes. *)\n  mutable pp_curr_depth : int;\n  (* Maximum number of boxes which can be simultaneously open. *)\n  mutable pp_max_boxes : int;\n  (* Ellipsis string. *)\n  mutable pp_ellipsis : string;\n  (* Output function. *)\n  mutable pp_out_string : string -> int -> int -> unit;\n  (* Flushing function. *)\n  mutable pp_out_flush : unit -> unit;\n  (* Output of new lines. *)\n  mutable pp_out_newline : unit -> unit;\n  (* Output of break hints spaces. *)\n  mutable pp_out_spaces : int -> unit;\n  (* Output of indentation of new lines. *)\n  mutable pp_out_indent : int -> unit;\n  (* Are tags printed ? *)\n  mutable pp_print_tags : bool;\n  (* Are tags marked ? *)\n  mutable pp_mark_tags : bool;\n  (* Find opening and closing markers of tags. *)\n  mutable pp_mark_open_tag : stag -> string;\n  mutable pp_mark_close_tag : stag -> string;\n  mutable pp_print_open_tag : stag -> unit;\n  mutable pp_print_close_tag : stag -> unit;\n  (* The pretty-printer queue. *)\n  pp_queue : pp_queue;\n}\n\n\n(* The formatter specific tag handling functions. *)\ntype formatter_stag_functions = {\n  mark_open_stag : stag -> string;\n  mark_close_stag : stag -> string;\n  print_open_stag : stag -> unit;\n  print_close_stag : stag -> unit;\n}\n\n\n(* The formatter functions to output material. *)\ntype formatter_out_functions = {\n  out_string : string -> int -> int -> unit;\n  out_flush : unit -> unit;\n  out_newline : unit -> unit;\n  out_spaces : int -> unit;\n  out_indent : int -> unit;\n}\n\n\n(*\n\n  Auxiliaries and basic functions.\n\n*)\n\n(* Enter a token in the pretty-printer queue. *)\nlet pp_enqueue state token =\n  state.pp_right_total <- state.pp_right_total + token.length;\n  Queue.add token state.pp_queue\n\n\nlet pp_clear_queue state =\n  state.pp_left_total <- 1; state.pp_right_total <- 1;\n  Queue.clear state.pp_queue\n\n\n(* Pp_infinity: large value for default tokens size.\n\n   Pp_infinity is documented as being greater than 1e10; to avoid\n   confusion about the word 'greater', we choose pp_infinity greater\n   than 1e10 + 1; for correct handling of tests in the algorithm,\n   pp_infinity must be even one more than 1e10 + 1; let's stand on the\n   safe side by choosing 1.e10+10.\n\n   Pp_infinity could probably be 1073741823 that is 2^30 - 1, that is\n   the minimal upper bound for integers; now that max_int is defined,\n   this limit could also be defined as max_int - 1.\n\n   However, before setting pp_infinity to something around max_int, we\n   must carefully double-check all the integer arithmetic operations\n   that involve pp_infinity, since any overflow would wreck havoc the\n   pretty-printing algorithm's invariants. Given that this arithmetic\n   correctness check is difficult and error prone and given that 1e10\n   + 1 is in practice large enough, there is no need to attempt to set\n   pp_infinity to the theoretically maximum limit. It is not worth the\n   burden ! *)\nlet pp_infinity = 1000000010\n\n(* Output functions for the formatter. *)\nlet pp_output_string state s = state.pp_out_string s 0 (String.length s)\nand pp_output_newline state = state.pp_out_newline ()\nand pp_output_spaces state n = state.pp_out_spaces n\nand pp_output_indent state n = state.pp_out_indent n\n\n(* Format a textual token *)\nlet format_pp_text state size text =\n  state.pp_space_left <- state.pp_space_left - size;\n  pp_output_string state text;\n  state.pp_is_new_line <- false\n\n(* Format a string by its length, if not empty *)\nlet format_string state s =\n  if s <> \"\" then format_pp_text state (String.length s) s\n\n(* To format a break, indenting a new line. *)\nlet break_new_line state (before, offset, after) width =\n  format_string state before;\n  pp_output_newline state;\n  state.pp_is_new_line <- true;\n  let indent = state.pp_margin - width + offset in\n  (* Don't indent more than pp_max_indent. *)\n  let real_indent = Int.min state.pp_max_indent indent in\n  state.pp_current_indent <- real_indent;\n  state.pp_space_left <- state.pp_margin - state.pp_current_indent;\n  pp_output_indent state state.pp_current_indent;\n  format_string state after\n\n\n(* To force a line break inside a box: no offset is added. *)\nlet break_line state width = break_new_line state (\"\", 0, \"\") width\n\n(* To format a break that fits on the current line. *)\nlet break_same_line state (before, width, after) =\n  format_string state before;\n  state.pp_space_left <- state.pp_space_left - width;\n  pp_output_spaces state width;\n  format_string state after\n\n\n(* To indent no more than pp_max_indent, if one tries to open a box\n   beyond pp_max_indent, then the box is rejected on the left\n   by simulating a break. *)\nlet pp_force_break_line state =\n  match Stack.top_opt state.pp_format_stack with\n  | None -> pp_output_newline state\n  | Some { box_type; width } ->\n    if width > state.pp_space_left then\n      match box_type with\n      | Pp_fits | Pp_hbox -> ()\n      | Pp_vbox | Pp_hvbox | Pp_hovbox | Pp_box -> break_line state width\n\n\n(* To skip a token, if the previous line has been broken. *)\nlet pp_skip_token state =\n  match Queue.take_opt state.pp_queue with\n  | None -> () (* print_if_newline must have been the last printing command *)\n  | Some { size; length; _ } ->\n    state.pp_left_total <- state.pp_left_total - length;\n    state.pp_space_left <- state.pp_space_left + Size.to_int size\n\n\n(*\n\n  The main pretty printing functions.\n\n*)\n\n(* Formatting a token with a given size. *)\nlet format_pp_token state size = function\n\n  | Pp_text s ->\n    format_pp_text state size s\n\n  | Pp_begin (off, ty) ->\n    let insertion_point = state.pp_margin - state.pp_space_left in\n    if insertion_point > state.pp_max_indent then\n      (* can not open a box right there. *)\n      begin pp_force_break_line state end;\n    let width = state.pp_space_left - off in\n    let box_type =\n      match ty with\n      | Pp_vbox -> Pp_vbox\n      | Pp_hbox | Pp_hvbox | Pp_hovbox | Pp_box | Pp_fits ->\n        if size > state.pp_space_left then ty else Pp_fits in\n    Stack.push { box_type; width } state.pp_format_stack\n\n  | Pp_end ->\n    Stack.pop_opt state.pp_format_stack |> ignore\n\n  | Pp_tbegin (Pp_tbox _ as tbox) ->\n    Stack.push tbox state.pp_tbox_stack\n\n  | Pp_tend ->\n    Stack.pop_opt state.pp_tbox_stack |> ignore\n\n  | Pp_stab ->\n    begin match Stack.top_opt state.pp_tbox_stack with\n    | None -> () (* No open tabulation box. *)\n    | Some (Pp_tbox tabs) ->\n      let rec add_tab n = function\n        | [] -> [n]\n        | x :: l as ls -> if n < x then n :: ls else x :: add_tab n l in\n      tabs := add_tab (state.pp_margin - state.pp_space_left) !tabs\n    end\n\n  | Pp_tbreak (n, off) ->\n    let insertion_point = state.pp_margin - state.pp_space_left in\n    begin match Stack.top_opt state.pp_tbox_stack with\n    | None -> () (* No open tabulation box. *)\n    | Some (Pp_tbox tabs) ->\n      let tab =\n        match !tabs with\n        | [] -> insertion_point\n        | first :: _ ->\n          let rec find = function\n            | head :: tail ->\n              if head >= insertion_point then head else find tail\n            | [] -> first in\n          find !tabs in\n      let offset = tab - insertion_point in\n      if offset >= 0\n      then break_same_line state (\"\", offset + n, \"\")\n      else break_new_line state (\"\", tab + off, \"\") state.pp_margin\n    end\n\n  | Pp_newline ->\n    begin match Stack.top_opt state.pp_format_stack with\n    | None -> pp_output_newline state (* No open box. *)\n    | Some { width; _} -> break_line state width\n    end\n\n  | Pp_if_newline ->\n    if state.pp_current_indent != state.pp_margin - state.pp_space_left\n    then pp_skip_token state\n\n  | Pp_break { fits; breaks } ->\n    let before, off, _ = breaks in\n    begin match Stack.top_opt state.pp_format_stack with\n    | None -> () (* No open box. *)\n    | Some { box_type; width } ->\n      begin match box_type with\n      | Pp_hovbox ->\n        if size + String.length before > state.pp_space_left\n        then break_new_line state breaks width\n        else break_same_line state fits\n      | Pp_box ->\n        (* Have the line just been broken here ? *)\n        if state.pp_is_new_line then break_same_line state fits else\n        if size + String.length before > state.pp_space_left\n          then break_new_line state breaks width else\n        (* break the line here leads to new indentation ? *)\n        if state.pp_current_indent > state.pp_margin - width + off\n        then break_new_line state breaks width\n        else break_same_line state fits\n      | Pp_hvbox -> break_new_line state breaks width\n      | Pp_fits -> break_same_line state fits\n      | Pp_vbox -> break_new_line state breaks width\n      | Pp_hbox -> break_same_line state fits\n      end\n    end\n\n   | Pp_open_tag tag_name ->\n     let marker = state.pp_mark_open_tag tag_name in\n     pp_output_string state marker;\n     Stack.push tag_name state.pp_mark_stack\n\n   | Pp_close_tag ->\n     begin match Stack.pop_opt state.pp_mark_stack with\n     | None -> () (* No more tag to close. *)\n     | Some tag_name ->\n       let marker = state.pp_mark_close_tag tag_name in\n       pp_output_string state marker\n     end\n\n\n(* Print if token size is known else printing is delayed.\n   Printing is delayed when the text waiting in the queue requires\n   more room to format than exists on the current line. *)\nlet rec advance_left state =\n  match Queue.peek_opt state.pp_queue with\n  | None -> () (* No tokens to print *)\n  | Some { size; token; length } ->\n    let pending_count = state.pp_right_total - state.pp_left_total in\n    if Size.is_known size || pending_count >= state.pp_space_left then begin\n      Queue.take state.pp_queue |> ignore; (* Not empty: we peek into it *)\n      let size = if Size.is_known size then Size.to_int size else pp_infinity in\n      format_pp_token state size token;\n      state.pp_left_total <- length + state.pp_left_total;\n      (advance_left [@tailcall]) state\n    end\n\n\n(* To enqueue a token : try to advance. *)\nlet enqueue_advance state tok = pp_enqueue state tok; advance_left state\n\n\n(* To enqueue strings. *)\nlet enqueue_string_as state size s =\n  enqueue_advance state { size; token = Pp_text s; length = Size.to_int size }\n\n\nlet enqueue_string state s =\n  enqueue_string_as state (Size.of_int (String.length s)) s\n\n\n(* Routines for scan stack\n   determine size of boxes. *)\n\n(* The scan_stack is never empty. *)\nlet initialize_scan_stack stack =\n  Stack.clear stack;\n  let queue_elem = { size = Size.unknown; token = Pp_text \"\"; length = 0 } in\n  Stack.push { left_total = -1; queue_elem } stack\n\n(* Setting the size of boxes on scan stack:\n   if ty = true then size of break is set else size of box is set;\n   in each case pp_scan_stack is popped.\n\n   Note:\n   Pattern matching on scan stack is exhaustive, since scan_stack is never\n   empty.\n   Pattern matching on token in scan stack is also exhaustive,\n   since scan_push is used on breaks and opening of boxes. *)\nlet set_size state ty =\n  match Stack.top_opt state.pp_scan_stack with\n  | None -> () (* scan_stack is never empty. *)\n  | Some { left_total; queue_elem } ->\n    let size = Size.to_int queue_elem.size in\n    (* test if scan stack contains any data that is not obsolete. *)\n    if left_total < state.pp_left_total then\n      initialize_scan_stack state.pp_scan_stack\n    else\n      match queue_elem.token with\n      | Pp_break _ | Pp_tbreak (_, _) ->\n        if ty then begin\n          queue_elem.size <- Size.of_int (state.pp_right_total + size);\n          Stack.pop_opt state.pp_scan_stack |> ignore\n        end\n      | Pp_begin (_, _) ->\n        if not ty then begin\n          queue_elem.size <- Size.of_int (state.pp_right_total + size);\n          Stack.pop_opt state.pp_scan_stack |> ignore\n        end\n      | Pp_text _ | Pp_stab | Pp_tbegin _ | Pp_tend | Pp_end\n      | Pp_newline | Pp_if_newline | Pp_open_tag _ | Pp_close_tag ->\n        () (* scan_push is only used for breaks and boxes. *)\n\n\n(* Push a token on pretty-printer scanning stack.\n   If b is true set_size is called. *)\nlet scan_push state b token =\n  pp_enqueue state token;\n  if b then set_size state true;\n  let elem = { left_total = state.pp_right_total; queue_elem = token } in\n  Stack.push elem state.pp_scan_stack\n\n\n(* To open a new box :\n   the user may set the depth bound pp_max_boxes\n   any text nested deeper is printed as the ellipsis string. *)\nlet pp_open_box_gen state indent br_ty =\n  state.pp_curr_depth <- state.pp_curr_depth + 1;\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let size = Size.of_int (- state.pp_right_total) in\n    let elem = { size; token = Pp_begin (indent, br_ty); length = 0 } in\n    scan_push state false elem else\n  if state.pp_curr_depth = state.pp_max_boxes\n  then enqueue_string state state.pp_ellipsis\n\n\n(* The box which is always open. *)\nlet pp_open_sys_box state = pp_open_box_gen state 0 Pp_hovbox\n\n(* Close a box, setting sizes of its sub boxes. *)\nlet pp_close_box state () =\n  if state.pp_curr_depth > 1 then\n  begin\n    if state.pp_curr_depth < state.pp_max_boxes then\n    begin\n      pp_enqueue state { size = Size.zero; token = Pp_end; length = 0 };\n      set_size state true; set_size state false\n    end;\n    state.pp_curr_depth <- state.pp_curr_depth - 1;\n  end\n\n\n(* Open a tag, pushing it on the tag stack. *)\nlet pp_open_stag state tag_name =\n  if state.pp_print_tags then\n  begin\n    Stack.push tag_name state.pp_tag_stack;\n    state.pp_print_open_tag tag_name\n  end;\n  if state.pp_mark_tags then\n    let token = Pp_open_tag tag_name in\n    pp_enqueue state { size = Size.zero; token; length = 0 }\n\n\n(* Close a tag, popping it from the tag stack. *)\nlet pp_close_stag state () =\n  if state.pp_mark_tags then\n    pp_enqueue state { size = Size.zero; token = Pp_close_tag; length = 0 };\n  if state.pp_print_tags then\n    match Stack.pop_opt state.pp_tag_stack with\n    | None -> () (* No more tag to close. *)\n    | Some tag_name ->\n      state.pp_print_close_tag tag_name\n\nlet pp_set_print_tags state b = state.pp_print_tags <- b\nlet pp_set_mark_tags state b = state.pp_mark_tags <- b\nlet pp_get_print_tags state () = state.pp_print_tags\nlet pp_get_mark_tags state () = state.pp_mark_tags\nlet pp_set_tags state b =\n  pp_set_print_tags state b; pp_set_mark_tags state b\n\n\n(* Handling tag handling functions: get/set functions. *)\nlet pp_get_formatter_stag_functions state () = {\n  mark_open_stag = state.pp_mark_open_tag;\n  mark_close_stag = state.pp_mark_close_tag;\n  print_open_stag = state.pp_print_open_tag;\n  print_close_stag = state.pp_print_close_tag;\n}\n\n\nlet pp_set_formatter_stag_functions state {\n     mark_open_stag = mot;\n     mark_close_stag = mct;\n     print_open_stag = pot;\n     print_close_stag = pct;\n  } =\n  state.pp_mark_open_tag <- mot;\n  state.pp_mark_close_tag <- mct;\n  state.pp_print_open_tag <- pot;\n  state.pp_print_close_tag <- pct\n\n\n(* Initialize pretty-printer. *)\nlet pp_rinit state =\n  pp_clear_queue state;\n  initialize_scan_stack state.pp_scan_stack;\n  Stack.clear state.pp_format_stack;\n  Stack.clear state.pp_tbox_stack;\n  Stack.clear state.pp_tag_stack;\n  Stack.clear state.pp_mark_stack;\n  state.pp_current_indent <- 0;\n  state.pp_curr_depth <- 0;\n  state.pp_space_left <- state.pp_margin;\n  pp_open_sys_box state\n\nlet clear_tag_stack state =\n  Stack.iter (fun _ -> pp_close_stag state ()) state.pp_tag_stack\n\n\n(* Flushing pretty-printer queue. *)\nlet pp_flush_queue state ~end_with_newline =\n  clear_tag_stack state;\n  while state.pp_curr_depth > 1 do\n    pp_close_box state ()\n  done;\n  state.pp_right_total <- pp_infinity;\n  advance_left state;\n  if end_with_newline then pp_output_newline state;\n  pp_rinit state\n\n(*\n\n  Procedures to format values and use boxes.\n\n*)\n\n(* To format a string. *)\nlet pp_print_as_size state size s =\n  if state.pp_curr_depth < state.pp_max_boxes\n  then enqueue_string_as state size s\n\n\nlet pp_print_as state isize s =\n  pp_print_as_size state (Size.of_int isize) s\n\n\nlet pp_print_string state s =\n  pp_print_as state (String.length s) s\n\nlet pp_print_bytes state s =\n  pp_print_as state (Bytes.length s) (Bytes.to_string s)\n\n(* To format an integer. *)\nlet pp_print_int state i = pp_print_string state (Int.to_string i)\n\n(* To format a float. *)\nlet pp_print_float state f = pp_print_string state (string_of_float f)\n\n(* To format a boolean. *)\nlet pp_print_bool state b = pp_print_string state (string_of_bool b)\n\n(* To format a char. *)\nlet pp_print_char state c =\n  pp_print_as state 1 (String.make 1 c)\n\n\n(* Opening boxes. *)\nlet pp_open_hbox state () = pp_open_box_gen state 0 Pp_hbox\nand pp_open_vbox state indent = pp_open_box_gen state indent Pp_vbox\n\nand pp_open_hvbox state indent = pp_open_box_gen state indent Pp_hvbox\nand pp_open_hovbox state indent = pp_open_box_gen state indent Pp_hovbox\nand pp_open_box state indent = pp_open_box_gen state indent Pp_box\n\n\n(* Printing queued text.\n\n   [pp_print_flush] prints all pending items in the pretty-printer queue and\n   then flushes the low level output device of the formatter to actually\n   display printing material.\n\n   [pp_print_newline] behaves as [pp_print_flush] after printing an additional\n   new line. *)\nlet pp_print_newline state () =\n  pp_flush_queue state ~end_with_newline:true; state.pp_out_flush ()\nand pp_print_flush state () =\n  pp_flush_queue state ~end_with_newline:false; state.pp_out_flush ()\n\n\n(* To get a newline when one does not want to close the current box. *)\nlet pp_force_newline state () =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    enqueue_advance state { size = Size.zero; token = Pp_newline; length = 0 }\n\n\n(* To format something, only in case the line has just been broken. *)\nlet pp_print_if_newline state () =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    enqueue_advance state\n      { size = Size.zero; token = Pp_if_newline; length = 0 }\n\n\n(* Generalized break hint that allows printing strings before/after\n   same-line offset (width) or new-line offset *)\nlet pp_print_custom_break state ~fits ~breaks =\n  let before, width, after = fits in\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let size = Size.of_int (- state.pp_right_total) in\n    let token = Pp_break { fits; breaks } in\n    let length = String.length before + width + String.length after in\n    let elem = { size; token; length } in\n    scan_push state true elem\n\n(* Printing break hints:\n   A break hint indicates where a box may be broken.\n   If line is broken then offset is added to the indentation of the current\n   box else (the value of) width blanks are printed. *)\nlet pp_print_break state width offset =\n  pp_print_custom_break state\n    ~fits:(\"\", width, \"\") ~breaks:(\"\", offset, \"\")\n\n\n(* Print a space :\n   a space is a break hint that prints a single space if the break does not\n   split the line;\n   a cut is a break hint that prints nothing if the break does not split the\n   line. *)\nlet pp_print_space state () = pp_print_break state 1 0\nand pp_print_cut state () = pp_print_break state 0 0\n\n\n(* Tabulation boxes. *)\nlet pp_open_tbox state () =\n  state.pp_curr_depth <- state.pp_curr_depth + 1;\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let size = Size.zero in\n    let elem = { size; token = Pp_tbegin (Pp_tbox (ref [])); length = 0 } in\n    enqueue_advance state elem\n\n\n(* Close a tabulation box. *)\nlet pp_close_tbox state () =\n  if state.pp_curr_depth > 1 then\n  begin\n   if state.pp_curr_depth < state.pp_max_boxes then\n     let elem = { size = Size.zero; token = Pp_tend; length = 0 } in\n     enqueue_advance state elem;\n     state.pp_curr_depth <- state.pp_curr_depth - 1\n  end\n\n\n(* Print a tabulation break. *)\nlet pp_print_tbreak state width offset =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let size = Size.of_int (- state.pp_right_total) in\n    let elem = { size; token = Pp_tbreak (width, offset); length = width } in\n    scan_push state true elem\n\n\nlet pp_print_tab state () = pp_print_tbreak state 0 0\n\nlet pp_set_tab state () =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let elem = { size = Size.zero; token = Pp_stab; length = 0 } in\n    enqueue_advance state elem\n\n\n(*\n\n  Procedures to control the pretty-printers\n\n*)\n\n(* Set_max_boxes. *)\nlet pp_set_max_boxes state n = if n > 1 then state.pp_max_boxes <- n\n\n(* To know the current maximum number of boxes allowed. *)\nlet pp_get_max_boxes state () = state.pp_max_boxes\n\nlet pp_over_max_boxes state () = state.pp_curr_depth = state.pp_max_boxes\n\n(* Ellipsis. *)\nlet pp_set_ellipsis_text state s = state.pp_ellipsis <- s\nand pp_get_ellipsis_text state () = state.pp_ellipsis\n\n\n(* To set the margin of pretty-printer. *)\nlet pp_limit n =\n  if n < pp_infinity then n else pred pp_infinity\n\n\n(* Internal pretty-printer functions. *)\nlet pp_set_min_space_left state n =\n  if n >= 1 then\n    let n = pp_limit n in\n    state.pp_min_space_left <- n;\n    state.pp_max_indent <- state.pp_margin - state.pp_min_space_left;\n    pp_rinit state\n\n\n(* Initially, we have :\n   pp_max_indent = pp_margin - pp_min_space_left, and\n   pp_space_left = pp_margin. *)\nlet pp_set_max_indent state n =\n  if n > 1 then\n    pp_set_min_space_left state (state.pp_margin - n)\n\n\nlet pp_get_max_indent state () = state.pp_max_indent\n\nlet pp_set_margin state n =\n  if n >= 1 then\n    let n = pp_limit n in\n    state.pp_margin <- n;\n    let new_max_indent =\n      (* Try to maintain max_indent to its actual value. *)\n      if state.pp_max_indent <= state.pp_margin\n      then state.pp_max_indent else\n      (* If possible maintain pp_min_space_left to its actual value,\n         if this leads to a too small max_indent, take half of the\n         new margin, if it is greater than 1. *)\n       Int.max (Int.max (state.pp_margin - state.pp_min_space_left)\n                (state.pp_margin / 2)) 1 in\n    (* Rebuild invariants. *)\n    pp_set_max_indent state new_max_indent\n\n\n(** Geometry functions and types *)\ntype geometry = { max_indent:int; margin: int}\n\nlet validate_geometry {margin; max_indent} =\n  if max_indent < 2 then\n    Error \"max_indent < 2\"\n  else if margin <= max_indent then\n    Error \"margin <= max_indent\"\n  else Ok ()\n\nlet check_geometry geometry =\n  match validate_geometry geometry with\n  | Ok () -> true\n  | Error _ -> false\n\nlet pp_get_margin state () = state.pp_margin\n\nlet pp_set_full_geometry state {margin; max_indent} =\n  pp_set_margin state margin;\n  pp_set_max_indent state max_indent;\n  ()\n\nlet pp_set_geometry state ~max_indent ~margin =\n  let geometry = { max_indent; margin } in\n  match validate_geometry geometry with\n  | Error msg ->\n    raise (Invalid_argument (\"Format.pp_set_geometry: \" ^ msg))\n  | Ok () ->\n    pp_set_full_geometry state geometry\n\nlet pp_safe_set_geometry state ~max_indent ~margin =\n  let geometry = { max_indent; margin } in\n  match validate_geometry geometry with\n  | Error _msg ->\n     ()\n  | Ok () ->\n    pp_set_full_geometry state geometry\n\nlet pp_get_geometry state () =\n  { margin = pp_get_margin state (); max_indent = pp_get_max_indent state () }\n\nlet pp_update_geometry state update =\n  let geometry = pp_get_geometry state () in\n  pp_set_full_geometry state (update geometry)\n\n(* Setting a formatter basic output functions. *)\nlet pp_set_formatter_out_functions state {\n      out_string = f;\n      out_flush = g;\n      out_newline = h;\n      out_spaces = i;\n      out_indent = j;\n    } =\n  state.pp_out_string <- f;\n  state.pp_out_flush <- g;\n  state.pp_out_newline <- h;\n  state.pp_out_spaces <- i;\n  state.pp_out_indent <- j\n\nlet pp_get_formatter_out_functions state () = {\n  out_string = state.pp_out_string;\n  out_flush = state.pp_out_flush;\n  out_newline = state.pp_out_newline;\n  out_spaces = state.pp_out_spaces;\n  out_indent = state.pp_out_indent;\n}\n\n\n(* Setting a formatter basic string output and flush functions. *)\nlet pp_set_formatter_output_functions state f g =\n  state.pp_out_string <- f; state.pp_out_flush <- g\n\nlet pp_get_formatter_output_functions state () =\n  (state.pp_out_string, state.pp_out_flush)\n\n\n(* The default function to output new lines. *)\nlet display_newline state () = state.pp_out_string \"\\n\" 0  1\n\n(* The default function to output spaces. *)\nlet blank_line = String.make 80 ' '\nlet rec display_blanks state n =\n  if n > 0 then\n  if n <= 80 then state.pp_out_string blank_line 0 n else\n  begin\n    state.pp_out_string blank_line 0 80;\n    display_blanks state (n - 80)\n  end\n\n\n(* The default function to output indentation of new lines. *)\nlet display_indent = display_blanks\n\n(* Setting a formatter basic output functions as printing to a given\n   [Stdlib.out_channel] value. *)\nlet pp_set_formatter_out_channel state oc =\n  state.pp_out_string <- output_substring oc;\n  state.pp_out_flush <- (fun () -> flush oc);\n  state.pp_out_newline <- display_newline state;\n  state.pp_out_spaces <- display_blanks state;\n  state.pp_out_indent <- display_indent state\n\n(*\n\n  Defining specific formatters\n\n*)\n\nlet default_pp_mark_open_tag = function\n  | String_tag s -> \"<\" ^ s ^ \">\"\n  | _ -> \"\"\nlet default_pp_mark_close_tag = function\n  | String_tag s -> \"</\" ^ s ^ \">\"\n  | _ -> \"\"\n\nlet default_pp_print_open_tag = ignore\nlet default_pp_print_close_tag = ignore\n\n(* Building a formatter given its basic output functions.\n   Other fields get reasonable default values. *)\nlet pp_make_formatter f g h i j =\n  (* The initial state of the formatter contains a dummy box. *)\n  let pp_queue = Queue.create () in\n  let sys_tok =\n    { size = Size.unknown; token = Pp_begin (0, Pp_hovbox); length = 0 } in\n  Queue.add sys_tok pp_queue;\n  let scan_stack = Stack.create () in\n  initialize_scan_stack scan_stack;\n  Stack.push { left_total = 1; queue_elem = sys_tok } scan_stack;\n  let pp_margin = 78\n  and pp_min_space_left = 10 in\n  {\n    pp_scan_stack = scan_stack;\n    pp_format_stack = Stack.create ();\n    pp_tbox_stack = Stack.create ();\n    pp_tag_stack = Stack.create ();\n    pp_mark_stack = Stack.create ();\n    pp_margin = pp_margin;\n    pp_min_space_left = pp_min_space_left;\n    pp_max_indent = pp_margin - pp_min_space_left;\n    pp_space_left = pp_margin;\n    pp_current_indent = 0;\n    pp_is_new_line = true;\n    pp_left_total = 1;\n    pp_right_total = 1;\n    pp_curr_depth = 1;\n    pp_max_boxes = max_int;\n    pp_ellipsis = \".\";\n    pp_out_string = f;\n    pp_out_flush = g;\n    pp_out_newline = h;\n    pp_out_spaces = i;\n    pp_out_indent = j;\n    pp_print_tags = false;\n    pp_mark_tags = false;\n    pp_mark_open_tag = default_pp_mark_open_tag;\n    pp_mark_close_tag = default_pp_mark_close_tag;\n    pp_print_open_tag = default_pp_print_open_tag;\n    pp_print_close_tag = default_pp_print_close_tag;\n    pp_queue = pp_queue;\n  }\n\n\n(* Build a formatter out of its out functions. *)\nlet formatter_of_out_functions out_funs =\n  pp_make_formatter\n    out_funs.out_string\n    out_funs.out_flush\n    out_funs.out_newline\n    out_funs.out_spaces\n    out_funs.out_indent\n\n\n(* Make a formatter with default functions to output spaces,\n  indentation, and new lines. *)\nlet make_formatter output flush =\n  let ppf = pp_make_formatter output flush ignore ignore ignore in\n  ppf.pp_out_newline <- display_newline ppf;\n  ppf.pp_out_spaces <- display_blanks ppf;\n  ppf.pp_out_indent <- display_indent ppf;\n  ppf\n\n\n(* Make a formatter writing to a given [Stdlib.out_channel] value. *)\nlet formatter_of_out_channel oc =\n  make_formatter (output_substring oc) (fun () -> flush oc)\n\n\n(* Make a formatter writing to a given [Buffer.t] value. *)\nlet formatter_of_buffer b =\n  make_formatter (Buffer.add_substring b) ignore\n\n\n(* Allocating buffer for pretty-printing purposes.\n   Default buffer size is pp_buffer_size or 512.\n*)\nlet pp_buffer_size = 512\nlet pp_make_buffer () = Buffer.create pp_buffer_size\n\n(* The standard (shared) buffer. *)\nlet stdbuf = pp_make_buffer ()\n\n(* Predefined formatters standard formatter to print\n   to [Stdlib.stdout], [Stdlib.stderr], and {!stdbuf}. *)\nlet std_formatter = formatter_of_out_channel Stdlib.stdout\nand err_formatter = formatter_of_out_channel Stdlib.stderr\nand str_formatter = formatter_of_buffer stdbuf\n\n(* Initialise domain local state *)\nmodule DLS = Domain.DLS\n\nlet stdbuf_key = DLS.new_key pp_make_buffer\nlet _ = DLS.set stdbuf_key stdbuf\n\nlet str_formatter_key = DLS.new_key (fun () ->\n  formatter_of_buffer (DLS.get stdbuf_key))\nlet _ = DLS.set str_formatter_key str_formatter\n\nlet buffered_out_string key str ofs len =\n  Buffer.add_substring (Domain.DLS.get key) str ofs len\n\nlet buffered_out_flush oc key () =\n  let buf = Domain.DLS.get key in\n  let len = Buffer.length buf in\n  let str = Buffer.contents buf in\n  output_substring oc str 0 len ;\n  Stdlib.flush oc;\n  Buffer.clear buf\n\nlet std_buf_key = Domain.DLS.new_key (fun () -> Buffer.create pp_buffer_size)\nlet err_buf_key = Domain.DLS.new_key (fun () -> Buffer.create pp_buffer_size)\n\nlet std_formatter_key = DLS.new_key (fun () ->\n  let ppf =\n    pp_make_formatter (buffered_out_string std_buf_key)\n      (buffered_out_flush Stdlib.stdout std_buf_key) ignore ignore ignore\n  in\n  ppf.pp_out_newline <- display_newline ppf;\n  ppf.pp_out_spaces <- display_blanks ppf;\n  ppf.pp_out_indent <- display_indent ppf;\n  Domain.at_exit (pp_print_flush ppf);\n  ppf)\nlet _ = DLS.set std_formatter_key std_formatter\n\nlet err_formatter_key = DLS.new_key (fun () ->\n  let ppf =\n    pp_make_formatter (buffered_out_string err_buf_key)\n      (buffered_out_flush Stdlib.stderr err_buf_key) ignore ignore ignore\n  in\n  ppf.pp_out_newline <- display_newline ppf;\n  ppf.pp_out_spaces <- display_blanks ppf;\n  ppf.pp_out_indent <- display_indent ppf;\n  Domain.at_exit (pp_print_flush ppf);\n  ppf)\nlet _ = DLS.set err_formatter_key err_formatter\n\nlet get_std_formatter () = DLS.get std_formatter_key\nlet get_err_formatter () = DLS.get err_formatter_key\nlet get_str_formatter () = DLS.get str_formatter_key\nlet get_stdbuf () = DLS.get stdbuf_key\n\n(* [flush_buffer_formatter buf ppf] flushes formatter [ppf],\n   then returns the contents of buffer [buf] that is reset.\n   Formatter [ppf] is supposed to print to buffer [buf], otherwise this\n   function is not really useful. *)\nlet flush_buffer_formatter buf ppf =\n  pp_flush_queue ppf ~end_with_newline:false;\n  let s = Buffer.contents buf in\n  Buffer.reset buf;\n  s\n\n(* Flush [str_formatter] and get the contents of [stdbuf]. *)\nlet flush_str_formatter () =\n  let stdbuf = DLS.get stdbuf_key in\n  let str_formatter = DLS.get str_formatter_key in\n  flush_buffer_formatter stdbuf str_formatter\n\nlet make_synchronized_formatter output flush =\n  DLS.new_key (fun () ->\n    let buf = Buffer.create pp_buffer_size in\n    let output' = Buffer.add_substring buf in\n    let flush' () =\n      output (Buffer.contents buf) 0 (Buffer.length buf);\n      Buffer.clear buf;\n      flush ()\n    in\n    make_formatter output' flush')\n\nlet synchronized_formatter_of_out_channel oc =\n  make_synchronized_formatter (output_substring oc) (fun () -> flush oc)\n\n(*\n  Symbolic pretty-printing\n*)\n\n(*\n  Symbolic pretty-printing is pretty-printing with no low level output.\n\n  When using a symbolic formatter, all regular pretty-printing activities\n  occur but output material is symbolic and stored in a buffer of output\n  items. At the end of pretty-printing, flushing the output buffer allows\n  post-processing of symbolic output before low level output operations.\n*)\n\ntype symbolic_output_item =\n  | Output_flush\n  | Output_newline\n  | Output_string of string\n  | Output_spaces of int\n  | Output_indent of int\n\ntype symbolic_output_buffer = {\n  mutable symbolic_output_contents : symbolic_output_item list;\n}\n\nlet make_symbolic_output_buffer () =\n  { symbolic_output_contents = [] }\n\nlet clear_symbolic_output_buffer sob =\n  sob.symbolic_output_contents <- []\n\nlet get_symbolic_output_buffer sob =\n  List.rev sob.symbolic_output_contents\n\nlet flush_symbolic_output_buffer sob =\n  let items = get_symbolic_output_buffer sob in\n  clear_symbolic_output_buffer sob;\n  items\n\nlet add_symbolic_output_item sob item =\n  sob.symbolic_output_contents <- item :: sob.symbolic_output_contents\n\nlet formatter_of_symbolic_output_buffer sob =\n  let symbolic_flush sob () =\n    add_symbolic_output_item sob Output_flush\n  and symbolic_newline sob () =\n    add_symbolic_output_item sob Output_newline\n  and symbolic_string sob s i n =\n    add_symbolic_output_item sob (Output_string (String.sub s i n))\n  and symbolic_spaces sob n =\n    add_symbolic_output_item sob (Output_spaces n)\n  and symbolic_indent sob n =\n    add_symbolic_output_item sob (Output_indent n) in\n\n  let f = symbolic_string sob\n  and g = symbolic_flush sob\n  and h = symbolic_newline sob\n  and i = symbolic_spaces sob\n  and j = symbolic_indent sob in\n  pp_make_formatter f g h i j\n\n(*\n\n  Basic functions on the 'standard' formatter\n  (the formatter that prints to [Stdlib.stdout]).\n\n*)\n\nlet open_hbox v = pp_open_hbox (DLS.get std_formatter_key) v\nand open_vbox v = pp_open_vbox (DLS.get std_formatter_key) v\nand open_hvbox v = pp_open_hvbox (DLS.get std_formatter_key) v\nand open_hovbox v = pp_open_hovbox (DLS.get std_formatter_key) v\nand open_box v = pp_open_box (DLS.get std_formatter_key) v\nand close_box v = pp_close_box (DLS.get std_formatter_key) v\nand open_stag v = pp_open_stag (DLS.get std_formatter_key) v\nand close_stag v = pp_close_stag (DLS.get std_formatter_key) v\nand print_as v w = pp_print_as (DLS.get std_formatter_key) v w\nand print_string v = pp_print_string (DLS.get std_formatter_key) v\nand print_bytes v = pp_print_bytes (DLS.get std_formatter_key) v\nand print_int v = pp_print_int (DLS.get std_formatter_key) v\nand print_float v = pp_print_float (DLS.get std_formatter_key) v\nand print_char v = pp_print_char (DLS.get std_formatter_key) v\nand print_bool v = pp_print_bool (DLS.get std_formatter_key) v\nand print_break v w = pp_print_break (DLS.get std_formatter_key) v w\nand print_cut v = pp_print_cut (DLS.get std_formatter_key) v\nand print_space v = pp_print_space (DLS.get std_formatter_key) v\nand force_newline v = pp_force_newline (DLS.get std_formatter_key) v\nand print_flush v = pp_print_flush (DLS.get std_formatter_key) v\nand print_newline v = pp_print_newline (DLS.get std_formatter_key) v\nand print_if_newline v = pp_print_if_newline (DLS.get std_formatter_key) v\n\nand open_tbox v = pp_open_tbox (DLS.get std_formatter_key) v\nand close_tbox v = pp_close_tbox (DLS.get std_formatter_key) v\nand print_tbreak v w = pp_print_tbreak (DLS.get std_formatter_key) v w\n\nand set_tab v = pp_set_tab (DLS.get std_formatter_key) v\nand print_tab v = pp_print_tab (DLS.get std_formatter_key) v\n\nand set_margin v = pp_set_margin (DLS.get std_formatter_key) v\nand get_margin v = pp_get_margin (DLS.get std_formatter_key) v\n\nand set_max_indent v = pp_set_max_indent (DLS.get std_formatter_key) v\nand get_max_indent v = pp_get_max_indent (DLS.get std_formatter_key) v\n\nand set_geometry ~max_indent ~margin =\n  pp_set_geometry (DLS.get std_formatter_key) ~max_indent ~margin\nand safe_set_geometry ~max_indent ~margin =\n  pp_safe_set_geometry (DLS.get std_formatter_key) ~max_indent ~margin\nand get_geometry v = pp_get_geometry (DLS.get std_formatter_key) v\nand update_geometry v = pp_update_geometry (DLS.get std_formatter_key) v\n\nand set_max_boxes v = pp_set_max_boxes (DLS.get std_formatter_key) v\nand get_max_boxes v = pp_get_max_boxes (DLS.get std_formatter_key) v\nand over_max_boxes v = pp_over_max_boxes (DLS.get std_formatter_key) v\n\nand set_ellipsis_text v = pp_set_ellipsis_text (DLS.get std_formatter_key) v\nand get_ellipsis_text v = pp_get_ellipsis_text (DLS.get std_formatter_key) v\n\nand set_formatter_out_channel v =\n  pp_set_formatter_out_channel (DLS.get std_formatter_key) v\n\nand set_formatter_out_functions v =\n  pp_set_formatter_out_functions (DLS.get std_formatter_key) v\nand get_formatter_out_functions v =\n  pp_get_formatter_out_functions (DLS.get std_formatter_key) v\n\nand set_formatter_output_functions v w =\n  pp_set_formatter_output_functions (DLS.get std_formatter_key) v w\nand get_formatter_output_functions v =\n  pp_get_formatter_output_functions (DLS.get std_formatter_key) v\n\nand set_formatter_stag_functions v =\n  pp_set_formatter_stag_functions (DLS.get std_formatter_key) v\nand get_formatter_stag_functions v =\n  pp_get_formatter_stag_functions (DLS.get std_formatter_key) v\nand set_print_tags v =\n  pp_set_print_tags (DLS.get std_formatter_key) v\nand get_print_tags v =\n  pp_get_print_tags (DLS.get std_formatter_key) v\nand set_mark_tags v =\n  pp_set_mark_tags (DLS.get std_formatter_key) v\nand get_mark_tags v =\n  pp_get_mark_tags (DLS.get std_formatter_key) v\nand set_tags v =\n  pp_set_tags (DLS.get std_formatter_key) v\n\n\n(* Convenience functions *)\n\nlet pp_print_iter ?(pp_sep = pp_print_cut) iter pp_v ppf v =\n  let is_first = ref true in\n  let pp_v v =\n    if !is_first then is_first := false else pp_sep ppf ();\n    pp_v ppf v\n  in\n  iter pp_v v\n\n(* To format a list *)\nlet pp_print_list ?(pp_sep = pp_print_cut) pp_v ppf v =\n  pp_print_iter ~pp_sep List.iter pp_v ppf v\n\n(* To format an array *)\nlet pp_print_array ?(pp_sep = pp_print_cut) pp_v ppf v =\n  pp_print_iter ~pp_sep Array.iter pp_v ppf v\n\n(* To format a sequence *)\nlet pp_print_seq ?(pp_sep = pp_print_cut) pp_v ppf seq =\n  pp_print_iter ~pp_sep Seq.iter pp_v ppf seq\n\n(* To format free-flowing text *)\nlet pp_print_text ppf s =\n  let len = String.length s in\n  let left = ref 0 in\n  let right = ref 0 in\n  let flush () =\n    pp_print_string ppf (String.sub s !left (!right - !left));\n    incr right; left := !right;\n  in\n  while (!right <> len) do\n    match s.[!right] with\n      | '\\n' ->\n        flush ();\n        pp_force_newline ppf ()\n      | ' ' ->\n        flush (); pp_print_space ppf ()\n      (* there is no specific support for '\\t'\n         as it is unclear what a right semantics would be *)\n      | _ -> incr right\n  done;\n  if !left <> len then flush ()\n\nlet pp_print_option ?(none = fun _ () -> ()) pp_v ppf = function\n| None -> none ppf ()\n| Some v -> pp_v ppf v\n\nlet pp_print_result ~ok ~error ppf = function\n| Ok v -> ok ppf v\n| Error e -> error ppf e\n\nlet pp_print_either ~left ~right ppf = function\n| Either.Left l -> left ppf l\n| Either.Right r -> right ppf r\n\n (**************************************************************)\n\nlet compute_tag output tag_acc =\n  let buf = Buffer.create 16 in\n  let ppf = formatter_of_buffer buf in\n  output ppf tag_acc;\n  pp_print_flush ppf ();\n  let len = Buffer.length buf in\n  if len < 2 then Buffer.contents buf\n  else Buffer.sub buf 1 (len - 2)\n\n (**************************************************************\n\n  Defining continuations to be passed as arguments of\n  CamlinternalFormat.make_printf.\n\n  **************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\n(* Interpret a formatting entity on a formatter. *)\nlet output_formatting_lit ppf fmting_lit = match fmting_lit with\n  | Close_box                 -> pp_close_box ppf ()\n  | Close_tag                 -> pp_close_stag ppf ()\n  | Break (_, width, offset)  -> pp_print_break ppf width offset\n  | FFlush                    -> pp_print_flush ppf ()\n  | Force_newline             -> pp_force_newline ppf ()\n  | Flush_newline             -> pp_print_newline ppf ()\n  | Magic_size (_, _)         -> ()\n  | Escaped_at                -> pp_print_char ppf '@'\n  | Escaped_percent           -> pp_print_char ppf '%'\n  | Scan_indic c              -> pp_print_char ppf '@'; pp_print_char ppf c\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Differ from Printf.output_acc by the interpretation of formatting. *)\n(* Used as a continuation of CamlinternalFormat.make_printf. *)\nlet rec output_acc ppf acc = match acc with\n  | Acc_string_literal (Acc_formatting_lit (p, Magic_size (_, size)), s)\n  | Acc_data_string (Acc_formatting_lit (p, Magic_size (_, size)), s) ->\n    output_acc ppf p;\n    pp_print_as_size ppf (Size.of_int size) s;\n  | Acc_char_literal (Acc_formatting_lit (p, Magic_size (_, size)), c)\n  | Acc_data_char (Acc_formatting_lit (p, Magic_size (_, size)), c) ->\n    output_acc ppf p;\n    pp_print_as_size ppf (Size.of_int size) (String.make 1 c);\n  | Acc_formatting_lit (p, f) ->\n    output_acc ppf p;\n    output_formatting_lit ppf f;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc ppf p;\n    pp_open_stag ppf (String_tag (compute_tag output_acc acc'))\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc ppf p;\n    let (indent, bty) = open_box_of_string (compute_tag output_acc acc') in\n    pp_open_box_gen ppf indent bty\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc ppf p; pp_print_string ppf s;\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc ppf p; pp_print_char ppf c;\n  | Acc_delay (p, f)         -> output_acc ppf p; f ppf;\n  | Acc_flush p              -> output_acc ppf p; pp_print_flush ppf ();\n  | Acc_invalid_arg (p, msg) -> output_acc ppf p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from Printf.bufput_acc by the interpretation of formatting. *)\n(* Used as a continuation of CamlinternalFormat.make_printf. *)\nlet rec strput_acc ppf acc = match acc with\n  | Acc_string_literal (Acc_formatting_lit (p, Magic_size (_, size)), s)\n  | Acc_data_string (Acc_formatting_lit (p, Magic_size (_, size)), s) ->\n    strput_acc ppf p;\n    pp_print_as_size ppf (Size.of_int size) s;\n  | Acc_char_literal (Acc_formatting_lit (p, Magic_size (_, size)), c)\n  | Acc_data_char (Acc_formatting_lit (p, Magic_size (_, size)), c) ->\n    strput_acc ppf p;\n    pp_print_as_size ppf (Size.of_int size) (String.make 1 c);\n  | Acc_delay (Acc_formatting_lit (p, Magic_size (_, size)), f) ->\n    strput_acc ppf p;\n    pp_print_as_size ppf (Size.of_int size) (f ());\n  | Acc_formatting_lit (p, f) ->\n    strput_acc ppf p;\n    output_formatting_lit ppf f;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc ppf p;\n    pp_open_stag ppf (String_tag (compute_tag strput_acc acc'))\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc ppf p;\n    let (indent, bty) = open_box_of_string (compute_tag strput_acc acc') in\n    pp_open_box_gen ppf indent bty\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc ppf p; pp_print_string ppf s;\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc ppf p; pp_print_char ppf c;\n  | Acc_delay (p, f)         -> strput_acc ppf p; pp_print_string ppf (f ());\n  | Acc_flush p              -> strput_acc ppf p; pp_print_flush ppf ();\n  | Acc_invalid_arg (p, msg) -> strput_acc ppf p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(*\n\n  Defining [fprintf] and various flavors of [fprintf].\n\n*)\n\nlet kfprintf k ppf (Format (fmt, _)) =\n  make_printf\n    (fun acc -> output_acc ppf acc; k ppf)\n    End_of_acc fmt\n\nand ikfprintf k ppf (Format (fmt, _)) =\n  make_iprintf k ppf fmt\n\nlet ifprintf _ppf (Format (fmt, _)) =\n  make_iprintf ignore () fmt\n\nlet fprintf ppf = kfprintf ignore ppf\n\nlet printf (Format (fmt, _)) =\n  make_printf\n    (fun acc -> output_acc (DLS.get std_formatter_key) acc)\n    End_of_acc fmt\n\nlet eprintf (Format (fmt, _)) =\n  make_printf\n    (fun acc -> output_acc (DLS.get err_formatter_key) acc)\n    End_of_acc fmt\n\nlet kdprintf k (Format (fmt, _)) =\n  make_printf\n    (fun acc -> k (fun ppf -> output_acc ppf acc))\n    End_of_acc fmt\n\nlet dprintf fmt = kdprintf (fun i -> i) fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let b = pp_make_buffer () in\n  let ppf = formatter_of_buffer b in\n  let k acc =\n    strput_acc ppf acc;\n    k (flush_buffer_formatter b ppf) in\n  make_printf k End_of_acc fmt\n\n\nlet sprintf fmt = ksprintf id fmt\n\nlet kasprintf k (Format (fmt, _)) =\n  let b = pp_make_buffer () in\n  let ppf = formatter_of_buffer b in\n  let k acc =\n    output_acc ppf acc;\n    k (flush_buffer_formatter b ppf) in\n  make_printf k End_of_acc fmt\n\n\nlet asprintf fmt = kasprintf id fmt\n\n(* Flushing standard formatters at end of execution. *)\n\nlet flush_standard_formatters () =\n  pp_print_flush (DLS.get std_formatter_key) ();\n  pp_print_flush (DLS.get err_formatter_key) ()\n\nlet () = at_exit flush_standard_formatters\n\nlet () = Domain.before_first_spawn (fun () ->\n  flush_standard_formatters ();\n  let fs = pp_get_formatter_out_functions std_formatter () in\n  pp_set_formatter_out_functions std_formatter\n    {fs with out_string = buffered_out_string std_buf_key;\n             out_flush = buffered_out_flush Stdlib.stdout std_buf_key};\n\n  let fs = pp_get_formatter_out_functions err_formatter () in\n  pp_set_formatter_out_functions err_formatter\n    {fs with out_string = buffered_out_string err_buf_key;\n             out_flush = buffered_out_flush Stdlib.stderr err_buf_key};\n)\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Pierre Weis, projet Cristal, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\n(* alias to avoid warning for ambiguity between\n   Stdlib.format6\n   and CamlinternalFormatBasics.format6\n\n   (the former is in fact an alias for the latter,\n    but the ambiguity warning doesn't care)\n*)\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  ('a, 'b, 'c, 'd, 'e, 'f) Stdlib.format6\n\n\n(* The run-time library for scanners. *)\n\n(* Scanning buffers. *)\nmodule type SCANNING = sig\n\n  type in_channel\n\n  type scanbuf = in_channel\n\n  type file_name = string\n\n  val stdin : in_channel\n  (* The scanning buffer reading from [Stdlib.stdin]. *)\n\n  val next_char : scanbuf -> char\n  (* [Scanning.next_char ib] advance the scanning buffer for\n     one character.\n     If no more character can be read, sets a end of file condition and\n     returns '\\000'. *)\n\n  val invalidate_current_char : scanbuf -> unit\n  (* [Scanning.invalidate_current_char ib] mark the current_char as already\n     scanned. *)\n\n  val peek_char : scanbuf -> char\n  (* [Scanning.peek_char ib] returns the current char available in\n     the buffer or reads one if necessary (when the current character is\n     already scanned).\n     If no character can be read, sets an end of file condition and\n     returns '\\000'. *)\n\n  val checked_peek_char : scanbuf -> char\n  (* Same as [Scanning.peek_char] above but always returns a valid char or\n     fails: instead of returning a null char when the reading method of the\n     input buffer has reached an end of file, the function raises exception\n     [End_of_file]. *)\n\n  val store_char : int -> scanbuf -> char -> int\n  (* [Scanning.store_char lim ib c] adds [c] to the token buffer\n     of the scanning buffer [ib]. It also advances the scanning buffer for\n     one character and returns [lim - 1], indicating the new limit for the\n     length of the current token. *)\n\n  val skip_char : int -> scanbuf -> int\n  (* [Scanning.skip_char lim ib] ignores the current character. *)\n\n  val ignore_char : int -> scanbuf -> int\n  (* [Scanning.ignore_char ib lim] ignores the current character and\n     decrements the limit. *)\n\n  val token : scanbuf -> string\n  (* [Scanning.token ib] returns the string stored into the token\n     buffer of the scanning buffer: it returns the token matched by the\n     format. *)\n\n  val reset_token : scanbuf -> unit\n  (* [Scanning.reset_token ib] resets the token buffer of\n     the given scanning buffer. *)\n\n  val char_count : scanbuf -> int\n  (* [Scanning.char_count ib] returns the number of characters\n     read so far from the given buffer. *)\n\n  val line_count : scanbuf -> int\n  (* [Scanning.line_count ib] returns the number of new line\n     characters read so far from the given buffer. *)\n\n  val token_count : scanbuf -> int\n  (* [Scanning.token_count ib] returns the number of tokens read\n     so far from [ib]. *)\n\n  val eof : scanbuf -> bool\n  (* [Scanning.eof ib] returns the end of input condition\n     of the given buffer. *)\n\n  val end_of_input : scanbuf -> bool\n  (* [Scanning.end_of_input ib] tests the end of input condition\n     of the given buffer (if no char has ever been read, an attempt to\n     read one is performed). *)\n\n  val beginning_of_input : scanbuf -> bool\n  (* [Scanning.beginning_of_input ib] tests the beginning of input\n     condition of the given buffer. *)\n\n  val name_of_input : scanbuf -> string\n  (* [Scanning.name_of_input ib] returns the name of the character\n     source for input buffer [ib]. *)\n\n  val open_in : file_name -> in_channel\n  val open_in_bin : file_name -> in_channel\n  val from_file : file_name -> in_channel\n  val from_file_bin : file_name -> in_channel\n  val from_string : string -> in_channel\n  val from_function : (unit -> char) -> in_channel\n  val from_channel : Stdlib.in_channel -> in_channel\n\n  val close_in : in_channel -> unit\n\nend\n\n\nmodule Scanning : SCANNING = struct\n\n  (* The run-time library for scanf. *)\n\n  type file_name = string\n\n  type in_channel_name =\n    | From_channel of Stdlib.in_channel\n    | From_file of file_name * Stdlib.in_channel\n    | From_function\n    | From_string\n\n\n  type in_channel = {\n    mutable ic_eof : bool;\n    mutable ic_current_char : char;\n    mutable ic_current_char_is_valid : bool;\n    mutable ic_char_count : int;\n    mutable ic_line_count : int;\n    mutable ic_token_count : int;\n    ic_get_next_char : unit -> char;\n    ic_token_buffer : Buffer.t;\n    ic_input_name : in_channel_name;\n  }\n\n\n  type scanbuf = in_channel\n\n  let null_char = '\\000'\n\n  (* Reads a new character from input buffer.\n     Next_char never fails, even in case of end of input:\n     it then simply sets the end of file condition. *)\n  let next_char ib =\n    try\n      let c = ib.ic_get_next_char () in\n      ib.ic_current_char <- c;\n      ib.ic_current_char_is_valid <- true;\n      ib.ic_char_count <- succ ib.ic_char_count;\n      if c = '\\n' then ib.ic_line_count <- succ ib.ic_line_count;\n      c with\n    | End_of_file ->\n      let c = null_char in\n      ib.ic_current_char <- c;\n      ib.ic_current_char_is_valid <- false;\n      ib.ic_eof <- true;\n      c\n\n\n  let peek_char ib =\n    if ib.ic_current_char_is_valid\n    then ib.ic_current_char\n    else next_char ib\n\n\n  (* Returns a valid current char for the input buffer. In particular\n     no irrelevant null character (as set by [next_char] in case of end\n     of input) is returned, since [End_of_file] is raised when\n     [next_char] sets the end of file condition while trying to read a\n     new character. *)\n  let checked_peek_char ib =\n    let c = peek_char ib in\n    if ib.ic_eof then raise End_of_file;\n    c\n\n\n  let end_of_input ib =\n    ignore (peek_char ib);\n    ib.ic_eof\n\n\n  let eof ib = ib.ic_eof\n\n  let beginning_of_input ib = ib.ic_char_count = 0\n\n  let name_of_input ib =\n    match ib.ic_input_name with\n    | From_channel _ic -> \"unnamed Stdlib input channel\"\n    | From_file (fname, _ic) -> fname\n    | From_function -> \"unnamed function\"\n    | From_string -> \"unnamed character string\"\n\n\n  let char_count ib =\n    if ib.ic_current_char_is_valid\n    then ib.ic_char_count - 1\n    else ib.ic_char_count\n\n\n  let line_count ib = ib.ic_line_count\n\n  let reset_token ib = Buffer.reset ib.ic_token_buffer\n\n  let invalidate_current_char ib = ib.ic_current_char_is_valid <- false\n\n  let token ib =\n    let token_buffer = ib.ic_token_buffer in\n    let tok = Buffer.contents token_buffer in\n    Buffer.clear token_buffer;\n    ib.ic_token_count <- succ ib.ic_token_count;\n    tok\n\n\n  let token_count ib = ib.ic_token_count\n\n  let skip_char width ib =\n    invalidate_current_char ib;\n    width\n\n\n  let ignore_char width ib = skip_char (width - 1) ib\n\n  let store_char width ib c =\n    Buffer.add_char ib.ic_token_buffer c;\n    ignore_char width ib\n\n\n  let default_token_buffer_size = 1024\n\n  let create iname next = {\n    ic_eof = false;\n    ic_current_char = null_char;\n    ic_current_char_is_valid = false;\n    ic_char_count = 0;\n    ic_line_count = 0;\n    ic_token_count = 0;\n    ic_get_next_char = next;\n    ic_token_buffer = Buffer.create default_token_buffer_size;\n    ic_input_name = iname;\n  }\n\n\n  let from_string s =\n    let i = ref 0 in\n    let len = String.length s in\n    let next () =\n      if !i >= len then raise End_of_file else\n      let c = s.[!i] in\n      incr i;\n      c in\n    create From_string next\n\n\n  let from_function = create From_function\n\n  (* Scanning from an input channel. *)\n\n  (* Position of the problem:\n\n     We cannot prevent the scanning mechanism to use one lookahead character,\n     if needed by the semantics of the format string specifications (e.g. a\n     trailing 'skip space' specification in the format string); in this case,\n     the mandatory lookahead character is indeed read from the input and not\n     used to return the token read. It is thus mandatory to be able to store\n     an unused lookahead character somewhere to get it as the first character\n     of the next scan.\n\n     To circumvent this problem, all the scanning functions get a low level\n     input buffer argument where they store the lookahead character when\n     needed; additionally, the input buffer is the only source of character of\n     a scanner. The [scanbuf] input buffers are defined in module {!Scanning}.\n\n     Now we understand that it is extremely important that related and\n     successive calls to scanners indeed read from the same input buffer.\n     In effect, if a scanner [scan1] is reading from [ib1] and stores an\n     unused lookahead character [c1] into its input buffer [ib1], then\n     another scanner [scan2] not reading from the same buffer [ib1] will miss\n     the character [c1], seemingly vanished in the air from the point of view\n     of [scan2].\n\n     This mechanism works perfectly to read from strings, from files, and from\n     functions, since in those cases, allocating two buffers reading from the\n     same source is unnatural.\n\n     Still, there is a difficulty in the case of scanning from an input\n     channel. In effect, when scanning from an input channel [ic], this channel\n     may not have been allocated from within this library. Hence, it may be\n     shared (two functions of the user's program may successively read from\n     [ic]). This is highly error prone since, one of the function may seek the\n     input channel, while the other function has still an unused lookahead\n     character in its input buffer. In conclusion, you should never mix direct\n     low level reading and high level scanning from the same input channel.\n\n  *)\n\n  (* Perform bufferized input to improve efficiency. *)\n  let file_buffer_size = ref 1024\n\n  (* The scanner closes the input channel at end of input. *)\n  let scan_close_at_end ic = Stdlib.close_in ic; raise End_of_file\n\n  (* The scanner does not close the input channel at end of input:\n     it just raises [End_of_file]. *)\n  let scan_raise_at_end _ic = raise End_of_file\n\n  let from_ic scan_close_ic iname ic =\n    let len = !file_buffer_size in\n    let buf = Bytes.create len in\n    let i = ref 0 in\n    let lim = ref 0 in\n    let eof = ref false in\n    let next () =\n      if !i < !lim then begin let c = Bytes.get buf !i in incr i; c end else\n      if !eof then raise End_of_file else begin\n        lim := input ic buf 0 len;\n        if !lim = 0 then begin eof := true; scan_close_ic ic end else begin\n          i := 1;\n          Bytes.get buf 0\n        end\n      end in\n    create iname next\n\n\n  let from_ic_close_at_end = from_ic scan_close_at_end\n  let from_ic_raise_at_end = from_ic scan_raise_at_end\n\n  (* The scanning buffer reading from [Stdlib.stdin].\n     One could try to define [stdin] as a scanning buffer reading a character\n     at a time (no bufferization at all), but unfortunately the top-level\n     interaction would be wrong. This is due to some kind of\n     'race condition' when reading from [Stdlib.stdin],\n     since the interactive compiler and [Scanf.scanf] will simultaneously\n     read the material they need from [Stdlib.stdin]; then, confusion\n     will result from what should be read by the top-level and what should be\n     read by [Scanf.scanf].\n     This is even more complicated by the one character lookahead that\n     [Scanf.scanf] is sometimes obliged to maintain: the lookahead character\n     will be available for the next [Scanf.scanf] entry, seemingly coming from\n     nowhere.\n     Also no [End_of_file] is raised when reading from stdin: if not enough\n     characters have been read, we simply ask to read more. *)\n  let stdin =\n    from_ic scan_raise_at_end\n      (From_file (\"-\", Stdlib.stdin)) Stdlib.stdin\n\n  let open_in_file open_in fname =\n    match fname with\n    | \"-\" -> stdin\n    | fname ->\n      let ic = open_in fname in\n      from_ic_close_at_end (From_file (fname, ic)) ic\n\n\n  let open_in = open_in_file Stdlib.open_in\n  let open_in_bin = open_in_file Stdlib.open_in_bin\n\n  let from_file = open_in\n  let from_file_bin = open_in_bin\n\n  let from_channel ic =\n    from_ic_raise_at_end (From_channel ic) ic\n\n\n  let close_in ib =\n    match ib.ic_input_name with\n    | From_channel ic ->\n      Stdlib.close_in ic\n    | From_file (_fname, ic) -> Stdlib.close_in ic\n    | From_function | From_string -> ()\n\nend\n\n\n(* Formatted input functions. *)\n\ntype ('a, 'b, 'c, 'd) scanner =\n     ('a, Scanning.in_channel, 'b, 'c, 'a -> 'd, 'd) format6 -> 'c\n\ntype ('a, 'b, 'c, 'd) scanner_opt =\n     ('a, Scanning.in_channel, 'b, 'c, 'a -> 'd option, 'd) format6 -> 'c\n\n(* Reporting errors. *)\nexception Scan_failure of string\n\nlet bad_input s = raise (Scan_failure s)\n\nlet bad_input_escape c =\n  bad_input (Printf.sprintf \"illegal escape character %C\" c)\n\n\nlet bad_token_length message =\n  bad_input\n    (Printf.sprintf\n       \"scanning of %s failed: \\\n        the specified length was too short for token\"\n       message)\n\n\nlet bad_end_of_input message =\n  bad_input\n    (Printf.sprintf\n       \"scanning of %s failed: \\\n        premature end of file occurred before end of token\"\n       message)\n\n\nlet bad_float () =\n  bad_input \"no dot or exponent part found in float token\"\n\n\nlet bad_hex_float () =\n  bad_input \"not a valid float in hexadecimal notation\"\n\n\nlet character_mismatch_err c ci =\n  Printf.sprintf \"looking for %C, found %C\" c ci\n\n\nlet character_mismatch c ci =\n  bad_input (character_mismatch_err c ci)\n\n\nlet rec skip_whites ib =\n  let c = Scanning.peek_char ib in\n  if not (Scanning.eof ib) then begin\n    match c with\n    | ' ' | '\\t' | '\\n' | '\\r' ->\n      Scanning.invalidate_current_char ib; skip_whites ib\n    | _ -> ()\n  end\n\n\n(* Checking that [c] is indeed in the input, then skips it.\n   In this case, the character [c] has been explicitly specified in the\n   format as being mandatory in the input; hence we should fail with\n   [End_of_file] in case of end_of_input.\n   (Remember that [Scan_failure] is raised only when (we can prove by\n   evidence) that the input does not match the format string given. We must\n   thus differentiate [End_of_file] as an error due to lack of input, and\n   [Scan_failure] which is due to provably wrong input. I am not sure this is\n   worth the burden: it is complex and somehow subliminal; should be clearer\n   to fail with Scan_failure \"Not enough input to complete scanning\"!)\n\n   That's why, waiting for a better solution, we use checked_peek_char here.\n   We are also careful to treat \"\\r\\n\" in the input as an end of line marker:\n   it always matches a '\\n' specification in the input format string. *)\nlet rec check_char ib c =\n  match c with\n  | ' ' -> skip_whites ib\n  | '\\n' -> check_newline ib\n  | c -> check_this_char ib c\n\nand check_this_char ib c =\n  let ci = Scanning.checked_peek_char ib in\n  if ci = c then Scanning.invalidate_current_char ib else\n  character_mismatch c ci\n\nand check_newline ib =\n  let ci = Scanning.checked_peek_char ib in\n  match ci with\n  | '\\n' -> Scanning.invalidate_current_char ib\n  | '\\r' -> Scanning.invalidate_current_char ib; check_this_char ib '\\n'\n  | _ -> character_mismatch '\\n' ci\n\n\n(* Extracting tokens from the output token buffer. *)\n\nlet token_char ib = (Scanning.token ib).[0]\n\nlet token_string = Scanning.token\n\nlet token_bool ib =\n  match Scanning.token ib with\n  | \"true\" -> true\n  | \"false\" -> false\n  | s -> bad_input (Printf.sprintf \"invalid boolean '%s'\" s)\n\n\n(* The type of integer conversions. *)\ntype integer_conversion =\n  | B_conversion (* Unsigned binary conversion *)\n  | D_conversion (* Signed decimal conversion *)\n  | I_conversion (* Signed integer conversion *)\n  | O_conversion (* Unsigned octal conversion *)\n  | U_conversion (* Unsigned decimal conversion *)\n  | X_conversion (* Unsigned hexadecimal conversion *)\n\n\nlet integer_conversion_of_char = function\n  | 'b' -> B_conversion\n  | 'd' -> D_conversion\n  | 'i' -> I_conversion\n  | 'o' -> O_conversion\n  | 'u' -> U_conversion\n  | 'x' | 'X' -> X_conversion\n  | _ -> assert false\n\n\n(* Extract an integer literal token.\n   Since the functions Stdlib.*int*_of_string do not accept a leading +,\n   we skip it if necessary. *)\nlet token_int_literal conv ib =\n  let tok =\n    match conv with\n    | D_conversion | I_conversion -> Scanning.token ib\n    | U_conversion -> \"0u\" ^ Scanning.token ib\n    | O_conversion -> \"0o\" ^ Scanning.token ib\n    | X_conversion -> \"0x\" ^ Scanning.token ib\n    | B_conversion -> \"0b\" ^ Scanning.token ib in\n  let l = String.length tok in\n  if l = 0 || tok.[0] <> '+' then tok else String.sub tok 1 (l - 1)\n\n\n(* All the functions that convert a string to a number raise the exception\n   Failure when the conversion is not possible.\n   This exception is then trapped in [kscanf]. *)\nlet token_int conv ib = int_of_string (token_int_literal conv ib)\n\nlet token_float ib = float_of_string (Scanning.token ib)\n\n(* To scan native ints, int32 and int64 integers.\n   We cannot access to conversions to/from strings for those types,\n   Nativeint.of_string, Int32.of_string, and Int64.of_string,\n   since those modules are not available to [Scanf].\n   However, we can bind and use the corresponding primitives that are\n   available in the runtime. *)\nexternal nativeint_of_string : string -> nativeint\n  = \"caml_nativeint_of_string\"\n\nexternal int32_of_string : string -> int32\n  = \"caml_int32_of_string\"\n\nexternal int64_of_string : string -> int64\n  = \"caml_int64_of_string\"\n\n\nlet token_nativeint conv ib = nativeint_of_string (token_int_literal conv ib)\nlet token_int32 conv ib = int32_of_string (token_int_literal conv ib)\nlet token_int64 conv ib = int64_of_string (token_int_literal conv ib)\n\n(* Scanning numbers. *)\n\n(* Digits scanning functions suppose that one character has been checked and\n   is available, since they return at end of file with the currently found\n   token selected.\n\n   Put it in another way, the digits scanning functions scan for a possibly\n   empty sequence of digits, (hence, a successful scanning from one of those\n   functions does not imply that the token is a well-formed number: to get a\n   true number, it is mandatory to check that at least one valid digit is\n   available before calling one of the digit scanning functions). *)\n\n(* The decimal case is treated especially for optimization purposes. *)\nlet rec scan_decimal_digit_star width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | '0' .. '9' as c ->\n    let width = Scanning.store_char width ib c in\n    scan_decimal_digit_star width ib\n  | '_' ->\n    let width = Scanning.ignore_char width ib in\n    scan_decimal_digit_star width ib\n  | _ -> width\n\n\nlet scan_decimal_digit_plus width ib =\n  if width = 0 then bad_token_length \"decimal digits\" else\n  let c = Scanning.checked_peek_char ib in\n  match c with\n  | '0' .. '9' ->\n    let width = Scanning.store_char width ib c in\n    scan_decimal_digit_star width ib\n  | c ->\n    bad_input (Printf.sprintf \"character %C is not a decimal digit\" c)\n\n\n(* To scan numbers from other bases, we use a predicate argument to\n   scan digits. *)\nlet scan_digit_star digitp width ib =\n  let rec scan_digits width ib =\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n    match c with\n    | c when digitp c ->\n      let width = Scanning.store_char width ib c in\n      scan_digits width ib\n    | '_' ->\n      let width = Scanning.ignore_char width ib in\n      scan_digits width ib\n    | _ -> width in\n  scan_digits width ib\n\n\nlet scan_digit_plus basis digitp width ib =\n  (* Ensure we have got enough width left,\n     and read at least one digit. *)\n  if width = 0 then bad_token_length \"digits\" else\n  let c = Scanning.checked_peek_char ib in\n  if digitp c then\n    let width = Scanning.store_char width ib c in\n    scan_digit_star digitp width ib\n  else\n    bad_input (Printf.sprintf \"character %C is not a valid %s digit\" c basis)\n\n\nlet is_binary_digit = function\n  | '0' .. '1' -> true\n  | _ -> false\n\n\nlet scan_binary_int = scan_digit_plus \"binary\" is_binary_digit\n\nlet is_octal_digit = function\n  | '0' .. '7' -> true\n  | _ -> false\n\n\nlet scan_octal_int = scan_digit_plus \"octal\" is_octal_digit\n\nlet is_hexa_digit = function\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' -> true\n  | _ -> false\n\n\nlet scan_hexadecimal_int = scan_digit_plus \"hexadecimal\" is_hexa_digit\n\n(* Scan a decimal integer. *)\nlet scan_unsigned_decimal_int = scan_decimal_digit_plus\n\nlet scan_sign width ib =\n  let c = Scanning.checked_peek_char ib in\n  match c with\n  | '+' -> Scanning.store_char width ib c\n  | '-' -> Scanning.store_char width ib c\n  | _ -> width\n\n\nlet scan_optionally_signed_decimal_int width ib =\n  let width = scan_sign width ib in\n  scan_unsigned_decimal_int width ib\n\n\n(* Scan an unsigned integer that could be given in any (common) basis.\n   If digits are prefixed by one of 0x, 0X, 0o, or 0b, the number is\n   assumed to be written respectively in hexadecimal, hexadecimal,\n   octal, or binary. *)\nlet scan_unsigned_int width ib =\n  match Scanning.checked_peek_char ib with\n  | '0' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n    begin match c with\n    | 'x' | 'X' -> scan_hexadecimal_int (Scanning.store_char width ib c) ib\n    | 'o' -> scan_octal_int (Scanning.store_char width ib c) ib\n    | 'b' -> scan_binary_int (Scanning.store_char width ib c) ib\n    | _ -> scan_decimal_digit_star width ib end\n  | _ -> scan_unsigned_decimal_int width ib\n\n\nlet scan_optionally_signed_int width ib =\n  let width = scan_sign width ib in\n  scan_unsigned_int width ib\n\n\nlet scan_int_conversion conv width ib =\n  match conv with\n  | B_conversion -> scan_binary_int width ib\n  | D_conversion -> scan_optionally_signed_decimal_int width ib\n  | I_conversion -> scan_optionally_signed_int width ib\n  | O_conversion -> scan_octal_int width ib\n  | U_conversion -> scan_unsigned_decimal_int width ib\n  | X_conversion -> scan_hexadecimal_int width ib\n\n\n(* Scanning floating point numbers. *)\n\n(* Fractional part is optional and can be reduced to 0 digits. *)\nlet scan_fractional_part width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | '0' .. '9' as c ->\n    scan_decimal_digit_star (Scanning.store_char width ib c) ib\n  | _ -> width\n\n\n(* Exp part is optional and can be reduced to 0 digits. *)\nlet scan_exponent_part width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | 'e' | 'E' as c ->\n    scan_optionally_signed_decimal_int (Scanning.store_char width ib c) ib\n  | _ -> width\n\n\n(* Scan the integer part of a floating point number, (not using the\n   OCaml lexical convention since the integer part can be empty):\n   an optional sign, followed by a possibly empty sequence of decimal\n   digits (e.g. -.1). *)\nlet scan_integer_part width ib =\n  let width = scan_sign width ib in\n  scan_decimal_digit_star width ib\n\n\n(*\n   For the time being we have (as found in scanf.mli):\n   the field width is composed of an optional integer literal\n   indicating the maximal width of the token to read.\n   Unfortunately, the type-checker let the user write an optional precision,\n   since this is valid for printf format strings.\n\n   Thus, the next step for Scanf is to support a full width and precision\n   indication, more or less similar to the one for printf, possibly extended\n   to the specification of a [max, min] range for the width of the token read\n   for strings. Something like the following spec for scanf.mli:\n\n   The optional [width] is an integer indicating the maximal\n   width of the token read. For instance, [%6d] reads an integer,\n   having at most 6 characters.\n\n   The optional [precision] is a dot [.] followed by an integer:\n\n   - in the floating point number conversions ([%f], [%e], [%g], [%F], [%E],\n   and [%F] conversions, the [precision] indicates the maximum number of\n   digits that may follow the decimal point. For instance, [%.4f] reads a\n   [float] with at most 4 fractional digits,\n\n   - in the string conversions ([%s], [%S], [%\\[ range \\]]), and in the\n   integer number conversions ([%i], [%d], [%u], [%x], [%o], and their\n   [int32], [int64], and [native_int] correspondent), the [precision]\n   indicates the required minimum width of the token read,\n\n   - on all other conversions, the width and precision specify the [max, min]\n   range for the width of the token read.\n*)\nlet scan_float width precision ib =\n  let width = scan_integer_part width ib in\n  if width = 0 then width, precision else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width, precision else\n  match c with\n  | '.' ->\n    let width = Scanning.store_char width ib c in\n    let precision = Int.min width precision in\n    let width = width - (precision - scan_fractional_part precision ib) in\n    scan_exponent_part width ib, precision\n  | _ ->\n    scan_exponent_part width ib, precision\n\n\nlet check_case_insensitive_string width ib error str =\n  let lowercase c =\n    match c with\n    | 'A' .. 'Z' ->\n      char_of_int (int_of_char c - int_of_char 'A' + int_of_char 'a')\n    | _ -> c in\n  let len = String.length str in\n  let width = ref width in\n  for i = 0 to len - 1 do\n    let c = Scanning.peek_char ib in\n    if lowercase c <> lowercase str.[i] then error ();\n    if !width = 0 then error ();\n    width := Scanning.store_char !width ib c;\n  done;\n  !width\n\n\nlet scan_hex_float width precision ib =\n  if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n  let width = scan_sign width ib in\n  if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n  match Scanning.peek_char ib with\n  | '0' as c -> (\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n    let width = check_case_insensitive_string width ib bad_hex_float \"x\" in\n    if width = 0 || Scanning.end_of_input ib then width else\n      let width = match Scanning.peek_char ib with\n        | '.' | 'p' | 'P' -> width\n        | _ -> scan_hexadecimal_int width ib in\n      if width = 0 || Scanning.end_of_input ib then width else\n        let width = match Scanning.peek_char ib with\n          | '.' as c -> (\n            let width = Scanning.store_char width ib c in\n            if width = 0 || Scanning.end_of_input ib then width else\n              match Scanning.peek_char ib with\n              | 'p' | 'P' -> width\n              | _ ->\n                let precision = Int.min width precision in\n                width - (precision - scan_hexadecimal_int precision ib)\n          )\n          | _ -> width in\n        if width = 0 || Scanning.end_of_input ib then width else\n          match Scanning.peek_char ib with\n          | 'p' | 'P' as c ->\n            let width = Scanning.store_char width ib c in\n            if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n            scan_optionally_signed_decimal_int width ib\n          | _ -> width\n  )\n  | 'n' | 'N' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n    check_case_insensitive_string width ib bad_hex_float \"an\"\n  | 'i' | 'I' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n    check_case_insensitive_string width ib bad_hex_float \"nfinity\"\n  | _ -> bad_hex_float ()\n\n\nlet scan_caml_float_rest width precision ib =\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  let width = scan_decimal_digit_star width ib in\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  let c = Scanning.peek_char ib in\n  match c with\n  | '.' ->\n    let width = Scanning.store_char width ib c in\n    (* The effective width available for scanning the fractional part is\n       the minimum of declared precision and width left. *)\n    let precision = Int.min width precision in\n    (* After scanning the fractional part with [precision] provisional width,\n       [width_precision] is left. *)\n    let width_precision = scan_fractional_part precision ib in\n    (* Hence, scanning the fractional part took exactly\n       [precision - width_precision] chars. *)\n    let frac_width = precision - width_precision in\n    (* And new provisional width is [width - width_precision. *)\n    let width = width - frac_width in\n    scan_exponent_part width ib\n  | 'e' | 'E' ->\n    scan_exponent_part width ib\n  | _ -> bad_float ()\n\n\nlet scan_caml_float width precision ib =\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  let width = scan_sign width ib in\n  if width = 0 || Scanning.end_of_input ib then bad_float ();\n  match Scanning.peek_char ib with\n  | '0' as c -> (\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_float ();\n    match Scanning.peek_char ib with\n    | 'x' | 'X' as c -> (\n      let width = Scanning.store_char width ib c in\n      if width = 0 || Scanning.end_of_input ib then bad_float ();\n      let width = scan_hexadecimal_int width ib in\n      if width = 0 || Scanning.end_of_input ib then bad_float ();\n      let width = match Scanning.peek_char ib with\n        | '.' as c -> (\n          let width = Scanning.store_char width ib c in\n          if width = 0 || Scanning.end_of_input ib then width else\n            match Scanning.peek_char ib with\n            | 'p' | 'P' -> width\n            | _ ->\n              let precision = Int.min width precision in\n              width - (precision - scan_hexadecimal_int precision ib)\n        )\n        | 'p' | 'P' -> width\n        | _ -> bad_float () in\n      if width = 0 || Scanning.end_of_input ib then width else\n        match Scanning.peek_char ib with\n        | 'p' | 'P' as c ->\n          let width = Scanning.store_char width ib c in\n          if width = 0 || Scanning.end_of_input ib then bad_hex_float ();\n          scan_optionally_signed_decimal_int width ib\n        | _ -> width\n    )\n    | _ ->\n      scan_caml_float_rest width precision ib\n  )\n  | '1' .. '9' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 || Scanning.end_of_input ib then bad_float ();\n    scan_caml_float_rest width precision ib\n(* Special case of nan and infinity:\n  | 'i' ->\n  | 'n' ->\n*)\n  | _ -> bad_float ()\n\n\n(* Scan a regular string:\n   stops when encountering a space, if no scanning indication has been given;\n   otherwise, stops when encountering the characters in the scanning\n   indication [stp].\n   It also stops at end of file or when the maximum number of characters has\n   been read. *)\nlet scan_string stp width ib =\n  let rec loop width =\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n      match stp with\n      | Some c' when c = c' -> Scanning.skip_char width ib\n      | Some _ -> loop (Scanning.store_char width ib c)\n      | None ->\n        match c with\n        | ' ' | '\\t' | '\\n' | '\\r' -> width\n        | _ -> loop (Scanning.store_char width ib c) in\n  loop width\n\n\n(* Scan a char: peek strictly one character in the input, whatsoever. *)\nlet scan_char width ib =\n  (* The case width = 0 could not happen here, since it is tested before\n     calling scan_char, in the main scanning function.\n    if width = 0 then bad_token_length \"a character\" else *)\n  Scanning.store_char width ib (Scanning.checked_peek_char ib)\n\n\nlet char_for_backslash = function\n  | 'n' -> '\\010'\n  | 'r' -> '\\013'\n  | 'b' -> '\\008'\n  | 't' -> '\\009'\n  | c -> c\n\n\n(* The integer value corresponding to the facial value of a valid\n   decimal digit character. *)\nlet decimal_value_of_char c = int_of_char c - int_of_char '0'\n\nlet char_for_decimal_code c0 c1 c2 =\n  let c =\n    100 * decimal_value_of_char c0 +\n     10 * decimal_value_of_char c1 +\n          decimal_value_of_char c2 in\n  if c < 0 || c > 255 then\n    bad_input\n      (Printf.sprintf\n         \"bad character decimal encoding \\\\%c%c%c\" c0 c1 c2) else\n  char_of_int c\n\n\n(* The integer value corresponding to the facial value of a valid\n   hexadecimal digit character. *)\nlet hexadecimal_value_of_char c =\n  let d = int_of_char c in\n  (* Could also be:\n    if d <= int_of_char '9' then d - int_of_char '0' else\n    if d <= int_of_char 'F' then 10 + d - int_of_char 'A' else\n    if d <= int_of_char 'f' then 10 + d - int_of_char 'a' else assert false\n  *)\n  if d >= int_of_char 'a' then\n    d - 87 (* 10 + int_of_char c - int_of_char 'a' *) else\n  if d >= int_of_char 'A' then\n    d - 55  (* 10 + int_of_char c - int_of_char 'A' *) else\n    d - int_of_char '0'\n\n\nlet char_for_hexadecimal_code c1 c2 =\n  let c =\n    16 * hexadecimal_value_of_char c1 +\n         hexadecimal_value_of_char c2 in\n  if c < 0 || c > 255 then\n    bad_input\n      (Printf.sprintf \"bad character hexadecimal encoding \\\\%c%c\" c1 c2) else\n  char_of_int c\n\n\n(* Called in particular when encountering '\\\\' as starter of a char.\n   Stops before the corresponding '\\''. *)\nlet check_next_char message width ib =\n  if width = 0 then bad_token_length message else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then bad_end_of_input message else\n  c\n\n\nlet check_next_char_for_char = check_next_char \"a Char\"\nlet check_next_char_for_string = check_next_char \"a String\"\n\nlet scan_backslash_char width ib =\n  match check_next_char_for_char width ib with\n  | '\\\\' | '\\'' | '\\\"' | 'n' | 't' | 'b' | 'r' as c ->\n    Scanning.store_char width ib (char_for_backslash c)\n  | '0' .. '9' as c ->\n    let get_digit () =\n      let c = Scanning.next_char ib in\n      match c with\n      | '0' .. '9' as c -> c\n      | c -> bad_input_escape c in\n    let c0 = c in\n    let c1 = get_digit () in\n    let c2 = get_digit () in\n    Scanning.store_char (width - 2) ib (char_for_decimal_code c0 c1 c2)\n  | 'x' ->\n    let get_digit () =\n      let c = Scanning.next_char ib in\n      match c with\n      | '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' as c -> c\n      | c -> bad_input_escape c in\n    let c1 = get_digit () in\n    let c2 = get_digit () in\n    Scanning.store_char (width - 2) ib (char_for_hexadecimal_code c1 c2)\n  | c ->\n    bad_input_escape c\n\n\n(* Scan a character (an OCaml token). *)\nlet scan_caml_char width ib =\n\n  let rec find_start width =\n    match Scanning.checked_peek_char ib with\n    | '\\'' -> find_char (Scanning.ignore_char width ib)\n    | c -> character_mismatch '\\'' c\n\n  and find_char width =\n    match check_next_char_for_char width ib with\n    | '\\\\' ->\n      find_stop (scan_backslash_char (Scanning.ignore_char width ib) ib)\n    | c ->\n      find_stop (Scanning.store_char width ib c)\n\n  and find_stop width =\n    match check_next_char_for_char width ib with\n    | '\\'' -> Scanning.ignore_char width ib\n    | c -> character_mismatch '\\'' c in\n\n  find_start width\n\n\n(* Scan a delimited string (an OCaml token). *)\nlet scan_caml_string width ib =\n\n  let rec find_start width =\n    match Scanning.checked_peek_char ib with\n    | '\\\"' -> find_stop (Scanning.ignore_char width ib)\n    | c -> character_mismatch '\\\"' c\n\n  and find_stop width =\n    match check_next_char_for_string width ib with\n    | '\\\"' -> Scanning.ignore_char width ib\n    | '\\\\' -> scan_backslash (Scanning.ignore_char width ib)\n    | c -> find_stop (Scanning.store_char width ib c)\n\n  and scan_backslash width =\n    match check_next_char_for_string width ib with\n    | '\\r' -> skip_newline (Scanning.ignore_char width ib)\n    | '\\n' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop (scan_backslash_char width ib)\n\n  and skip_newline width =\n    match check_next_char_for_string width ib with\n    | '\\n' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop (Scanning.store_char width ib '\\r')\n\n  and skip_spaces width =\n    match check_next_char_for_string width ib with\n    | ' ' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop width in\n\n  find_start width\n\n\n(* Scan a boolean (an OCaml token). *)\nlet scan_bool ib =\n  let c = Scanning.checked_peek_char ib in\n  let m =\n    match c with\n    | 't' -> 4\n    | 'f' -> 5\n    | c ->\n      bad_input\n        (Printf.sprintf \"the character %C cannot start a boolean\" c) in\n  scan_string None m ib\n\n\n(* Scan a string containing elements in char_set and terminated by scan_indic\n   if provided. *)\nlet scan_chars_in_char_set char_set scan_indic width ib =\n  let rec scan_chars i stp =\n    let c = Scanning.peek_char ib in\n    if i > 0 && not (Scanning.eof ib) &&\n       is_in_char_set char_set c &&\n       int_of_char c <> stp then\n      let _ = Scanning.store_char max_int ib c in\n      scan_chars (i - 1) stp in\n  match scan_indic with\n  | None -> scan_chars width (-1);\n  | Some c ->\n    scan_chars width (int_of_char c);\n    if not (Scanning.eof ib) then\n      let ci = Scanning.peek_char ib in\n      if c = ci\n      then Scanning.invalidate_current_char ib\n      else character_mismatch c ci\n\n\n(* The global error report function for [Scanf]. *)\nlet scanf_bad_input ib = function\n  | Scan_failure s | Failure s ->\n    let i = Scanning.char_count ib in\n    bad_input (Printf.sprintf \"scanf: bad input at char number %i: %s\" i s)\n  | x -> raise x\n\n\n(* Get the content of a counter from an input buffer. *)\nlet get_counter ib counter =\n  match counter with\n  | Line_counter -> Scanning.line_count ib\n  | Char_counter -> Scanning.char_count ib\n  | Token_counter -> Scanning.token_count ib\n\n\n(* Compute the width of a padding option (see \"%42{\" and \"%123(\"). *)\nlet width_of_pad_opt pad_opt = match pad_opt with\n  | None -> max_int\n  | Some width -> width\n\n\nlet stopper_of_formatting_lit fmting =\n  if fmting = Escaped_percent then '%', \"\" else\n    let str = string_of_formatting_lit fmting in\n    let stp = str.[1] in\n    let sub_str = String.sub str 2 (String.length str - 2) in\n    stp, sub_str\n\n\n(******************************************************************************)\n                           (* Reader management *)\n\n(* A call to take_format_readers on a format is evaluated into functions\n   taking readers as arguments and aggregate them into an heterogeneous list *)\n(* When all readers are taken, finally pass the list of the readers to the\n   continuation k. *)\nlet rec take_format_readers : type a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n    d =\nfun k fmt -> match fmt with\n  | Reader fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_format_readers new_k fmt_rest\n  | Char rest                        -> take_format_readers k rest\n  | Caml_char rest                   -> take_format_readers k rest\n  | String (_, rest)                 -> take_format_readers k rest\n  | Caml_string (_, rest)            -> take_format_readers k rest\n  | Int (_, _, _, rest)              -> take_format_readers k rest\n  | Int32 (_, _, _, rest)            -> take_format_readers k rest\n  | Nativeint (_, _, _, rest)        -> take_format_readers k rest\n  | Int64 (_, _, _, rest)            -> take_format_readers k rest\n  | Float (_, _, _, rest)            -> take_format_readers k rest\n  | Bool (_, rest)                   -> take_format_readers k rest\n  | Alpha rest                       -> take_format_readers k rest\n  | Theta rest                       -> take_format_readers k rest\n  | Flush rest                       -> take_format_readers k rest\n  | String_literal (_, rest)         -> take_format_readers k rest\n  | Char_literal (_, rest)           -> take_format_readers k rest\n  | Custom (_, _, rest)              -> take_format_readers k rest\n\n  | Scan_char_set (_, _, rest)       -> take_format_readers k rest\n  | Scan_get_counter (_, rest)       -> take_format_readers k rest\n  | Scan_next_char rest              -> take_format_readers k rest\n\n  | Formatting_lit (_, rest)         -> take_format_readers k rest\n  | Formatting_gen (Open_tag (Format (fmt, _)), rest) ->\n      take_format_readers k (concat_fmt fmt rest)\n  | Formatting_gen (Open_box (Format (fmt, _)), rest) ->\n      take_format_readers k (concat_fmt fmt rest)\n\n  | Format_arg (_, _, rest)          -> take_format_readers k rest\n  | Format_subst (_, fmtty, rest)    ->\n     take_fmtty_format_readers k (erase_rel (symm fmtty)) rest\n  | Ignored_param (ign, rest)        -> take_ignored_format_readers k ign rest\n\n  | End_of_format                    -> k Nil\n\n(* Take readers associated to an fmtty coming from a Format_subst \"%(...%)\". *)\nand take_fmtty_format_readers : type x y a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, x, y) fmtty ->\n      (y, Scanning.in_channel, c, x, e, f) fmt -> d =\nfun k fmtty fmt -> match fmtty with\n  | Reader_ty fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_fmtty_format_readers new_k fmt_rest fmt\n  | Ignored_reader_ty fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_fmtty_format_readers new_k fmt_rest fmt\n  | Char_ty rest                -> take_fmtty_format_readers k rest fmt\n  | String_ty rest              -> take_fmtty_format_readers k rest fmt\n  | Int_ty rest                 -> take_fmtty_format_readers k rest fmt\n  | Int32_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Nativeint_ty rest           -> take_fmtty_format_readers k rest fmt\n  | Int64_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Float_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Bool_ty rest                -> take_fmtty_format_readers k rest fmt\n  | Alpha_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Theta_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Any_ty rest                 -> take_fmtty_format_readers k rest fmt\n  | Format_arg_ty (_, rest)     -> take_fmtty_format_readers k rest fmt\n  | End_of_fmtty                -> take_format_readers k fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    take_fmtty_format_readers k (concat_fmtty ty rest) fmt\n\n(* Take readers associated to an ignored parameter. *)\nand take_ignored_format_readers : type x y a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, x, y) ignored ->\n      (y, Scanning.in_channel, c, x, e, f) fmt -> d =\nfun k ign fmt -> match ign with\n  | Ignored_reader ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_format_readers new_k fmt\n  | Ignored_char                    -> take_format_readers k fmt\n  | Ignored_caml_char               -> take_format_readers k fmt\n  | Ignored_string _                -> take_format_readers k fmt\n  | Ignored_caml_string _           -> take_format_readers k fmt\n  | Ignored_int (_, _)              -> take_format_readers k fmt\n  | Ignored_int32 (_, _)            -> take_format_readers k fmt\n  | Ignored_nativeint (_, _)        -> take_format_readers k fmt\n  | Ignored_int64 (_, _)            -> take_format_readers k fmt\n  | Ignored_float (_, _)            -> take_format_readers k fmt\n  | Ignored_bool _                  -> take_format_readers k fmt\n  | Ignored_format_arg _            -> take_format_readers k fmt\n  | Ignored_format_subst (_, fmtty) -> take_fmtty_format_readers k fmtty fmt\n  | Ignored_scan_char_set _         -> take_format_readers k fmt\n  | Ignored_scan_get_counter _      -> take_format_readers k fmt\n  | Ignored_scan_next_char          -> take_format_readers k fmt\n\n(******************************************************************************)\n                          (* Generic scanning *)\n\n(* Make a generic scanning function. *)\n(* Scan a stream according to a format and readers obtained by\n   take_format_readers, and aggregate scanned values into an\n   heterogeneous list. *)\n(* Return the heterogeneous list of scanned values. *)\nlet rec make_scanf : type a c d e f.\n    Scanning.in_channel -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n      (d, e) heter_list -> (a, f) heter_list =\nfun ib fmt readers -> match fmt with\n  | Char rest ->\n    let _ = scan_char 0 ib in\n    let c = token_char ib in\n    Cons (c, make_scanf ib rest readers)\n  | Caml_char rest ->\n    let _ = scan_caml_char 0 ib in\n    let c = token_char ib in\n    Cons (c, make_scanf ib rest readers)\n\n  | String (pad, Formatting_lit (fmting_lit, rest)) ->\n    let stp, str = stopper_of_formatting_lit fmting_lit in\n    let scan width _ ib = scan_string (Some stp) width ib in\n    let str_rest = String_literal (str, rest) in\n    pad_prec_scanf ib str_rest readers pad No_precision scan token_string\n  | String (pad, Formatting_gen (Open_tag (Format (fmt', _)), rest)) ->\n    let scan width _ ib = scan_string (Some '{') width ib in\n    pad_prec_scanf ib (concat_fmt fmt' rest) readers pad No_precision scan\n                   token_string\n  | String (pad, Formatting_gen (Open_box (Format (fmt', _)), rest)) ->\n    let scan width _ ib = scan_string (Some '[') width ib in\n    pad_prec_scanf ib (concat_fmt fmt' rest) readers pad No_precision scan\n                   token_string\n  | String (pad, rest) ->\n    let scan width _ ib = scan_string None width ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_string\n\n  | Caml_string (pad, rest) ->\n    let scan width _ ib = scan_caml_string width ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_string\n  | Int (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int c)\n  | Int32 (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int32 c)\n  | Nativeint (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_nativeint c)\n  | Int64 (iconv, pad, prec, rest) ->\n    let c = integer_conversion_of_char (char_of_iconv iconv) in\n    let scan width _ ib = scan_int_conversion c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int64 c)\n  | Float ((_, (Float_F | Float_CF)), pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_caml_float token_float\n  | Float ((_, (Float_f | Float_e | Float_E | Float_g | Float_G)),\n           pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_float token_float\n  | Float ((_, (Float_h | Float_H)), pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_hex_float token_float\n  | Bool (pad, rest) ->\n    let scan _ _ ib = scan_bool ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_bool\n  | Alpha _ ->\n    invalid_arg \"scanf: bad conversion \\\"%a\\\"\"\n  | Theta _ ->\n    invalid_arg \"scanf: bad conversion \\\"%t\\\"\"\n  | Custom _ ->\n    invalid_arg \"scanf: bad conversion \\\"%?\\\" (custom converter)\"\n  | Reader fmt_rest ->\n    begin match readers with\n    | Cons (reader, readers_rest) ->\n        let x = reader ib in\n        Cons (x, make_scanf ib fmt_rest readers_rest)\n    | Nil ->\n        invalid_arg \"scanf: missing reader\"\n    end\n  | Flush rest ->\n    if Scanning.end_of_input ib then make_scanf ib rest readers\n    else bad_input \"end of input not found\"\n\n  | String_literal (str, rest) ->\n    String.iter (check_char ib) str;\n    make_scanf ib rest readers\n  | Char_literal (chr, rest) ->\n    check_char ib chr;\n    make_scanf ib rest readers\n\n  | Format_arg (pad_opt, fmtty, rest) ->\n    let _ = scan_caml_string (width_of_pad_opt pad_opt) ib in\n    let s = token_string ib in\n    let fmt =\n      try format_of_string_fmtty s fmtty\n      with Failure msg -> bad_input msg\n    in\n    Cons (fmt, make_scanf ib rest readers)\n  | Format_subst (pad_opt, fmtty, rest) ->\n    let _ = scan_caml_string (width_of_pad_opt pad_opt) ib in\n    let s = token_string ib in\n    let fmt, fmt' =\n      try\n        let Fmt_EBB fmt = fmt_ebb_of_string s in\n        let Fmt_EBB fmt' = fmt_ebb_of_string s in\n        (* TODO: find a way to avoid reparsing twice *)\n\n        (* TODO: these type-checks below *can* fail because of type\n           ambiguity in presence of ignored-readers: \"%_r%d\" and \"%d%_r\"\n           are typed in the same way.\n\n           # Scanf.sscanf \"\\\"%_r%d\\\"3\" \"%(%d%_r%)\" ignore\n             (fun fmt n -> string_of_format fmt, n)\n           Exception: CamlinternalFormat.Type_mismatch.\n\n           We should properly catch this exception.\n        *)\n        type_format fmt (erase_rel fmtty),\n        type_format fmt' (erase_rel (symm fmtty))\n      with Failure msg -> bad_input msg\n    in\n    Cons (Format (fmt, s),\n          make_scanf ib (concat_fmt fmt' rest) readers)\n\n  | Scan_char_set (width_opt, char_set, Formatting_lit (fmting_lit, rest)) ->\n    let stp, str = stopper_of_formatting_lit fmting_lit in\n    let width = width_of_pad_opt width_opt in\n    scan_chars_in_char_set char_set (Some stp) width ib;\n    let s = token_string ib in\n    let str_rest = String_literal (str, rest) in\n    Cons (s, make_scanf ib str_rest readers)\n  | Scan_char_set (width_opt, char_set, rest) ->\n    let width = width_of_pad_opt width_opt in\n    scan_chars_in_char_set char_set None width ib;\n    let s = token_string ib in\n    Cons (s, make_scanf ib rest readers)\n  | Scan_get_counter (counter, rest) ->\n    let count = get_counter ib counter in\n    Cons (count, make_scanf ib rest readers)\n  | Scan_next_char rest ->\n    let c = Scanning.checked_peek_char ib in\n    Cons (c, make_scanf ib rest readers)\n\n  | Formatting_lit (formatting_lit, rest) ->\n    String.iter (check_char ib) (string_of_formatting_lit formatting_lit);\n    make_scanf ib rest readers\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    check_char ib '@'; check_char ib '{';\n    make_scanf ib (concat_fmt fmt' rest) readers\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    check_char ib '@'; check_char ib '[';\n    make_scanf ib (concat_fmt fmt' rest) readers\n\n  | Ignored_param (ign, rest) ->\n    let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n    begin match make_scanf ib fmt' readers with\n    | Cons (_, arg_rest) -> arg_rest\n    | Nil -> assert false\n    end\n\n  | End_of_format ->\n    Nil\n\n(* Case analysis on padding and precision. *)\n(* Reject formats containing \"%*\" or \"%.*\". *)\n(* Pass padding and precision to the generic scanner `scan'. *)\nand pad_prec_scanf : type a c d e f x y z t .\n    Scanning.in_channel -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n      (d, e) heter_list -> (x, y) padding -> (y, z -> a) precision ->\n      (int -> int -> Scanning.in_channel -> t) ->\n      (Scanning.in_channel -> z) ->\n      (x, f) heter_list =\nfun ib fmt readers pad prec scan token -> match pad, prec with\n  | No_padding, No_precision ->\n    let _ = scan max_int max_int ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | No_padding, Lit_precision p ->\n    let _ = scan max_int p ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding ((Right | Zeros), w), No_precision ->\n    let _ = scan w max_int ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding ((Right | Zeros), w), Lit_precision p ->\n    let _ = scan w p ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding (Left, _), _ ->\n    invalid_arg \"scanf: bad conversion \\\"%-\\\"\"\n  | Lit_padding ((Right | Zeros), _), Arg_precision ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n  | Arg_padding _, _ ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n  | No_padding, Arg_precision ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n\n(******************************************************************************)\n            (* Defining [scanf] and various flavors of [scanf] *)\n\nlet kscanf_gen ib ef af (Format (fmt, str)) =\n  let rec apply : type a b . a -> (a, b) heter_list -> b =\n    fun f args -> match args with\n    | Cons (x, r) -> apply (f x) r\n    | Nil -> f\n  in\n  let k readers f =\n    Scanning.reset_token ib;\n    match make_scanf ib fmt readers with\n    | exception (Scan_failure _ | Failure _ | End_of_file as exc) ->\n        ef ib exc\n    | exception Invalid_argument msg ->\n        invalid_arg (msg ^ \" in format \\\"\" ^ String.escaped str ^ \"\\\"\")\n    | args ->\n        af (apply f args)\n  in\n  take_format_readers k fmt\n\nlet kscanf ib ef fmt =\n  kscanf_gen ib ef (fun x -> x) fmt\n\nlet kscanf_opt ib fmt =\n  kscanf_gen ib (fun _ _ -> None) (fun x -> Some x) fmt\n\n(***)\n\nlet kbscanf = kscanf\nlet bscanf ib fmt = kbscanf ib scanf_bad_input fmt\nlet bscanf_opt ib fmt = kscanf_opt ib fmt\n\nlet ksscanf s ef fmt = kbscanf (Scanning.from_string s) ef fmt\nlet sscanf s fmt = kbscanf (Scanning.from_string s) scanf_bad_input fmt\nlet sscanf_opt s fmt = kscanf_opt (Scanning.from_string s) fmt\n\nlet scanf fmt = kscanf Scanning.stdin scanf_bad_input fmt\nlet scanf_opt fmt = kscanf_opt Scanning.stdin fmt\n\n(***)\n\n(* Scanning format strings. *)\nlet bscanf_format :\n  Scanning.in_channel -> ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g =\n  fun ib format f ->\n    let _ = scan_caml_string max_int ib in\n    let str = token_string ib in\n    let fmt' =\n      try format_of_string_format str format\n      with Failure msg -> bad_input msg in\n    f fmt'\n\n\nlet sscanf_format :\n  string -> ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g =\n  fun s format f -> bscanf_format (Scanning.from_string s) format f\n\n\nlet format_from_string s fmt =\n  sscanf_format (\"\\\"\" ^ String.escaped s ^ \"\\\"\") fmt (fun x -> x)\n\n\nlet unescaped s =\n  sscanf (\"\\\"\" ^ s ^ \"\\\"\") \"%S%!\" (fun x -> x)\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*          Jerome Vouillon, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(**** Object representation ****)\n\nexternal set_id: 'a -> 'a = \"caml_set_oo_id\" [@@noalloc]\n\n(**** Object copy ****)\n\nlet copy o =\n  let o = (Obj.obj (Obj.dup (Obj.repr o))) in\n  set_id o\n\n(**** Compression options ****)\n(* Parameters *)\ntype params = {\n    mutable compact_table : bool;\n    mutable copy_parent : bool;\n    mutable clean_when_copying : bool;\n    mutable retry_count : int;\n    mutable bucket_small_size : int\n  }\n\nlet params = {\n  compact_table = true;\n  copy_parent = true;\n  clean_when_copying = true;\n  retry_count = 3;\n  bucket_small_size = 16\n}\n\n(**** Parameters ****)\n\nlet initial_object_size = 2\n\n(**** Items ****)\n\ntype item = DummyA | DummyB | DummyC of int\nlet _ = [DummyA; DummyB; DummyC 0] (* to avoid warnings *)\n\nlet dummy_item = (Obj.magic () : item)\n\n(**** Types ****)\n\ntype tag\ntype label = int\ntype closure = item\ntype t = DummyA | DummyB | DummyC of int\nlet _ = [DummyA; DummyB; DummyC 0] (* to avoid warnings *)\n\ntype obj = t array\nexternal ret : (obj -> 'a) -> closure = \"%identity\"\n\n(**** Labels ****)\n\nlet public_method_label s : tag =\n  let accu = ref 0 in\n  for i = 0 to String.length s - 1 do\n    accu := 223 * !accu + Char.code s.[i]\n  done;\n  (* reduce to 31 bits *)\n  accu := !accu land (1 lsl 31 - 1);\n  (* make it signed for 64 bits architectures *)\n  let tag = if !accu > 0x3FFFFFFF then !accu - (1 lsl 31) else !accu in\n  (* Printf.eprintf \"%s = %d\\n\" s tag; flush stderr; *)\n  Obj.magic tag\n\n(**** Sparse array ****)\n\nmodule Vars =\n  Map.Make(struct type t = string let compare (x:t) y = compare x y end)\ntype vars = int Vars.t\n\nmodule Meths =\n  Map.Make(struct type t = string let compare (x:t) y = compare x y end)\ntype meths = label Meths.t\nmodule Labs =\n  Map.Make(struct type t = label let compare (x:t) y = compare x y end)\ntype labs = bool Labs.t\n\n(* The compiler assumes that the first field of this structure is [size]. *)\ntype table =\n { mutable size: int;\n   mutable methods: closure array;\n   mutable methods_by_name: meths;\n   mutable methods_by_label: labs;\n   mutable previous_states:\n     (meths * labs * (label * item) list * vars *\n      label list * string list) list;\n   mutable hidden_meths: (label * item) list;\n   mutable vars: vars;\n   mutable initializers: (obj -> unit) list }\n\nlet dummy_table =\n  { methods = [| dummy_item |];\n    methods_by_name = Meths.empty;\n    methods_by_label = Labs.empty;\n    previous_states = [];\n    hidden_meths = [];\n    vars = Vars.empty;\n    initializers = [];\n    size = 0 }\n\nlet table_count = ref 0\n\n(* dummy_met should be a pointer, so use an atom *)\nlet dummy_met : item = Obj.obj (Obj.new_block 0 0)\n(* if debugging is needed, this could be a good idea: *)\n(* let dummy_met () = failwith \"Undefined method\" *)\n\nlet rec fit_size n =\n  if n <= 2 then n else\n  fit_size ((n+1)/2) * 2\n\nlet new_table pub_labels =\n  incr table_count;\n  let len = Array.length pub_labels in\n  let methods = Array.make (len*2+2) dummy_met in\n  methods.(0) <- Obj.magic len;\n  methods.(1) <- Obj.magic (fit_size len * Sys.word_size / 8 - 1);\n  for i = 0 to len - 1 do methods.(i*2+3) <- Obj.magic pub_labels.(i) done;\n  { methods = methods;\n    methods_by_name = Meths.empty;\n    methods_by_label = Labs.empty;\n    previous_states = [];\n    hidden_meths = [];\n    vars = Vars.empty;\n    initializers = [];\n    size = initial_object_size }\n\nlet resize array new_size =\n  let old_size = Array.length array.methods in\n  if new_size > old_size then begin\n    let new_buck = Array.make new_size dummy_met in\n    Array.blit array.methods 0 new_buck 0 old_size;\n    array.methods <- new_buck\n end\n\nlet put array label element =\n  resize array (label + 1);\n  array.methods.(label) <- element\n\n(**** Classes ****)\n\nlet method_count = ref 0\nlet inst_var_count = ref 0\n\n(* type t *)\ntype meth = item\n\nlet new_method table =\n  let index = Array.length table.methods in\n  resize table (index + 1);\n  index\n\nlet get_method_label table name =\n  try\n    Meths.find name table.methods_by_name\n  with Not_found ->\n    let label = new_method table in\n    table.methods_by_name <- Meths.add name label table.methods_by_name;\n    table.methods_by_label <- Labs.add label true table.methods_by_label;\n    label\n\nlet get_method_labels table names =\n  Array.map (get_method_label table) names\n\nlet set_method table label element =\n  incr method_count;\n  if Labs.find label table.methods_by_label then\n    put table label element\n  else\n    table.hidden_meths <- (label, element) :: table.hidden_meths\n\nlet get_method table label =\n  try List.assoc label table.hidden_meths\n  with Not_found -> table.methods.(label)\n\nlet to_list arr =\n  if arr == Obj.magic 0 then [] else Array.to_list arr\n\nlet narrow table vars virt_meths concr_meths =\n  let vars = to_list vars\n  and virt_meths = to_list virt_meths\n  and concr_meths = to_list concr_meths in\n  let virt_meth_labs = List.map (get_method_label table) virt_meths in\n  let concr_meth_labs = List.map (get_method_label table) concr_meths in\n  table.previous_states <-\n     (table.methods_by_name, table.methods_by_label, table.hidden_meths,\n      table.vars, virt_meth_labs, vars)\n     :: table.previous_states;\n  table.vars <-\n    Vars.fold\n      (fun lab info tvars ->\n        if List.mem lab vars then Vars.add lab info tvars else tvars)\n      table.vars Vars.empty;\n  let by_name = ref Meths.empty in\n  let by_label = ref Labs.empty in\n  List.iter2\n    (fun met label ->\n       by_name := Meths.add met label !by_name;\n       by_label :=\n          Labs.add label\n            (try Labs.find label table.methods_by_label with Not_found -> true)\n            !by_label)\n    concr_meths concr_meth_labs;\n  List.iter2\n    (fun met label ->\n       by_name := Meths.add met label !by_name;\n       by_label := Labs.add label false !by_label)\n    virt_meths virt_meth_labs;\n  table.methods_by_name <- !by_name;\n  table.methods_by_label <- !by_label;\n  table.hidden_meths <-\n     List.fold_right\n       (fun ((lab, _) as met) hm ->\n          if List.mem lab virt_meth_labs then hm else met::hm)\n       table.hidden_meths\n       []\n\nlet widen table =\n  let (by_name, by_label, saved_hidden_meths, saved_vars, virt_meths, vars) =\n    List.hd table.previous_states\n  in\n  table.previous_states <- List.tl table.previous_states;\n  table.vars <-\n     List.fold_left\n       (fun s v -> Vars.add v (Vars.find v table.vars) s)\n       saved_vars vars;\n  table.methods_by_name <- by_name;\n  table.methods_by_label <- by_label;\n  table.hidden_meths <-\n     List.fold_right\n       (fun ((lab, _) as met) hm ->\n          if List.mem lab virt_meths then hm else met::hm)\n       table.hidden_meths\n       saved_hidden_meths\n\nlet new_slot table =\n  let index = table.size in\n  table.size <- index + 1;\n  index\n\nlet new_variable table name =\n  try Vars.find name table.vars\n  with Not_found ->\n    let index = new_slot table in\n    if name <> \"\" then table.vars <- Vars.add name index table.vars;\n    index\n\nlet to_array arr =\n  if arr = Obj.magic 0 then [||] else arr\n\nlet new_methods_variables table meths vals =\n  let meths = to_array meths in\n  let nmeths = Array.length meths and nvals = Array.length vals in\n  let res = Array.make (nmeths + nvals) 0 in\n  for i = 0 to nmeths - 1 do\n    res.(i) <- get_method_label table meths.(i)\n  done;\n  for i = 0 to nvals - 1 do\n    res.(i+nmeths) <- new_variable table vals.(i)\n  done;\n  res\n\nlet get_variable table name =\n  try Vars.find name table.vars with Not_found -> assert false\n\nlet get_variables table names =\n  Array.map (get_variable table) names\n\nlet add_initializer table f =\n  table.initializers <- f::table.initializers\n\n(*\nmodule Keys =\n  Map.Make(struct type t = tag array let compare (x:t) y = compare x y end)\nlet key_map = ref Keys.empty\nlet get_key tags : item =\n  try magic (Keys.find tags !key_map : tag array)\n  with Not_found ->\n    key_map := Keys.add tags tags !key_map;\n    magic tags\n*)\n\nlet create_table public_methods =\n  if public_methods == Obj.magic 0 then new_table [||] else\n  (* [public_methods] must be in ascending order for bytecode *)\n  let tags = Array.map public_method_label public_methods in\n  let table = new_table tags in\n  Array.iteri\n    (fun i met ->\n      let lab = i*2+2 in\n      table.methods_by_name  <- Meths.add met lab table.methods_by_name;\n      table.methods_by_label <- Labs.add lab true table.methods_by_label)\n    public_methods;\n  table\n\nlet init_class table =\n  inst_var_count := !inst_var_count + table.size - 1;\n  table.initializers <- List.rev table.initializers;\n  resize table (3 + Obj.magic table.methods.(1) * 16 / Sys.word_size)\n\nlet inherits cla vals virt_meths concr_meths (_, super, _, env) top =\n  narrow cla vals virt_meths concr_meths;\n  let init =\n    if top then super cla env else Obj.repr (super cla) in\n  widen cla;\n  Array.concat\n    [[| Obj.repr init |];\n     Obj.magic (Array.map (get_variable cla) (to_array vals) : int array);\n     Array.map\n       (fun nm -> Obj.repr (get_method cla (get_method_label cla nm) : closure))\n       (to_array concr_meths) ]\n\nlet make_class pub_meths class_init =\n  let table = create_table pub_meths in\n  let env_init = class_init table in\n  init_class table;\n  (env_init (Obj.repr 0), class_init, env_init, Obj.repr 0)\n\ntype init_table = { mutable env_init: t; mutable class_init: table -> t }\n[@@warning \"-unused-field\"]\n\nlet make_class_store pub_meths class_init init_table =\n  let table = create_table pub_meths in\n  let env_init = class_init table in\n  init_class table;\n  init_table.class_init <- class_init;\n  init_table.env_init <- env_init\n\nlet dummy_class loc =\n  let undef = fun _ -> raise (Undefined_recursive_module loc) in\n  (Obj.magic undef, undef, undef, Obj.repr 0)\n\n(**** Objects ****)\n\nlet create_object table =\n  (* XXX Appel de [obj_block] | Call to [obj_block]  *)\n  let obj = Obj.new_block Obj.object_tag table.size in\n  (* XXX Appel de [caml_modify] | Call to [caml_modify] *)\n  Obj.set_field obj 0 (Obj.repr table.methods);\n  Obj.obj (set_id obj)\n\nlet create_object_opt obj_0 table =\n  if (Obj.magic obj_0 : bool) then obj_0 else begin\n    (* XXX Appel de [obj_block] | Call to [obj_block]  *)\n    let obj = Obj.new_block Obj.object_tag table.size in\n    (* XXX Appel de [caml_modify] | Call to [caml_modify] *)\n    Obj.set_field obj 0 (Obj.repr table.methods);\n    Obj.obj (set_id obj)\n  end\n\nlet rec iter_f obj =\n  function\n    []   -> ()\n  | f::l -> f obj; iter_f obj l\n\nlet run_initializers obj table =\n  let inits = table.initializers in\n  if inits <> [] then\n    iter_f obj inits\n\nlet run_initializers_opt obj_0 obj table =\n  if (Obj.magic obj_0 : bool) then obj else begin\n    let inits = table.initializers in\n    if inits <> [] then iter_f obj inits;\n    obj\n  end\n\nlet create_object_and_run_initializers obj_0 table =\n  if (Obj.magic obj_0 : bool) then obj_0 else begin\n    let obj = create_object table in\n    run_initializers obj table;\n    obj\n  end\n\n(* Equivalent primitive below\nlet sendself obj lab =\n  (magic obj : (obj -> t) array array).(0).(lab) obj\n*)\nexternal send : obj -> tag -> 'a = \"%send\"\nexternal sendcache : obj -> tag -> t -> int -> 'a = \"%sendcache\"\nexternal sendself : obj -> label -> 'a = \"%sendself\"\nexternal get_public_method : obj -> tag -> closure\n    = \"caml_get_public_method\" [@@noalloc]\n\n(**** table collection access ****)\n\ntype tables =\n  | Empty\n  | Cons of {key : closure; mutable data: tables; mutable next: tables}\n\nlet set_data tables v = match tables with\n  | Empty -> assert false\n  | Cons tables -> tables.data <- v\nlet set_next tables v = match tables with\n  | Empty -> assert false\n  | Cons tables -> tables.next <- v\nlet get_key = function\n  | Empty -> assert false\n  | Cons tables -> tables.key\nlet get_data = function\n  | Empty -> assert false\n  | Cons tables -> tables.data\nlet get_next = function\n  | Empty -> assert false\n  | Cons tables -> tables.next\n\nlet build_path n keys tables =\n  let res = Cons {key = Obj.magic 0; data = Empty; next = Empty} in\n  let r = ref res in\n  for i = 0 to n do\n    r := Cons {key = keys.(i); data = !r; next = Empty}\n  done;\n  set_data tables !r;\n  res\n\nlet rec lookup_keys i keys tables =\n  if i < 0 then tables else\n  let key = keys.(i) in\n  let rec lookup_key (tables:tables) =\n    if get_key tables == key then\n      match get_data tables with\n      | Empty -> assert false\n      | Cons _ as tables_data ->\n          lookup_keys (i-1) keys tables_data\n    else\n      match get_next tables with\n      | Cons _ as next -> lookup_key next\n      | Empty ->\n          let next : tables = Cons {key; data = Empty; next = Empty} in\n          set_next tables next;\n          build_path (i-1) keys next\n  in\n  lookup_key tables\n\nlet lookup_tables root keys =\n  match get_data root with\n  | Cons _ as root_data ->\n    lookup_keys (Array.length keys - 1) keys root_data\n  | Empty ->\n    build_path (Array.length keys - 1) keys root\n\n(**** builtin methods ****)\n\nlet get_const x = ret (fun _obj -> x)\nlet get_var n   = ret (fun obj -> Array.unsafe_get obj n)\nlet get_env e n =\n  ret (fun obj ->\n    Array.unsafe_get (Obj.magic (Array.unsafe_get obj e) : obj) n)\nlet get_meth n  = ret (fun obj -> sendself obj n)\nlet set_var n   = ret (fun obj x -> Array.unsafe_set obj n x)\nlet app_const f x = ret (fun _obj -> f x)\nlet app_var f n   = ret (fun obj -> f (Array.unsafe_get obj n))\nlet app_env f e n =\n  ret (fun obj ->\n    f (Array.unsafe_get (Obj.magic (Array.unsafe_get obj e) : obj) n))\nlet app_meth f n  = ret (fun obj -> f (sendself obj n))\nlet app_const_const f x y = ret (fun _obj -> f x y)\nlet app_const_var f x n   = ret (fun obj -> f x (Array.unsafe_get obj n))\nlet app_const_meth f x n = ret (fun obj -> f x (sendself obj n))\nlet app_var_const f n x = ret (fun obj -> f (Array.unsafe_get obj n) x)\nlet app_meth_const f n x = ret (fun obj -> f (sendself obj n) x)\nlet app_const_env f x e n =\n  ret (fun obj ->\n    f x (Array.unsafe_get (Obj.magic (Array.unsafe_get obj e) : obj) n))\nlet app_env_const f e n x =\n  ret (fun obj ->\n    f (Array.unsafe_get (Obj.magic (Array.unsafe_get obj e) : obj) n) x)\nlet meth_app_const n x = ret (fun obj -> (sendself obj n : _ -> _) x)\nlet meth_app_var n m =\n  ret (fun obj -> (sendself obj n : _ -> _) (Array.unsafe_get obj m))\nlet meth_app_env n e m =\n  ret (fun obj -> (sendself obj n : _ -> _)\n      (Array.unsafe_get (Obj.magic (Array.unsafe_get obj e) : obj) m))\nlet meth_app_meth n m =\n  ret (fun obj -> (sendself obj n : _ -> _) (sendself obj m))\nlet send_const m x c =\n  ret (fun obj -> sendcache x m (Array.unsafe_get obj 0) c)\nlet send_var m n c =\n  ret (fun obj ->\n    sendcache (Obj.magic (Array.unsafe_get obj n) : obj) m\n      (Array.unsafe_get obj 0) c)\nlet send_env m e n c =\n  ret (fun obj ->\n    sendcache\n      (Obj.magic (Array.unsafe_get\n                    (Obj.magic (Array.unsafe_get obj e) : obj) n) : obj)\n      m (Array.unsafe_get obj 0) c)\nlet send_meth m n c =\n  ret (fun obj ->\n    sendcache (sendself obj n) m (Array.unsafe_get obj 0) c)\nlet new_cache table =\n  let n = new_method table in\n  let n =\n    if n mod 2 = 0 || n > 2 + Obj.magic table.methods.(1) * 16 / Sys.word_size\n    then n else new_method table\n  in\n  table.methods.(n) <- Obj.magic 0;\n  n\n\ntype impl =\n    GetConst\n  | GetVar\n  | GetEnv\n  | GetMeth\n  | SetVar\n  | AppConst\n  | AppVar\n  | AppEnv\n  | AppMeth\n  | AppConstConst\n  | AppConstVar\n  | AppConstEnv\n  | AppConstMeth\n  | AppVarConst\n  | AppEnvConst\n  | AppMethConst\n  | MethAppConst\n  | MethAppVar\n  | MethAppEnv\n  | MethAppMeth\n  | SendConst\n  | SendVar\n  | SendEnv\n  | SendMeth\n  | Closure of closure\n\nlet method_impl table i arr =\n  let next () = incr i; Obj.magic arr.(!i) in\n  match next() with\n    GetConst -> let x : t = next() in get_const x\n  | GetVar   -> let n = next() in get_var n\n  | GetEnv   -> let e = next() in let n = next() in get_env e n\n  | GetMeth  -> let n = next() in get_meth n\n  | SetVar   -> let n = next() in set_var n\n  | AppConst -> let f = next() in let x = next() in app_const f x\n  | AppVar   -> let f = next() in let n = next () in app_var f n\n  | AppEnv   ->\n      let f = next() in  let e = next() in let n = next() in\n      app_env f e n\n  | AppMeth  -> let f = next() in let n = next () in app_meth f n\n  | AppConstConst ->\n      let f = next() in let x = next() in let y = next() in\n      app_const_const f x y\n  | AppConstVar ->\n      let f = next() in let x = next() in let n = next() in\n      app_const_var f x n\n  | AppConstEnv ->\n      let f = next() in let x = next() in let e = next () in let n = next() in\n      app_const_env f x e n\n  | AppConstMeth ->\n      let f = next() in let x = next() in let n = next() in\n      app_const_meth f x n\n  | AppVarConst ->\n      let f = next() in let n = next() in let x = next() in\n      app_var_const f n x\n  | AppEnvConst ->\n      let f = next() in let e = next () in let n = next() in let x = next() in\n      app_env_const f e n x\n  | AppMethConst ->\n      let f = next() in let n = next() in let x = next() in\n      app_meth_const f n x\n  | MethAppConst ->\n      let n = next() in let x = next() in meth_app_const n x\n  | MethAppVar ->\n      let n = next() in let m = next() in meth_app_var n m\n  | MethAppEnv ->\n      let n = next() in let e = next() in let m = next() in\n      meth_app_env n e m\n  | MethAppMeth ->\n      let n = next() in let m = next() in meth_app_meth n m\n  | SendConst ->\n      let m = next() in let x = next() in send_const m x (new_cache table)\n  | SendVar ->\n      let m = next() in let n = next () in send_var m n (new_cache table)\n  | SendEnv ->\n      let m = next() in let e = next() in let n = next() in\n      send_env m e n (new_cache table)\n  | SendMeth ->\n      let m = next() in let n = next () in send_meth m n (new_cache table)\n  | Closure _ as clo -> Obj.magic clo\n\nlet set_methods table methods =\n  let len = Array.length methods in let i = ref 0 in\n  while !i < len do\n    let label = methods.(!i) in let clo = method_impl table i methods in\n    set_method table label clo;\n    incr i\n  done\n\n(**** Statistics ****)\n\ntype stats =\n  { classes: int; methods: int; inst_vars: int; }\n\nlet stats () =\n  { classes = !table_count;\n    methods = !method_count; inst_vars = !inst_var_count; }\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*          Xavier Leroy, projet Cristal, INRIA Rocquencourt              *)\n(*                                                                        *)\n(*   Copyright 2004 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype shape =\n  | Function\n  | Lazy\n  | Class\n  | Module of shape array\n  | Value of Obj.t\n\nlet rec init_mod_field modu i loc shape =\n  let init =\n    match shape with\n    | Function ->\n       let rec fn (x : 'a) =\n         let fn' : 'a -> 'b = Obj.obj (Obj.field modu i) in\n         if fn == fn' then\n           raise (Undefined_recursive_module loc)\n         else\n           fn' x in\n       Obj.repr fn\n    | Lazy ->\n       let rec l =\n         lazy (\n           let l' = Obj.obj (Obj.field modu i) in\n           if l == l' then\n             raise (Undefined_recursive_module loc)\n           else\n             Lazy.force l') in\n       Obj.repr l\n    | Class ->\n       Obj.repr (CamlinternalOO.dummy_class loc)\n    | Module comps ->\n       Obj.repr (init_mod_block loc comps)\n    | Value v -> v\n  in\n  Obj.set_field modu i init\n\nand init_mod_block loc comps =\n  let length = Array.length comps in\n  let modu = Obj.new_block 0 length in\n  for i = 0 to length - 1 do\n    init_mod_field modu i loc comps.(i)\n  done;\n  modu\n\nlet init_mod loc shape =\n  match shape with\n  | Module comps ->\n     Obj.repr (init_mod_block loc comps)\n  | _ -> failwith \"CamlinternalMod.init_mod: not a module\"\n\nlet rec update_mod_field modu i shape n =\n  match shape with\n  | Function | Lazy ->\n     Obj.set_field modu i n\n  | Value _ ->\n     () (* the value is already there *)\n  | Class ->\n     assert (Obj.tag n = 0 && Obj.size n = 4);\n     let cl = Obj.field modu i in\n     for j = 0 to 3 do\n       Obj.set_field cl j (Obj.field n j)\n     done\n  | Module comps ->\n     update_mod_block comps (Obj.field modu i) n\n\nand update_mod_block comps o n =\n  assert (Obj.tag n = 0 && Obj.size n >= Array.length comps);\n  for i = 0 to Array.length comps - 1 do\n    update_mod_field o i comps.(i) (Obj.field n i)\n  done\n\nlet update_mod shape o n =\n  match shape with\n  | Module comps ->\n     update_mod_block comps o n\n  | _ -> failwith \"CamlinternalMod.update_mod: not a module\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Damien Doligez, projet Para, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1997 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nmodule type SeededS = sig\n\n  type key\n  type !'a t\n  val create : ?random (*thwart tools/sync_stdlib_docs*) : bool -> int -> 'a t\n  val clear : 'a t -> unit\n  val reset : 'a t -> unit\n  val copy : 'a t -> 'a t\n  val add : 'a t -> key -> 'a -> unit\n  val remove : 'a t -> key -> unit\n  val find : 'a t -> key -> 'a\n  val find_opt : 'a t -> key -> 'a option\n  val find_all : 'a t -> key -> 'a list\n  val replace : 'a t -> key -> 'a -> unit\n  val mem : 'a t -> key -> bool\n  val length : 'a t -> int\n  val stats : 'a t -> Hashtbl.statistics\n  val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n  val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n  val of_seq : (key * 'a) Seq.t -> 'a t\n  val clean: 'a t -> unit\n  val stats_alive: 'a t -> Hashtbl.statistics\n    (** same as {!stats} but only count the alive bindings *)\nend\n\nmodule type S = sig\n\n  type key\n  type !'a t\n  val create : int -> 'a t\n  val clear : 'a t -> unit\n  val reset : 'a t -> unit\n  val copy : 'a t -> 'a t\n  val add : 'a t -> key -> 'a -> unit\n  val remove : 'a t -> key -> unit\n  val find : 'a t -> key -> 'a\n  val find_opt : 'a t -> key -> 'a option\n  val find_all : 'a t -> key -> 'a list\n  val replace : 'a t -> key -> 'a -> unit\n  val mem : 'a t -> key -> bool\n  val length : 'a t -> int\n  val stats : 'a t -> Hashtbl.statistics\n  val add_seq : 'a t -> (key * 'a) Seq.t -> unit\n  val replace_seq : 'a t -> (key * 'a) Seq.t -> unit\n  val of_seq : (key * 'a) Seq.t -> 'a t\n  val clean: 'a t -> unit\n  val stats_alive: 'a t -> Hashtbl.statistics\n    (** same as {!stats} but only count the alive bindings *)\nend\n\nmodule GenHashTable = struct\n\n  type equal =\n  | ETrue | EFalse\n  | EDead (** the garbage collector reclaimed the data *)\n\n  module MakeSeeded(H: sig\n    type t\n    type 'a container\n    val create: t -> 'a -> 'a container\n    val seeded_hash: int -> t -> int\n    val equal: 'a container -> t -> equal\n    val get_data: 'a container -> 'a option\n    val set_key_data: 'a container -> t -> 'a -> unit\n    val check_key: 'a container -> bool\n  end) : SeededS with type key = H.t\n  = struct\n\n    type 'a t =\n      { mutable size: int;                  (* number of entries *)\n        mutable data: 'a bucketlist array;  (* the buckets *)\n        seed: int;                          (* for randomization *)\n        initial_size: int;                  (* initial array size *)\n      }\n\n    and 'a bucketlist =\n    | Empty\n    | Cons of int (* hash of the key *) * 'a H.container * 'a bucketlist\n\n    (** the hash of the key is kept in order to test the equality of the hash\n      before the key. Same reason as for Weak.Make *)\n\n    type key = H.t\n\n    let rec power_2_above x n =\n      if x >= n then x\n      else if x * 2 > Sys.max_array_length then x\n      else power_2_above (x * 2) n\n\n    let prng = lazy (Random.State.make_self_init())\n\n    let create ?(random = (Hashtbl.is_randomized ())) initial_size =\n      let s = power_2_above 16 initial_size in\n      let seed = if random then Random.State.bits (Lazy.force prng) else 0 in\n      { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }\n\n    let clear h =\n      h.size <- 0;\n      let len = Array.length h.data in\n      for i = 0 to len - 1 do\n        h.data.(i) <- Empty\n      done\n\n    let reset h =\n      let len = Array.length h.data in\n      if len = h.initial_size then\n        clear h\n      else begin\n        h.size <- 0;\n        h.data <- Array.make h.initial_size Empty\n      end\n\n    let copy h = { h with data = Array.copy h.data }\n\n    let key_index h hkey =\n      hkey land (Array.length h.data - 1)\n\n    let clean h =\n      let rec do_bucket = function\n        | Empty ->\n            Empty\n        | Cons(_, c, rest) when not (H.check_key c) ->\n            h.size <- h.size - 1;\n            do_bucket rest\n        | Cons(hkey, c, rest) ->\n            Cons(hkey, c, do_bucket rest)\n      in\n      let d = h.data in\n      for i = 0 to Array.length d - 1 do\n        d.(i) <- do_bucket d.(i)\n      done\n\n    (** resize is the only function to do the actual cleaning of dead keys\n        (remove does it just because it could).\n\n        The goal is to:\n\n        - not resize infinitely when the actual number of alive keys is\n        bounded but keys are continuously added. That would happen if\n        this function always resize.\n        - not call this function after each addition, that would happen if this\n        function don't resize even when only one key is dead.\n\n        So the algorithm:\n        - clean the keys before resizing\n        - if the number of remaining keys is less than half the size of the\n        array, don't resize.\n        - if it is more, resize.\n\n        The second problem remains if the table reaches {!Sys.max_array_length}.\n\n    *)\n    let resize h =\n      let odata = h.data in\n      let osize = Array.length odata in\n      let nsize = osize * 2 in\n      clean h;\n      if nsize < Sys.max_array_length && h.size >= osize lsr 1 then begin\n        let ndata = Array.make nsize Empty in\n        h.data <- ndata;       (* so that key_index sees the new bucket count *)\n        let rec insert_bucket = function\n            Empty -> ()\n          | Cons(hkey, data, rest) ->\n              insert_bucket rest; (* preserve original order of elements *)\n              let nidx = key_index h hkey in\n              ndata.(nidx) <- Cons(hkey, data, ndata.(nidx)) in\n        for i = 0 to osize - 1 do\n          insert_bucket odata.(i)\n        done\n      end\n\n    let add h key info =\n      let hkey = H.seeded_hash h.seed key in\n      let i = key_index h hkey in\n      let container = H.create key info in\n      let bucket = Cons(hkey, container, h.data.(i)) in\n      h.data.(i) <- bucket;\n      h.size <- h.size + 1;\n      if h.size > Array.length h.data lsl 1 then resize h\n\n    let remove h key =\n      let hkey = H.seeded_hash h.seed key in\n      let rec remove_bucket = function\n        | Empty -> Empty\n        | Cons(hk, c, next) when hkey = hk ->\n            begin match H.equal c key with\n            | ETrue -> h.size <- h.size - 1; next\n            | EFalse -> Cons(hk, c, remove_bucket next)\n            | EDead ->\n                (* The dead key is automatically removed. It is acceptable\n                    for this function since it already removes a binding *)\n                h.size <- h.size - 1;\n                remove_bucket next\n            end\n        | Cons(hk,c,next) -> Cons(hk, c, remove_bucket next) in\n      let i = key_index h hkey in\n      h.data.(i) <- remove_bucket h.data.(i)\n\n    (** {!find} don't remove dead keys because it would be surprising for\n        the user that a read-only function mutates the state (eg. concurrent\n        access). Same for {!mem}.\n    *)\n    let rec find_rec key hkey = function\n      | Empty ->\n          raise Not_found\n      | Cons(hk, c, rest) when hkey = hk  ->\n          begin match H.equal c key with\n          | ETrue ->\n              begin match H.get_data c with\n              | None ->\n                  (* This case is not impossible because the gc can run between\n                      H.equal and H.get_data *)\n                  find_rec key hkey rest\n              | Some d -> d\n              end\n          | EFalse -> find_rec key hkey rest\n          | EDead ->\n              find_rec key hkey rest\n          end\n      | Cons(_, _, rest) ->\n          find_rec key hkey rest\n\n    let find h key =\n      let hkey = H.seeded_hash h.seed key in\n      (* TODO inline 3 iterations *)\n      find_rec key hkey (h.data.(key_index h hkey))\n\n    let rec find_rec_opt key hkey = function\n      | Empty ->\n          None\n      | Cons(hk, c, rest) when hkey = hk  ->\n          begin match H.equal c key with\n          | ETrue ->\n              begin match H.get_data c with\n              | None ->\n                  (* This case is not impossible because the gc can run between\n                      H.equal and H.get_data *)\n                  find_rec_opt key hkey rest\n              | Some _ as d -> d\n              end\n          | EFalse -> find_rec_opt key hkey rest\n          | EDead ->\n              find_rec_opt key hkey rest\n          end\n      | Cons(_, _, rest) ->\n          find_rec_opt key hkey rest\n\n    let find_opt h key =\n      let hkey = H.seeded_hash h.seed key in\n      (* TODO inline 3 iterations *)\n      find_rec_opt key hkey (h.data.(key_index h hkey))\n\n    let find_all h key =\n      let hkey = H.seeded_hash h.seed key in\n      let rec find_in_bucket = function\n      | Empty -> []\n      | Cons(hk, c, rest) when hkey = hk  ->\n          begin match H.equal c key with\n          | ETrue -> begin match H.get_data c with\n              | None ->\n                  find_in_bucket rest\n              | Some d -> d::find_in_bucket rest\n            end\n          | EFalse -> find_in_bucket rest\n          | EDead ->\n              find_in_bucket rest\n          end\n      | Cons(_, _, rest) ->\n          find_in_bucket rest in\n      find_in_bucket h.data.(key_index h hkey)\n\n\n    let replace h key info =\n      let hkey = H.seeded_hash h.seed key in\n      let rec replace_bucket = function\n        | Empty -> raise Not_found\n        | Cons(hk, c, next) when hkey = hk ->\n            begin match H.equal c key with\n            | ETrue -> H.set_key_data c key info\n            | EFalse | EDead -> replace_bucket next\n            end\n        | Cons(_,_,next) -> replace_bucket next\n      in\n      let i = key_index h hkey in\n      let l = h.data.(i) in\n      try\n        replace_bucket l\n      with Not_found ->\n        let container = H.create key info in\n        h.data.(i) <- Cons(hkey, container, l);\n        h.size <- h.size + 1;\n        if h.size > Array.length h.data lsl 1 then resize h\n\n    let mem h key =\n      let hkey = H.seeded_hash h.seed key in\n      let rec mem_in_bucket = function\n      | Empty ->\n          false\n      | Cons(hk, c, rest) when hk = hkey ->\n          begin match H.equal c key with\n          | ETrue -> true\n          | EFalse | EDead -> mem_in_bucket rest\n          end\n      | Cons(_hk, _c, rest) -> mem_in_bucket rest in\n      mem_in_bucket h.data.(key_index h hkey)\n\n    let length h = h.size\n\n    let rec bucket_length accu = function\n      | Empty -> accu\n      | Cons(_, _, rest) -> bucket_length (accu + 1) rest\n\n    let stats h =\n      let mbl =\n        Array.fold_left (fun m b -> Int.max m (bucket_length 0 b)) 0 h.data in\n      let histo = Array.make (mbl + 1) 0 in\n      Array.iter\n        (fun b ->\n           let l = bucket_length 0 b in\n           histo.(l) <- histo.(l) + 1)\n        h.data;\n      { Hashtbl.num_bindings = h.size;\n        num_buckets = Array.length h.data;\n        max_bucket_length = mbl;\n        bucket_histogram = histo }\n\n    let rec bucket_length_alive accu = function\n      | Empty -> accu\n      | Cons(_, c, rest) when H.check_key c ->\n          bucket_length_alive (accu + 1) rest\n      | Cons(_, _, rest) -> bucket_length_alive accu rest\n\n    let stats_alive h =\n      let size = ref 0 in\n      let mbl =\n        Array.fold_left\n          (fun m b -> Int.max m (bucket_length_alive 0 b)) 0 h.data\n      in\n      let histo = Array.make (mbl + 1) 0 in\n      Array.iter\n        (fun b ->\n           let l = bucket_length_alive 0 b in\n           size := !size + l;\n           histo.(l) <- histo.(l) + 1)\n        h.data;\n      { Hashtbl.num_bindings = !size;\n        num_buckets = Array.length h.data;\n        max_bucket_length = mbl;\n        bucket_histogram = histo }\n\n    let add_seq tbl i =\n      Seq.iter (fun (k,v) -> add tbl k v) i\n\n    let replace_seq tbl i =\n      Seq.iter (fun (k,v) -> replace tbl k v) i\n\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n\n  end\nend\n\nmodule ObjEph = Obj.Ephemeron\n\nlet _obj_opt : Obj.t option -> 'a option = fun x ->\n  match x with\n  | None -> x\n  | Some v -> Some (Obj.obj v)\n\n(** The previous function is typed so this one is also correct *)\nlet obj_opt : Obj.t option -> 'a option = fun x -> Obj.magic x\n\n\nmodule K1 = struct\n  type ('k,'d) t = ObjEph.t\n\n  let create () : ('k,'d) t = ObjEph.create 1\n\n  let get_key (t:('k,'d) t) : 'k option = obj_opt (ObjEph.get_key t 0)\n  let set_key (t:('k,'d) t) (k:'k) : unit = ObjEph.set_key t 0 (Obj.repr k)\n  let check_key (t:('k,'d) t) : bool = ObjEph.check_key t 0\n\n  let get_data (t:('k,'d) t) : 'd option = obj_opt (ObjEph.get_data t)\n  let set_data (t:('k,'d) t) (d:'d) : unit = ObjEph.set_data t (Obj.repr d)\n  let unset_data (t:('k,'d) t) : unit = ObjEph.unset_data t\n\n  let make key data =\n    let eph = create () in\n    set_data eph data;\n    set_key eph key;\n    eph\n\n  let query eph key =\n    match get_key eph with\n    | None -> None\n    | Some k when k == key -> get_data eph\n    | Some _ -> None\n\n  module MakeSeeded (H:Hashtbl.SeededHashedType) =\n    GenHashTable.MakeSeeded(struct\n      type 'a container = (H.t,'a) t\n      type t = H.t\n      let create k d =\n        let c = create () in\n        set_data c d;\n        set_key c k;\n        c\n      let seeded_hash = H.seeded_hash\n      let equal c k =\n        (* {!get_key_copy} is not used because the equality of the user can be\n            the physical equality *)\n        match get_key c with\n        | None -> GenHashTable.EDead\n        | Some k' ->\n            if H.equal k k' then GenHashTable.ETrue else GenHashTable.EFalse\n      let get_data = get_data\n      let set_key_data c k d =\n        unset_data c;\n        set_key c k;\n        set_data c d\n      let check_key = check_key\n    end)\n\n  module Make(H: Hashtbl.HashedType): (S with type key = H.t) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let seeded_hash (_seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n  end\n\n  module Bucket = struct\n\n    type nonrec ('k, 'd) t = ('k, 'd) t list ref\n    let k1_make = make\n    let make () = ref []\n    let add b k d = b := k1_make k d :: !b\n\n    let test_key k e =\n      match get_key e with\n      | Some x when x == k -> true\n      | _ -> false\n\n    let remove b k =\n      let rec loop l acc =\n        match l with\n        | [] -> ()\n        | h :: t when test_key k h -> b := List.rev_append acc t\n        | h :: t -> loop t (h :: acc)\n      in\n      loop !b []\n\n    let find b k =\n      match List.find_opt (test_key k) !b with\n      | Some e -> get_data e\n      | None -> None\n\n    let length b = List.length !b\n    let clear b = b := []\n\n  end\n\nend\n\nmodule K2 = struct\n  type ('k1, 'k2, 'd) t = ObjEph.t\n\n  let create () : ('k1,'k2,'d) t = ObjEph.create 2\n\n  let get_key1 (t:('k1,'k2,'d) t) : 'k1 option = obj_opt (ObjEph.get_key t 0)\n  let set_key1 (t:('k1,'k2,'d) t) (k:'k1) : unit =\n    ObjEph.set_key t 0 (Obj.repr k)\n  let check_key1 (t:('k1,'k2,'d) t) : bool = ObjEph.check_key t 0\n\n  let get_key2 (t:('k1,'k2,'d) t) : 'k2 option = obj_opt (ObjEph.get_key t 1)\n  let set_key2 (t:('k1,'k2,'d) t) (k:'k2) : unit =\n    ObjEph.set_key t 1 (Obj.repr k)\n  let check_key2 (t:('k1,'k2,'d) t) : bool = ObjEph.check_key t 1\n\n  let get_data (t:('k1,'k2,'d) t) : 'd option = obj_opt (ObjEph.get_data t)\n  let set_data (t:('k1,'k2,'d) t) (d:'d) : unit =\n    ObjEph.set_data t (Obj.repr d)\n  let unset_data (t:('k1,'k2,'d) t) : unit = ObjEph.unset_data t\n\n  let make key1 key2 data =\n    let eph = create () in\n    set_data eph data;\n    set_key1 eph key1;\n    set_key2 eph key2;\n    ignore (Sys.opaque_identity key1);\n    eph\n\n  let query eph key1 key2 =\n    match get_key1 eph with\n    | None -> None\n    | Some k when k == key1 ->\n        begin match get_key2 eph with\n        | None -> None\n        | Some k when k == key2 -> get_data eph\n        | Some _ -> None\n        end\n    | Some _ -> None\n\n  module MakeSeeded\n      (H1:Hashtbl.SeededHashedType)\n      (H2:Hashtbl.SeededHashedType) =\n    GenHashTable.MakeSeeded(struct\n      type 'a container = (H1.t,H2.t,'a) t\n      type t = H1.t * H2.t\n      let create (k1,k2) d =\n        let c = create () in\n        set_data c d;\n        set_key1 c k1; set_key2 c k2;\n        c\n      let seeded_hash seed (k1,k2) =\n        H1.seeded_hash seed k1 + H2.seeded_hash seed k2 * 65599\n      let equal c (k1,k2) =\n        match get_key1 c, get_key2 c with\n        | None, _ | _ , None -> GenHashTable.EDead\n        | Some k1', Some k2' ->\n            if H1.equal k1 k1' && H2.equal k2 k2'\n            then GenHashTable.ETrue else GenHashTable.EFalse\n      let get_data = get_data\n      let set_key_data c (k1,k2) d =\n        unset_data c;\n        set_key1 c k1; set_key2 c k2;\n        set_data c d\n      let check_key c = check_key1 c && check_key2 c\n    end)\n\n  module Make(H1: Hashtbl.HashedType)(H2: Hashtbl.HashedType):\n    (S with type key = H1.t * H2.t) =\n  struct\n    include MakeSeeded\n        (struct\n          type t = H1.t\n          let equal = H1.equal\n          let seeded_hash (_seed: int) x = H1.hash x\n        end)\n        (struct\n          type t = H2.t\n          let equal = H2.equal\n          let seeded_hash (_seed: int) x = H2.hash x\n        end)\n    let create sz = create ~random:false sz\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n  end\n\n  module Bucket = struct\n\n    type nonrec ('k1, 'k2, 'd) t = ('k1, 'k2, 'd) t list ref\n    let k2_make = make\n    let make () = ref []\n    let add b k1 k2 d = b := k2_make k1 k2 d :: !b\n\n    let test_keys k1 k2 e =\n      match get_key1 e, get_key2 e with\n      | Some x1, Some x2 when x1 == k1 && x2 == k2 -> true\n      | _ -> false\n\n    let remove b k1 k2 =\n      let rec loop l acc =\n        match l with\n        | [] -> ()\n        | h :: t when test_keys k1 k2 h -> b := List.rev_append acc t\n        | h :: t -> loop t (h :: acc)\n      in\n      loop !b []\n\n    let find b k1 k2 =\n      match List.find_opt (test_keys k1 k2) !b with\n      | Some e -> get_data e\n      | None -> None\n\n    let length b = List.length !b\n    let clear b = b := []\n\n  end\n\nend\n\nmodule Kn = struct\n  type ('k,'d) t = ObjEph.t\n\n  let create n : ('k,'d) t = ObjEph.create n\n  let length (k:('k,'d) t) : int = ObjEph.length k\n\n  let get_key (t:('k,'d) t) (n:int) : 'k option = obj_opt (ObjEph.get_key t n)\n  let set_key (t:('k,'d) t) (n:int) (k:'k) : unit =\n    ObjEph.set_key t n (Obj.repr k)\n  let check_key (t:('k,'d) t) (n:int) : bool = ObjEph.check_key t n\n\n  let get_data (t:('k,'d) t) : 'd option = obj_opt (ObjEph.get_data t)\n  let set_data (t:('k,'d) t) (d:'d) : unit = ObjEph.set_data t (Obj.repr d)\n  let unset_data (t:('k,'d) t) : unit = ObjEph.unset_data t\n\n  let make keys data =\n    let l = Array.length keys in\n    let eph = create l in\n    set_data eph data;\n    for i = 0 to l - 1 do set_key eph i keys.(i) done;\n    eph\n\n  let query eph keys =\n    let l = length eph in\n    try\n      if l <> Array.length keys then raise Exit;\n      for i = 0 to l - 1 do\n        match get_key eph i with\n        | None -> raise Exit\n        | Some k when k == keys.(i) -> ()\n        | Some _ -> raise Exit\n      done;\n      get_data eph\n    with Exit -> None\n\n  module MakeSeeded (H:Hashtbl.SeededHashedType) =\n    GenHashTable.MakeSeeded(struct\n      type 'a container = (H.t,'a) t\n      type t = H.t array\n      let create k d =\n        let c = create (Array.length k) in\n        set_data c d;\n        for i=0 to Array.length k -1 do\n          set_key c i k.(i);\n        done;\n        c\n      let seeded_hash seed k =\n        let h = ref 0 in\n        for i=0 to Array.length k -1 do\n          h := H.seeded_hash seed k.(i) * 65599 + !h;\n        done;\n        !h\n      let equal c k =\n        let len  = Array.length k in\n        let len' = length c in\n        if len != len' then GenHashTable.EFalse\n        else\n          let rec equal_array k c i =\n            if i < 0 then GenHashTable.ETrue\n            else\n              match get_key c i with\n              | None -> GenHashTable.EDead\n              | Some ki ->\n                  if H.equal k.(i) ki\n                  then equal_array k c (i-1)\n                  else GenHashTable.EFalse\n          in\n          equal_array k c (len-1)\n      let get_data = get_data\n      let set_key_data c k d =\n        unset_data c;\n        for i=0 to Array.length k -1 do\n          set_key c i k.(i);\n        done;\n        set_data c d\n      let check_key c =\n        let rec check c i =\n          i < 0 || (check_key c i && check c (i-1)) in\n        check c (length c - 1)\n    end)\n\n  module Make(H: Hashtbl.HashedType): (S with type key = H.t array) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let seeded_hash (_seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n    let of_seq i =\n      let tbl = create 16 in\n      replace_seq tbl i;\n      tbl\n  end\n\n  module Bucket = struct\n\n    type nonrec ('k, 'd) t = ('k, 'd) t list ref\n    let kn_make = make\n    let make () = ref []\n    let add b k d = b := kn_make k d :: !b\n\n    let test_keys k e =\n      try\n        if length e <> Array.length k then raise Exit;\n        for i = 0 to Array.length k - 1 do\n          match get_key e i with\n          | Some x when x == k.(i) -> ()\n          | _ -> raise Exit\n        done;\n        true\n      with Exit -> false\n\n    let remove b k =\n      let rec loop l acc =\n        match l with\n        | [] -> ()\n        | h :: t when test_keys k h -> b := List.rev_append acc t\n        | h :: t -> loop t (h :: acc)\n      in\n      loop !b []\n\n    let find b k =\n      match List.find_opt (test_keys k) !b with\n      | Some e -> get_data e\n      | None -> None\n\n    let length b = List.length !b\n    let clear b = b := []\n\n  end\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Xavier Leroy and Damien Doligez, INRIA Rocquencourt          *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nlet generic_quote quotequote s =\n  let l = String.length s in\n  let b = Buffer.create (l + 20) in\n  Buffer.add_char b '\\'';\n  for i = 0 to l - 1 do\n    if s.[i] = '\\''\n    then Buffer.add_string b quotequote\n    else Buffer.add_char b  s.[i]\n  done;\n  Buffer.add_char b '\\'';\n  Buffer.contents b\n\n(* This function implements the Open Group specification found here:\n  [[1]] http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html\n  In step 1 of [[1]], we choose to return \".\" for empty input.\n    (for compatibility with previous versions of OCaml)\n  In step 2, we choose to process \"//\" normally.\n  Step 6 is not implemented: we consider that the [suffix] operand is\n    always absent.  Suffixes are handled by [chop_suffix] and [chop_extension].\n*)\nlet generic_basename is_dir_sep current_dir_name name =\n  let rec find_end n =\n    if n < 0 then String.sub name 0 1\n    else if is_dir_sep name n then find_end (n - 1)\n    else find_beg n (n + 1)\n  and find_beg n p =\n    if n < 0 then String.sub name 0 p\n    else if is_dir_sep name n then String.sub name (n + 1) (p - n - 1)\n    else find_beg (n - 1) p\n  in\n  if name = \"\"\n  then current_dir_name\n  else find_end (String.length name - 1)\n\n(* This function implements the Open Group specification found here:\n  [[2]] http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html\n  In step 6 of [[2]], we choose to process \"//\" normally.\n*)\nlet generic_dirname is_dir_sep current_dir_name name =\n  let rec trailing_sep n =\n    if n < 0 then String.sub name 0 1\n    else if is_dir_sep name n then trailing_sep (n - 1)\n    else base n\n  and base n =\n    if n < 0 then current_dir_name\n    else if is_dir_sep name n then intermediate_sep n\n    else base (n - 1)\n  and intermediate_sep n =\n    if n < 0 then String.sub name 0 1\n    else if is_dir_sep name n then intermediate_sep (n - 1)\n    else String.sub name 0 (n + 1)\n  in\n  if name = \"\"\n  then current_dir_name\n  else trailing_sep (String.length name - 1)\n\nmodule type SYSDEPS = sig\n  val null : string\n  val current_dir_name : string\n  val parent_dir_name : string\n  val dir_sep : string\n  val is_dir_sep : string -> int -> bool\n  val is_relative : string -> bool\n  val is_implicit : string -> bool\n  val check_suffix : string -> string -> bool\n  val chop_suffix_opt : suffix:string -> string -> string option\n  val temp_dir_name : string\n  val quote : string -> string\n  val quote_command :\n    string -> ?stdin: string -> ?stdout: string -> ?stderr: string\n           -> string list -> string\n  val basename : string -> string\n  val dirname : string -> string\nend\n\nmodule Unix : SYSDEPS = struct\n  let null = \"/dev/null\"\n  let current_dir_name = \".\"\n  let parent_dir_name = \"..\"\n  let dir_sep = \"/\"\n  let is_dir_sep s i = s.[i] = '/'\n  let is_relative n = String.length n < 1 || n.[0] <> '/'\n  let is_implicit n =\n    is_relative n\n    && (String.length n < 2 || String.sub n 0 2 <> \"./\")\n    && (String.length n < 3 || String.sub n 0 3 <> \"../\")\n  let check_suffix name suff =\n    String.ends_with ~suffix:suff name\n\n  let chop_suffix_opt ~suffix filename =\n    let len_s = String.length suffix and len_f = String.length filename in\n    if len_f >= len_s then\n      let r = String.sub filename (len_f - len_s) len_s in\n      if r = suffix then\n        Some (String.sub filename 0 (len_f - len_s))\n      else\n        None\n    else\n      None\n\n  let temp_dir_name =\n    try Sys.getenv \"TMPDIR\" with Not_found -> \"/tmp\"\n  let quote = generic_quote \"'\\\\''\"\n  let quote_command cmd ?stdin ?stdout ?stderr args =\n    String.concat \" \" (List.map quote (cmd :: args))\n    ^ (match stdin  with None -> \"\" | Some f -> \" <\" ^ quote f)\n    ^ (match stdout with None -> \"\" | Some f -> \" >\" ^ quote f)\n    ^ (match stderr with None -> \"\" | Some f -> if stderr = stdout\n                                                then \" 2>&1\"\n                                                else \" 2>\" ^ quote f)\n  let basename = generic_basename is_dir_sep current_dir_name\n  let dirname = generic_dirname is_dir_sep current_dir_name\nend\n\nmodule Win32 : SYSDEPS = struct\n  let null = \"NUL\"\n  let current_dir_name = \".\"\n  let parent_dir_name = \"..\"\n  let dir_sep = \"\\\\\"\n  let is_dir_sep s i = let c = s.[i] in c = '/' || c = '\\\\' || c = ':'\n  let is_relative n =\n    (String.length n < 1 || n.[0] <> '/')\n    && (String.length n < 1 || n.[0] <> '\\\\')\n    && (String.length n < 2 || n.[1] <> ':')\n  let is_implicit n =\n    is_relative n\n    && (String.length n < 2 || String.sub n 0 2 <> \"./\")\n    && (String.length n < 2 || String.sub n 0 2 <> \".\\\\\")\n    && (String.length n < 3 || String.sub n 0 3 <> \"../\")\n    && (String.length n < 3 || String.sub n 0 3 <> \"..\\\\\")\n  let check_suffix name suff =\n   String.length name >= String.length suff &&\n   (let s = String.sub name (String.length name - String.length suff)\n                            (String.length suff) in\n    String.lowercase_ascii s = String.lowercase_ascii suff)\n\n  let chop_suffix_opt ~suffix filename =\n    let len_s = String.length suffix and len_f = String.length filename in\n    if len_f >= len_s then\n      let r = String.sub filename (len_f - len_s) len_s in\n      if String.lowercase_ascii r = String.lowercase_ascii suffix then\n        Some (String.sub filename 0 (len_f - len_s))\n      else\n        None\n    else\n      None\n\n\n  let temp_dir_name =\n    try Sys.getenv \"TEMP\" with Not_found -> \".\"\n  let quote s =\n    let l = String.length s in\n    let b = Buffer.create (l + 20) in\n    Buffer.add_char b '\\\"';\n    let rec loop i =\n      if i = l then Buffer.add_char b '\\\"' else\n      match s.[i] with\n      | '\\\"' -> loop_bs 0 i;\n      | '\\\\' -> loop_bs 0 i;\n      | c    -> Buffer.add_char b c; loop (i+1);\n    and loop_bs n i =\n      if i = l then begin\n        Buffer.add_char b '\\\"';\n        add_bs n;\n      end else begin\n        match s.[i] with\n        | '\\\"' -> add_bs (2*n+1); Buffer.add_char b '\\\"'; loop (i+1);\n        | '\\\\' -> loop_bs (n+1) (i+1);\n        | _    -> add_bs n; loop i\n      end\n    and add_bs n = for _j = 1 to n do Buffer.add_char b '\\\\'; done\n    in\n    loop 0;\n    Buffer.contents b\n(*\nQuoting commands for execution by cmd.exe is difficult.\n1- Each argument is first quoted using the \"quote\" function above, to\n   protect it against the processing performed by the C runtime system,\n   then cmd.exe's special characters are escaped with '^', using\n   the \"quote_cmd\" function below.  For more details, see\n   https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23\n2- The command and the redirection files, if any, must be double-quoted\n   in case they contain spaces.  This quoting is interpreted by cmd.exe,\n   not by the C runtime system, hence the \"quote\" function above\n   cannot be used.  The two characters we don't know how to quote\n   inside a double-quoted cmd.exe string are double-quote and percent.\n   We just fail if the command name or the redirection file names\n   contain a double quote (not allowed in Windows file names, anyway)\n   or a percent.  See function \"quote_cmd_filename\" below.\n3- The whole string passed to Sys.command is then enclosed in double\n   quotes, which are immediately stripped by cmd.exe.  Otherwise,\n   some of the double quotes from step 2 above can be misparsed.\n   See e.g. https://stackoverflow.com/a/9965141\n*)\n  let quote_cmd s =\n    let b = Buffer.create (String.length s + 20) in\n    String.iter\n      (fun c ->\n        match c with\n        | '(' | ')' | '!' | '^' | '%' | '\\\"' | '<' | '>' | '&' | '|' ->\n            Buffer.add_char b '^'; Buffer.add_char b c\n        | _ ->\n            Buffer.add_char b c)\n      s;\n    Buffer.contents b\n  let quote_cmd_filename f =\n    if String.exists (function '\\\"' | '%' -> true | _ -> false) f then\n      failwith (\"Filename.quote_command: bad file name \" ^ f)\n    else if String.contains f ' ' then\n      String.concat \"\" [\"\\\"\"; f; \"\\\"\"]\n    else\n      f\n  (* Redirections in cmd.exe: see https://ss64.com/nt/syntax-redirection.html\n     and https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-xp/bb490982(v=technet.10)\n  *)\n  let quote_command cmd ?stdin ?stdout ?stderr args =\n    String.concat \"\" [\n      \"\\\"\";\n      quote_cmd_filename cmd;\n      \" \";\n      quote_cmd (String.concat \" \" (List.map quote args));\n      (match stdin  with None -> \"\" | Some f -> \" <\" ^ quote_cmd_filename f);\n      (match stdout with None -> \"\" | Some f -> \" >\" ^ quote_cmd_filename f);\n      (match stderr with None -> \"\" | Some f ->\n                                        if stderr = stdout\n                                        then \" 2>&1\"\n                                        else \" 2>\" ^ quote_cmd_filename f);\n      \"\\\"\"\n    ]\n  let has_drive s =\n    let is_letter = function\n      | 'A' .. 'Z' | 'a' .. 'z' -> true\n      | _ -> false\n    in\n    String.length s >= 2 && is_letter s.[0] && s.[1] = ':'\n  let drive_and_path s =\n    if has_drive s\n    then (String.sub s 0 2, String.sub s 2 (String.length s - 2))\n    else (\"\", s)\n  let dirname s =\n    let (drive, path) = drive_and_path s in\n    let dir = generic_dirname is_dir_sep current_dir_name path in\n    drive ^ dir\n  let basename s =\n    let (_drive, path) = drive_and_path s in\n    generic_basename is_dir_sep current_dir_name path\nend\n\nmodule Cygwin : SYSDEPS = struct\n  let null = \"/dev/null\"\n  let current_dir_name = \".\"\n  let parent_dir_name = \"..\"\n  let dir_sep = \"/\"\n  let is_dir_sep = Win32.is_dir_sep\n  let is_relative = Win32.is_relative\n  let is_implicit = Win32.is_implicit\n  let check_suffix = Win32.check_suffix\n  let chop_suffix_opt = Win32.chop_suffix_opt\n  let temp_dir_name = Unix.temp_dir_name\n  let quote = Unix.quote\n  let quote_command = Unix.quote_command\n  let basename = generic_basename is_dir_sep current_dir_name\n  let dirname = generic_dirname is_dir_sep current_dir_name\nend\n\nmodule Sysdeps =\n  (val (match Sys.os_type with\n       | \"Win32\" -> (module Win32: SYSDEPS)\n       | \"Cygwin\" -> (module Cygwin: SYSDEPS)\n       | _ -> (module Unix: SYSDEPS)))\n\ninclude Sysdeps\n\nlet concat dirname filename =\n  let l = String.length dirname in\n  if l = 0 || is_dir_sep dirname (l-1)\n  then dirname ^ filename\n  else dirname ^ dir_sep ^ filename\n\nlet chop_suffix name suff =\n  if check_suffix name suff\n  then String.sub name 0 (String.length name - String.length suff)\n  else invalid_arg \"Filename.chop_suffix\"\n\nlet extension_len name =\n  let rec check i0 i =\n    if i < 0 || is_dir_sep name i then 0\n    else if name.[i] = '.' then check i0 (i - 1)\n    else String.length name - i0\n  in\n  let rec search_dot i =\n    if i < 0 || is_dir_sep name i then 0\n    else if name.[i] = '.' then check i (i - 1)\n    else search_dot (i - 1)\n  in\n  search_dot (String.length name - 1)\n\nlet extension name =\n  let l = extension_len name in\n  if l = 0 then \"\" else String.sub name (String.length name - l) l\n\nlet chop_extension name =\n  let l = extension_len name in\n  if l = 0 then invalid_arg \"Filename.chop_extension\"\n  else String.sub name 0 (String.length name - l)\n\nlet remove_extension name =\n  let l = extension_len name in\n  if l = 0 then name else String.sub name 0 (String.length name - l)\n\nexternal open_desc: string -> open_flag list -> int -> int = \"caml_sys_open\"\nexternal close_desc: int -> unit = \"caml_sys_close\"\n\nlet prng_key =\n  Domain.DLS.new_key Random.State.make_self_init\n\nlet temp_file_name temp_dir prefix suffix =\n  let random_state = Domain.DLS.get prng_key in\n  let rnd = (Random.State.bits random_state) land 0xFFFFFF in\n  concat temp_dir (Printf.sprintf \"%s%06x%s\" prefix rnd suffix)\n\nlet current_temp_dir_name =\n  Domain.DLS.new_key ~split_from_parent:Fun.id (fun () -> temp_dir_name)\n\nlet set_temp_dir_name s = Domain.DLS.set current_temp_dir_name s\nlet get_temp_dir_name () = Domain.DLS.get current_temp_dir_name\n\nlet temp_file ?(temp_dir = Domain.DLS.get current_temp_dir_name) prefix suffix =\n  let rec try_name counter =\n    let name = temp_file_name temp_dir prefix suffix in\n    try\n      close_desc(open_desc name [Open_wronly; Open_creat; Open_excl] 0o600);\n      name\n    with Sys_error _ as e ->\n      if counter >= 20 then raise e else try_name (counter + 1)\n  in try_name 0\n\nlet open_temp_file ?(mode = [Open_text]) ?(perms = 0o600)\n    ?(temp_dir = Domain.DLS.get current_temp_dir_name)\n    prefix suffix =\n  let rec try_name counter =\n    let name = temp_file_name temp_dir prefix suffix in\n    try\n      (name,\n       open_out_gen (Open_wronly::Open_creat::Open_excl::mode) perms name)\n    with Sys_error _ as e ->\n      if counter >= 20 then raise e else try_name (counter + 1)\n  in try_name 0\n\nlet temp_dir ?(temp_dir = Domain.DLS.get current_temp_dir_name)\n    ?(perms = 0o700) prefix suffix =\n  let rec try_name counter =\n    let name = temp_file_name temp_dir prefix suffix in\n    try\n      Sys.mkdir name perms;\n      name\n    with Sys_error _ as e ->\n      if counter >= 20 then raise e else try_name (counter + 1)\n  in try_name 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Complex numbers *)\n\ntype t = { re: float; im: float }\n\nlet zero = { re = 0.0; im = 0.0 }\nlet one = { re = 1.0; im = 0.0 }\nlet i = { re = 0.0; im = 1.0 }\n\nlet add x y = { re = x.re +. y.re; im = x.im +. y.im }\n\nlet sub x y = { re = x.re -. y.re; im = x.im -. y.im }\n\nlet neg x = { re = -. x.re; im = -. x.im }\n\nlet conj x = { re = x.re; im = -. x.im }\n\nlet mul x y = { re = x.re *. y.re -. x.im *. y.im;\n                im = x.re *. y.im +. x.im *. y.re }\n\nlet div x y =\n  if abs_float y.re >= abs_float y.im then\n    let r = y.im /. y.re in\n    let d = y.re +. r *. y.im in\n    { re = (x.re +. r *. x.im) /. d;\n      im = (x.im -. r *. x.re) /. d }\n  else\n    let r = y.re /. y.im in\n    let d = y.im +. r *. y.re in\n    { re = (r *. x.re +. x.im) /. d;\n      im = (r *. x.im -. x.re) /. d }\n\nlet inv x = div one x\n\nlet norm2 x = x.re *. x.re +. x.im *. x.im\n\nlet norm x = Float.hypot x.re x.im\n\nlet arg x = atan2 x.im x.re\n\nlet polar n a = { re = cos a *. n; im = sin a *. n }\n\nlet sqrt x =\n  if x.re = 0.0 && x.im = 0.0 then { re = 0.0; im = 0.0 }\n  else begin\n    let r = abs_float x.re and i = abs_float x.im in\n    let w =\n      if r >= i then begin\n        let q = i /. r in\n        sqrt(r) *. sqrt(0.5 *. (1.0 +. sqrt(1.0 +. q *. q)))\n      end else begin\n        let q = r /. i in\n        sqrt(i) *. sqrt(0.5 *. (q +. sqrt(1.0 +. q *. q)))\n      end in\n    if x.re >= 0.0\n    then { re = w;  im = 0.5 *. x.im /. w }\n    else { re = 0.5 *. i /. w;  im = if x.im >= 0.0 then w else -. w }\n  end\n\nlet exp x =\n  let e = exp x.re in { re = e *. cos x.im; im = e *. sin x.im }\n\nlet log x = { re = log (norm x); im = atan2 x.im x.re }\n\nlet pow x y = exp (mul y (log x))\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2021 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t = in_channel\n\ntype open_flag = Stdlib.open_flag =\n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n\nlet stdin = Stdlib.stdin\nlet open_bin = Stdlib.open_in_bin\nlet open_text = Stdlib.open_in\nlet open_gen = Stdlib.open_in_gen\n\nlet with_open openfun s f =\n  let ic = openfun s in\n  Fun.protect ~finally:(fun () -> Stdlib.close_in_noerr ic)\n    (fun () -> f ic)\n\nlet with_open_bin s f =\n  with_open Stdlib.open_in_bin s f\n\nlet with_open_text s f =\n  with_open Stdlib.open_in s f\n\nlet with_open_gen flags perm s f =\n  with_open (Stdlib.open_in_gen flags perm) s f\n\nlet seek = Stdlib.LargeFile.seek_in\nlet pos = Stdlib.LargeFile.pos_in\nlet length = Stdlib.LargeFile.in_channel_length\nlet close = Stdlib.close_in\nlet close_noerr = Stdlib.close_in_noerr\n\nlet input_char ic =\n  match Stdlib.input_char ic with\n  | c -> Some c\n  | exception End_of_file -> None\n\nlet input_byte ic =\n  match Stdlib.input_byte ic with\n  | n -> Some n\n  | exception End_of_file -> None\n\nlet input_line ic =\n  match Stdlib.input_line ic with\n  | s -> Some s\n  | exception End_of_file -> None\n\nlet input = Stdlib.input\n\nlet really_input ic buf pos len =\n  match Stdlib.really_input ic buf pos len with\n  | () -> Some ()\n  | exception End_of_file -> None\n\nlet really_input_string ic len =\n  match Stdlib.really_input_string ic len with\n  | s -> Some s\n  | exception End_of_file -> None\n\n(* Read up to [len] bytes into [buf], starting at [ofs]. Return total bytes\n   read. *)\nlet read_upto ic buf ofs len =\n  let rec loop ofs len =\n    if len = 0 then ofs\n    else begin\n      let r = Stdlib.input ic buf ofs len in\n      if r = 0 then\n        ofs\n      else\n        loop (ofs + r) (len - r)\n    end\n  in\n  loop ofs len - ofs\n\n(* Best effort attempt to return a buffer with >= (ofs + n) bytes of storage,\n   and such that it coincides with [buf] at indices < [ofs].\n\n   The returned buffer is equal to [buf] itself if it already has sufficient\n   free space.\n\n   The returned buffer may have *fewer* than [ofs + n] bytes of storage if this\n   number is > [Sys.max_string_length]. However the returned buffer will\n   *always* have > [ofs] bytes of storage. In the limiting case when [ofs = len\n   = Sys.max_string_length] (so that it is not possible to resize the buffer at\n   all), an exception is raised. *)\n\nlet ensure buf ofs n =\n  let len = Bytes.length buf in\n  if len >= ofs + n then buf\n  else begin\n    let new_len = ref len in\n    while !new_len < ofs + n do\n      new_len := 2 * !new_len + 1\n    done;\n    let new_len = !new_len in\n    let new_len =\n      if new_len <= Sys.max_string_length then\n        new_len\n      else if ofs < Sys.max_string_length then\n        Sys.max_string_length\n      else\n        failwith \"In_channel.input_all: channel content \\\n                  is larger than maximum string length\"\n    in\n    let new_buf = Bytes.create new_len in\n    Bytes.blit buf 0 new_buf 0 ofs;\n    new_buf\n  end\n\nlet input_all ic =\n  let chunk_size = 65536 in (* IO_BUFFER_SIZE *)\n  let initial_size =\n    try\n      Stdlib.in_channel_length ic - Stdlib.pos_in ic\n    with Sys_error _ ->\n      -1\n  in\n  let initial_size = if initial_size < 0 then chunk_size else initial_size in\n  let initial_size =\n    if initial_size <= Sys.max_string_length then\n      initial_size\n    else\n      Sys.max_string_length\n  in\n  let buf = Bytes.create initial_size in\n  let nread = read_upto ic buf 0 initial_size in\n  if nread < initial_size then (* EOF reached, buffer partially filled *)\n    Bytes.sub_string buf 0 nread\n  else begin (* nread = initial_size, maybe EOF reached *)\n    match Stdlib.input_char ic with\n    | exception End_of_file ->\n        (* EOF reached, buffer is completely filled *)\n        Bytes.unsafe_to_string buf\n    | c ->\n        (* EOF not reached *)\n        let rec loop buf ofs =\n          let buf = ensure buf ofs chunk_size in\n          let rem = Bytes.length buf - ofs in\n          (* [rem] can be < [chunk_size] if buffer size close to\n             [Sys.max_string_length] *)\n          let r = read_upto ic buf ofs rem in\n          if r < rem then (* EOF reached *)\n            Bytes.sub_string buf 0 (ofs + r)\n          else (* r = rem *)\n            loop buf (ofs + rem)\n        in\n        let buf = ensure buf nread (chunk_size + 1) in\n        Bytes.set buf nread c;\n        loop buf (nread + 1)\n  end\n\nlet [@tail_mod_cons] rec input_lines ic =\n  match Stdlib.input_line ic with\n  | line -> line :: input_lines ic\n  | exception End_of_file -> []\n\nlet rec fold_lines f accu ic =\n  match Stdlib.input_line ic with\n  | line -> fold_lines f (f accu line) ic\n  | exception End_of_file -> accu\n\nlet set_binary_mode = Stdlib.set_binary_mode_in\n\nexternal isatty : t -> bool = \"caml_sys_isatty\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2021 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype t = out_channel\n\ntype open_flag = Stdlib.open_flag =\n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n\nlet stdout = Stdlib.stdout\nlet stderr = Stdlib.stderr\nlet open_bin = Stdlib.open_out_bin\nlet open_text = Stdlib.open_out\nlet open_gen = Stdlib.open_out_gen\n\nlet with_open openfun s f =\n  let oc = openfun s in\n  Fun.protect ~finally:(fun () -> Stdlib.close_out_noerr oc)\n    (fun () -> f oc)\n\nlet with_open_bin s f =\n  with_open Stdlib.open_out_bin s f\n\nlet with_open_text s f =\n  with_open Stdlib.open_out s f\n\nlet with_open_gen flags perm s f =\n  with_open (Stdlib.open_out_gen flags perm) s f\n\nlet seek = Stdlib.LargeFile.seek_out\nlet pos = Stdlib.LargeFile.pos_out\nlet length = Stdlib.LargeFile.out_channel_length\nlet close = Stdlib.close_out\nlet close_noerr = Stdlib.close_out_noerr\nlet flush = Stdlib.flush\nlet flush_all = Stdlib.flush_all\nlet output_char = Stdlib.output_char\nlet output_byte = Stdlib.output_byte\nlet output_string = Stdlib.output_string\nlet output_bytes = Stdlib.output_bytes\nlet output = Stdlib.output\nlet output_substring = Stdlib.output_substring\nlet set_binary_mode = Stdlib.set_binary_mode_out\n\nexternal set_buffered : t -> bool -> unit = \"caml_ml_set_buffered\"\n\nexternal is_buffered : t -> bool = \"caml_ml_is_buffered\"\n\nexternal isatty : t -> bool = \"caml_sys_isatty\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*      KC Sivaramakrishnan, Indian Institute of Technology, Madras       *)\n(*                                                                        *)\n(*   Copyright 2021 Indian Institute of Technology, Madras                *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\ntype 'a t = ..\nexternal perform : 'a t -> 'a = \"%perform\"\n\ntype exn += Unhandled: 'a t -> exn\nexception Continuation_already_resumed\n\nlet () =\n  let printer = function\n    | Unhandled x ->\n        let msg = Printf.sprintf \"Stdlib.Effect.Unhandled(%s)\"\n            (Printexc.string_of_extension_constructor @@ Obj.repr x)\n        in\n        Some msg\n    | _ -> None\n  in\n  Printexc.register_printer printer\n\n(* Register the exceptions so that the runtime can access it *)\ntype _ t += Should_not_see_this__ : unit t\nlet _ = Callback.register_exception \"Effect.Unhandled\"\n          (Unhandled Should_not_see_this__)\nlet _ = Callback.register_exception \"Effect.Continuation_already_resumed\"\n          Continuation_already_resumed\n\ntype ('a, 'b) stack\n\nexternal resume : ('a, 'b) stack -> ('c -> 'a) -> 'c -> 'b = \"%resume\"\nexternal runstack : ('a, 'b) stack -> ('c -> 'a) -> 'c -> 'b = \"%runstack\"\n\nmodule Deep = struct\n\n  type ('a,'b) continuation\n  type last_fiber\n\n  external take_cont_noexc : ('a, 'b) continuation -> ('a, 'b) stack =\n    \"caml_continuation_use_noexc\" [@@noalloc]\n  external alloc_stack :\n    ('a -> 'b) ->\n    (exn -> 'b) ->\n    ('c t -> ('c, 'b) continuation -> last_fiber -> 'b) ->\n    ('a, 'b) stack = \"caml_alloc_stack\"\n\n  let continue k v = resume (take_cont_noexc k) (fun x -> x) v\n\n  let discontinue k e = resume (take_cont_noexc k) (fun e -> raise e) e\n\n  let discontinue_with_backtrace k e bt = resume (take_cont_noexc k) (fun e ->\n    Printexc.raise_with_backtrace e bt) e\n\n  type ('a,'b) handler =\n    { retc: 'a -> 'b;\n      exnc: exn -> 'b;\n      effc: 'c.'c t -> (('c,'b) continuation -> 'b) option }\n\n  external reperform :\n    'a t -> ('a, 'b) continuation -> last_fiber -> 'b = \"%reperform\"\n\n  let match_with comp arg handler =\n    let effc eff k last_fiber =\n      match handler.effc eff with\n      | Some f -> f k\n      | None -> reperform eff k last_fiber\n    in\n    let s = alloc_stack handler.retc handler.exnc effc in\n    runstack s comp arg\n\n  type 'a effect_handler =\n    { effc: 'b. 'b t -> (('b,'a) continuation -> 'a) option }\n\n  let try_with comp arg handler =\n    let effc' eff k last_fiber =\n      match handler.effc eff with\n      | Some f -> f k\n      | None -> reperform eff k last_fiber\n    in\n    let s = alloc_stack (fun x -> x) (fun e -> raise e) effc' in\n    runstack s comp arg\n\n  external get_callstack :\n    ('a,'b) continuation -> int -> Printexc.raw_backtrace =\n    \"caml_get_continuation_callstack\"\nend\n\nmodule Shallow = struct\n\n  type ('a,'b) continuation\n  type last_fiber\n\n  external alloc_stack :\n    ('a -> 'b) ->\n    (exn -> 'b) ->\n    ('c t -> ('c, 'b) continuation -> last_fiber -> 'b) ->\n    ('a, 'b) stack = \"caml_alloc_stack\"\n\n\n  let fiber : type a b. (a -> b) -> (a, b) continuation = fun f ->\n    let module M = struct type _ t += Initial_setup__ : a t end in\n    let exception E of (a,b) continuation in\n    let f' () = f (perform M.Initial_setup__) in\n    let error _ = failwith \"impossible\" in\n    let effc eff k _last_fiber =\n      match eff with\n      | M.Initial_setup__ -> raise_notrace (E k)\n      | _ -> error ()\n    in\n    let s = alloc_stack error error effc in\n    match runstack s f' () with\n    | exception E k -> k\n    | _ -> error ()\n\n  type ('a,'b) handler =\n    { retc: 'a -> 'b;\n      exnc: exn -> 'b;\n      effc: 'c.'c t -> (('c,'a) continuation -> 'b) option }\n\n  external update_handler :\n    ('a,'b) continuation ->\n    ('b -> 'c) ->\n    (exn -> 'c) ->\n    ('d t -> ('d,'b) continuation -> last_fiber -> 'c) ->\n    ('a,'c) stack = \"caml_continuation_use_and_update_handler_noexc\" [@@noalloc]\n\n  external reperform :\n    'a t -> ('a, 'b) continuation -> last_fiber -> 'c = \"%reperform\"\n\n  let continue_gen k resume_fun v handler =\n    let effc eff k last_fiber =\n      match handler.effc eff with\n      | Some f -> f k\n      | None -> reperform eff k last_fiber\n    in\n    let stack = update_handler k handler.retc handler.exnc effc in\n    resume stack resume_fun v\n\n  let continue_with k v handler =\n    continue_gen k (fun x -> x) v handler\n\n  let discontinue_with k v handler =\n    continue_gen k (fun e -> raise e) v handler\n\n  let discontinue_with_backtrace k v bt handler =\n    continue_gen k (fun e -> Printexc.raise_with_backtrace e bt) v handler\n\n  external get_callstack :\n    ('a,'b) continuation -> int -> Printexc.raw_backtrace =\n    \"caml_get_continuation_callstack\"\nend\n","# 1 \"ppx_deriving_runtime.cppo.ml\"\ntype nonrec int = int\ntype nonrec char = char\ntype nonrec string = string\ntype nonrec float = float\ntype nonrec bool = bool\ntype nonrec unit = unit\ntype nonrec exn = exn\ntype nonrec 'a array = 'a array\ntype nonrec 'a list = 'a list\ntype nonrec 'a option = 'a option\ntype nonrec nativeint = nativeint\ntype nonrec int32 = int32\ntype nonrec int64 = int64\ntype nonrec 'a lazy_t = 'a lazy_t\ntype nonrec bytes = bytes\n\n# 18 \"ppx_deriving_runtime.cppo.ml\"\n(* We require 4.08 while 4.07 already has a Stdlib module.\n   In 4.07, the type equalities on Stdlib.Pervasives\n   are not strong enough for the 'include Stdlib'\n   below to satisfy the signature constraints on\n   Ppx_deriving_runtime.Pervasives. *)\nmodule Stdlib = Stdlib\n\ninclude Stdlib\n\nmodule Result = struct\n  type ('a, 'b) t = ('a, 'b) result =\n    | Ok of 'a\n    | Error of 'b\n\n  type ('a, 'b) result = ('a, 'b) t =\n    | Ok of 'a\n    | Error of 'b\nend\n","include Ppx_deriving_runtime\n\nlet (>>=) x f =\n  match x with Result.Ok x -> f x | (Result.Error _) as x -> x\n\nlet (>|=) x f =\n  x >>= fun x -> Result.Ok (f x)\n\nlet rec map_bind f acc xs =\n  match xs with\n  | x :: xs ->\n    (* equivalent to [f x >>= fun x -> map_bind f (x :: acc) xs],\n       but do not use [(>>=)] to keep [map_bind] tail-recursive\n       under js-of-ocaml *)\n    (match f x with\n     | ((Result.Error _) as err) -> err\n     | Result.Ok x -> map_bind f (x :: acc) xs)\n  | [] -> Result.Ok (List.rev acc)\n\ntype 'a error_or = ('a, string) Result.result\n\n(** [safe_map f l] returns the same value as [List.map f l], but\n    computes it tail-recursively so that large list lengths don't\n    cause a stack overflow *)\nlet safe_map f l = List.rev (List.rev_map f l)\n","let utf8_of_code buf x =\n  let add = Buffer.add_char in\n\n  (* Straight <= doesn't work with signed 31-bit ints *)\n  let maxbits n x = x lsr n = 0 in\n\n  if maxbits 7 x then (* 7 *)\n    add buf (Char.chr x)\n  else if maxbits 11 x then (\n    (* 5 + 6 *)\n    add buf (Char.chr (0b11000000 lor ((x lsr 6) land 0b00011111)));\n    add buf (Char.chr (0b10000000 lor (x land 0b00111111))))\n  else if maxbits 16 x then (\n    (* 4 + 6 + 6 *)\n    add buf (Char.chr (0b11100000 lor ((x lsr 12) land 0b00001111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 6) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor (x land 0b00111111))))\n  else if maxbits 21 x then (\n    (* 3 + 6 + 6 + 6 *)\n    add buf (Char.chr (0b11110000 lor ((x lsr 18) land 0b00000111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 12) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 6) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor (x land 0b00111111))))\n  else if maxbits 26 x then (\n    (* 2 + 6 + 6 + 6 + 6 *)\n    add buf (Char.chr (0b11111000 lor ((x lsr 24) land 0b00000011)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 18) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 12) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 6) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor (x land 0b00111111))))\n  else (\n    assert (maxbits 31 x);\n    (* 1 + 6 + 6 + 6 + 6 + 6 *)\n    add buf (Char.chr (0b11111100 lor ((x lsr 30) land 0b00000001)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 24) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 18) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 12) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor ((x lsr 6) land 0b00111111)));\n    add buf (Char.chr (0b10000000 lor (x land 0b00111111))))\n\nlet code_of_surrogate_pair i j =\n  let high10 = i - 0xD800 in\n  let low10 = j - 0xDC00 in\n  0x10000 + ((high10 lsl 10) lor low10)\n\nlet utf8_of_surrogate_pair buf i j =\n  utf8_of_code buf (code_of_surrogate_pair i j)\n","let version = \"2.1.2\"\n\nexception Json_error of string\n\nlet json_error s = raise (Json_error s)\n\nexception End_of_array\nexception End_of_object\nexception End_of_tuple\nexception End_of_input\n\ntype lexer_state = {\n  buf : Buffer.t; (* Buffer used to accumulate substrings *)\n  mutable lnum : int; (* Current line number (starting from 1) *)\n  mutable bol : int;\n      (* Absolute position of the first character of the current line\n         (starting from 0) *)\n  mutable fname : string option; (* Name describing the input file *)\n}\n\nmodule Lexer_state = struct\n  type t = lexer_state = {\n    buf : Buffer.t;\n    mutable lnum : int;\n    mutable bol : int;\n    mutable fname : string option;\n  }\nend\n\nlet init_lexer ?buf ?fname ?(lnum = 1) () =\n  let buf = match buf with None -> Buffer.create 256 | Some buf -> buf in\n  { buf; lnum; bol = 0; fname }\n","let __ocaml_lex_tables = {\n  Lexing.lex_base =\n   \"\\000\\000\\254\\255\\255\\255\";\n  Lexing.lex_backtrk =\n   \"\\255\\255\\255\\255\\255\\255\";\n  Lexing.lex_default =\n   \"\\001\\000\\000\\000\\000\\000\";\n  Lexing.lex_trans =\n   \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\\n    \\002\\000\";\n  Lexing.lex_check =\n   \"\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\255\\\n    \\000\\000\";\n  Lexing.lex_base_code =\n   \"\";\n  Lexing.lex_backtrk_code =\n   \"\";\n  Lexing.lex_default_code =\n   \"\";\n  Lexing.lex_trans_code =\n   \"\";\n  Lexing.lex_check_code =\n   \"\";\n  Lexing.lex_code =\n   \"\";\n}\n\nlet rec read_junk buf n lexbuf =\n   __ocaml_lex_read_junk_rec buf n lexbuf 0\nand __ocaml_lex_read_junk_rec buf n lexbuf __ocaml_lex_state =\n  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with\n      | 0 ->\n# 2 \"lib/lexer_utils.mll\"\n        ( () )\n# 98 \"lib/lexer_utils.ml\"\n\n  | 1 ->\n# 3 \"lib/lexer_utils.mll\"\n      (\n     if n <= 0 then ()\n     else begin\n       Buffer.add_char buf (Lexing.lexeme_char lexbuf 0);\n       read_junk buf (n - 1) lexbuf\n     end\n     )\n# 109 \"lib/lexer_utils.ml\"\n\n  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;\n      __ocaml_lex_read_junk_rec buf n lexbuf __ocaml_lex_state\n\n;;\n\n# 11 \"lib/lexer_utils.mll\"\n \nlet read_junk_without_positions buf n (lexbuf : Lexing.lexbuf) =\n  let junk_start_pos = lexbuf.lex_start_pos in\n  read_junk buf n lexbuf;\n  lexbuf.lex_start_pos <- junk_start_pos + 1\n\n# 123 \"lib/lexer_utils.ml\"\n","(* generated by dune *)\n\n(** @canonical Jsoo_runtime.Runtime_version *)\nmodule Runtime_version = Jsoo_runtime__Runtime_version\n\nmodule Jsoo_runtime__ = struct end\n[@@deprecated \"this module is shadowed\"]\n","module Js = struct\n  type t\n\n  type 'a js_array = t\n\n  type ('a, 'b) meth_callback = t\n\n  external string : string -> t = \"caml_jsstring_of_string\"\n\n  external to_string : t -> string = \"caml_string_of_jsstring\"\n\n  external bytestring : string -> t = \"caml_jsbytes_of_string\"\n\n  external to_bytestring : t -> string = \"caml_string_of_jsbytes\"\n\n  external bool : bool -> t = \"caml_js_from_bool\"\n\n  external to_bool : t -> bool = \"caml_js_to_bool\"\n\n  external array : 'a array -> t = \"caml_js_from_array\"\n\n  external to_array : t -> 'a array = \"caml_js_to_array\"\n\n  external number_of_float : float -> t = \"caml_js_from_float\"\n\n  external float_of_number : t -> float = \"caml_js_to_float\"\n\n  external number_of_int32 : int32 -> t = \"caml_js_from_int32\"\n\n  external int32_of_number : t -> int32 = \"caml_js_to_int32\"\n\n  external number_of_nativeint : nativeint -> t = \"caml_js_from_nativeint\"\n\n  external nativeint_of_number : t -> nativeint = \"caml_js_to_nativeint\"\n\n  external typeof : t -> t = \"caml_js_typeof\"\n\n  external instanceof : t -> t -> bool = \"caml_js_instanceof\"\n\n  external debugger : unit -> unit = \"debugger\"\n\n  external get : t -> t -> t = \"caml_js_get\"\n\n  external set : t -> t -> t -> unit = \"caml_js_set\"\n\n  external delete : t -> t -> unit = \"caml_js_delete\"\n\n  external call : t -> t -> t array -> t = \"caml_js_call\"\n\n  external fun_call : t -> t array -> t = \"caml_js_fun_call\"\n\n  external meth_call : t -> string -> t array -> t = \"caml_js_meth_call\"\n\n  external new_obj : t -> t array -> t = \"caml_js_new\"\n\n  external new_obj_arr : t -> t js_array -> t = \"caml_ojs_new_arr\"\n\n  external obj : (string * t) array -> t = \"caml_js_object\"\n\n  external equals : t -> t -> bool = \"caml_js_equals\"\n\n  external strict_equals : t -> t -> bool = \"caml_js_strict_equals\"\n\n  external pure_expr : (unit -> 'a) -> 'a = \"caml_js_pure_expr\"\n\n  external eval_string : string -> 'a = \"caml_js_eval_string\"\n\n  external js_expr : string -> 'a = \"caml_js_expr\"\n\n  external pure_js_expr : string -> 'a = \"caml_pure_js_expr\"\n\n  external callback : ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_callback_unsafe\"\n\n  external callback_with_arguments :\n    (t js_array -> 'b) -> ('c, t js_array -> 'b) meth_callback\n    = \"caml_js_wrap_callback_arguments\"\n\n  external callback_with_arity : int -> ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback_strict\"\n\n  external meth_callback : ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_unsafe\"\n\n  external meth_callback_with_arity : int -> ('b -> 'a) -> ('b, 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_strict\"\n\n  external meth_callback_with_arguments :\n    ('b -> t js_array -> 'a) -> ('b, t js_array -> 'a) meth_callback\n    = \"caml_js_wrap_meth_callback_arguments\"\n\n  external wrap_callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback\"\n\n  external wrap_meth_callback : ('a -> 'b) -> ('a, 'b) meth_callback\n    = \"caml_js_wrap_meth_callback\"\nend\n\nmodule Sys = struct\n  type 'a callback = 'a\n\n  external create_file : name:string -> content:string -> unit = \"caml_create_file\"\n\n  external read_file : name:string -> string = \"caml_read_file_content\"\n\n  external set_channel_output' : out_channel -> (js_string:Js.t -> unit) callback -> unit\n    = \"caml_ml_set_channel_output\"\n\n  external set_channel_input' : in_channel -> (unit -> string) callback -> unit\n    = \"caml_ml_set_channel_refill\"\n\n  external mount_point : unit -> string list = \"caml_list_mount_point\"\n\n  external mount_autoload : string -> (string -> string -> string option) callback -> unit\n    = \"caml_mount_autoload\"\n\n  external unmount : string -> unit = \"caml_unmount\"\n\n  type redirection\n\n  external redirect_channel : out_channel -> into:out_channel -> redirection\n    = \"caml_ml_channel_redirect\"\n\n  external restore_channel : out_channel -> redirection -> unit\n    = \"caml_ml_channel_restore\"\n\n  module Config = struct\n    external use_js_string : unit -> bool = \"caml_jsoo_flags_use_js_string\"\n\n    external effects : unit -> bool = \"caml_jsoo_flags_effects\"\n  end\n\n  let version = Runtime_version.s\n\n  let git_version = Runtime_version.git_version\nend\n\nmodule Error : sig\n  type t\n\n  val raise_ : t -> 'a\n\n  val attach_js_backtrace : exn -> force:bool -> exn\n  (** Attach a JavasScript error to an OCaml exception.  if [force = false] and a\n    JavasScript error is already attached, it will do nothing. This function is useful to\n    store and retrieve information about JavaScript stack traces.\n\n    Attaching JavasScript errors will happen automatically when compiling with\n    [--enable with-js-error]. *)\n\n  val of_exn : exn -> t option\n  (** Extract a JavaScript error attached to an OCaml exception, if any.  This is useful to\n      inspect an eventual stack strace, especially when sourcemap is enabled. *)\n\n  exception Exn of t\n  (** The [Error] exception wrap javascript exceptions when caught by OCaml code.\n      In case the javascript exception is not an instance of javascript [Error],\n      it will be serialized and wrapped into a [Failure] exception.\n  *)\nend = struct\n  type t\n\n  exception Exn of t\n\n  let _ = Callback.register_exception \"jsError\" (Exn (Obj.magic [||]))\n\n  let raise_ : t -> 'a = Js.js_expr \"(function (exn) { throw exn })\"\n\n  external of_exn : exn -> t option = \"caml_js_error_option_of_exception\"\n\n  external attach_js_backtrace : exn -> force:bool -> exn = \"caml_exn_with_js_backtrace\"\nend\n\n[@@@ocaml.warning \"-32-60\"]\n\nmodule For_compatibility_only = struct\n  (* Add primitives for compatibility reasons. Existing users might\n     depend on it (e.g. gen_js_api), we dont want the ocaml compiler\n     to complain about theses missing primitives. *)\n\n  external caml_js_from_string : string -> Js.t = \"caml_js_from_string\"\n\n  external caml_js_to_byte_string : Js.t -> string = \"caml_js_to_byte_string\"\n\n  external caml_js_to_string : Js.t -> string = \"caml_js_to_string\"\n\n  external caml_list_of_js_array : 'a Js.js_array -> 'a list = \"caml_list_of_js_array\"\n\n  external caml_list_to_js_array : 'a list -> 'a Js.js_array = \"caml_list_to_js_array\"\n\n  external variable : string -> 'a = \"caml_js_var\"\nend\n\nmodule Typed_array = struct\n  type ('a, 'b) typedArray = Js.t\n\n  type arrayBuffer = Js.t\n\n  type uint8Array = Js.t\n\n  external kind : ('a, 'b) typedArray -> ('a, 'b) Bigarray.kind\n    = \"caml_ba_kind_of_typed_array\"\n\n  external from_genarray :\n    ('a, 'b, Bigarray.c_layout) Bigarray.Genarray.t -> ('a, 'b) typedArray\n    = \"caml_ba_to_typed_array\"\n\n  external to_genarray :\n    ('a, 'b) typedArray -> ('a, 'b, Bigarray.c_layout) Bigarray.Genarray.t\n    = \"caml_ba_from_typed_array\"\n\n  module Bigstring = struct\n    type t = (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t\n\n    external to_arrayBuffer : t -> arrayBuffer = \"bigstring_to_array_buffer\"\n\n    external to_uint8Array : t -> uint8Array = \"bigstring_to_typed_array\"\n\n    external of_arrayBuffer : arrayBuffer -> t = \"bigstring_of_array_buffer\"\n\n    external of_uint8Array : uint8Array -> t = \"bigstring_of_typed_array\"\n  end\n\n  external of_uint8Array : uint8Array -> string = \"caml_string_of_array\"\nend\n\nmodule Int64 = struct\n  external create_int64_lo_mi_hi : int -> int -> int -> Int64.t\n    = \"caml_int64_create_lo_mi_hi\"\nend\n","(* generated by dune *)\n\n(** @canonical Js_of_ocaml.CSS *)\nmodule CSS = Js_of_ocaml__CSS\n\n(** @canonical Js_of_ocaml.Dom *)\nmodule Dom = Js_of_ocaml__Dom\n\n(** @canonical Js_of_ocaml.Dom_events *)\nmodule Dom_events = Js_of_ocaml__Dom_events\n\n(** @canonical Js_of_ocaml.Dom_html *)\nmodule Dom_html = Js_of_ocaml__Dom_html\n\n(** @canonical Js_of_ocaml.Dom_svg *)\nmodule Dom_svg = Js_of_ocaml__Dom_svg\n\n(** @canonical Js_of_ocaml.EventSource *)\nmodule EventSource = Js_of_ocaml__EventSource\n\n(** @canonical Js_of_ocaml.File *)\nmodule File = Js_of_ocaml__File\n\n(** @canonical Js_of_ocaml.Firebug *)\nmodule Firebug = Js_of_ocaml__Firebug\n\n(** @canonical Js_of_ocaml.Form *)\nmodule Form = Js_of_ocaml__Form\n\n(** @canonical Js_of_ocaml.Geolocation *)\nmodule Geolocation = Js_of_ocaml__Geolocation\n\n(** @canonical Js_of_ocaml.Import *)\nmodule Import = Js_of_ocaml__Import\n\n(** @canonical Js_of_ocaml.IntersectionObserver *)\nmodule IntersectionObserver = Js_of_ocaml__IntersectionObserver\n\n(** @canonical Js_of_ocaml.Intl *)\nmodule Intl = Js_of_ocaml__Intl\n\n(** @canonical Js_of_ocaml.Js *)\nmodule Js = Js_of_ocaml__Js\n\n(** @canonical Js_of_ocaml.Json *)\nmodule Json = Js_of_ocaml__Json\n\n(** @canonical Js_of_ocaml.Jstable *)\nmodule Jstable = Js_of_ocaml__Jstable\n\n(** @canonical Js_of_ocaml.Lib_version *)\nmodule Lib_version = Js_of_ocaml__Lib_version\n\n(** @canonical Js_of_ocaml.MutationObserver *)\nmodule MutationObserver = Js_of_ocaml__MutationObserver\n\n(** @canonical Js_of_ocaml.PerformanceObserver *)\nmodule PerformanceObserver = Js_of_ocaml__PerformanceObserver\n\n(** @canonical Js_of_ocaml.Regexp *)\nmodule Regexp = Js_of_ocaml__Regexp\n\n(** @canonical Js_of_ocaml.ResizeObserver *)\nmodule ResizeObserver = Js_of_ocaml__ResizeObserver\n\n(** @canonical Js_of_ocaml.Sys_js *)\nmodule Sys_js = Js_of_ocaml__Sys_js\n\n(** @canonical Js_of_ocaml.Typed_array *)\nmodule Typed_array = Js_of_ocaml__Typed_array\n\n(** @canonical Js_of_ocaml.Url *)\nmodule Url = Js_of_ocaml__Url\n\n(** @canonical Js_of_ocaml.WebGL *)\nmodule WebGL = Js_of_ocaml__WebGL\n\n(** @canonical Js_of_ocaml.WebSockets *)\nmodule WebSockets = Js_of_ocaml__WebSockets\n\n(** @canonical Js_of_ocaml.Worker *)\nmodule Worker = Js_of_ocaml__Worker\n\n(** @canonical Js_of_ocaml.XmlHttpRequest *)\nmodule XmlHttpRequest = Js_of_ocaml__XmlHttpRequest\n\nmodule Js_of_ocaml__ = struct end\n[@@deprecated \"this module is shadowed\"]\n","(* Js_of_ocaml\n * http://www.ocsigen.org/js_of_ocaml/\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nmodule Poly = struct\n  external ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n\n  external ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n\n  external ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n\n  external ( = ) : 'a -> 'a -> bool = \"%equal\"\n\n  external ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n\n  external ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n\n  external compare : 'a -> 'a -> int = \"%compare\"\n\n  external equal : 'a -> 'a -> bool = \"%equal\"\nend\n\nmodule Int_replace_polymorphic_compare = struct\n  external ( < ) : int -> int -> bool = \"%lessthan\"\n\n  external ( <= ) : int -> int -> bool = \"%lessequal\"\n\n  external ( <> ) : int -> int -> bool = \"%notequal\"\n\n  external ( = ) : int -> int -> bool = \"%equal\"\n\n  external ( > ) : int -> int -> bool = \"%greaterthan\"\n\n  external ( >= ) : int -> int -> bool = \"%greaterequal\"\n\n  external compare : int -> int -> int = \"%compare\"\n\n  external equal : int -> int -> bool = \"%equal\"\n\n  let max (x : int) y = if x >= y then x else y\n\n  let min (x : int) y = if x <= y then x else y\nend\n\nmodule String = struct\n  include String\n\n  let equal (x : string) (y : string) = Poly.equal x y\nend\n\nmodule Char = struct\n  include Char\n\n  let equal (x : char) (y : char) = Poly.equal x y\nend\n\ninclude Int_replace_polymorphic_compare\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\n(* This local module [Js] is needed so that the ppx_js extension work within that file. *)\nmodule Js = struct\n  type +'a t\n\n  type (-'a, +'b) meth_callback\n\n  module Unsafe = struct\n    type top\n\n    type any = top t\n\n    type any_js_array = any\n\n    external inject : 'a -> any = \"%identity\"\n\n    external coerce : _ t -> _ t = \"%identity\"\n\n    external get : 'a -> 'b -> 'c = \"caml_js_get\"\n\n    external set : 'a -> 'b -> 'c -> unit = \"caml_js_set\"\n\n    external delete : 'a -> 'b -> unit = \"caml_js_delete\"\n\n    external call : 'a -> 'b -> any array -> 'c = \"caml_js_call\"\n\n    external fun_call : 'a -> any array -> 'b = \"caml_js_fun_call\"\n\n    external meth_call : 'a -> string -> any array -> 'b = \"caml_js_meth_call\"\n\n    external new_obj : 'a -> any array -> 'b = \"caml_js_new\"\n\n    external new_obj_arr : 'a -> any_js_array -> 'b = \"caml_ojs_new_arr\"\n\n    external obj : (string * any) array -> 'a = \"caml_js_object\"\n\n    external equals : 'a -> 'b -> bool = \"caml_js_equals\"\n\n    external strict_equals : 'a -> 'b -> bool = \"caml_js_strict_equals\"\n\n    external pure_expr : (unit -> 'a) -> 'a = \"caml_js_pure_expr\"\n\n    external eval_string : string -> 'a = \"caml_js_eval_string\"\n\n    external js_expr : string -> 'a = \"caml_js_expr\"\n\n    external pure_js_expr : string -> 'a = \"caml_pure_js_expr\"\n\n    let global = pure_js_expr \"globalThis\"\n\n    external callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n      = \"caml_js_wrap_callback_unsafe\"\n\n    external callback_with_arguments :\n      (any_js_array -> 'b) -> ('c, any_js_array -> 'b) meth_callback\n      = \"caml_js_wrap_callback_arguments\"\n\n    external callback_with_arity : int -> ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n      = \"caml_js_wrap_callback_strict\"\n\n    external meth_callback : ('b -> 'a) -> ('b, 'a) meth_callback\n      = \"caml_js_wrap_meth_callback_unsafe\"\n\n    external meth_callback_with_arity : int -> ('b -> 'a) -> ('b, 'a) meth_callback\n      = \"caml_js_wrap_meth_callback_strict\"\n\n    external meth_callback_with_arguments :\n      ('b -> any_js_array -> 'a) -> ('b, any_js_array -> 'a) meth_callback\n      = \"caml_js_wrap_meth_callback_arguments\"\n\n    (* DEPRECATED *)\n    external variable : string -> 'a = \"caml_js_var\"\n  end\n\n  (****)\n\n  type 'a opt = 'a\n\n  type 'a optdef = 'a\n\n  external debugger : unit -> unit = \"debugger\"\n\n  let null : 'a opt = Unsafe.pure_js_expr \"null\"\n\n  external some : 'a -> 'a opt = \"%identity\"\n\n  let undefined : 'a optdef = Unsafe.pure_js_expr \"undefined\"\n\n  external def : 'a -> 'a optdef = \"%identity\"\n\n  module type OPT = sig\n    type 'a t\n\n    val empty : 'a t\n\n    val return : 'a -> 'a t\n\n    val map : 'a t -> ('a -> 'b) -> 'b t\n\n    val bind : 'a t -> ('a -> 'b t) -> 'b t\n\n    val test : 'a t -> bool\n\n    val iter : 'a t -> ('a -> unit) -> unit\n\n    val case : 'a t -> (unit -> 'b) -> ('a -> 'b) -> 'b\n\n    val get : 'a t -> (unit -> 'a) -> 'a\n\n    val option : 'a option -> 'a t\n\n    val to_option : 'a t -> 'a option\n\n    external equals : _ t -> _ t -> bool = \"caml_js_equals\"\n\n    external strict_equals : _ t -> _ t -> bool = \"caml_js_strict_equals\"\n  end\n\n  module Opt : OPT with type 'a t = 'a opt = struct\n    type 'a t = 'a opt\n\n    let empty = null\n\n    let return = some\n\n    external equals : _ t -> _ t -> bool = \"caml_js_equals\"\n\n    external strict_equals : _ t -> _ t -> bool = \"caml_js_strict_equals\"\n\n    let map x f = if equals x null then null else return (f x)\n\n    let bind x f = if equals x null then null else f x\n\n    let test x = not (equals x null)\n\n    let iter x f = if not (equals x null) then f x\n\n    let case x f g = if equals x null then f () else g x\n\n    let get x f = if equals x null then f () else x\n\n    let option x =\n      match x with\n      | None -> empty\n      | Some x -> return x\n\n    let to_option x = case x (fun () -> None) (fun x -> Some x)\n  end\n\n  module Optdef : OPT with type 'a t = 'a optdef = struct\n    type 'a t = 'a optdef\n\n    let empty = undefined\n\n    let return = def\n\n    external equals : _ t -> _ t -> bool = \"caml_js_equals\"\n\n    external strict_equals : _ t -> _ t -> bool = \"caml_js_strict_equals\"\n\n    let map x f = if strict_equals x undefined then undefined else return (f x)\n\n    let bind x f = if strict_equals x undefined then undefined else f x\n\n    let test x = not (strict_equals x undefined)\n\n    let iter x f = if not (strict_equals x undefined) then f x\n\n    let case x f g = if strict_equals x undefined then f () else g x\n\n    let get x f = if strict_equals x undefined then f () else x\n\n    let option x =\n      match x with\n      | None -> empty\n      | Some x -> return x\n\n    let to_option x = case x (fun () -> None) (fun x -> Some x)\n  end\n\n  (****)\n\n  let coerce x f g = Opt.get (f x) (fun () -> g x)\n\n  let coerce_opt x f g = Opt.get (Opt.bind x f) (fun () -> g x)\n\n  (****)\n\n  type +'a meth\n\n  type +'a gen_prop\n\n  type 'a readonly_prop = < get : 'a > gen_prop\n\n  type 'a writeonly_prop = < set : 'a -> unit > gen_prop\n\n  type 'a prop = < get : 'a ; set : 'a -> unit > gen_prop\n\n  type 'a optdef_prop = < get : 'a optdef ; set : 'a -> unit > gen_prop\n\n  type +'a constr\n\n  (****)\n\n  type 'a callback = (unit, 'a) meth_callback\n\n  external wrap_callback : ('a -> 'b) -> ('c, 'a -> 'b) meth_callback\n    = \"caml_js_wrap_callback\"\n\n  external wrap_meth_callback : ('a -> 'b) -> ('a, 'b) meth_callback\n    = \"caml_js_wrap_meth_callback\"\n\n  (****)\n\n  external equals : _ t -> _ t -> bool = \"caml_js_equals\"\n\n  external strict_equals : _ t -> _ t -> bool = \"caml_js_strict_equals\"\n\n  (****)\n\n  let _true = Unsafe.pure_js_expr \"true\"\n\n  let _false = Unsafe.pure_js_expr \"false\"\n\n  type match_result_handle\n\n  type string_array\n\n  type number_t = float\n\n  class type number = object\n    method toString : js_string t meth\n\n    method toString_radix : int -> js_string t meth\n\n    method toLocaleString : js_string t meth\n\n    method toFixed : int -> js_string t meth\n\n    method toExponential : js_string t meth\n\n    method toExponential_digits : int -> js_string t meth\n\n    method toPrecision : int -> js_string t meth\n  end\n\n  and js_string = object\n    method toString : js_string t meth\n\n    method valueOf : js_string t meth\n\n    method charAt : int -> js_string t meth\n\n    method charCodeAt : int -> number_t meth\n\n    (* This may return NaN... *)\n    method concat : js_string t -> js_string t meth\n\n    method concat_2 : js_string t -> js_string t -> js_string t meth\n\n    method concat_3 : js_string t -> js_string t -> js_string t -> js_string t meth\n\n    method concat_4 :\n      js_string t -> js_string t -> js_string t -> js_string t -> js_string t meth\n\n    method indexOf : js_string t -> int meth\n\n    method indexOf_from : js_string t -> int -> int meth\n\n    method lastIndexOf : js_string t -> int meth\n\n    method lastIndexOf_from : js_string t -> int -> int meth\n\n    method localeCompare : js_string t -> number_t meth\n\n    method _match : regExp t -> match_result_handle t opt meth\n\n    method normalize : js_string t meth\n\n    method normalize_form : normalization t -> js_string t meth\n\n    method replace : regExp t -> js_string t -> js_string t meth\n\n    method replace_string : js_string t -> js_string t -> js_string t meth\n\n    method search : regExp t -> int meth\n\n    method slice : int -> int -> js_string t meth\n\n    method slice_end : int -> js_string t meth\n\n    method split : js_string t -> string_array t meth\n\n    method split_limited : js_string t -> int -> string_array t meth\n\n    method split_regExp : regExp t -> string_array t meth\n\n    method split_regExpLimited : regExp t -> int -> string_array t meth\n\n    method substring : int -> int -> js_string t meth\n\n    method substring_toEnd : int -> js_string t meth\n\n    method toLowerCase : js_string t meth\n\n    method toLocaleLowerCase : js_string t meth\n\n    method toUpperCase : js_string t meth\n\n    method toLocaleUpperCase : js_string t meth\n\n    method trim : js_string t meth\n\n    method length : int readonly_prop\n  end\n\n  and regExp = object\n    method exec : js_string t -> match_result_handle t opt meth\n\n    method test : js_string t -> bool t meth\n\n    method toString : js_string t meth\n\n    method source : js_string t readonly_prop\n\n    method global : bool t readonly_prop\n\n    method ignoreCase : bool t readonly_prop\n\n    method multiline : bool t readonly_prop\n\n    method lastIndex : int prop\n  end\n\n  and normalization = js_string\n\n  (* string is used by ppx_js, it needs to come before any use of the\n     new syntax in this file *)\n  external string : string -> js_string t = \"caml_jsstring_of_string\"\n\n  external to_string : js_string t -> string = \"caml_string_of_jsstring\"\n\n  let nfc = string \"NFC\"\n\n  let nfd = string \"NFD\"\n\n  let nfkc = string \"NFKC\"\n\n  let nfkd = string \"NFKD\"\nend\n\ninclude Js\n\nclass type string_constr = object\n  method fromCharCode : int -> js_string t meth\nend\n\nlet string_constr = Unsafe.global##._String\n\nlet regExp = Unsafe.global##._RegExp\n\nlet regExp_copy = regExp\n\nlet regExp_withFlags = regExp\n\nclass type ['a] js_array = object\n  method toString : js_string t meth\n\n  method toLocaleString : js_string t meth\n\n  method concat : 'a js_array t -> 'a js_array t meth\n\n  method join : js_string t -> js_string t meth\n\n  method pop : 'a optdef meth\n\n  method push : 'a -> int meth\n\n  method push_2 : 'a -> 'a -> int meth\n\n  method push_3 : 'a -> 'a -> 'a -> int meth\n\n  method push_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n  method reverse : 'a js_array t meth\n\n  method shift : 'a optdef meth\n\n  method slice : int -> int -> 'a js_array t meth\n\n  method slice_end : int -> 'a js_array t meth\n\n  method sort : ('a -> 'a -> number_t) callback -> 'a js_array t meth\n\n  method sort_asStrings : 'a js_array t meth\n\n  method splice : int -> int -> 'a js_array t meth\n\n  method splice_1 : int -> int -> 'a -> 'a js_array t meth\n\n  method splice_2 : int -> int -> 'a -> 'a -> 'a js_array t meth\n\n  method splice_3 : int -> int -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n  method splice_4 : int -> int -> 'a -> 'a -> 'a -> 'a -> 'a js_array t meth\n\n  method unshift : 'a -> int meth\n\n  method unshift_2 : 'a -> 'a -> int meth\n\n  method unshift_3 : 'a -> 'a -> 'a -> int meth\n\n  method unshift_4 : 'a -> 'a -> 'a -> 'a -> int meth\n\n  method some : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n  method every : ('a -> int -> 'a js_array t -> bool t) callback -> bool t meth\n\n  method forEach : ('a -> int -> 'a js_array t -> unit) callback -> unit meth\n\n  method map : ('a -> int -> 'a js_array t -> 'b) callback -> 'b js_array t meth\n\n  method filter : ('a -> int -> 'a js_array t -> bool t) callback -> 'a js_array t meth\n\n  method reduce_init : ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n  method reduce : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n  method reduceRight_init :\n    ('b -> 'a -> int -> 'a js_array t -> 'b) callback -> 'b -> 'b meth\n\n  method reduceRight : ('a -> 'a -> int -> 'a js_array t -> 'a) callback -> 'a meth\n\n  method length : int prop\nend\n\nlet object_constructor = Unsafe.global##._Object\n\nlet object_keys o : js_string t js_array t = object_constructor##keys o\n\nlet array_constructor = Unsafe.global##._Array\n\nlet array_empty = array_constructor\n\nlet array_length = array_constructor\n\nlet array_get : 'a #js_array t -> int -> 'a optdef = Unsafe.get\n\nlet array_set : 'a #js_array t -> int -> 'a -> unit = Unsafe.set\n\nlet array_map_poly :\n    'a #js_array t -> ('a -> int -> 'a #js_array t -> 'b) callback -> 'b #js_array t =\n fun a cb -> (Unsafe.coerce a)##map cb\n\nlet array_map f a = array_map_poly a (wrap_callback (fun x _idx _ -> f x))\n\nlet array_mapi f a = array_map_poly a (wrap_callback (fun x idx _ -> f idx x))\n\nclass type match_result = object\n  inherit [js_string t] js_array\n\n  method index : int readonly_prop\n\n  method input : js_string t readonly_prop\nend\n\nlet str_array : string_array t -> js_string t js_array t = Unsafe.coerce\n\nlet match_result : match_result_handle t -> match_result t = Unsafe.coerce\n\nclass type date = object\n  method toString : js_string t meth\n\n  method toDateString : js_string t meth\n\n  method toTimeString : js_string t meth\n\n  method toLocaleString : js_string t meth\n\n  method toLocaleDateString : js_string t meth\n\n  method toLocaleTimeString : js_string t meth\n\n  method valueOf : number_t meth\n\n  method getTime : number_t meth\n\n  method getFullYear : int meth\n\n  method getUTCFullYear : int meth\n\n  method getMonth : int meth\n\n  method getUTCMonth : int meth\n\n  method getDate : int meth\n\n  method getUTCDate : int meth\n\n  method getDay : int meth\n\n  method getUTCDay : int meth\n\n  method getHours : int meth\n\n  method getUTCHours : int meth\n\n  method getMinutes : int meth\n\n  method getUTCMinutes : int meth\n\n  method getSeconds : int meth\n\n  method getUTCSeconds : int meth\n\n  method getMilliseconds : int meth\n\n  method getUTCMilliseconds : int meth\n\n  method getTimezoneOffset : int meth\n\n  method setTime : number_t -> number_t meth\n\n  method setFullYear : int -> number_t meth\n\n  method setUTCFullYear : int -> number_t meth\n\n  method setMonth : int -> number_t meth\n\n  method setUTCMonth : int -> number_t meth\n\n  method setDate : int -> number_t meth\n\n  method setUTCDate : int -> number_t meth\n\n  method setDay : int -> number_t meth\n\n  method setUTCDay : int -> number_t meth\n\n  method setHours : int -> number_t meth\n\n  method setUTCHours : int -> number_t meth\n\n  method setMinutes : int -> number_t meth\n\n  method setUTCMinutes : int -> number_t meth\n\n  method setSeconds : int -> number_t meth\n\n  method setUTCSeconds : int -> number_t meth\n\n  method setMilliseconds : int -> number_t meth\n\n  method setUTCMilliseconds : int -> number_t meth\n\n  method toUTCString : js_string t meth\n\n  method toISOString : js_string t meth\n\n  method toJSON : 'a -> js_string t meth\nend\n\nclass type date_constr = object\n  method parse : js_string t -> number_t meth\n\n  method _UTC_month : int -> int -> number_t meth\n\n  method _UTC_day : int -> int -> number_t meth\n\n  method _UTC_hour : int -> int -> int -> int -> number_t meth\n\n  method _UTC_min : int -> int -> int -> int -> int -> number_t meth\n\n  method _UTC_sec : int -> int -> int -> int -> int -> int -> number_t meth\n\n  method _UTC_ms : int -> int -> int -> int -> int -> int -> int -> number_t meth\n\n  method now : number_t meth\nend\n\nlet date_constr = Unsafe.global##._Date\n\nlet date : date_constr t = date_constr\n\nlet date_now : date t constr = date_constr\n\nlet date_fromTimeValue : (number_t -> date t) constr = date_constr\n\nlet date_month : (int -> int -> date t) constr = date_constr\n\nlet date_day : (int -> int -> int -> date t) constr = date_constr\n\nlet date_hour : (int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_min : (int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_sec : (int -> int -> int -> int -> int -> int -> date t) constr = date_constr\n\nlet date_ms : (int -> int -> int -> int -> int -> int -> int -> date t) constr =\n  date_constr\n\nclass type math = object\n  method _E : number_t readonly_prop\n\n  method _LN2 : number_t readonly_prop\n\n  method _LN10 : number_t readonly_prop\n\n  method _LOG2E : number_t readonly_prop\n\n  method _LOG10E : number_t readonly_prop\n\n  method _PI : number_t readonly_prop\n\n  method _SQRT1_2_ : number_t readonly_prop\n\n  method _SQRT2 : number_t readonly_prop\n\n  method abs : number_t -> number_t meth\n\n  method acos : number_t -> number_t meth\n\n  method asin : number_t -> number_t meth\n\n  method atan : number_t -> number_t meth\n\n  method atan2 : number_t -> number_t -> number_t meth\n\n  method ceil : number_t -> number_t meth\n\n  method cos : number_t -> number_t meth\n\n  method exp : number_t -> number_t meth\n\n  method floor : number_t -> number_t meth\n\n  method log : number_t -> number_t meth\n\n  method max : number_t -> number_t -> number_t meth\n\n  method max_3 : number_t -> number_t -> number_t -> number_t meth\n\n  method max_4 : number_t -> number_t -> number_t -> number_t -> number_t meth\n\n  method min : number_t -> number_t -> number_t meth\n\n  method min_3 : number_t -> number_t -> number_t -> number_t meth\n\n  method min_4 : number_t -> number_t -> number_t -> number_t -> number_t meth\n\n  method pow : number_t -> number_t -> number_t meth\n\n  method random : number_t meth\n\n  method round : number_t -> number_t meth\n\n  method sin : number_t -> number_t meth\n\n  method sqrt : number_t -> number_t meth\n\n  method tan : number_t -> number_t meth\nend\n\nlet math = Unsafe.global##._Math\n\nclass type error = object\n  method name : js_string t prop\n\n  method message : js_string t prop\n\n  method stack : js_string t optdef prop\n\n  method toString : js_string t meth\nend\n\nlet error_constr = Unsafe.global##._Error\n\nmodule Js_error = struct\n  type error_t = error t\n\n  include Jsoo_runtime.Error\n\n  external of_error : error_t -> t = \"%identity\"\n\n  external to_error : t -> error_t = \"%identity\"\n\n  let name e = to_string (to_error e)##.name\n\n  let message e = to_string (to_error e)##.message\n\n  let stack (e : t) : string option =\n    Opt.to_option (Opt.map (to_error e)##.stack to_string)\n\n  let to_string e = to_string (to_error e)##toString\nend\n\nmodule Magic = struct\n  module type T = sig\n    exception Error of error t\n  end\n\n  type ('a, 'b) eq = Eq : ('a, 'a) eq\n\n  let (eq : (error t, Js_error.t) eq) = Obj.magic Eq\n\n  let m =\n    match eq with\n    | Eq ->\n        (module struct\n          exception Error = Js_error.Exn\n        end : T)\n\n  module Error = (val m : T)\nend\n\ninclude Magic.Error\n\nlet raise_js_error e = Js_error.raise_ (Js_error.of_error e)\n\nlet string_of_error e = Js_error.to_string (Js_error.of_error e)\n\nlet exn_with_js_backtrace = Js_error.attach_js_backtrace\n\nexternal js_error_of_exn : exn -> error t opt = \"caml_js_error_of_exception\"\n\nclass type json = object\n  method parse : js_string t -> 'a meth\n\n  method stringify : 'a -> js_string t meth\nend\n\nlet _JSON : json t = Unsafe.global##._JSON\n\nlet decodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURI [| Unsafe.inject s |]\n\nlet decodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.decodeURIComponent [| Unsafe.inject s |]\n\nlet encodeURI (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURI [| Unsafe.inject s |]\n\nlet encodeURIComponent (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.encodeURIComponent [| Unsafe.inject s |]\n\nlet escape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.escape [| Unsafe.inject s |]\n\nlet unescape (s : js_string t) : js_string t =\n  Unsafe.fun_call Unsafe.global##.unescape [| Unsafe.inject s |]\n\nexternal bool : bool -> bool t = \"caml_js_from_bool\"\n\nexternal to_bool : bool t -> bool = \"caml_js_to_bool\"\n\nexternal array : 'a array -> 'a js_array t = \"caml_js_from_array\"\n\nexternal to_array : 'a js_array t -> 'a array = \"caml_js_to_array\"\n\nexternal bytestring : string -> js_string t = \"caml_jsbytes_of_string\"\n\nexternal to_bytestring : js_string t -> string = \"caml_string_of_jsbytes\"\n\nexternal float : float -> number_t = \"caml_js_from_float\"\n\nexternal to_float : number_t -> float = \"caml_js_to_float\"\n\nexternal number_of_float : float -> number t = \"caml_js_from_float\"\n\nexternal float_of_number : number t -> float = \"caml_js_to_float\"\n\nexternal int32 : int32 -> number_t = \"caml_js_from_int32\"\n\nexternal to_int32 : number_t -> int32 = \"caml_js_to_int32\"\n\nexternal nativeint : nativeint -> number_t = \"caml_js_from_nativeint\"\n\nexternal to_nativeint : number_t -> nativeint = \"caml_js_to_nativeint\"\n\nexternal typeof : _ t -> js_string t = \"caml_js_typeof\"\n\nexternal instanceof : _ t -> _ constr -> bool = \"caml_js_instanceof\"\n\nlet isNaN (i : 'a) : bool =\n  to_bool (Unsafe.fun_call Unsafe.global##.isNaN [| Unsafe.inject i |])\n\nlet parseInt (s : js_string t) : int =\n  let s = Unsafe.fun_call Unsafe.global##.parseInt [| Unsafe.inject s |] in\n  if isNaN s then failwith \"parseInt\" else s\n\nlet parseFloat (s : js_string t) : number_t =\n  let s = Unsafe.fun_call Unsafe.global##.parseFloat [| Unsafe.inject s |] in\n  if isNaN s then failwith \"parseFloat\" else s\n\nlet _ =\n  Printexc.register_printer (function\n      | Js_error.Exn e -> Some (Js_error.to_string e)\n      | _ -> None)\n\nlet _ =\n  Printexc.register_printer (fun e ->\n      let e : < .. > t = Obj.magic e in\n      if instanceof e array_constructor then None else Some (to_string e##toString))\n\nlet export_js (field : js_string t) x =\n  Unsafe.set\n    (Unsafe.pure_js_expr \"jsoo_exports\")\n    field\n    (if String.equal (Js.to_string (typeof (Obj.magic x))) \"function\"\n        (* function with arity/length equal to zero are already wrapped *)\n        && Unsafe.get (Obj.magic x) (Js.string \"length\") > 0\n     then Obj.magic (wrap_callback (Obj.magic x))\n     else x)\n\nlet export field x = export_js (string field) x\n\nlet export_all obj =\n  let keys = object_keys obj in\n  keys##forEach\n    (wrap_callback (fun (key : js_string t) _ _ -> export_js key (Unsafe.get obj key)))\n\n(****)\n\n(* DEPRECATED *)\n\ntype float_prop = number_t prop\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nclass type ['node] nodeList = object\n  method item : int -> 'node t opt meth\n\n  method length : int readonly_prop\nend\n\nlet list_of_nodeList (nodeList : 'a nodeList t) =\n  let length = nodeList##.length in\n  let rec add_item acc i =\n    if i < length\n    then\n      match Opt.to_option (nodeList##item i) with\n      | None -> add_item acc (i + 1)\n      | Some e -> add_item (e :: acc) (i + 1)\n    else List.rev acc\n  in\n  add_item [] 0\n\ntype nodeType =\n  | OTHER\n  (* Will not happen *)\n  | ELEMENT\n  | ATTRIBUTE\n  | TEXT\n  | CDATA_SECTION\n  | ENTITY_REFERENCE\n  | ENTITY\n  | PROCESSING_INSTRUCTION\n  | COMMENT\n  | DOCUMENT\n  | DOCUMENT_TYPE\n  | DOCUMENT_FRAGMENT\n  | NOTATION\n\nmodule DocumentPosition = struct\n  type t = int\n\n  type mask = int\n\n  let disconnected = 0x01\n\n  let preceding = 0x02\n\n  let following = 0x04\n\n  let contains = 0x08\n\n  let contained_by = 0x10\n\n  let implementation_specific = 0x20\n\n  let has t mask = t land mask = mask\n\n  let add x y = x lor y\n\n  let ( + ) = add\nend\n\nclass type node = object\n  method nodeName : js_string t readonly_prop\n\n  method nodeValue : js_string t opt readonly_prop\n\n  method nodeType : nodeType readonly_prop\n\n  method parentNode : node t opt prop\n\n  method childNodes : node nodeList t prop\n\n  method firstChild : node t opt prop\n\n  method lastChild : node t opt prop\n\n  method previousSibling : node t opt prop\n\n  method nextSibling : node t opt prop\n\n  method namespaceURI : js_string t opt prop\n\n  method insertBefore : node t -> node t opt -> node t meth\n\n  method replaceChild : node t -> node t -> node t meth\n\n  method removeChild : node t -> node t meth\n\n  method appendChild : node t -> node t meth\n\n  method hasChildNodes : bool t meth\n\n  method cloneNode : bool t -> node t meth\n\n  method compareDocumentPosition : node t -> DocumentPosition.t meth\n\n  method lookupNamespaceURI : js_string t -> js_string t opt meth\n\n  method lookupPrefix : js_string t -> js_string t opt meth\nend\n\nlet appendChild (p : #node t) (n : #node t) = ignore (p##appendChild (n :> node t))\n\nlet removeChild (p : #node t) (n : #node t) = ignore (p##removeChild (n :> node t))\n\nlet replaceChild (p : #node t) (n : #node t) (o : #node t) =\n  ignore (p##replaceChild (n :> node t) (o :> node t))\n\nlet insertBefore (p : #node t) (n : #node t) (o : #node t opt) =\n  ignore (p##insertBefore (n :> node t) (o :> node t opt))\n\n(** Specification of [Attr] objects. *)\nclass type attr = object\n  inherit node\n\n  method name : js_string t readonly_prop\n\n  method specified : bool t readonly_prop\n\n  method value : js_string t prop\n\n  method ownerElement : element t prop\nend\n\n(** Specification of [NamedNodeMap] objects. *)\nand ['node] namedNodeMap = object\n  method getNamedItem : js_string t -> 'node t opt meth\n\n  method setNamedItem : 'node t -> 'node t opt meth\n\n  method removeNamedItem : js_string t -> 'node t opt meth\n\n  method item : int -> 'node t opt meth\n\n  method length : int readonly_prop\nend\n\n(** Specification of [Element] objects. *)\nand element = object\n  inherit node\n\n  method tagName : js_string t readonly_prop\n\n  method getAttribute : js_string t -> js_string t opt meth\n\n  method setAttribute : js_string t -> js_string t -> unit meth\n\n  method removeAttribute : js_string t -> unit meth\n\n  method hasAttribute : js_string t -> bool t meth\n\n  method getAttributeNS : js_string t -> js_string t -> js_string t opt meth\n\n  method setAttributeNS : js_string t -> js_string t -> js_string t -> unit meth\n\n  method removeAttributeNS : js_string t -> js_string t -> unit meth\n\n  method hasAttributeNS : js_string t -> js_string t -> bool t meth\n\n  method getAttributeNode : js_string t -> attr t opt meth\n\n  method setAttributeNode : attr t -> attr t opt meth\n\n  method removeAttributeNode : attr t -> attr t meth\n\n  method getAttributeNodeNS : js_string t -> js_string t -> attr t opt meth\n\n  method setAttributeNodeNS : attr t -> attr t opt meth\n\n  method getElementsByTagName : js_string t -> element nodeList t meth\n\n  method attributes : attr namedNodeMap t readonly_prop\nend\n\nclass type characterData = object\n  inherit node\n\n  method data : js_string t prop\n\n  method length : int readonly_prop\n\n  method subjs_stringData : int -> int -> js_string t meth\n\n  method appendData : js_string t -> unit meth\n\n  method insertData : int -> js_string t -> unit meth\n\n  method deleteData : int -> int -> unit meth\n\n  method replaceData : int -> int -> js_string t -> unit meth\nend\n\nclass type comment = characterData\n\nclass type text = characterData\n\nclass type documentFragment = node\n\nclass type ['element] document = object\n  inherit node\n\n  method documentElement : 'element t readonly_prop\n\n  method createDocumentFragment : documentFragment t meth\n\n  method createElement : js_string t -> 'element t meth\n\n  method createElementNS : js_string t -> js_string t -> 'element t meth\n\n  method createTextNode : js_string t -> text t meth\n\n  method createAttribute : js_string t -> attr t meth\n\n  method createComment : js_string t -> comment t meth\n\n  method getElementById : js_string t -> 'element t opt meth\n\n  method getElementsByTagName : js_string t -> 'element nodeList t meth\n\n  method importNode : element t -> bool t -> 'element t meth\n\n  method adoptNode : element t -> 'element t meth\nend\n\ntype node_type =\n  | Element of element t\n  | Attr of attr t\n  | Text of text t\n  | Other of node t\n\nlet nodeType e =\n  match e##.nodeType with\n  | ELEMENT -> Element (Js.Unsafe.coerce e)\n  | ATTRIBUTE -> Attr (Js.Unsafe.coerce e)\n  | CDATA_SECTION | TEXT -> Text (Js.Unsafe.coerce e)\n  | _ -> Other (e :> node t)\n\nmodule CoerceTo = struct\n  let cast (e : #node Js.t) t =\n    if e##.nodeType == t then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let element e : element Js.t Js.opt = cast e ELEMENT\n\n  let text e : text Js.t Js.opt =\n    if e##.nodeType == TEXT || e##.nodeType == CDATA_SECTION\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let attr e : attr Js.t Js.opt = cast e ATTRIBUTE\nend\n\ntype ('a, 'b) event_listener = ('a, 'b -> bool t) meth_callback opt\n(** The type of event listener functions.  The first type parameter\n      ['a] is the type of the target object; the second parameter\n      ['b] is the type of the event object. *)\n\nclass type ['a] event = object\n  method _type : js_string t readonly_prop\n\n  method target : 'a t opt readonly_prop\n\n  method currentTarget : 'a t opt readonly_prop\n\n  (* Legacy methods *)\n  method srcElement : 'a t opt readonly_prop\nend\n\nclass type ['a, 'b] customEvent = object\n  inherit ['a] event\n\n  method detail : 'b Js.opt Js.readonly_prop\nend\n\nlet no_handler : ('a, 'b) event_listener = Js.null\n\nlet window_event () : 'a #event t = Js.Unsafe.pure_js_expr \"event\"\n\n(* The function preventDefault must be called explicitly when\n   using addEventListener... *)\nlet handler f =\n  Js.some\n    (Js.Unsafe.callback (fun e ->\n         (* depending on the internet explorer version, e can be null or undefined. *)\n         if not (Js.Opt.test (some e))\n         then (\n           let e = window_event () in\n           let res = f e in\n           if not (Js.to_bool res) then e##.returnValue := res;\n           res)\n         else\n           let res = f e in\n           if not (Js.to_bool res) then (Js.Unsafe.coerce e)##preventDefault;\n           res))\n\nlet full_handler f =\n  Js.some\n    (Js.Unsafe.meth_callback (fun this e ->\n         (* depending on the internet explorer version, e can be null or undefined *)\n         if not (Js.Opt.test (some e))\n         then (\n           let e = window_event () in\n           let res = f this e in\n           if not (Js.to_bool res) then e##.returnValue := res;\n           res)\n         else\n           let res = f this e in\n           if not (Js.to_bool res) then (Js.Unsafe.coerce e)##preventDefault;\n           res))\n\nlet invoke_handler (f : ('a, 'b) event_listener) (this : 'a) (event : 'b) : bool t =\n  Js.Unsafe.call f this [| Js.Unsafe.inject event |]\n\nlet eventTarget (e : (< .. > as 'a) #event t) : 'a t =\n  let target =\n    Opt.get e##.target (fun () -> Opt.get e##.srcElement (fun () -> raise Not_found))\n  in\n  if Js.instanceof target Js.Unsafe.global##._Node\n  then\n    (* Workaround for Safari bug *)\n    let target' : node Js.t = Js.Unsafe.coerce target in\n    if target'##.nodeType == TEXT\n    then Js.Unsafe.coerce (Opt.get target'##.parentNode (fun () -> assert false))\n    else target\n  else target\n\nmodule Event = struct\n  type 'a typ = Js.js_string Js.t\n\n  let make s = Js.string s\nend\n\ntype event_listener_id = unit -> unit\n\nclass type event_listener_options = object\n  method capture : bool t writeonly_prop\n\n  method once : bool t writeonly_prop\n\n  method passive : bool t writeonly_prop\nend\n\nlet addEventListenerWithOptions (e : (< .. > as 'a) t) typ ?capture ?once ?passive h =\n  if not (Js.Optdef.test (Js.Unsafe.coerce e)##.addEventListener)\n  then\n    let ev = (Js.string \"on\")##concat typ in\n    let callback e = Js.Unsafe.call (h, e, [||]) in\n    let () = (Js.Unsafe.coerce e)##attachEvent ev callback in\n    fun () -> (Js.Unsafe.coerce e)##detachEvent ev callback\n  else\n    let opts : event_listener_options t = Js.Unsafe.obj [||] in\n    let iter t f =\n      match t with\n      | None -> ()\n      | Some b -> f b\n    in\n    iter capture (fun b -> opts##.capture := b);\n    iter once (fun b -> opts##.once := b);\n    iter passive (fun b -> opts##.passive := b);\n    let () = (Js.Unsafe.coerce e)##addEventListener typ h opts in\n    fun () -> (Js.Unsafe.coerce e)##removeEventListener typ h opts\n\nlet addEventListener (e : (< .. > as 'a) t) typ h capt =\n  addEventListenerWithOptions e typ ~capture:capt h\n\nlet removeEventListener id = id ()\n\nlet preventDefault ev =\n  if Js.Optdef.test (Js.Unsafe.coerce ev)##.preventDefault (* IE hack *)\n  then (Js.Unsafe.coerce ev)##preventDefault\n  else (Js.Unsafe.coerce ev)##.returnValue := Js.bool false\n\nlet createCustomEvent ?bubbles ?cancelable ?detail typ =\n  let opt_iter f = function\n    | None -> ()\n    | Some x -> f x\n  in\n  let opts = Unsafe.obj [||] in\n  opt_iter (fun x -> opts##.bubbles := bool x) bubbles;\n  opt_iter (fun x -> opts##.cancelable := bool x) cancelable;\n  opt_iter (fun x -> opts##.detail := some x) detail;\n  let constr :\n      (   ('a, 'b) #customEvent Js.t Event.typ\n       -> < detail : 'b opt prop > t\n       -> ('a, 'b) customEvent t)\n      constr =\n    Unsafe.global##._CustomEvent\n  in\n  new%js constr typ opts\n\n(* IE < 9 *)\n\nclass type stringList = object\n  method item : int -> js_string t opt meth\n\n  method length : int readonly_prop\n\n  method contains : js_string t -> bool t meth\nend\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2012 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\nopen Js\n\ntype uint32 = float\n\nclass type arrayBuffer = object\n  method byteLength : int readonly_prop\n\n  method slice : int -> int -> arrayBuffer t meth\n\n  method slice_toEnd : int -> arrayBuffer t meth\nend\n\nlet arrayBuffer : (int -> arrayBuffer t) constr = Js.Unsafe.global##._ArrayBuffer\n\nclass type arrayBufferView = object\n  method buffer : arrayBuffer t readonly_prop\n\n  method byteOffset : int readonly_prop\n\n  method byteLength : int readonly_prop\nend\n\nclass type ['a, 'b] typedArray = object\n  inherit arrayBufferView\n\n  method _BYTES_PER_ELEMENT : int readonly_prop\n\n  method length : int readonly_prop\n\n  method set_fromArray : 'a js_array t -> int -> unit meth\n\n  method set_fromTypedArray : ('a, 'b) typedArray t -> int -> unit meth\n\n  method subarray : int -> int -> ('a, 'b) typedArray t meth\n\n  method subarray_toEnd : int -> ('a, 'b) typedArray t meth\n\n  method slice : int -> int -> ('a, 'b) typedArray t meth\n\n  method slice_toEnd : int -> ('a, 'b) typedArray t meth\n\n  (* This fake method is needed for typing purposes.\n     Without it, ['b] would not be constrained. *)\n  method _content_type_ : 'b optdef readonly_prop\nend\n\ntype int8Array = (int, Bigarray.int8_signed_elt) typedArray\n\ntype uint8Array = (int, Bigarray.int8_unsigned_elt) typedArray\n\ntype int16Array = (int, Bigarray.int16_signed_elt) typedArray\n\ntype uint16Array = (int, Bigarray.int16_unsigned_elt) typedArray\n\ntype int32Array = (int32, Bigarray.int32_elt) typedArray\n\ntype uint32Array = (int32, Bigarray.int32_elt) typedArray\n\ntype float32Array = (float, Bigarray.float32_elt) typedArray\n\ntype float64Array = (float, Bigarray.float64_elt) typedArray\n\nexternal kind : ('a, 'b) typedArray t -> ('a, 'b) Bigarray.kind\n  = \"caml_ba_kind_of_typed_array\"\n\nexternal from_genarray :\n  ('a, 'b, Bigarray.c_layout) Bigarray.Genarray.t -> ('a, 'b) typedArray t\n  = \"caml_ba_to_typed_array\"\n\nexternal to_genarray :\n  ('a, 'b) typedArray t -> ('a, 'b, Bigarray.c_layout) Bigarray.Genarray.t\n  = \"caml_ba_from_typed_array\"\n\nlet int8Array = Js.Unsafe.global##._Int8Array\n\nlet int8Array_fromArray = int8Array\n\nlet int8Array_fromTypedArray = int8Array\n\nlet int8Array_fromBuffer = int8Array\n\nlet int8Array_inBuffer = int8Array\n\nlet uint8Array = Js.Unsafe.global##._Uint8Array\n\nlet uint8Array_fromArray = uint8Array\n\nlet uint8Array_fromTypedArray = uint8Array\n\nlet uint8Array_fromBuffer = uint8Array\n\nlet uint8Array_inBuffer = uint8Array\n\nlet int16Array = Js.Unsafe.global##._Int16Array\n\nlet int16Array_fromArray = int16Array\n\nlet int16Array_fromTypedArray = int16Array\n\nlet int16Array_fromBuffer = int16Array\n\nlet int16Array_inBuffer = int16Array\n\nlet uint16Array = Js.Unsafe.global##._Uint16Array\n\nlet uint16Array_fromArray = uint16Array\n\nlet uint16Array_fromTypedArray = uint16Array\n\nlet uint16Array_fromBuffer = uint16Array\n\nlet uint16Array_inBuffer = uint16Array\n\nlet int32Array = Js.Unsafe.global##._Int32Array\n\nlet int32Array_fromArray = int32Array\n\nlet int32Array_fromTypedArray = int32Array\n\nlet int32Array_fromBuffer = int32Array\n\nlet int32Array_inBuffer = int32Array\n\nlet uint32Array = Js.Unsafe.global##._Uint32Array\n\nlet uint32Array_fromArray = uint32Array\n\nlet uint32Array_fromTypedArray = uint32Array\n\nlet uint32Array_fromBuffer = uint32Array\n\nlet uint32Array_inBuffer = uint32Array\n\nlet float32Array = Js.Unsafe.global##._Float32Array\n\nlet float32Array_fromArray = float32Array\n\nlet float32Array_fromTypedArray = float32Array\n\nlet float32Array_fromBuffer = float32Array\n\nlet float32Array_inBuffer = float32Array\n\nlet float64Array = Js.Unsafe.global##._Float64Array\n\nlet float64Array_fromArray = float64Array\n\nlet float64Array_fromTypedArray = float64Array\n\nlet float64Array_fromBuffer = float64Array\n\nlet float64Array_inBuffer = float64Array\n\nlet set : ('a, 'b) typedArray t -> int -> 'a -> unit =\n fun a i v -> array_set (Unsafe.coerce a) i v\n\nlet get : ('a, 'b) typedArray t -> int -> 'a optdef = fun a i -> Js.Unsafe.get a i\n\nlet unsafe_get : ('a, 'b) typedArray t -> int -> 'a = fun a i -> Js.Unsafe.get a i\n\nclass type dataView = object\n  inherit arrayBufferView\n\n  method getInt8 : int -> int meth\n\n  method getUint8 : int -> int meth\n\n  method getInt16 : int -> int meth\n\n  method getInt16_ : int -> bool t -> int meth\n\n  method getUint16 : int -> int meth\n\n  method getUint16_ : int -> bool t -> int meth\n\n  method getInt32 : int -> int meth\n\n  method getInt32_ : int -> bool t -> int meth\n\n  method getUint32 : int -> uint32 meth\n\n  method getUint32_ : int -> bool t -> uint32 meth\n\n  method getFloat32 : int -> number_t meth\n\n  method getFloat32_ : int -> bool t -> number_t meth\n\n  method getFloat64 : int -> number_t meth\n\n  method getFloat64_ : int -> bool t -> number_t meth\n\n  method setInt8 : int -> int -> unit meth\n\n  method setUint8 : int -> int -> unit meth\n\n  method setInt16 : int -> int -> unit meth\n\n  method setInt16_ : int -> int -> bool t -> unit meth\n\n  method setUint16 : int -> int -> unit meth\n\n  method setUint16_ : int -> int -> bool t -> unit meth\n\n  method setInt32 : int -> int -> unit meth\n\n  method setInt32_ : int -> int -> bool t -> unit meth\n\n  method setUint32 : int -> uint32 -> unit meth\n\n  method setUint32_ : int -> uint32 -> bool t -> unit meth\n\n  method setFloat32 : int -> number_t -> unit meth\n\n  method setFloat32_ : int -> number_t -> bool t -> unit meth\n\n  method setFloat64 : int -> number_t -> unit meth\n\n  method setFloat64_ : int -> number_t -> bool t -> unit meth\nend\n\nlet dataView = Js.Unsafe.global##._DataView\n\nlet dataView_inBuffer = dataView\n\nmodule Bigstring = struct\n  type t = (char, Bigarray.int8_unsigned_elt, Bigarray.c_layout) Bigarray.Array1.t\n\n  external to_arrayBuffer : t -> arrayBuffer Js.t = \"bigstring_to_array_buffer\"\n\n  external to_uint8Array : t -> uint8Array Js.t = \"bigstring_to_typed_array\"\n\n  external of_arrayBuffer : arrayBuffer Js.t -> t = \"bigstring_of_array_buffer\"\n\n  external of_uint8Array : uint8Array Js.t -> t = \"bigstring_of_typed_array\"\nend\n\nmodule String = struct\n  external of_uint8Array : uint8Array Js.t -> string = \"caml_string_of_array\"\n\n  let of_arrayBuffer ab =\n    let uint8 = new%js uint8Array_fromBuffer ab in\n    of_uint8Array uint8\nend\n\nmodule Bytes = struct\n  external of_uint8Array : uint8Array Js.t -> bytes = \"caml_bytes_of_array\"\n\n  external to_uint8Array : bytes -> uint8Array Js.t = \"caml_uint8_array_of_bytes\"\n\n  let of_arrayBuffer ab =\n    let uint8 = new%js uint8Array_fromBuffer ab in\n    of_uint8Array uint8\nend\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2011 Pierre Chambart\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen Dom\nopen! Import\n\nclass type blob = object\n  method size : int readonly_prop\n\n  method _type : js_string t readonly_prop\n\n  method slice : int -> int -> blob t meth\n\n  method slice_withContentType : int -> int -> js_string t -> blob t meth\nend\n\nlet blob_constr = Unsafe.global##._Blob\n\ntype 'a make_blob =\n  ?contentType:string -> ?endings:[ `Transparent | `Native ] -> 'a -> blob t\n\nlet rec filter_map f = function\n  | [] -> []\n  | v :: q -> (\n      match f v with\n      | None -> filter_map f q\n      | Some v' -> v' :: filter_map f q)\n\nlet make_blob_options contentType endings =\n  let options =\n    filter_map\n      (fun (name, v) ->\n        match v with\n        | None -> None\n        | Some v -> Some (name, Unsafe.inject (string v)))\n      [ \"type\", contentType\n      ; ( \"endings\"\n        , match endings with\n          | None -> None\n          | Some `Transparent -> Some \"transparent\"\n          | Some `Native -> Some \"native\" )\n      ]\n  in\n  match options with\n  | [] -> undefined\n  | l -> Unsafe.obj (Array.of_list l)\n\nlet blob_raw ?contentType ?endings a =\n  let options = make_blob_options contentType endings in\n  new%js blob_constr (array a) options\n\nlet blob_from_string ?contentType ?endings s =\n  blob_raw ?contentType ?endings [| string s |]\n\nlet blob_from_any ?contentType ?endings l =\n  let l =\n    List.map\n      (function\n        | `arrayBuffer a -> Unsafe.inject a\n        | `arrayBufferView a -> Unsafe.inject a\n        | `string s -> Unsafe.inject (string s)\n        | `js_string s -> Unsafe.inject s\n        | `blob b -> Unsafe.inject b)\n      l\n  in\n  blob_raw ?contentType ?endings (Array.of_list l)\n\nclass type file = object\n  inherit blob\n\n  method name : js_string t readonly_prop\n\n  method lastModifiedDate : js_string t readonly_prop\nend\n\n(* in firefox 3.0-3.5 file.name is not available, we use the nonstandard fileName instead *)\nclass type file_name_only = object\n  method name : js_string t optdef readonly_prop\n\n  method fileName : js_string t optdef readonly_prop\nend\n\nlet filename file =\n  let file : file_name_only t = Js.Unsafe.coerce file in\n  match Optdef.to_option file##.name with\n  | None -> (\n      match Optdef.to_option file##.fileName with\n      | None -> failwith \"can't retrieve file name: not implemented\"\n      | Some name -> name)\n  | Some name -> name\n\ntype file_any = < > t\n\nlet doc_constr = Unsafe.global##._Document\n\nmodule CoerceTo = struct\n  external json : file_any -> 'a Opt.t = \"%identity\"\n\n  let document (e : file_any) =\n    if instanceof e doc_constr\n    then Js.some (Unsafe.coerce e : element document t)\n    else Js.null\n\n  let blob (e : file_any) =\n    if instanceof e blob_constr then Js.some (Unsafe.coerce e : #blob t) else Js.null\n\n  let string (e : file_any) =\n    if Js.equals (typeof e) (string \"string\")\n    then Js.some (Unsafe.coerce e : js_string t)\n    else Js.null\n\n  let arrayBuffer (e : file_any) =\n    if instanceof e Typed_array.arrayBuffer\n    then Js.some (Unsafe.coerce e : Typed_array.arrayBuffer t)\n    else Js.null\nend\n\nclass type fileList = object\n  inherit [file] Dom.nodeList\nend\n\nclass type fileError = object\n  method code : int readonly_prop\nend\n\nclass type ['a] progressEvent = object\n  inherit ['a] event\n\n  method lengthComputable : bool t readonly_prop\n\n  method loaded : int readonly_prop\n\n  method total : int readonly_prop\nend\n\nclass type progressEventTarget = object ('self)\n  method onloadstart : ('self t, 'self progressEvent t) event_listener writeonly_prop\n\n  method onprogress : ('self t, 'self progressEvent t) event_listener writeonly_prop\n\n  method onload : ('self t, 'self progressEvent t) event_listener writeonly_prop\n\n  method onabort : ('self t, 'self progressEvent t) event_listener writeonly_prop\n\n  method onerror : ('self t, 'self progressEvent t) event_listener writeonly_prop\n\n  method onloadend : ('self t, 'self progressEvent t) event_listener writeonly_prop\nend\n\ntype readyState =\n  | EMPTY\n  | LOADING\n  | DONE\n\nclass type fileReader = object ('self)\n  method readAsArrayBuffer : #blob t -> unit meth\n\n  method readAsBinaryString : #blob t -> unit meth\n\n  method readAsText : #blob t -> unit meth\n\n  method readAsText_withEncoding : #blob t -> js_string t -> unit meth\n\n  method readAsDataURL : #blob t -> unit meth\n\n  method abort : unit meth\n\n  method readyState : readyState readonly_prop\n\n  method result : file_any readonly_prop\n\n  method error : fileError t readonly_prop\n\n  inherit progressEventTarget\nend\n\nmodule ReaderEvent = struct\n  type typ = fileReader progressEvent t Dom.Event.typ\n\n  let loadstart = Event.make \"loadstart\"\n\n  let progress = Event.make \"progress\"\n\n  let abort = Event.make \"abort\"\n\n  let error = Event.make \"error\"\n\n  let load = Event.make \"load\"\n\n  let loadend = Event.make \"loadend\"\nend\n\nlet fileReader : fileReader t constr = Js.Unsafe.global##._FileReader\n\nlet addEventListener = Dom.addEventListener\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nexternal caml_js_on_ie : unit -> bool t = \"caml_js_on_ie\"\n\nlet onIE = Js.to_bool (caml_js_on_ie ())\n\nexternal html_escape : js_string t -> js_string t = \"caml_js_html_escape\"\n\nexternal decode_html_entities : js_string t -> js_string t = \"caml_js_html_entities\"\n\nclass type cssStyleDeclaration = object\n  method setProperty :\n    js_string t -> js_string t -> js_string t optdef -> js_string t meth\n\n  method getPropertyValue : js_string t -> js_string t meth\n\n  method getPropertyPriority : js_string t -> js_string t meth\n\n  method removeProperty : js_string t -> js_string t meth\n\n  method animation : js_string t prop\n\n  method animationDelay : js_string t prop\n\n  method animationDirection : js_string t prop\n\n  method animationDuration : js_string t prop\n\n  method animationFillMode : js_string t prop\n\n  method animationIterationCount : js_string t prop\n\n  method animationName : js_string t prop\n\n  method animationPlayState : js_string t prop\n\n  method animationTimingFunction : js_string t prop\n\n  method background : js_string t prop\n\n  method backgroundAttachment : js_string t prop\n\n  method backgroundColor : js_string t prop\n\n  method backgroundImage : js_string t prop\n\n  method backgroundPosition : js_string t prop\n\n  method backgroundRepeat : js_string t prop\n\n  method border : js_string t prop\n\n  method borderBottom : js_string t prop\n\n  method borderBottomColor : js_string t prop\n\n  method borderBottomStyle : js_string t prop\n\n  method borderBottomWidth : js_string t prop\n\n  method borderCollapse : js_string t prop\n\n  method borderColor : js_string t prop\n\n  method borderLeft : js_string t prop\n\n  method borderLeftColor : js_string t prop\n\n  method borderLeftStyle : js_string t prop\n\n  method borderLeftWidth : js_string t prop\n\n  method borderRadius : js_string t prop\n\n  method borderRight : js_string t prop\n\n  method borderRightColor : js_string t prop\n\n  method borderRightStyle : js_string t prop\n\n  method borderRightWidth : js_string t prop\n\n  method borderSpacing : js_string t prop\n\n  method borderStyle : js_string t prop\n\n  method borderTop : js_string t prop\n\n  method borderTopColor : js_string t prop\n\n  method borderTopStyle : js_string t prop\n\n  method borderTopWidth : js_string t prop\n\n  method borderWidth : js_string t prop\n\n  method bottom : js_string t prop\n\n  method captionSide : js_string t prop\n\n  method clear : js_string t prop\n\n  method clip : js_string t prop\n\n  method color : js_string t prop\n\n  method content : js_string t prop\n\n  method counterIncrement : js_string t prop\n\n  method counterReset : js_string t prop\n\n  method cssFloat : js_string t prop\n\n  method cssText : js_string t prop\n\n  method cursor : js_string t prop\n\n  method direction : js_string t prop\n\n  method display : js_string t prop\n\n  method emptyCells : js_string t prop\n\n  method fill : js_string t prop\n\n  method font : js_string t prop\n\n  method fontFamily : js_string t prop\n\n  method fontSize : js_string t prop\n\n  method fontStyle : js_string t prop\n\n  method fontVariant : js_string t prop\n\n  method fontWeight : js_string t prop\n\n  method height : js_string t prop\n\n  method left : js_string t prop\n\n  method letterSpacing : js_string t prop\n\n  method lineHeight : js_string t prop\n\n  method listStyle : js_string t prop\n\n  method listStyleImage : js_string t prop\n\n  method listStylePosition : js_string t prop\n\n  method listStyleType : js_string t prop\n\n  method margin : js_string t prop\n\n  method marginBottom : js_string t prop\n\n  method marginLeft : js_string t prop\n\n  method marginRight : js_string t prop\n\n  method marginTop : js_string t prop\n\n  method maxHeight : js_string t prop\n\n  method maxWidth : js_string t prop\n\n  method minHeight : js_string t prop\n\n  method minWidth : js_string t prop\n\n  method opacity : js_string t optdef prop\n\n  method outline : js_string t prop\n\n  method outlineColor : js_string t prop\n\n  method outlineOffset : js_string t prop\n\n  method outlineStyle : js_string t prop\n\n  method outlineWidth : js_string t prop\n\n  method overflow : js_string t prop\n\n  method overflowX : js_string t prop\n\n  method overflowY : js_string t prop\n\n  method padding : js_string t prop\n\n  method paddingBottom : js_string t prop\n\n  method paddingLeft : js_string t prop\n\n  method paddingRight : js_string t prop\n\n  method paddingTop : js_string t prop\n\n  method pageBreakAfter : js_string t prop\n\n  method pageBreakBefore : js_string t prop\n\n  method pointerEvents : js_string t prop\n\n  method position : js_string t prop\n\n  method right : js_string t prop\n\n  method stroke : js_string t prop\n\n  method strokeWidth : js_string t prop\n\n  method tableLayout : js_string t prop\n\n  method textAlign : js_string t prop\n\n  method textAnchor : js_string t prop\n\n  method textDecoration : js_string t prop\n\n  method textIndent : js_string t prop\n\n  method textTransform : js_string t prop\n\n  method top : js_string t prop\n\n  method transform : js_string t prop\n\n  method verticalAlign : js_string t prop\n\n  method visibility : js_string t prop\n\n  method whiteSpace : js_string t prop\n\n  method width : js_string t prop\n\n  method wordSpacing : js_string t prop\n\n  method zIndex : js_string t prop\nend\n\ntype ('a, 'b) event_listener = ('a, 'b) Dom.event_listener\n\ntype mouse_button =\n  | No_button\n  | Left_button\n  | Middle_button\n  | Right_button\n\ntype delta_mode =\n  | Delta_pixel\n  | Delta_line\n  | Delta_page\n\nclass type event = object\n  inherit [element] Dom.event\nend\n\nand ['a] customEvent = object\n  inherit [element, 'a] Dom.customEvent\nend\n\nand focusEvent = object\n  inherit event\n\n  method relatedTarget : element t opt optdef readonly_prop\nend\n\nand mouseEvent = object\n  inherit event\n\n  method relatedTarget : element t opt optdef readonly_prop\n\n  method clientX : int readonly_prop\n\n  method clientY : int readonly_prop\n\n  method screenX : int readonly_prop\n\n  method screenY : int readonly_prop\n\n  method offsetX : int readonly_prop\n\n  method offsetY : int readonly_prop\n\n  method ctrlKey : bool t readonly_prop\n\n  method shiftKey : bool t readonly_prop\n\n  method altKey : bool t readonly_prop\n\n  method metaKey : bool t readonly_prop\n\n  method button : int readonly_prop\n\n  method which : mouse_button optdef readonly_prop\n\n  method fromElement : element t opt optdef readonly_prop\n\n  method toElement : element t opt optdef readonly_prop\n\n  method pageX : int optdef readonly_prop\n\n  method pageY : int optdef readonly_prop\nend\n\nand keyboardEvent = object\n  inherit event\n\n  method altKey : bool t readonly_prop\n\n  method shiftKey : bool t readonly_prop\n\n  method ctrlKey : bool t readonly_prop\n\n  method metaKey : bool t readonly_prop\n\n  method location : int readonly_prop\n\n  method key : js_string t optdef readonly_prop\n\n  method code : js_string t optdef readonly_prop\n\n  method which : int optdef readonly_prop\n\n  method charCode : int optdef readonly_prop\n\n  method keyCode : int readonly_prop\n\n  method getModifierState : js_string t -> bool t meth\n\n  method keyIdentifier : js_string t optdef readonly_prop\nend\n\nand mousewheelEvent = object\n  (* All modern browsers *)\n  inherit mouseEvent\n\n  method wheelDelta : int readonly_prop\n\n  method wheelDeltaX : int optdef readonly_prop\n\n  method wheelDeltaY : int optdef readonly_prop\n\n  method deltaX : number_t readonly_prop\n\n  method deltaY : number_t readonly_prop\n\n  method deltaZ : number_t readonly_prop\n\n  method deltaMode : delta_mode readonly_prop\nend\n\nand mouseScrollEvent = object\n  (* Firefox *)\n  inherit mouseEvent\n\n  method detail : int readonly_prop\n\n  method axis : int optdef readonly_prop\n\n  method _HORIZONTAL_AXIS : int optdef readonly_prop\n\n  method _VERTICAL_AXIS : int optdef readonly_prop\nend\n\nand touchEvent = object\n  inherit event\n\n  method touches : touchList t readonly_prop\n\n  method targetTouches : touchList t readonly_prop\n\n  method changedTouches : touchList t readonly_prop\n\n  method ctrlKey : bool t readonly_prop\n\n  method shiftKey : bool t readonly_prop\n\n  method altKey : bool t readonly_prop\n\n  method metaKey : bool t readonly_prop\n\n  method relatedTarget : element t opt optdef readonly_prop\nend\n\nand touchList = object\n  method length : int readonly_prop\n\n  method item : int -> touch t optdef meth\nend\n\nand touch = object\n  method identifier : int readonly_prop\n\n  method target : element t optdef readonly_prop\n\n  method screenX : int readonly_prop\n\n  method screenY : int readonly_prop\n\n  method clientX : int readonly_prop\n\n  method clientY : int readonly_prop\n\n  method pageX : int readonly_prop\n\n  method pageY : int readonly_prop\nend\n\nand submitEvent = object\n  inherit event\n\n  method submitter : element t optdef readonly_prop\nend\n\nand dragEvent = object\n  inherit mouseEvent\n\n  method dataTransfer : dataTransfer t readonly_prop\nend\n\nand clipboardEvent = object\n  inherit event\n\n  method clipboardData : dataTransfer t readonly_prop\nend\n\nand dataTransfer = object\n  method dropEffect : js_string t prop\n\n  method effectAllowed : js_string t prop\n\n  method files : File.fileList t readonly_prop\n\n  method types : js_string t js_array t readonly_prop\n\n  method addElement : element t -> unit meth\n\n  method clearData : js_string t -> unit meth\n\n  method clearData_all : unit meth\n\n  method getData : js_string t -> js_string t meth\n\n  method setData : js_string t -> js_string t -> unit meth\n\n  method setDragImage : element t -> int -> int -> unit meth\nend\n\nand eventTarget = object ('self)\n  method onclick : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method ondblclick : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method onmousedown : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method onmouseup : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method onmouseover : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method onmousemove : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method onmouseout : ('self t, mouseEvent t) event_listener writeonly_prop\n\n  method onkeypress : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n  method onkeydown : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n  method onkeyup : ('self t, keyboardEvent t) event_listener writeonly_prop\n\n  method onscroll : ('self t, event t) event_listener writeonly_prop\n\n  method onwheel : ('self t, mousewheelEvent t) event_listener writeonly_prop\n\n  method ondragstart : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method ondragend : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method ondragenter : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method ondragover : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method ondragleave : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method ondrag : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method ondrop : ('self t, dragEvent t) event_listener writeonly_prop\n\n  method onanimationstart : ('self t, animationEvent t) event_listener writeonly_prop\n\n  method onanimationend : ('self t, animationEvent t) event_listener writeonly_prop\n\n  method onanimationiteration : ('self t, animationEvent t) event_listener writeonly_prop\n\n  method onanimationcancel : ('self t, animationEvent t) event_listener writeonly_prop\n\n  method ontransitionrun : ('self t, transitionEvent t) event_listener writeonly_prop\n\n  method ontransitionstart : ('self t, transitionEvent t) event_listener writeonly_prop\n\n  method ontransitionend : ('self t, transitionEvent t) event_listener writeonly_prop\n\n  method ontransitioncancel : ('self t, transitionEvent t) event_listener writeonly_prop\n\n  method ongotpointercapture : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onlostpointercapture : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointerenter : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointercancel : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointerdown : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointerleave : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointermove : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointerout : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointerover : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method onpointerup : ('self t, pointerEvent t) event_listener writeonly_prop\n\n  method dispatchEvent : event t -> bool t meth\nend\n\nand popStateEvent = object\n  inherit event\n\n  method state : Js.Unsafe.any readonly_prop\nend\n\nand pointerEvent = object\n  inherit mouseEvent\n\n  method pointerId : int Js.readonly_prop\n\n  method width : number_t Js.readonly_prop\n\n  method height : number_t Js.readonly_prop\n\n  method pressure : number_t Js.readonly_prop\n\n  method tangentialPressure : number_t Js.readonly_prop\n\n  method tiltX : int Js.readonly_prop\n\n  method tiltY : int Js.readonly_prop\n\n  method twist : int Js.readonly_prop\n\n  method pointerType : Js.js_string Js.t Js.readonly_prop\n\n  method isPrimary : bool Js.t Js.readonly_prop\nend\n\nand storageEvent = object\n  inherit event\n\n  method key : js_string t opt readonly_prop\n\n  method oldValue : js_string t opt readonly_prop\n\n  method newValue : js_string t opt readonly_prop\n\n  method url : js_string t readonly_prop\n\n  method storageArea : storage t opt readonly_prop\nend\n\nand storage = object\n  method length : int readonly_prop\n\n  method key : int -> js_string t opt meth\n\n  method getItem : js_string t -> js_string t opt meth\n\n  method setItem : js_string t -> js_string t -> unit meth\n\n  method removeItem : js_string t -> unit meth\n\n  method clear : unit meth\nend\n\nand hashChangeEvent = object\n  inherit event\n\n  method oldURL : js_string t readonly_prop\n\n  method newURL : js_string t readonly_prop\nend\n\nand animationEvent = object\n  inherit event\n\n  method animationName : js_string t readonly_prop\n\n  method elapsedTime : number_t readonly_prop\n\n  method pseudoElement : js_string t readonly_prop\nend\n\nand transitionEvent = object\n  inherit event\n\n  method propertyName : js_string t readonly_prop\n\n  method elapsedTime : number_t readonly_prop\n\n  method pseudoElement : js_string t readonly_prop\nend\n\nand mediaEvent = object\n  inherit event\nend\n\nand messageEvent = object\n  inherit event\n\n  method data : Unsafe.any opt readonly_prop\n\n  method source : Unsafe.any opt readonly_prop\nend\n\nand nodeSelector = object\n  method querySelector : js_string t -> element t opt meth\n\n  method querySelectorAll : js_string t -> element Dom.nodeList t meth\nend\n\nand tokenList = object\n  method length : int readonly_prop\n\n  method item : int -> js_string t optdef meth\n\n  method contains : js_string t -> bool t meth\n\n  method add : js_string t -> unit meth\n\n  method remove : js_string t -> unit meth\n\n  method toggle : js_string t -> bool t meth\n\n  method stringifier : js_string t prop\nend\n\nand element = object\n  inherit Dom.element\n\n  inherit nodeSelector\n\n  method id : js_string t prop\n\n  method title : js_string t prop\n\n  method lang : js_string t prop\n\n  method dir : js_string t prop\n\n  method className : js_string t prop\n\n  method classList : tokenList t readonly_prop\n\n  method closest : js_string t -> element t opt meth\n\n  method style : cssStyleDeclaration t prop\n\n  method innerHTML : js_string t prop\n\n  method outerHTML : js_string t prop\n\n  method textContent : js_string t opt prop\n\n  method innerText : js_string t prop\n\n  method clientLeft : int readonly_prop\n\n  method clientTop : int readonly_prop\n\n  method clientWidth : int readonly_prop\n\n  method clientHeight : int readonly_prop\n\n  method offsetLeft : int readonly_prop\n\n  method offsetTop : int readonly_prop\n\n  method offsetParent : element t opt readonly_prop\n\n  method offsetWidth : int readonly_prop\n\n  method offsetHeight : int readonly_prop\n\n  method scrollLeft : int prop\n\n  method scrollTop : int prop\n\n  method scrollWidth : int prop\n\n  method scrollHeight : int prop\n\n  method getClientRects : clientRectList t meth\n\n  method getBoundingClientRect : clientRect t meth\n\n  method scrollIntoView : bool t -> unit meth\n\n  method click : unit meth\n\n  method focus : unit meth\n\n  method blur : unit meth\n\n  inherit eventTarget\nend\n\nand clientRect = object\n  method top : number_t readonly_prop\n\n  method right : number_t readonly_prop\n\n  method bottom : number_t readonly_prop\n\n  method left : number_t readonly_prop\n\n  method width : number_t optdef readonly_prop\n\n  method height : number_t optdef readonly_prop\nend\n\nand clientRectList = object\n  method length : int readonly_prop\n\n  method item : int -> clientRect t opt meth\nend\n\nlet no_handler : ('a, 'b) event_listener = Dom.no_handler\n\nlet handler = Dom.handler\n\nlet full_handler = Dom.full_handler\n\nlet invoke_handler = Dom.invoke_handler\n\nmodule Event = struct\n  type 'a typ = 'a Dom.Event.typ\n\n  let cancel = Dom.Event.make \"cancel\"\n\n  let click = Dom.Event.make \"click\"\n\n  let close = Dom.Event.make \"close\"\n\n  let copy = Dom.Event.make \"copy\"\n\n  let cut = Dom.Event.make \"cut\"\n\n  let paste = Dom.Event.make \"paste\"\n\n  let dblclick = Dom.Event.make \"dblclick\"\n\n  let mousedown = Dom.Event.make \"mousedown\"\n\n  let mouseup = Dom.Event.make \"mouseup\"\n\n  let mouseover = Dom.Event.make \"mouseover\"\n\n  let mousemove = Dom.Event.make \"mousemove\"\n\n  let mouseout = Dom.Event.make \"mouseout\"\n\n  let keypress = Dom.Event.make \"keypress\"\n\n  let keydown = Dom.Event.make \"keydown\"\n\n  let keyup = Dom.Event.make \"keyup\"\n\n  let mousewheel = Dom.Event.make \"mousewheel\"\n\n  let wheel = Dom.Event.make \"wheel\"\n\n  let _DOMMouseScroll = Dom.Event.make \"DOMMouseScroll\"\n\n  let touchstart = Dom.Event.make \"touchstart\"\n\n  let touchmove = Dom.Event.make \"touchmove\"\n\n  let touchend = Dom.Event.make \"touchend\"\n\n  let touchcancel = Dom.Event.make \"touchcancel\"\n\n  let dragstart = Dom.Event.make \"dragstart\"\n\n  let dragend = Dom.Event.make \"dragend\"\n\n  let dragenter = Dom.Event.make \"dragenter\"\n\n  let dragover = Dom.Event.make \"dragover\"\n\n  let dragleave = Dom.Event.make \"dragleave\"\n\n  let drag = Dom.Event.make \"drag\"\n\n  let drop = Dom.Event.make \"drop\"\n\n  let hashchange = Dom.Event.make \"hashchange\"\n\n  let change = Dom.Event.make \"change\"\n\n  let input = Dom.Event.make \"input\"\n\n  let timeupdate = Dom.Event.make \"timeupdate\"\n\n  let submit = Dom.Event.make \"submit\"\n\n  let scroll = Dom.Event.make \"scroll\"\n\n  let focus = Dom.Event.make \"focus\"\n\n  let blur = Dom.Event.make \"blur\"\n\n  let load = Dom.Event.make \"load\"\n\n  let unload = Dom.Event.make \"unload\"\n\n  let beforeunload = Dom.Event.make \"beforeunload\"\n\n  let resize = Dom.Event.make \"resize\"\n\n  let orientationchange = Dom.Event.make \"orientationchange\"\n\n  let popstate = Dom.Event.make \"popstate\"\n\n  let error = Dom.Event.make \"error\"\n\n  let abort = Dom.Event.make \"abort\"\n\n  let select = Dom.Event.make \"select\"\n\n  let online = Dom.Event.make \"online\"\n\n  let offline = Dom.Event.make \"offline\"\n\n  let checking = Dom.Event.make \"checking\"\n\n  let noupdate = Dom.Event.make \"noupdate\"\n\n  let downloading = Dom.Event.make \"downloading\"\n\n  let progress = Dom.Event.make \"progress\"\n\n  let updateready = Dom.Event.make \"updateready\"\n\n  let cached = Dom.Event.make \"cached\"\n\n  let obsolete = Dom.Event.make \"obsolete\"\n\n  let domContentLoaded = Dom.Event.make \"DOMContentLoaded\"\n\n  let animationstart = Dom.Event.make \"animationstart\"\n\n  let animationend = Dom.Event.make \"animationend\"\n\n  let animationiteration = Dom.Event.make \"animationiteration\"\n\n  let animationcancel = Dom.Event.make \"animationcancel\"\n\n  let transitionrun = Dom.Event.make \"transitionrun\"\n\n  let transitionstart = Dom.Event.make \"transitionstart\"\n\n  let transitionend = Dom.Event.make \"transitionend\"\n\n  let transitioncancel = Dom.Event.make \"transitioncancel\"\n\n  let canplay = Dom.Event.make \"canplay\"\n\n  let canplaythrough = Dom.Event.make \"canplaythrough\"\n\n  let durationchange = Dom.Event.make \"durationchange\"\n\n  let emptied = Dom.Event.make \"emptied\"\n\n  let ended = Dom.Event.make \"ended\"\n\n  let gotpointercapture = Dom.Event.make \"gotpointercapture\"\n\n  let loadeddata = Dom.Event.make \"loadeddata\"\n\n  let loadedmetadata = Dom.Event.make \"loadedmetadata\"\n\n  let loadstart = Dom.Event.make \"loadstart\"\n\n  let lostpointercapture = Dom.Event.make \"lostpointercapture\"\n\n  let message = Dom.Event.make \"message\"\n\n  let pause = Dom.Event.make \"pause\"\n\n  let play = Dom.Event.make \"play\"\n\n  let playing = Dom.Event.make \"playing\"\n\n  let pointerenter = Dom.Event.make \"pointerenter\"\n\n  let pointercancel = Dom.Event.make \"pointercancel\"\n\n  let pointerdown = Dom.Event.make \"pointerdown\"\n\n  let pointerleave = Dom.Event.make \"pointerleave\"\n\n  let pointermove = Dom.Event.make \"pointermove\"\n\n  let pointerout = Dom.Event.make \"pointerout\"\n\n  let pointerover = Dom.Event.make \"pointerover\"\n\n  let pointerup = Dom.Event.make \"pointerup\"\n\n  let ratechange = Dom.Event.make \"ratechange\"\n\n  let seeked = Dom.Event.make \"seeked\"\n\n  let seeking = Dom.Event.make \"seeking\"\n\n  let stalled = Dom.Event.make \"stalled\"\n\n  let suspend = Dom.Event.make \"suspend\"\n\n  let volumechange = Dom.Event.make \"volumechange\"\n\n  let waiting = Dom.Event.make \"waiting\"\n\n  let make = Dom.Event.make\nend\n\ntype event_listener_id = Dom.event_listener_id\n\nlet addEventListener = Dom.addEventListener\n\nlet addEventListenerWithOptions = Dom.addEventListenerWithOptions\n\nlet removeEventListener = Dom.removeEventListener\n\nlet createCustomEvent = Dom.createCustomEvent\n\nclass type ['node] collection = object\n  method length : int readonly_prop\n\n  method item : int -> 'node t opt meth\n\n  method namedItem : js_string t -> 'node t opt meth\nend\n\nclass type htmlElement = element\n\nclass type headElement = object\n  inherit element\n\n  method profile : js_string t prop\nend\n\nclass type linkElement = object\n  inherit element\n\n  method disabled : bool t prop\n\n  method charset : js_string t prop\n\n  method crossorigin : js_string t prop\n\n  method href : js_string t prop\n\n  method hreflang : js_string t prop\n\n  method media : js_string t prop\n\n  method rel : js_string t prop\n\n  method rev : js_string t prop\n\n  method target : js_string t prop\n\n  method _type : js_string t prop\nend\n\nclass type titleElement = object\n  inherit element\n\n  method text : js_string t prop\nend\n\nclass type metaElement = object\n  inherit element\n\n  method content : js_string t prop\n\n  method httpEquiv : js_string t prop\n\n  method name : js_string t prop\n\n  method scheme : js_string t prop\nend\n\nclass type baseElement = object\n  inherit element\n\n  method href : js_string t prop\n\n  method target : js_string t prop\nend\n\nclass type styleElement = object\n  inherit element\n\n  method disabled : bool t prop\n\n  method media : js_string t prop\n\n  method _type : js_string t prop\nend\n\nclass type bodyElement = element\n\nclass type formElement = object\n  inherit element\n\n  method elements : element collection t readonly_prop\n\n  method length : int readonly_prop\n\n  method acceptCharset : js_string t prop\n\n  method action : js_string t prop\n\n  method enctype : js_string t prop\n\n  method _method : js_string t prop\n\n  method target : js_string t prop\n\n  method submit : unit meth\n\n  method reset : unit meth\n\n  method onsubmit : ('self t, submitEvent t) event_listener writeonly_prop\nend\n\nclass type optGroupElement = object\n  inherit element\n\n  method disabled : bool t prop\n\n  method label : js_string t prop\nend\n\nclass type optionElement = object\n  inherit optGroupElement\n\n  method form : formElement t opt readonly_prop\n\n  method defaultSelected : bool t prop\n\n  method text : js_string t readonly_prop\n\n  method index : int readonly_prop\n\n  method selected : bool t prop\n\n  method value : js_string t prop\nend\n\nclass type selectElement = object ('self)\n  inherit element\n\n  method _type : js_string t readonly_prop\n\n  method selectedIndex : int prop\n\n  method value : js_string t prop\n\n  method length : int prop\n\n  method form : formElement t opt readonly_prop\n\n  method options : optionElement collection t readonly_prop\n\n  method disabled : bool t prop\n\n  method multiple : bool t prop\n\n  method name : js_string t readonly_prop\n\n  method size : int prop\n\n  method tabIndex : int prop\n\n  method add : #optGroupElement t -> #optGroupElement t opt -> unit meth\n\n  method remove : int -> unit meth\n\n  method required : bool t writeonly_prop\n\n  method onchange : ('self t, event t) event_listener prop\n\n  method oninput : ('self t, event t) event_listener prop\nend\n\nclass type inputElement = object ('self)\n  inherit element\n\n  method defaultValue : js_string t prop\n\n  method defaultChecked : js_string t prop\n\n  method form : formElement t opt readonly_prop\n\n  method accept : js_string t prop\n\n  method accessKey : js_string t prop\n\n  method align : js_string t prop\n\n  method alt : js_string t prop\n\n  method checked : bool t prop\n\n  method disabled : bool t prop\n\n  method maxLength : int prop\n\n  method name : js_string t readonly_prop\n\n  method readOnly : bool t prop\n\n  method required : bool t writeonly_prop\n\n  method size : int prop\n\n  method src : js_string t prop\n\n  method tabIndex : int prop\n\n  method _type : js_string t readonly_prop\n\n  method useMap : js_string t prop\n\n  method value : js_string t prop\n\n  method select : unit meth\n\n  method files : File.fileList t optdef readonly_prop\n\n  method placeholder : js_string t writeonly_prop\n\n  method selectionDirection : js_string t prop\n\n  method selectionStart : int prop\n\n  method selectionEnd : int prop\n\n  method onselect : ('self t, event t) event_listener prop\n\n  method onchange : ('self t, event t) event_listener prop\n\n  method oninput : ('self t, event t) event_listener prop\n\n  method onblur : ('self t, focusEvent t) event_listener prop\n\n  method onfocus : ('self t, focusEvent t) event_listener prop\nend\n\nclass type textAreaElement = object ('self)\n  inherit element\n\n  method defaultValue : js_string t prop\n\n  method form : formElement t opt readonly_prop\n\n  method accessKey : js_string t prop\n\n  method cols : int prop\n\n  method disabled : bool t prop\n\n  method name : js_string t readonly_prop\n\n  method readOnly : bool t prop\n\n  method rows : int prop\n\n  method selectionDirection : js_string t prop\n\n  method selectionEnd : int prop\n\n  method selectionStart : int prop\n\n  method tabIndex : int prop\n\n  method _type : js_string t readonly_prop\n\n  method value : js_string t prop\n\n  method select : unit meth\n\n  method required : bool t writeonly_prop\n\n  method placeholder : js_string t writeonly_prop\n\n  method onselect : ('self t, event t) event_listener prop\n\n  method onchange : ('self t, event t) event_listener prop\n\n  method oninput : ('self t, event t) event_listener prop\n\n  method onblur : ('self t, focusEvent t) event_listener prop\n\n  method onfocus : ('self t, focusEvent t) event_listener prop\nend\n\nclass type buttonElement = object\n  inherit element\n\n  method form : formElement t opt readonly_prop\n\n  method accessKey : js_string t prop\n\n  method disabled : bool t prop\n\n  method name : js_string t readonly_prop\n\n  method tabIndex : int prop\n\n  method _type : js_string t readonly_prop\n\n  method value : js_string t prop\nend\n\nclass type labelElement = object\n  inherit element\n\n  method form : formElement t opt readonly_prop\n\n  method accessKey : js_string t prop\n\n  method htmlFor : js_string t prop\nend\n\nclass type fieldSetElement = object\n  inherit element\n\n  method form : formElement t opt readonly_prop\nend\n\nclass type legendElement = object\n  inherit element\n\n  method form : formElement t opt readonly_prop\n\n  method accessKey : js_string t prop\nend\n\nclass type uListElement = element\n\nclass type oListElement = element\n\nclass type dListElement = element\n\nclass type liElement = element\n\nclass type dialogElement = object\n  inherit element\n\n  method close : unit meth\n\n  method close_returnValue : js_string t -> unit meth\n\n  method open_ : bool t prop\n\n  method returnValue : js_string t prop\n\n  method show : unit meth\n\n  method showModal : unit meth\n\n  method oncancel : ('self t, event t) event_listener prop\n\n  method onclose : ('self t, event t) event_listener prop\nend\n\nclass type divElement = element\n\nclass type paragraphElement = element\n\nclass type headingElement = element\n\nclass type quoteElement = object\n  inherit element\n\n  method cite : js_string t prop\nend\n\nclass type preElement = element\n\nclass type brElement = element\n\nclass type hrElement = element\n\nclass type modElement = object\n  inherit element\n\n  method cite : js_string t prop\n\n  method dateTime : js_string t prop\nend\n\nclass type anchorElement = object\n  inherit element\n\n  method accessKey : js_string t prop\n\n  method charset : js_string t prop\n\n  method coords : js_string t prop\n\n  method download : js_string t prop\n\n  method href : js_string t prop\n\n  method hreflang : js_string t prop\n\n  method name : js_string t prop\n\n  method rel : js_string t prop\n\n  method rev : js_string t prop\n\n  method shape : js_string t prop\n\n  method tabIndex : int prop\n\n  method target : js_string t prop\n\n  method _type : js_string t prop\nend\n\nclass type imageElement = object ('self)\n  inherit element\n\n  method alt : js_string t prop\n\n  method src : js_string t prop\n\n  method useMap : js_string t prop\n\n  method isMap : bool t prop\n\n  method width : int prop\n\n  method height : int prop\n\n  method naturalWidth : int optdef readonly_prop\n\n  method naturalHeight : int optdef readonly_prop\n\n  method complete : bool t prop\n\n  method onload : ('self t, event t) event_listener prop\n\n  method onerror : ('self t, event t) event_listener prop\n\n  method onabort : ('self t, event t) event_listener prop\nend\n\nclass type objectElement = object\n  inherit element\n\n  method form : formElement t opt readonly_prop\n\n  method code : js_string t prop\n\n  method archive : js_string t prop\n\n  method codeBase : js_string t prop\n\n  method codeType : js_string t prop\n\n  method data : js_string t prop\n\n  method declare : bool t prop\n\n  method height : js_string t prop\n\n  method name : js_string t prop\n\n  method standby : js_string t prop\n\n  method tabIndex : int prop\n\n  method _type : js_string t prop\n\n  method useMap : js_string t prop\n\n  method width : js_string t prop\n\n  method document : Dom.element Dom.document t opt readonly_prop\nend\n\nclass type paramElement = object\n  inherit element\n\n  method name : js_string t prop\n\n  method _type : js_string t prop\n\n  method value : js_string t prop\n\n  method valueType : js_string t prop\nend\n\nclass type areaElement = object\n  inherit element\n\n  method accessKey : js_string t prop\n\n  method alt : js_string t prop\n\n  method coords : js_string t prop\n\n  method href : js_string t prop\n\n  method noHref : bool t prop\n\n  method shape : js_string t prop\n\n  method tabIndex : int prop\n\n  method target : js_string t prop\nend\n\nclass type mapElement = object\n  inherit element\n\n  method areas : areaElement collection t readonly_prop\n\n  method name : js_string t prop\nend\n\nclass type scriptElement = object\n  inherit element\n\n  method text : js_string t prop\n\n  method charset : js_string t prop\n\n  method defer : bool t prop\n\n  method src : js_string t prop\n\n  method _type : js_string t prop\n\n  method async : bool t prop\nend\n\nclass type embedElement = object\n  inherit element\n\n  method src : js_string t prop\n\n  method height : js_string t prop\n\n  method width : js_string t prop\n\n  method _type : js_string t prop\nend\n\nclass type tableCellElement = object\n  inherit element\n\n  method cellIndex : int readonly_prop\n\n  method abbr : js_string t prop\n\n  method align : js_string t prop\n\n  method axis : js_string t prop\n\n  method ch : js_string t prop\n\n  method chOff : js_string t prop\n\n  method colSpan : int prop\n\n  method headers : js_string t prop\n\n  method rowSpan : int prop\n\n  method scope : js_string t prop\n\n  method vAlign : js_string t prop\nend\n\nclass type tableRowElement = object\n  inherit element\n\n  method rowIndex : int readonly_prop\n\n  method sectionRowIndex : int readonly_prop\n\n  method cells : tableCellElement collection t readonly_prop\n\n  method align : js_string t prop\n\n  method ch : js_string t prop\n\n  method chOff : js_string t prop\n\n  method vAlign : js_string t prop\n\n  method insertCell : int -> tableCellElement t meth\n\n  method deleteCell : int -> unit meth\nend\n\nclass type tableColElement = object\n  inherit element\n\n  method align : js_string t prop\n\n  method ch : js_string t prop\n\n  method chOff : js_string t prop\n\n  method span : int prop\n\n  method vAlign : js_string t prop\n\n  method width : js_string t prop\nend\n\nclass type tableSectionElement = object\n  inherit element\n\n  method align : js_string t prop\n\n  method ch : js_string t prop\n\n  method chOff : js_string t prop\n\n  method vAlign : js_string t prop\n\n  method rows : tableRowElement collection t readonly_prop\n\n  method insertRow : int -> tableRowElement t meth\n\n  method deleteRow : int -> unit meth\nend\n\nclass type tableCaptionElement = element\n\nclass type tableElement = object\n  inherit element\n\n  method caption : tableCaptionElement t prop\n\n  method tHead : tableSectionElement t prop\n\n  method tFoot : tableSectionElement t prop\n\n  method rows : tableRowElement collection t readonly_prop\n\n  method tBodies : tableSectionElement collection t readonly_prop\n\n  method align : js_string t prop\n\n  method border : js_string t prop\n\n  method cellPadding : js_string t prop\n\n  method cellSpacing : js_string t prop\n\n  method frame : js_string t prop\n\n  method rules : js_string t prop\n\n  method summary : js_string t prop\n\n  method width : js_string t prop\n\n  method createTHead : tableSectionElement t meth\n\n  method deleteTHead : unit meth\n\n  method createTFoot : tableSectionElement t meth\n\n  method deleteTFoot : unit meth\n\n  method createCaption : tableCaptionElement t meth\n\n  method deleteCaption : unit meth\n\n  method insertRow : int -> tableRowElement t meth\n\n  method deleteRow : int -> unit meth\nend\n\nclass type timeRanges = object\n  method length : int readonly_prop\n\n  method start : int -> number_t meth\n\n  method end_ : int -> number_t meth\nend\n\ntype networkState =\n  | NETWORK_EMPTY\n  | NETWORK_IDLE\n  | NETWORK_LOADING\n  | NETWORK_NO_SOURCE\n\ntype readyState =\n  | HAVE_NOTHING\n  | HAVE_METADATA\n  | HAVE_CURRENT_DATA\n  | HAVE_FUTURE_DATA\n  | HAVE_ENOUGH_DATA\n\n(* http://www.w3schools.com/tags/ref_av_dom.asp *)\n(* only features supported by all browser. (IE9+) *)\nclass type mediaElement = object\n  inherit element\n\n  method canPlayType : js_string t -> js_string t meth\n\n  method load : unit meth\n\n  method play : unit meth\n\n  method pause : unit meth\n\n  method autoplay : bool t prop\n\n  method buffered : timeRanges t readonly_prop\n\n  method controls : bool t prop\n\n  method currentSrc : js_string t readonly_prop\n\n  method currentTime : number_t prop\n\n  method duration : number_t readonly_prop\n\n  method ended : bool t readonly_prop\n\n  method loop : bool t prop\n\n  method mediagroup : js_string t prop\n\n  method muted : bool t prop\n\n  method networkState_int : int readonly_prop\n\n  method networkState : networkState readonly_prop\n\n  method paused : bool t readonly_prop\n\n  method playbackRate : number_t prop\n\n  method played : timeRanges t readonly_prop\n\n  method preload : js_string t prop\n\n  method readyState_int : int readonly_prop\n\n  method readyState : readyState readonly_prop\n\n  method seekable : timeRanges t readonly_prop\n\n  method seeking : bool t readonly_prop\n\n  method src : js_string t prop\n\n  method volume : number_t prop\n\n  method oncanplay : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method oncanplaythrough : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method ondurationchange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onemptied : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onended : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onloadeddata : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onloadedmetadata : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onloadstart : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onpause : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onplay : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onplaying : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onratechange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onseeked : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onseeking : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onstalled : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onsuspend : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onvolumechange : ('self t, mediaEvent t) event_listener writeonly_prop\n\n  method onwaiting : ('self t, mediaEvent t) event_listener writeonly_prop\nend\n\nclass type audioElement = object\n  inherit mediaElement\nend\n\nclass type videoElement = object\n  inherit mediaElement\nend\n\ntype context = js_string t\n\nlet _2d_ = Js.string \"2d\"\n\ntype canvasPattern\n\nclass type canvasElement = object\n  inherit element\n\n  method width : int prop\n\n  method height : int prop\n\n  method toDataURL : js_string t meth\n\n  method toDataURL_type : js_string t -> js_string t meth\n\n  method toDataURL_type_compression : js_string t -> number_t -> js_string t meth\n\n  method getContext : js_string t -> canvasRenderingContext2D t meth\nend\n\nand canvasRenderingContext2D = object\n  method canvas : canvasElement t readonly_prop\n\n  method save : unit meth\n\n  method restore : unit meth\n\n  method scale : number_t -> number_t -> unit meth\n\n  method rotate : number_t -> unit meth\n\n  method translate : number_t -> number_t -> unit meth\n\n  method transform :\n    number_t -> number_t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method setTransform :\n    number_t -> number_t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method globalAlpha : number_t prop\n\n  method globalCompositeOperation : js_string t prop\n\n  method strokeStyle : js_string t writeonly_prop\n\n  method strokeStyle_gradient : canvasGradient t writeonly_prop\n\n  method strokeStyle_pattern : canvasPattern t writeonly_prop\n\n  method fillStyle : js_string t writeonly_prop\n\n  method fillStyle_gradient : canvasGradient t writeonly_prop\n\n  method fillStyle_pattern : canvasPattern t writeonly_prop\n\n  method createLinearGradient :\n    number_t -> number_t -> number_t -> number_t -> canvasGradient t meth\n\n  method createRadialGradient :\n       number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> canvasGradient t meth\n\n  method createPattern : imageElement t -> js_string t -> canvasPattern t meth\n\n  method createPattern_fromCanvas : canvasElement t -> js_string t -> canvasPattern t meth\n\n  method createPattern_fromVideo : videoElement t -> js_string t -> canvasPattern t meth\n\n  method lineWidth : number_t prop\n\n  method lineCap : js_string t prop\n\n  method lineJoin : js_string t prop\n\n  method miterLimit : number_t prop\n\n  method shadowOffsetX : number_t prop\n\n  method shadowOffsetY : number_t prop\n\n  method shadowBlur : number_t prop\n\n  method shadowColor : js_string t prop\n\n  method clearRect : number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method fillRect : number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method strokeRect : number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method beginPath : unit meth\n\n  method closePath : unit meth\n\n  method moveTo : number_t -> number_t -> unit meth\n\n  method lineTo : number_t -> number_t -> unit meth\n\n  method quadraticCurveTo : number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method bezierCurveTo :\n    number_t -> number_t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method arcTo : number_t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method rect : number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method arc :\n    number_t -> number_t -> number_t -> number_t -> number_t -> bool t -> unit meth\n\n  method ellipse :\n       number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> bool t\n    -> unit meth\n\n  method fill : unit meth\n\n  method stroke : unit meth\n\n  method clip : unit meth\n\n  method isPointInPath : number_t -> number_t -> bool t meth\n\n  method drawFocusRing : #element t -> number_t -> number_t -> bool t -> bool t meth\n\n  method font : js_string t prop\n\n  method textAlign : js_string t prop\n\n  method textBaseline : js_string t prop\n\n  method fillText : js_string t -> number_t -> number_t -> unit meth\n\n  method fillText_withWidth : js_string t -> number_t -> number_t -> number_t -> unit meth\n\n  method strokeText : js_string t -> number_t -> number_t -> unit meth\n\n  method strokeText_withWidth :\n    js_string t -> number_t -> number_t -> number_t -> unit meth\n\n  method measureText : js_string t -> textMetrics t meth\n\n  method drawImage : imageElement t -> number_t -> number_t -> unit meth\n\n  method drawImage_withSize :\n    imageElement t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method drawImage_full :\n       imageElement t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> unit meth\n\n  method drawImage_fromCanvas : canvasElement t -> number_t -> number_t -> unit meth\n\n  method drawImage_fromCanvasWithSize :\n    canvasElement t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method drawImage_fullFromCanvas :\n       canvasElement t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> unit meth\n\n  method drawImage_fromVideoWithVideo :\n    videoElement t -> number_t -> number_t -> unit meth\n\n  method drawImage_fromVideoWithSize :\n    videoElement t -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method drawImage_fullFromVideo :\n       videoElement t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> unit meth\n\n  method createImageData : int -> int -> imageData t meth\n\n  method getImageData : number_t -> number_t -> number_t -> number_t -> imageData t meth\n\n  method putImageData : imageData t -> number_t -> number_t -> unit meth\nend\n\nand canvasGradient = object\n  method addColorStop : number_t -> js_string t -> unit meth\nend\n\nand textMetrics = object\n  method width : number_t readonly_prop\nend\n\nand imageData = object\n  method width : int readonly_prop\n\n  method height : int readonly_prop\n\n  method data : canvasPixelArray t readonly_prop\nend\n\nand canvasPixelArray = object\n  method length : int readonly_prop\nend\n\nexternal pixel_get : canvasPixelArray t -> int -> int = \"caml_js_get\"\n\nexternal pixel_set : canvasPixelArray t -> int -> int -> unit = \"caml_js_set\"\n\nclass type range = object\n  method collapsed : bool t readonly_prop\n\n  method startOffset : int readonly_prop\n\n  method endOffset : int readonly_prop\n\n  method startContainer : Dom.node t readonly_prop\n\n  method endContainer : Dom.node t readonly_prop\n\n  method setStart : Dom.node t -> int -> unit meth\n\n  method setEnd : Dom.node t -> int -> unit meth\n\n  method setStartBefore : Dom.node t -> unit meth\n\n  method setEndBefore : Dom.node t -> unit meth\n\n  method setStartAfter : Dom.node t -> unit meth\n\n  method setEndAfter : Dom.node t -> unit meth\n\n  method selectNode : Dom.node t -> unit meth\n\n  method selectNodeContents : Dom.node t -> unit meth\n\n  method collapse : bool t -> unit meth\n\n  method cloneContents : Dom.documentFragment t meth\n\n  method extractContents : Dom.documentFragment t meth\n\n  method deleteContents : unit meth\n\n  method insertNode : Dom.node t -> unit meth\n\n  method surroundContents : Dom.node t -> unit meth\n\n  method cloneRange : range t meth\n\n  method toString : js_string t meth\nend\n\n(** Information on current selection *)\nclass type selection = object\n  method anchorNode : Dom.node t readonly_prop\n\n  method anchorOffset : int readonly_prop\n\n  method focusNode : Dom.node t readonly_prop\n\n  method focusOffset : int readonly_prop\n\n  method isCollapsed : bool t readonly_prop\n\n  method rangeCount : int readonly_prop\n\n  method getRangeAt : int -> range t meth\n\n  method collapse : bool t -> unit meth\n\n  method extend : Dom.node t -> int -> unit meth\n\n  method modify : js_string t -> js_string t -> js_string t -> unit meth\n\n  method collapseToStart : unit meth\n\n  method collapseToEnd : unit meth\n\n  method selectAllChildren : Dom.node t -> unit meth\n\n  method addRange : range t -> unit meth\n\n  method removeRange : range t -> unit meth\n\n  method removeAllRanges : unit meth\n\n  method deleteFromDocument : unit meth\n\n  method containsNode : Dom.node t -> bool t -> bool t meth\n\n  method toString : js_string t meth\nend\n\nclass type document = object\n  inherit [element] Dom.document\n\n  inherit nodeSelector\n\n  inherit eventTarget\n\n  method title : js_string t prop\n\n  method referrer : js_string t readonly_prop\n\n  method domain : js_string t prop\n\n  method _URL : js_string t readonly_prop\n\n  method head : headElement t prop\n\n  method body : bodyElement t prop\n\n  method documentElement : htmlElement t readonly_prop\n\n  method images : imageElement collection t readonly_prop\n\n  method applets : element collection t readonly_prop\n\n  method links : element collection t readonly_prop\n\n  method forms : formElement collection t readonly_prop\n\n  method anchors : element collection t readonly_prop\n\n  method cookie : js_string t prop\n\n  method designMode : js_string t prop\n\n  method open_ : unit meth\n\n  method close : unit meth\n\n  method write : js_string t -> unit meth\n\n  method execCommand : js_string t -> bool t -> js_string t opt -> unit meth\n\n  method createRange : range t meth\n\n  method readyState : js_string t readonly_prop\n\n  method getElementsByClassName : js_string t -> element Dom.nodeList t meth\n\n  method getElementsByName : js_string t -> element Dom.nodeList t meth\n\n  method activeElement : element t opt readonly_prop\n\n  method hidden : bool t readonly_prop\n\n  method onfullscreenchange : (document t, event t) event_listener writeonly_prop\n\n  method onwebkitfullscreenchange : (document t, event t) event_listener writeonly_prop\n\n  inherit eventTarget\nend\n\ntype interval_id\n\ntype timeout_id\n\ntype animation_frame_request_id\n\nclass type location = object\n  method href : js_string t prop\n\n  method protocol : js_string t prop\n\n  method host : js_string t prop\n\n  method hostname : js_string t prop\n\n  method origin : js_string t optdef readonly_prop\n\n  method port : js_string t prop\n\n  method pathname : js_string t prop\n\n  method search : js_string t prop\n\n  method hash : js_string t prop\n\n  method assign : js_string t -> unit meth\n\n  method replace : js_string t -> unit meth\n\n  method reload : unit meth\nend\n\nlet location_origin (loc : location t) =\n  Optdef.case\n    loc##.origin\n    (fun () ->\n      let protocol = loc##.protocol in\n      let hostname = loc##.hostname in\n      let port = loc##.port in\n      if protocol##.length = 0 && hostname##.length = 0\n      then Js.string \"\"\n      else\n        let origin = protocol##concat_2 (Js.string \"//\") hostname in\n        if port##.length > 0 then origin##concat_2 (Js.string \":\") loc##.port else origin)\n    (fun o -> o)\n\nclass type history = object\n  method length : int readonly_prop\n\n  method state : Js.Unsafe.any readonly_prop\n\n  method go : int opt -> unit meth\n\n  method back : unit meth\n\n  method forward : unit meth\n\n  method pushState : 'a. 'a -> js_string t -> js_string t opt -> unit meth\n\n  method replaceState : 'a. 'a -> js_string t -> js_string t opt -> unit meth\nend\n\nclass type undoManager = object end\n\nclass type navigator = object\n  method appCodeName : js_string t readonly_prop\n\n  method appName : js_string t readonly_prop\n\n  method appVersion : js_string t readonly_prop\n\n  method cookieEnabled : bool t readonly_prop\n\n  method onLine : bool t readonly_prop\n\n  method platform : js_string t readonly_prop\n\n  method vendor : js_string t readonly_prop\n\n  method userAgent : js_string t readonly_prop\n\n  method language : js_string t optdef readonly_prop\n\n  method userLanguage : js_string t optdef readonly_prop\n\n  method maxTouchPoints : int readonly_prop\nend\n\nclass type screen = object\n  method width : int readonly_prop\n\n  method height : int readonly_prop\n\n  method availWidth : int readonly_prop\n\n  method availHeight : int readonly_prop\nend\n\nclass type applicationCache = object\n  method status : int readonly_prop\n\n  method update : unit meth\n\n  method abort : unit meth\n\n  method swapCache : unit meth\n\n  method onchecking : (applicationCache t, event t) event_listener prop\n\n  method onerror : (applicationCache t, event t) event_listener prop\n\n  method onnoupdate : (applicationCache t, event t) event_listener prop\n\n  method ondownloading : (applicationCache t, event t) event_listener prop\n\n  method onprogress : (applicationCache t, event t) event_listener prop\n\n  method onupdateready : (applicationCache t, event t) event_listener prop\n\n  method oncached : (applicationCache t, event t) event_listener prop\n\n  method onobsolete : (applicationCache t, event t) event_listener prop\n\n  inherit eventTarget\nend\n\nclass type _URL = object\n  method createObjectURL : #File.blob t -> js_string t meth\n\n  method revokeObjectURL : js_string t -> unit meth\nend\n\nclass type window = object\n  inherit eventTarget\n\n  method document : document t readonly_prop\n\n  method applicationCache : applicationCache t readonly_prop\n\n  method name : js_string t prop\n\n  method location : location t readonly_prop\n\n  method history : history t readonly_prop\n\n  method undoManager : undoManager t readonly_prop\n\n  method navigator : navigator t readonly_prop\n\n  method getSelection : selection t meth\n\n  method close : unit meth\n\n  method closed : bool t readonly_prop\n\n  method stop : unit meth\n\n  method focus : unit meth\n\n  method blur : unit meth\n\n  method scroll : int -> int -> unit meth\n\n  method scrollBy : int -> int -> unit meth\n\n  method sessionStorage : storage t optdef readonly_prop\n\n  method localStorage : storage t optdef readonly_prop\n\n  method top : window t readonly_prop\n\n  method parent : window t readonly_prop\n\n  method frameElement : element t opt readonly_prop\n\n  method open_ : js_string t -> js_string t -> js_string t opt -> window t opt meth\n\n  method alert : js_string t -> unit meth\n\n  method confirm : js_string t -> bool t meth\n\n  method prompt : js_string t -> js_string t -> js_string t opt meth\n\n  method print : unit meth\n\n  method setInterval : (unit -> unit) Js.callback -> number_t -> interval_id meth\n\n  method clearInterval : interval_id -> unit meth\n\n  method setTimeout : (unit -> unit) Js.callback -> number_t -> timeout_id meth\n\n  method clearTimeout : timeout_id -> unit meth\n\n  method requestAnimationFrame :\n    (number_t -> unit) Js.callback -> animation_frame_request_id meth\n\n  method cancelAnimationFrame : animation_frame_request_id -> unit meth\n\n  method screen : screen t readonly_prop\n\n  method innerWidth : int readonly_prop\n\n  method innerHeight : int readonly_prop\n\n  method outerWidth : int readonly_prop\n\n  method outerHeight : int readonly_prop\n\n  method getComputedStyle : #element t -> cssStyleDeclaration t meth\n\n  method getComputedStyle_pseudoElt :\n    #element t -> js_string t -> cssStyleDeclaration t meth\n\n  method atob : js_string t -> js_string t meth\n\n  method btoa : js_string t -> js_string t meth\n\n  method onload : (window t, event t) event_listener prop\n\n  method onunload : (window t, event t) event_listener prop\n\n  method onbeforeunload : (window t, event t) event_listener prop\n\n  method onblur : (window t, focusEvent t) event_listener prop\n\n  method onfocus : (window t, focusEvent t) event_listener prop\n\n  method onresize : (window t, event t) event_listener prop\n\n  method onorientationchange : (window t, event t) event_listener prop\n\n  method onpopstate : (window t, popStateEvent t) event_listener prop\n\n  method onhashchange : (window t, hashChangeEvent t) event_listener prop\n\n  method ononline : (window t, event t) event_listener writeonly_prop\n\n  method onoffline : (window t, event t) event_listener writeonly_prop\n\n  method _URL : _URL t readonly_prop\n\n  method devicePixelRatio : number_t readonly_prop\nend\n\nlet window : window t = Js.Unsafe.global\n\n(* The toplevel object *)\n\nlet document = window##.document\n\nlet getElementById id =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> raise Not_found)\n    (fun pnode -> pnode)\n\nlet getElementById_exn id =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> failwith (Printf.sprintf \"getElementById_exn: %S not found\" id))\n    (fun pnode -> pnode)\n\nlet getElementById_opt id = Js.Opt.to_option (document##getElementById (Js.string id))\n\nlet getElementById_coerce id coerce =\n  Js.Opt.case\n    (document##getElementById (Js.string id))\n    (fun () -> None)\n    (fun e -> Js.Opt.to_option (coerce e))\n\n(****)\n\nclass type frameSetElement = object\n  inherit element\n\n  method cols : js_string t prop\n\n  method rows : js_string t prop\nend\n\nclass type frameElement = object\n  inherit element\n\n  method frameBorder : js_string t prop\n\n  method longDesc : js_string t prop\n\n  method marginHeight : js_string t prop\n\n  method marginWidth : js_string t prop\n\n  method name : js_string t prop\n\n  method noResize : bool t prop\n\n  method scrolling : js_string t prop\n\n  method src : js_string t prop\n\n  method contentDocument : document t opt readonly_prop\nend\n\nclass type iFrameElement = object\n  inherit element\n\n  method frameBorder : js_string t prop\n\n  method height : js_string t prop\n\n  method width : js_string t prop\n\n  method longDesc : js_string t prop\n\n  method marginHeight : js_string t prop\n\n  method marginWidth : js_string t prop\n\n  method name : js_string t prop\n\n  method scrolling : js_string t prop\n\n  method src : js_string t prop\n\n  method contentDocument : document t opt readonly_prop\n\n  method contentWindow : window t readonly_prop\nend\n\n(****)\n\n(*XXX Should provide creation functions a la lablgtk... *)\n\nlet opt_iter x f =\n  match x with\n  | None -> ()\n  | Some v -> f v\n\nlet createElement (doc : document t) name = doc##createElement (Js.string name)\n\nlet unsafeCreateElement doc name = Js.Unsafe.coerce (createElement doc name)\n\nlet createElementSyntax = ref `Unknown\n\nlet rec unsafeCreateElementEx ?_type ?name doc elt =\n  if Poly.(_type = None) && Poly.(name = None)\n  then Js.Unsafe.coerce (createElement doc elt)\n  else\n    match !createElementSyntax with\n    | `Standard ->\n        let res = Js.Unsafe.coerce (createElement doc elt) in\n        opt_iter _type (fun t -> res##._type := t);\n        opt_iter name (fun n -> res##.name := n);\n        res\n    | `Extended ->\n        let a = new%js Js.array_empty in\n        ignore (a##push_2 (Js.string \"<\") (Js.string elt));\n        opt_iter _type (fun t ->\n            ignore (a##push_3 (Js.string \" type=\\\"\") (html_escape t) (Js.string \"\\\"\")));\n        opt_iter name (fun n ->\n            ignore (a##push_3 (Js.string \" name=\\\"\") (html_escape n) (Js.string \"\\\"\")));\n        ignore (a##push (Js.string \">\"));\n        Js.Unsafe.coerce (doc##createElement (a##join (Js.string \"\")))\n    | `Unknown ->\n        createElementSyntax :=\n          if try\n               let el : inputElement Js.t =\n                 Js.Unsafe.coerce\n                   (document##createElement (Js.string \"<input name=\\\"x\\\">\"))\n               in\n               Js.equals el##.tagName##toLowerCase (Js.string \"input\")\n               && Js.equals el##.name (Js.string \"x\")\n             with _ -> false\n          then `Extended\n          else `Standard;\n        unsafeCreateElementEx ?_type ?name doc elt\n\nlet createHtml doc : htmlElement t = unsafeCreateElement doc \"html\"\n\nlet createHead doc : headElement t = unsafeCreateElement doc \"head\"\n\nlet createLink doc : linkElement t = unsafeCreateElement doc \"link\"\n\nlet createTitle doc : titleElement t = unsafeCreateElement doc \"title\"\n\nlet createMeta doc : metaElement t = unsafeCreateElement doc \"meta\"\n\nlet createBase doc : baseElement t = unsafeCreateElement doc \"base\"\n\nlet createStyle doc : styleElement t = unsafeCreateElement doc \"style\"\n\nlet createBody doc : bodyElement t = unsafeCreateElement doc \"body\"\n\nlet createForm doc : formElement t = unsafeCreateElement doc \"form\"\n\nlet createOptgroup doc : optGroupElement t = unsafeCreateElement doc \"optgroup\"\n\nlet createOption doc : optionElement t = unsafeCreateElement doc \"option\"\n\nlet createSelect ?_type ?name doc : selectElement t =\n  unsafeCreateElementEx ?_type ?name doc \"select\"\n\nlet createInput ?_type ?name doc : inputElement t =\n  unsafeCreateElementEx ?_type ?name doc \"input\"\n\nlet createTextarea ?_type ?name doc : textAreaElement t =\n  unsafeCreateElementEx ?_type ?name doc \"textarea\"\n\nlet createButton ?_type ?name doc : buttonElement t =\n  unsafeCreateElementEx ?_type ?name doc \"button\"\n\nlet createLabel doc : labelElement t = unsafeCreateElement doc \"label\"\n\nlet createFieldset doc : fieldSetElement t = unsafeCreateElement doc \"fieldset\"\n\nlet createLegend doc : legendElement t = unsafeCreateElement doc \"legend\"\n\nlet createUl doc : uListElement t = unsafeCreateElement doc \"ul\"\n\nlet createOl doc : oListElement t = unsafeCreateElement doc \"ol\"\n\nlet createDl doc : dListElement t = unsafeCreateElement doc \"dl\"\n\nlet createLi doc : liElement t = unsafeCreateElement doc \"li\"\n\nlet createDialog doc : dialogElement t = unsafeCreateElement doc \"dialog\"\n\nlet createDiv doc : divElement t = unsafeCreateElement doc \"div\"\n\nlet createEmbed doc : embedElement t = unsafeCreateElement doc \"embed\"\n\nlet createP doc : paragraphElement t = unsafeCreateElement doc \"p\"\n\nlet createH1 doc : headingElement t = unsafeCreateElement doc \"h1\"\n\nlet createH2 doc : headingElement t = unsafeCreateElement doc \"h2\"\n\nlet createH3 doc : headingElement t = unsafeCreateElement doc \"h3\"\n\nlet createH4 doc : headingElement t = unsafeCreateElement doc \"h4\"\n\nlet createH5 doc : headingElement t = unsafeCreateElement doc \"h5\"\n\nlet createH6 doc : headingElement t = unsafeCreateElement doc \"h6\"\n\nlet createQ doc : quoteElement t = unsafeCreateElement doc \"q\"\n\nlet createBlockquote doc : quoteElement t = unsafeCreateElement doc \"blockquote\"\n\nlet createPre doc : preElement t = unsafeCreateElement doc \"pre\"\n\nlet createBr doc : brElement t = unsafeCreateElement doc \"br\"\n\nlet createHr doc : hrElement t = unsafeCreateElement doc \"hr\"\n\nlet createIns doc : modElement t = unsafeCreateElement doc \"ins\"\n\nlet createDel doc : modElement t = unsafeCreateElement doc \"del\"\n\nlet createA doc : anchorElement t = unsafeCreateElement doc \"a\"\n\nlet createImg doc : imageElement t = unsafeCreateElement doc \"img\"\n\nlet createObject doc : objectElement t = unsafeCreateElement doc \"object\"\n\nlet createParam doc : paramElement t = unsafeCreateElement doc \"param\"\n\nlet createMap doc : mapElement t = unsafeCreateElement doc \"map\"\n\nlet createArea doc : areaElement t = unsafeCreateElement doc \"area\"\n\nlet createScript doc : scriptElement t = unsafeCreateElement doc \"script\"\n\nlet createTable doc : tableElement t = unsafeCreateElement doc \"table\"\n\nlet createCaption doc : tableCaptionElement t = unsafeCreateElement doc \"caption\"\n\nlet createCol doc : tableColElement t = unsafeCreateElement doc \"col\"\n\nlet createColgroup doc : tableColElement t = unsafeCreateElement doc \"colgroup\"\n\nlet createThead doc : tableSectionElement t = unsafeCreateElement doc \"thead\"\n\nlet createTfoot doc : tableSectionElement t = unsafeCreateElement doc \"tfoot\"\n\nlet createTbody doc : tableSectionElement t = unsafeCreateElement doc \"tbody\"\n\nlet createTr doc : tableRowElement t = unsafeCreateElement doc \"tr\"\n\nlet createTh doc : tableCellElement t = unsafeCreateElement doc \"th\"\n\nlet createTd doc : tableCellElement t = unsafeCreateElement doc \"td\"\n\nlet createSub doc = createElement doc \"sub\"\n\nlet createSup doc = createElement doc \"sup\"\n\nlet createSpan doc = createElement doc \"span\"\n\nlet createTt doc = createElement doc \"tt\"\n\nlet createI doc = createElement doc \"i\"\n\nlet createB doc = createElement doc \"b\"\n\nlet createBig doc = createElement doc \"big\"\n\nlet createSmall doc = createElement doc \"small\"\n\nlet createEm doc = createElement doc \"em\"\n\nlet createStrong doc = createElement doc \"strong\"\n\nlet createCite doc = createElement doc \"cite\"\n\nlet createDfn doc = createElement doc \"dfn\"\n\nlet createCode doc = createElement doc \"code\"\n\nlet createSamp doc = createElement doc \"samp\"\n\nlet createKbd doc = createElement doc \"kbd\"\n\nlet createVar doc = createElement doc \"var\"\n\nlet createAbbr doc = createElement doc \"abbr\"\n\nlet createDd doc = createElement doc \"dd\"\n\nlet createDt doc = createElement doc \"dt\"\n\nlet createNoscript doc = createElement doc \"noscript\"\n\nlet createAddress doc = createElement doc \"address\"\n\nlet createFrameset doc : frameSetElement t = unsafeCreateElement doc \"frameset\"\n\nlet createFrame doc : frameElement t = unsafeCreateElement doc \"frame\"\n\nlet createIframe doc : iFrameElement t = unsafeCreateElement doc \"iframe\"\n\nlet createAudio doc : audioElement t = unsafeCreateElement doc \"audio\"\n\nlet createVideo doc : audioElement t = unsafeCreateElement doc \"video\"\n\nexception Canvas_not_available\n\nlet createCanvas doc : canvasElement t =\n  let c = unsafeCreateElement doc \"canvas\" in\n  if not (Opt.test c##.getContext) then raise Canvas_not_available;\n  c\n\nlet html_element : htmlElement t constr = Js.Unsafe.global##._HTMLElement\n\nmodule CoerceTo = struct\n  let element : #Dom.node Js.t -> element Js.t Js.opt =\n    if not (Js.Optdef.test (def html_element))\n    then\n      (* ie < 9 does not have HTMLElement: we have to cheat to check\n         that something is an html element *)\n      fun e ->\n      if not (Js.Optdef.test (def (Js.Unsafe.coerce e)##.innerHTML))\n      then Js.null\n      else Js.some (Js.Unsafe.coerce e)\n    else\n      fun e ->\n      if Js.instanceof e html_element then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let unsafeCoerce tag (e : #element t) =\n    if Js.equals e##.tagName##toLowerCase (Js.string tag)\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let a e = unsafeCoerce \"a\" e\n\n  let area e = unsafeCoerce \"area\" e\n\n  let base e = unsafeCoerce \"base\" e\n\n  let blockquote e = unsafeCoerce \"blockquote\" e\n\n  let body e = unsafeCoerce \"body\" e\n\n  let br e = unsafeCoerce \"br\" e\n\n  let button e = unsafeCoerce \"button\" e\n\n  let canvas e = unsafeCoerce \"canvas\" e\n\n  let caption e = unsafeCoerce \"caption\" e\n\n  let col e = unsafeCoerce \"col\" e\n\n  let colgroup e = unsafeCoerce \"colgroup\" e\n\n  let del e = unsafeCoerce \"del\" e\n\n  let div e = unsafeCoerce \"div\" e\n\n  let dl e = unsafeCoerce \"dl\" e\n\n  let fieldset e = unsafeCoerce \"fieldset\" e\n\n  let embed e = unsafeCoerce \"embed\" e\n\n  let form e = unsafeCoerce \"form\" e\n\n  let frameset e = unsafeCoerce \"frameset\" e\n\n  let frame e = unsafeCoerce \"frame\" e\n\n  let h1 e = unsafeCoerce \"h1\" e\n\n  let h2 e = unsafeCoerce \"h2\" e\n\n  let h3 e = unsafeCoerce \"h3\" e\n\n  let h4 e = unsafeCoerce \"h4\" e\n\n  let h5 e = unsafeCoerce \"h5\" e\n\n  let h6 e = unsafeCoerce \"h6\" e\n\n  let head e = unsafeCoerce \"head\" e\n\n  let hr e = unsafeCoerce \"hr\" e\n\n  let html e = unsafeCoerce \"html\" e\n\n  let iframe e = unsafeCoerce \"iframe\" e\n\n  let img e = unsafeCoerce \"img\" e\n\n  let input e = unsafeCoerce \"input\" e\n\n  let ins e = unsafeCoerce \"ins\" e\n\n  let label e = unsafeCoerce \"label\" e\n\n  let legend e = unsafeCoerce \"legend\" e\n\n  let li e = unsafeCoerce \"li\" e\n\n  let link e = unsafeCoerce \"link\" e\n\n  let map e = unsafeCoerce \"map\" e\n\n  let meta e = unsafeCoerce \"meta\" e\n\n  let _object e = unsafeCoerce \"object\" e\n\n  let ol e = unsafeCoerce \"ol\" e\n\n  let optgroup e = unsafeCoerce \"optgroup\" e\n\n  let option e = unsafeCoerce \"option\" e\n\n  let p e = unsafeCoerce \"p\" e\n\n  let param e = unsafeCoerce \"param\" e\n\n  let pre e = unsafeCoerce \"pre\" e\n\n  let q e = unsafeCoerce \"q\" e\n\n  let script e = unsafeCoerce \"script\" e\n\n  let select e = unsafeCoerce \"select\" e\n\n  let style e = unsafeCoerce \"style\" e\n\n  let table e = unsafeCoerce \"table\" e\n\n  let tbody e = unsafeCoerce \"tbody\" e\n\n  let td e = unsafeCoerce \"td\" e\n\n  let textarea e = unsafeCoerce \"textarea\" e\n\n  let tfoot e = unsafeCoerce \"tfoot\" e\n\n  let th e = unsafeCoerce \"th\" e\n\n  let thead e = unsafeCoerce \"thead\" e\n\n  let title e = unsafeCoerce \"title\" e\n\n  let tr e = unsafeCoerce \"tr\" e\n\n  let ul e = unsafeCoerce \"ul\" e\n\n  let audio e = unsafeCoerce \"audio\" e\n\n  let video e = unsafeCoerce \"video\" e\n\n  let unsafeCoerceEvent constr (ev : #event t) =\n    if Js.Optdef.test (def constr) && Js.instanceof ev constr\n    then Js.some (Js.Unsafe.coerce ev)\n    else Js.null\n\n  let mouseEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MouseEvent ev\n\n  let keyboardEvent ev = unsafeCoerceEvent Js.Unsafe.global##._KeyboardEvent ev\n\n  let wheelEvent ev = unsafeCoerceEvent Js.Unsafe.global##._WheelEvent ev\n\n  let mouseScrollEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MouseScrollEvent ev\n\n  let popStateEvent ev = unsafeCoerceEvent Js.Unsafe.global##._PopStateEvent ev\n\n  let messageEvent ev = unsafeCoerceEvent Js.Unsafe.global##._MessageEvent ev\nend\n\n(****)\n\nlet eventTarget = Dom.eventTarget\n\nlet eventRelatedTarget (e : #mouseEvent t) =\n  Optdef.get e##.relatedTarget (fun () ->\n      match Js.to_string e##._type with\n      | \"mouseover\" -> Optdef.get e##.fromElement (fun () -> assert false)\n      | \"mouseout\" -> Optdef.get e##.toElement (fun () -> assert false)\n      | _ -> Js.null)\n\nlet eventAbsolutePosition' (e : #mouseEvent t) =\n  let body = document##.body in\n  let html = document##.documentElement in\n  ( e##.clientX + body##.scrollLeft + html##.scrollLeft\n  , e##.clientY + body##.scrollTop + html##.scrollTop )\n\nlet eventAbsolutePosition (e : #mouseEvent t) =\n  Optdef.case\n    e##.pageX\n    (fun () -> eventAbsolutePosition' e)\n    (fun x -> Optdef.case e##.pageY (fun () -> eventAbsolutePosition' e) (fun y -> x, y))\n\nlet elementClientPosition (e : #element t) =\n  let r = e##getBoundingClientRect in\n  let body = document##.body in\n  let html = document##.documentElement in\n  ( truncate (Js.to_float r##.left) - body##.clientLeft - html##.clientLeft\n  , truncate (Js.to_float r##.top) - body##.clientTop - html##.clientTop )\n\nlet getDocumentScroll () =\n  let body = document##.body in\n  let html = document##.documentElement in\n  body##.scrollLeft + html##.scrollLeft, body##.scrollTop + html##.scrollTop\n\nlet buttonPressed (ev : #mouseEvent Js.t) =\n  Js.Optdef.case\n    ev##.which\n    (fun () ->\n      match ev##.button with\n      | 1 -> Left_button\n      | 2 -> Right_button\n      | 4 -> Middle_button\n      | _ -> No_button)\n    (fun x -> x)\n\nlet addMousewheelEventListenerWithOptions e ?capture ?once ?passive h =\n  addEventListenerWithOptions\n    ?capture\n    ?once\n    ?passive\n    e\n    Event.wheel\n    (handler (fun (e : mousewheelEvent t) ->\n         let dx = -Optdef.get e##.wheelDeltaX (fun () -> 0) / 40 in\n         let dy = -Optdef.get e##.wheelDeltaY (fun () -> e##.wheelDelta) / 40 in\n         h (e :> mouseEvent t) ~dx ~dy))\n\nlet addMousewheelEventListener e h capt =\n  addMousewheelEventListenerWithOptions ~capture:capt e h\n\n(*****)\n\nmodule Keyboard_code = struct\n  type t =\n    | Unidentified\n    (* Alphabetic Characters *)\n    | KeyA\n    | KeyB\n    | KeyC\n    | KeyD\n    | KeyE\n    | KeyF\n    | KeyG\n    | KeyH\n    | KeyI\n    | KeyJ\n    | KeyK\n    | KeyL\n    | KeyM\n    | KeyN\n    | KeyO\n    | KeyP\n    | KeyQ\n    | KeyR\n    | KeyS\n    | KeyT\n    | KeyU\n    | KeyV\n    | KeyW\n    | KeyX\n    | KeyY\n    | KeyZ\n    (* Digits *)\n    | Digit0\n    | Digit1\n    | Digit2\n    | Digit3\n    | Digit4\n    | Digit5\n    | Digit6\n    | Digit7\n    | Digit8\n    | Digit9\n    | Minus\n    | Equal\n    (* Whitespace *)\n    | Tab\n    | Enter\n    | Space\n    (* Editing *)\n    | Escape\n    | Backspace\n    | Insert\n    | Delete\n    | CapsLock\n    (* Misc Printable *)\n    | BracketLeft\n    | BracketRight\n    | Semicolon\n    | Quote\n    | Backquote\n    | Backslash\n    | Comma\n    | Period\n    | Slash\n    (* Function keys *)\n    | F1\n    | F2\n    | F3\n    | F4\n    | F5\n    | F6\n    | F7\n    | F8\n    | F9\n    | F10\n    | F11\n    | F12\n    (* Numpad keys *)\n    | Numpad0\n    | Numpad1\n    | Numpad2\n    | Numpad3\n    | Numpad4\n    | Numpad5\n    | Numpad6\n    | Numpad7\n    | Numpad8\n    | Numpad9\n    | NumpadMultiply\n    | NumpadSubtract\n    | NumpadAdd\n    | NumpadDecimal\n    | NumpadEqual\n    | NumpadEnter\n    | NumpadDivide\n    | NumLock\n    (* Modifier keys *)\n    | ControlLeft\n    | ControlRight\n    | MetaLeft\n    | MetaRight\n    | ShiftLeft\n    | ShiftRight\n    | AltLeft\n    | AltRight\n    (* Arrow keys *)\n    | ArrowLeft\n    | ArrowRight\n    | ArrowUp\n    | ArrowDown\n    (* Navigation *)\n    | PageUp\n    | PageDown\n    | Home\n    | End\n    (* Sound *)\n    | VolumeMute\n    | VolumeDown\n    | VolumeUp\n    (* Media *)\n    | MediaTrackPrevious\n    | MediaTrackNext\n    | MediaPlayPause\n    | MediaStop\n    (* Browser special *)\n    | ContextMenu\n    | BrowserSearch\n    | BrowserHome\n    | BrowserFavorites\n    | BrowserRefresh\n    | BrowserStop\n    | BrowserForward\n    | BrowserBack\n    (* Misc *)\n    | OSLeft\n    | OSRight\n    | ScrollLock\n    | PrintScreen\n    | IntlBackslash\n    | IntlYen\n    | Pause\n\n  let try_code v =\n    match Js.to_string v with\n    (* Alphabetic Characters *)\n    | \"KeyA\" -> KeyA\n    | \"KeyB\" -> KeyB\n    | \"KeyC\" -> KeyC\n    | \"KeyD\" -> KeyD\n    | \"KeyE\" -> KeyE\n    | \"KeyF\" -> KeyF\n    | \"KeyG\" -> KeyG\n    | \"KeyH\" -> KeyH\n    | \"KeyI\" -> KeyI\n    | \"KeyJ\" -> KeyJ\n    | \"KeyK\" -> KeyK\n    | \"KeyL\" -> KeyL\n    | \"KeyM\" -> KeyM\n    | \"KeyN\" -> KeyN\n    | \"KeyO\" -> KeyO\n    | \"KeyP\" -> KeyP\n    | \"KeyQ\" -> KeyQ\n    | \"KeyR\" -> KeyR\n    | \"KeyS\" -> KeyS\n    | \"KeyT\" -> KeyT\n    | \"KeyU\" -> KeyU\n    | \"KeyV\" -> KeyV\n    | \"KeyW\" -> KeyW\n    | \"KeyX\" -> KeyX\n    | \"KeyY\" -> KeyY\n    | \"KeyZ\" -> KeyZ\n    (* Digits *)\n    | \"Digit0\" -> Digit0\n    | \"Digit1\" -> Digit1\n    | \"Digit2\" -> Digit2\n    | \"Digit3\" -> Digit3\n    | \"Digit4\" -> Digit4\n    | \"Digit5\" -> Digit5\n    | \"Digit6\" -> Digit6\n    | \"Digit7\" -> Digit7\n    | \"Digit8\" -> Digit8\n    | \"Digit9\" -> Digit9\n    | \"Minus\" -> Minus\n    | \"Equal\" -> Equal\n    (* Whitespace *)\n    | \"Tab\" -> Tab\n    | \"Enter\" -> Enter\n    | \"Space\" -> Space\n    (* Editing *)\n    | \"Escape\" -> Escape\n    | \"Backspace\" -> Backspace\n    | \"Insert\" -> Insert\n    | \"Delete\" -> Delete\n    | \"CapsLock\" -> CapsLock\n    (* Misc Printable *)\n    | \"BracketLeft\" -> BracketLeft\n    | \"BracketRight\" -> BracketRight\n    | \"Semicolon\" -> Semicolon\n    | \"Quote\" -> Quote\n    | \"Backquote\" -> Backquote\n    | \"Backslash\" -> Backslash\n    | \"Comma\" -> Comma\n    | \"Period\" -> Period\n    | \"Slash\" -> Slash\n    (* Function keys *)\n    | \"F1\" -> F1\n    | \"F2\" -> F2\n    | \"F3\" -> F3\n    | \"F4\" -> F4\n    | \"F5\" -> F5\n    | \"F6\" -> F6\n    | \"F7\" -> F7\n    | \"F8\" -> F8\n    | \"F9\" -> F9\n    | \"F10\" -> F10\n    | \"F11\" -> F11\n    | \"F12\" -> F12\n    (* Numpad keys *)\n    | \"Numpad0\" -> Numpad0\n    | \"Numpad1\" -> Numpad1\n    | \"Numpad2\" -> Numpad2\n    | \"Numpad3\" -> Numpad3\n    | \"Numpad4\" -> Numpad4\n    | \"Numpad5\" -> Numpad5\n    | \"Numpad6\" -> Numpad6\n    | \"Numpad7\" -> Numpad7\n    | \"Numpad8\" -> Numpad8\n    | \"Numpad9\" -> Numpad9\n    | \"NumpadMultiply\" -> NumpadMultiply\n    | \"NumpadSubtract\" -> NumpadSubtract\n    | \"NumpadAdd\" -> NumpadAdd\n    | \"NumpadDecimal\" -> NumpadDecimal\n    | \"NumpadEqual\" -> NumpadEqual\n    | \"NumpadEnter\" -> NumpadEnter\n    | \"NumpadDivide\" -> NumpadDivide\n    | \"NumLock\" -> NumLock\n    (* Modifier keys *)\n    | \"ControlLeft\" -> ControlLeft\n    | \"ControlRight\" -> ControlRight\n    | \"MetaLeft\" -> MetaLeft\n    | \"MetaRight\" -> MetaRight\n    | \"ShiftLeft\" -> ShiftLeft\n    | \"ShiftRight\" -> ShiftRight\n    | \"AltLeft\" -> AltLeft\n    | \"AltRight\" -> AltRight\n    (* Arrow keys *)\n    | \"ArrowLeft\" -> ArrowLeft\n    | \"ArrowRight\" -> ArrowRight\n    | \"ArrowUp\" -> ArrowUp\n    | \"ArrowDown\" -> ArrowDown\n    (* Navigation *)\n    | \"PageUp\" -> PageUp\n    | \"PageDown\" -> PageDown\n    | \"Home\" -> Home\n    | \"End\" -> End\n    (* Sound *)\n    | \"VolumeMute\" -> VolumeMute\n    | \"VolumeDown\" -> VolumeDown\n    | \"VolumeUp\" -> VolumeUp\n    (* Media *)\n    | \"MediaTrackPrevious\" -> MediaTrackPrevious\n    | \"MediaTrackNext\" -> MediaTrackNext\n    | \"MediaPlayPause\" -> MediaPlayPause\n    | \"MediaStop\" -> MediaStop\n    (* Browser special *)\n    | \"ContextMenu\" -> ContextMenu\n    | \"BrowserSearch\" -> BrowserSearch\n    | \"BrowserHome\" -> BrowserHome\n    | \"BrowserFavorites\" -> BrowserFavorites\n    | \"BrowserRefresh\" -> BrowserRefresh\n    | \"BrowserStop\" -> BrowserStop\n    | \"BrowserForward\" -> BrowserForward\n    | \"BrowserBack\" -> BrowserBack\n    (* Misc *)\n    | \"OSLeft\" -> OSLeft\n    | \"OSRight\" -> OSRight\n    | \"ScrollLock\" -> ScrollLock\n    | \"PrintScreen\" -> PrintScreen\n    | \"IntlBackslash\" -> IntlBackslash\n    | \"IntlYen\" -> IntlYen\n    | \"Pause\" -> Pause\n    | _ -> Unidentified\n\n  let try_key_code_left = function\n    | 16 -> ShiftLeft\n    | 17 -> ControlLeft\n    | 18 -> AltLeft\n    | 91 -> MetaLeft\n    | _ -> Unidentified\n\n  let try_key_code_right = function\n    | 16 -> ShiftRight\n    | 17 -> ControlRight\n    | 18 -> AltRight\n    | 91 -> MetaRight\n    | _ -> Unidentified\n\n  let try_key_code_numpad = function\n    | 46 -> NumpadDecimal\n    | 45 -> Numpad0\n    | 35 -> Numpad1\n    | 40 -> Numpad2\n    | 34 -> Numpad3\n    | 37 -> Numpad4\n    | 12 -> Numpad5\n    | 39 -> Numpad6\n    | 36 -> Numpad7\n    | 38 -> Numpad8\n    | 33 -> Numpad9\n    | 13 -> NumpadEnter\n    | 111 -> NumpadDivide\n    | 107 -> NumpadAdd\n    | 109 -> NumpadSubtract\n    | 106 -> NumpadMultiply\n    | 110 -> NumpadDecimal\n    | 96 -> Numpad0\n    | 97 -> Numpad1\n    | 98 -> Numpad2\n    | 99 -> Numpad3\n    | 100 -> Numpad4\n    | 101 -> Numpad5\n    | 102 -> Numpad6\n    | 103 -> Numpad7\n    | 104 -> Numpad8\n    | 105 -> Numpad9\n    | _ -> Unidentified\n\n  let try_key_code_normal = function\n    | 27 -> Escape\n    | 112 -> F1\n    | 113 -> F2\n    | 114 -> F3\n    | 115 -> F4\n    | 116 -> F5\n    | 117 -> F6\n    | 118 -> F7\n    | 119 -> F8\n    | 120 -> F9\n    | 121 -> F10\n    | 122 -> F11\n    | 123 -> F12\n    | 42 -> PrintScreen\n    | 145 -> ScrollLock\n    | 19 -> Pause\n    | 192 -> Backquote\n    | 49 -> Digit1\n    | 50 -> Digit2\n    | 51 -> Digit3\n    | 52 -> Digit4\n    | 53 -> Digit5\n    | 54 -> Digit6\n    | 55 -> Digit7\n    | 56 -> Digit8\n    | 57 -> Digit9\n    | 48 -> Digit0\n    | 189 -> Minus\n    | 187 -> Equal\n    | 8 -> Backspace\n    | 9 -> Tab\n    | 81 -> KeyQ\n    | 87 -> KeyW\n    | 69 -> KeyE\n    | 82 -> KeyR\n    | 84 -> KeyT\n    | 89 -> KeyY\n    | 85 -> KeyU\n    | 73 -> KeyI\n    | 79 -> KeyO\n    | 80 -> KeyP\n    | 219 -> BracketLeft\n    | 221 -> BracketRight\n    | 220 -> Backslash\n    | 20 -> CapsLock\n    | 65 -> KeyA\n    | 83 -> KeyS\n    | 68 -> KeyD\n    | 70 -> KeyF\n    | 71 -> KeyG\n    | 72 -> KeyH\n    | 74 -> KeyJ\n    | 75 -> KeyK\n    | 76 -> KeyL\n    | 186 -> Semicolon\n    | 222 -> Quote\n    | 13 -> Enter\n    | 90 -> KeyZ\n    | 88 -> KeyX\n    | 67 -> KeyC\n    | 86 -> KeyV\n    | 66 -> KeyB\n    | 78 -> KeyN\n    | 77 -> KeyM\n    | 188 -> Comma\n    | 190 -> Period\n    | 191 -> Slash\n    | 32 -> Space\n    | 93 -> ContextMenu\n    | 45 -> Insert\n    | 36 -> Home\n    | 33 -> PageUp\n    | 46 -> Delete\n    | 35 -> End\n    | 34 -> PageDown\n    | 37 -> ArrowLeft\n    | 40 -> ArrowDown\n    | 39 -> ArrowRight\n    | 38 -> ArrowUp\n    | _ -> Unidentified\n\n  let make_unidentified _ = Unidentified\n\n  let try_next value f = function\n    | Unidentified -> Optdef.case value make_unidentified f\n    | v -> v\n\n  let run_next value f = function\n    | Unidentified -> f value\n    | v -> v\n\n  let get_key_code evt = evt##.keyCode\n\n  let try_key_location evt =\n    match evt##.location with\n    | 1 -> run_next (get_key_code evt) try_key_code_left\n    | 2 -> run_next (get_key_code evt) try_key_code_right\n    | 3 -> run_next (get_key_code evt) try_key_code_numpad\n    | _ -> make_unidentified\n\n  let ( |> ) x f = f x\n\n  let of_event evt =\n    Unidentified\n    |> try_next evt##.code try_code\n    |> try_key_location evt\n    |> run_next (get_key_code evt) try_key_code_normal\n\n  let of_key_code = try_key_code_normal\nend\n\nmodule Keyboard_key = struct\n  type t = Uchar.t option\n\n  let char_of_int value =\n    if 0 < value then try Some (Uchar.of_int value) with _ -> None else None\n\n  let empty_string _ = Js.string \"\"\n\n  let none _ = None\n\n  let of_event evt =\n    let key = Optdef.get evt##.key empty_string in\n    match key##.length with\n    | 0 -> Optdef.case evt##.charCode none char_of_int\n    | 1 -> char_of_int (int_of_float (Js.to_float (key##charCodeAt 0)))\n    | _ -> None\nend\n\n(*****)\n\nlet element : #Dom.element t -> element t = Js.Unsafe.coerce\n\ntype taggedElement =\n  | A of anchorElement t\n  | Area of areaElement t\n  | Audio of audioElement t\n  | Base of baseElement t\n  | Blockquote of quoteElement t\n  | Body of bodyElement t\n  | Br of brElement t\n  | Button of buttonElement t\n  | Canvas of canvasElement t\n  | Caption of tableCaptionElement t\n  | Col of tableColElement t\n  | Colgroup of tableColElement t\n  | Del of modElement t\n  | Dialog of dialogElement t\n  | Div of divElement t\n  | Dl of dListElement t\n  | Embed of embedElement t\n  | Fieldset of fieldSetElement t\n  | Form of formElement t\n  | Frameset of frameSetElement t\n  | Frame of frameElement t\n  | H1 of headingElement t\n  | H2 of headingElement t\n  | H3 of headingElement t\n  | H4 of headingElement t\n  | H5 of headingElement t\n  | H6 of headingElement t\n  | Head of headElement t\n  | Hr of hrElement t\n  | Html of htmlElement t\n  | Iframe of iFrameElement t\n  | Img of imageElement t\n  | Input of inputElement t\n  | Ins of modElement t\n  | Label of labelElement t\n  | Legend of legendElement t\n  | Li of liElement t\n  | Link of linkElement t\n  | Map of mapElement t\n  | Meta of metaElement t\n  | Object of objectElement t\n  | Ol of oListElement t\n  | Optgroup of optGroupElement t\n  | Option of optionElement t\n  | P of paragraphElement t\n  | Param of paramElement t\n  | Pre of preElement t\n  | Q of quoteElement t\n  | Script of scriptElement t\n  | Select of selectElement t\n  | Style of styleElement t\n  | Table of tableElement t\n  | Tbody of tableSectionElement t\n  | Td of tableCellElement t\n  | Textarea of textAreaElement t\n  | Tfoot of tableSectionElement t\n  | Th of tableCellElement t\n  | Thead of tableSectionElement t\n  | Title of titleElement t\n  | Tr of tableRowElement t\n  | Ul of uListElement t\n  | Video of videoElement t\n  | Other of element t\n\nlet other e = Other (e : #element t :> element t)\n\nlet tagged (e : #element t) =\n  let tag = Js.to_bytestring e##.tagName##toLowerCase in\n  if String.length tag = 0\n  then other e\n  else\n    match String.unsafe_get tag 0 with\n    | 'a' -> (\n        match tag with\n        | \"a\" -> A (Js.Unsafe.coerce e)\n        | \"area\" -> Area (Js.Unsafe.coerce e)\n        | \"audio\" -> Audio (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'b' -> (\n        match tag with\n        | \"base\" -> Base (Js.Unsafe.coerce e)\n        | \"blockquote\" -> Blockquote (Js.Unsafe.coerce e)\n        | \"body\" -> Body (Js.Unsafe.coerce e)\n        | \"br\" -> Br (Js.Unsafe.coerce e)\n        | \"button\" -> Button (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'c' -> (\n        match tag with\n        | \"canvas\" -> Canvas (Js.Unsafe.coerce e)\n        | \"caption\" -> Caption (Js.Unsafe.coerce e)\n        | \"col\" -> Col (Js.Unsafe.coerce e)\n        | \"colgroup\" -> Colgroup (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'd' -> (\n        match tag with\n        | \"del\" -> Del (Js.Unsafe.coerce e)\n        | \"div\" -> Div (Js.Unsafe.coerce e)\n        | \"dl\" -> Dl (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'e' -> (\n        match tag with\n        | \"embed\" -> Embed (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'f' -> (\n        match tag with\n        | \"fieldset\" -> Fieldset (Js.Unsafe.coerce e)\n        | \"form\" -> Form (Js.Unsafe.coerce e)\n        | \"frameset\" -> Frameset (Js.Unsafe.coerce e)\n        | \"frame\" -> Frame (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'h' -> (\n        match tag with\n        | \"h1\" -> H1 (Js.Unsafe.coerce e)\n        | \"h2\" -> H2 (Js.Unsafe.coerce e)\n        | \"h3\" -> H3 (Js.Unsafe.coerce e)\n        | \"h4\" -> H4 (Js.Unsafe.coerce e)\n        | \"h5\" -> H5 (Js.Unsafe.coerce e)\n        | \"h6\" -> H6 (Js.Unsafe.coerce e)\n        | \"head\" -> Head (Js.Unsafe.coerce e)\n        | \"hr\" -> Hr (Js.Unsafe.coerce e)\n        | \"html\" -> Html (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'i' -> (\n        match tag with\n        | \"iframe\" -> Iframe (Js.Unsafe.coerce e)\n        | \"img\" -> Img (Js.Unsafe.coerce e)\n        | \"input\" -> Input (Js.Unsafe.coerce e)\n        | \"ins\" -> Ins (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'l' -> (\n        match tag with\n        | \"label\" -> Label (Js.Unsafe.coerce e)\n        | \"legend\" -> Legend (Js.Unsafe.coerce e)\n        | \"li\" -> Li (Js.Unsafe.coerce e)\n        | \"link\" -> Link (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'm' -> (\n        match tag with\n        | \"map\" -> Map (Js.Unsafe.coerce e)\n        | \"meta\" -> Meta (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'o' -> (\n        match tag with\n        | \"object\" -> Object (Js.Unsafe.coerce e)\n        | \"ol\" -> Ol (Js.Unsafe.coerce e)\n        | \"optgroup\" -> Optgroup (Js.Unsafe.coerce e)\n        | \"option\" -> Option (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'p' -> (\n        match tag with\n        | \"p\" -> P (Js.Unsafe.coerce e)\n        | \"param\" -> Param (Js.Unsafe.coerce e)\n        | \"pre\" -> Pre (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'q' -> (\n        match tag with\n        | \"q\" -> Q (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 's' -> (\n        match tag with\n        | \"script\" -> Script (Js.Unsafe.coerce e)\n        | \"select\" -> Select (Js.Unsafe.coerce e)\n        | \"style\" -> Style (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 't' -> (\n        match tag with\n        | \"table\" -> Table (Js.Unsafe.coerce e)\n        | \"tbody\" -> Tbody (Js.Unsafe.coerce e)\n        | \"td\" -> Td (Js.Unsafe.coerce e)\n        | \"textarea\" -> Textarea (Js.Unsafe.coerce e)\n        | \"tfoot\" -> Tfoot (Js.Unsafe.coerce e)\n        | \"th\" -> Th (Js.Unsafe.coerce e)\n        | \"thead\" -> Thead (Js.Unsafe.coerce e)\n        | \"title\" -> Title (Js.Unsafe.coerce e)\n        | \"tr\" -> Tr (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'u' -> (\n        match tag with\n        | \"ul\" -> Ul (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | 'v' -> (\n        match tag with\n        | \"video\" -> Video (Js.Unsafe.coerce e)\n        | _ -> other e)\n    | _ -> other e\n\nlet opt_tagged e = Opt.case e (fun () -> None) (fun e -> Some (tagged e))\n\ntype taggedEvent =\n  | MouseEvent of mouseEvent t\n  | KeyboardEvent of keyboardEvent t\n  | MessageEvent of messageEvent t\n  | MousewheelEvent of mousewheelEvent t\n  | MouseScrollEvent of mouseScrollEvent t\n  | PopStateEvent of popStateEvent t\n  | OtherEvent of event t\n\nlet taggedEvent (ev : #event Js.t) =\n  Js.Opt.case\n    (CoerceTo.mouseEvent ev)\n    (fun () ->\n      Js.Opt.case\n        (CoerceTo.keyboardEvent ev)\n        (fun () ->\n          Js.Opt.case\n            (CoerceTo.wheelEvent ev)\n            (fun () ->\n              Js.Opt.case\n                (CoerceTo.mouseScrollEvent ev)\n                (fun () ->\n                  Js.Opt.case\n                    (CoerceTo.popStateEvent ev)\n                    (fun () ->\n                      Js.Opt.case\n                        (CoerceTo.messageEvent ev)\n                        (fun () -> OtherEvent (ev :> event t))\n                        (fun ev -> MessageEvent ev))\n                    (fun ev -> PopStateEvent ev))\n                (fun ev -> MouseScrollEvent ev))\n            (fun ev -> MousewheelEvent ev))\n        (fun ev -> KeyboardEvent ev))\n    (fun ev -> MouseEvent ev)\n\nlet opt_taggedEvent ev = Opt.case ev (fun () -> None) (fun ev -> Some (taggedEvent ev))\n\nlet stopPropagation ev =\n  let e = Js.Unsafe.coerce ev in\n  Optdef.case\n    e##.stopPropagation\n    (fun () -> e##.cancelBubble := Js._true)\n    (fun _ -> e##_stopPropagation)\n\nlet _requestAnimationFrame : (unit -> unit) Js.callback -> unit =\n  Js.Unsafe.pure_expr (fun _ ->\n      let w = Js.Unsafe.coerce window in\n      let l =\n        [ w##.requestAnimationFrame\n        ; w##.mozRequestAnimationFrame\n        ; w##.webkitRequestAnimationFrame\n        ; w##.oRequestAnimationFrame\n        ; w##.msRequestAnimationFrame\n        ]\n      in\n      try\n        let req = List.find (fun c -> Js.Optdef.test c) l in\n        fun callback -> Js.Unsafe.fun_call req [| Js.Unsafe.inject callback |]\n      with Not_found ->\n        let now () = Js.to_float (new%js Js.date_now)##getTime in\n        let last = ref (now ()) in\n        fun callback ->\n          let t = now () in\n          let dt = !last +. (1000. /. 60.) -. t in\n          let dt = if Poly.(dt < 0.) then 0. else dt in\n          last := t;\n          ignore (window##setTimeout callback (Js.float dt)))\n\n(****)\n\nlet hasPushState () = Js.Optdef.test (Js.Unsafe.coerce window##.history)##.pushState\n\nlet hasPlaceholder () =\n  let i = createInput document in\n  Js.Optdef.test (Js.Unsafe.coerce i)##.placeholder\n\nlet hasRequired () =\n  let i = createInput document in\n  Js.Optdef.test (Js.Unsafe.coerce i)##.required\n\nlet overflow_limit = 2147483_000.\n\n(* ms *)\n\ntype timeout_id_safe = timeout_id option ref\n\nlet setTimeout callback d : timeout_id_safe =\n  let id = ref None in\n  let rec loop d () =\n    let step, remain =\n      if Poly.(d > overflow_limit) then overflow_limit, d -. overflow_limit else d, 0.\n    in\n    let cb = if Poly.(remain = 0.) then callback else loop remain in\n    id := Some (window##setTimeout (Js.wrap_callback cb) (Js.float step))\n  in\n  loop d ();\n  id\n\nlet clearTimeout (id : timeout_id_safe) =\n  match !id with\n  | None -> ()\n  | Some x ->\n      id := None;\n      window##clearTimeout x\n\nlet js_array_of_collection (c : #element collection Js.t) : #element Js.t Js.js_array Js.t\n    =\n  Js.Unsafe.(meth_call (js_expr \"[].slice\") \"call\" [| inject c |])\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2011 Pierre Chambart\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen Dom_html\nopen! Import\n\nclass type formData = object\n  method append : js_string t -> js_string t -> unit meth\n\n  method append_blob : js_string t -> File.blob t -> unit meth\nend\n\nlet formData : formData t constr = Js.Unsafe.global##._FormData\n\nlet formData_form : (formElement t -> formData t) constr = Js.Unsafe.global##._FormData\n\ntype form_elt =\n  [ `String of js_string t\n  | `File of File.file t\n  ]\n\ntype form_contents =\n  [ `Fields of (string * form_elt) list ref\n  | `FormData of formData t\n  ]\n\nlet rec filter_map f = function\n  | [] -> []\n  | v :: q -> (\n      match f v with\n      | None -> filter_map f q\n      | Some v' -> v' :: filter_map f q)\n\nclass type submittableElement = object\n  method disabled : bool t prop\n\n  method name : js_string t readonly_prop\n\n  method value : js_string t prop\nend\n\nlet have_content (elt : submittableElement t) =\n  elt##.name##.length > 0 && not (Js.to_bool elt##.disabled)\n\nlet get_textarea_val (elt : textAreaElement t) =\n  if have_content (elt :> submittableElement t)\n  then\n    let name = to_string elt##.name in\n    [ name, `String elt##.value ]\n  else []\n\nlet get_select_val (elt : selectElement t) =\n  if have_content (elt :> submittableElement t)\n  then\n    let name = to_string elt##.name in\n    if to_bool elt##.multiple\n    then\n      let options =\n        Array.init elt##.options##.length (fun i -> Opt.to_option (elt##.options##item i))\n      in\n      filter_map\n        (function\n          | None -> None\n          | Some e ->\n              if Js.to_bool e##.selected then Some (name, `String e##.value) else None)\n        (Array.to_list options)\n    else [ name, `String elt##.value ]\n  else []\n\nclass type file_input = object\n  inherit inputElement\n\n  method files : File.fileList t optdef readonly_prop\n\n  method multiple : bool optdef readonly_prop\nend\n\nlet get_input_val ?(get = false) (elt : inputElement t) =\n  if have_content (elt :> submittableElement t)\n  then\n    let name = to_string elt##.name in\n    let value = elt##.value in\n    match to_bytestring elt##._type##toLowerCase with\n    | \"checkbox\" | \"radio\" ->\n        if to_bool elt##.checked then [ name, `String value ] else []\n    | \"submit\" | \"reset\" -> []\n    | \"text\" | \"password\" -> [ name, `String value ]\n    | \"file\" -> (\n        if get\n        then [ name, `String value ]\n        else\n          let elt : file_input t = Unsafe.coerce elt in\n          match Optdef.to_option elt##.files with\n          | None -> []\n          | Some list -> (\n              if list##.length = 0\n              then [ name, `String (Js.string \"\") ]\n              else\n                match Optdef.to_option elt##.multiple with\n                | None | Some false -> (\n                    match Opt.to_option (list##item 0) with\n                    | None -> []\n                    | Some file -> [ name, `File file ])\n                | Some true ->\n                    filter_map\n                      (fun f ->\n                        match Opt.to_option f with\n                        | None -> None\n                        | Some file -> Some (name, `File file))\n                      (Array.to_list (Array.init list##.length (fun i -> list##item i)))))\n    | _ -> [ name, `String value ]\n  else []\n\nlet get_form_elements (form : formElement t) =\n  let rec loop acc i =\n    if i < 0\n    then acc\n    else\n      match Opt.to_option (form##.elements##item i) with\n      | None -> loop acc (i - i)\n      | Some x -> loop (x :: acc) (i - 1)\n  in\n  loop [] (form##.elements##.length - 1)\n\nlet get_element_content ?get v =\n  match tagged v with\n  | Select v -> get_select_val v\n  | Input v -> get_input_val ?get v\n  | Textarea v -> get_textarea_val v\n  | _ -> []\n\nlet form_elements ?get (form : formElement t) =\n  List.flatten (List.map (fun v -> get_element_content ?get v) (get_form_elements form))\n\nlet append (form_contents : form_contents) (form_elt : string * form_elt) =\n  match form_contents with\n  | `Fields list -> list := form_elt :: !list\n  | `FormData f -> (\n      match form_elt with\n      | name, `String s -> f##append (string name) s\n      | name, `File file -> f##append_blob (string name) (file :> File.blob t))\n\nlet empty_form_contents () =\n  match Optdef.to_option (Js.def formData) with\n  | None -> `Fields (ref [])\n  | Some constr -> `FormData (new%js constr)\n\nlet post_form_contents form =\n  let contents = empty_form_contents () in\n  List.iter (append contents) (form_elements form);\n  contents\n\nlet get_form_contents form =\n  List.map\n    (function\n      | name, `String s -> name, to_string s\n      | _ -> assert false)\n    (form_elements ~get:true form)\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\ntype readyState =\n  | UNSENT\n  | OPENED\n  | HEADERS_RECEIVED\n  | LOADING\n  | DONE\n\ntype _ response =\n  | ArrayBuffer : Typed_array.arrayBuffer t Opt.t response\n  | Blob : #File.blob t Opt.t response\n  | Document : Dom.element Dom.document t Opt.t response\n  | JSON : 'a Opt.t response\n  | Text : js_string t response\n  | Default : string response\n\nclass type xmlHttpRequest = object ('self)\n  method onreadystatechange : (unit -> unit) Js.callback Js.writeonly_prop\n\n  method readyState : readyState readonly_prop\n\n  method _open : js_string t -> js_string t -> bool t -> unit meth\n\n  method _open_full :\n       js_string t\n    -> js_string t\n    -> bool t\n    -> js_string t opt\n    -> js_string t opt\n    -> unit meth\n\n  method setRequestHeader : js_string t -> js_string t -> unit meth\n\n  method overrideMimeType : js_string t -> unit meth\n\n  method send : js_string t opt -> unit meth\n\n  method send_blob : #File.blob t -> unit meth\n\n  method send_document : Dom.element Dom.document t -> unit meth\n\n  method send_formData : Form.formData t -> unit meth\n\n  method abort : unit meth\n\n  method status : int readonly_prop\n\n  method statusText : js_string t readonly_prop\n\n  method getResponseHeader : js_string t -> js_string t opt meth\n\n  method getAllResponseHeaders : js_string t meth\n\n  method response : File.file_any readonly_prop\n\n  method responseText : js_string t opt readonly_prop\n\n  method responseXML : Dom.element Dom.document t opt readonly_prop\n\n  method responseType : js_string t prop\n\n  method withCredentials : bool t writeonly_prop\n\n  inherit File.progressEventTarget\n\n  method ontimeout :\n    ('self t, 'self File.progressEvent t) Dom.event_listener writeonly_prop\n\n  method upload : xmlHttpRequestUpload t optdef readonly_prop\nend\n\nand xmlHttpRequestUpload = object ('self)\n  inherit File.progressEventTarget\nend\n\nmodule Event = struct\n  type typ = xmlHttpRequest File.progressEvent t Dom.Event.typ\n\n  let readystatechange = Dom.Event.make \"readystatechange\"\n\n  let loadstart = Dom.Event.make \"loadstart\"\n\n  let progress = Dom.Event.make \"progress\"\n\n  let abort = Dom.Event.make \"abort\"\n\n  let error = Dom.Event.make \"error\"\n\n  let load = Dom.Event.make \"load\"\n\n  let timeout = Dom.Event.make \"timeout\"\n\n  let loadend = Dom.Event.make \"loadend\"\nend\n\nexternal create : unit -> xmlHttpRequest Js.t = \"caml_xmlhttprequest_create\"\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2015 OCamlPro: Grégoire Henry, Çağdaş Bozman.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen Dom_html\nopen! Import\n\nclass type ['a, 'b] worker = object ('self)\n  inherit eventTarget\n\n  method onerror : ('self t, errorEvent t) event_listener writeonly_prop\n\n  method onmessage : ('self t, 'b messageEvent t) event_listener writeonly_prop\n\n  method postMessage : 'a -> unit meth\n\n  method terminate : unit meth\nend\n\nand errorEvent = object\n  inherit event\n\n  method message : js_string t readonly_prop\n\n  method filename : js_string t readonly_prop\n\n  method lineno : int readonly_prop\n\n  method colno : int readonly_prop\n\n  method error : Unsafe.any readonly_prop\nend\n\nand ['a] messageEvent = object\n  inherit event\n\n  method data : 'a readonly_prop\nend\n\nlet worker = Unsafe.global##._Worker\n\nlet create script = new%js worker (string script)\n\nlet import_scripts scripts : unit =\n  if not (Js.Optdef.test Unsafe.global##.importScripts)\n  then invalid_arg \"Worker.import_scripts is undefined\";\n  Unsafe.fun_call\n    Unsafe.global##.importScripts\n    (Array.map (fun s -> Unsafe.inject (string s)) (Array.of_list scripts))\n\nlet set_onmessage handler =\n  if not (Js.Optdef.test Unsafe.global##.onmessage)\n  then invalid_arg \"Worker.onmessage is undefined\";\n  let js_handler (ev : 'a messageEvent Js.t) = handler ev##.data in\n  Unsafe.global##.onmessage := wrap_callback js_handler\n\nlet post_message msg =\n  if not (Js.Optdef.test Unsafe.global##.postMessage)\n  then invalid_arg \"Worker.onmessage is undefined\";\n  Unsafe.global##postMessage msg\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2012 Jacques-Pascal Deplaix\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen! Import\n\ntype readyState =\n  | CONNECTING\n  | OPEN\n  | CLOSING\n  | CLOSED\n\nclass type ['a] closeEvent = object\n  inherit ['a] Dom.event\n\n  method code : int Js.readonly_prop\n\n  method reason : Js.js_string Js.t Js.readonly_prop\n\n  method wasClean : bool Js.t Js.readonly_prop\nend\n\nclass type ['a] messageEvent = object\n  inherit ['a] Dom.event\n\n  method data : Js.js_string Js.t Js.readonly_prop\n\n  method data_buffer : Typed_array.arrayBuffer Js.t Js.readonly_prop\n\n  method data_blob : File.blob Js.t Js.readonly_prop\nend\n\nclass type webSocket = object ('self)\n  inherit Dom_html.eventTarget\n\n  method url : Js.js_string Js.t Js.readonly_prop\n\n  method readyState : readyState Js.readonly_prop\n\n  method bufferedAmount : int Js.readonly_prop\n\n  method onopen : ('self Js.t, 'self Dom.event Js.t) Dom.event_listener Js.writeonly_prop\n\n  method onclose :\n    ('self Js.t, 'self closeEvent Js.t) Dom.event_listener Js.writeonly_prop\n\n  method onerror : ('self Js.t, 'self Dom.event Js.t) Dom.event_listener Js.writeonly_prop\n\n  method extensions : Js.js_string Js.t Js.readonly_prop\n\n  method protocol : Js.js_string Js.t Js.readonly_prop\n\n  method close : unit Js.meth\n\n  method close_withCode : int -> unit Js.meth\n\n  method close_withCodeAndReason : int -> Js.js_string Js.t -> unit Js.meth\n\n  method onmessage :\n    ('self Js.t, 'self messageEvent Js.t) Dom.event_listener Js.writeonly_prop\n\n  method binaryType : Js.js_string Js.t Js.prop\n\n  method send : Js.js_string Js.t -> unit Js.meth\n\n  method send_buffer : Typed_array.arrayBuffer Js.t -> unit Js.meth\n\n  method send_blob : File.blob Js.t -> unit Js.meth\nend\n\nlet webSocket = Js.Unsafe.global##._WebSocket\n\nlet webSocket_withProtocol = webSocket\n\nlet webSocket_withProtocols = webSocket\n\nlet is_supported () = Js.Optdef.test webSocket\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2012 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\n(** 5.1 Types *)\n\ntype sizei = int\n\ntype sizeiptr = int\n\ntype intptr = int\n\ntype uint = int\n\ntype clampf = number_t\n\ntype void\n\ntype clearBufferMask = int\n\ntype beginMode\n\ntype blendingFactor\n\ntype blendMode\n\ntype bufferTarget\n\ntype bufferUsage\n\ntype cullFaceMode\n\ntype depthFunction\n\ntype enableCap\n\ntype errorCode\n\ntype frontFaceDir\n\ntype hintTarget\n\ntype hintMode\n\ntype textureUnit = int\n\ntype 'a pixelStoreParam\n\ntype stencilOp\n\ntype fbTarget\n\ntype attachmentPoint\n\ntype rbTarget\n\ntype texTarget\n\ntype 'a parameter\n\ntype 'a bufferParameter\n\ntype 'a vertexAttribParam\n\ntype vertexAttribPointerParam\n\ntype 'a attachParam\n\ntype framebufferStatus\n\ntype 'a renderbufferParam\n\ntype format\n\ntype pixelFormat\n\ntype pixelType\n\ntype 'a texParam\n\ntype dataType\n\ntype shaderType\n\ntype 'a programParam\n\ntype 'a shaderParam\n\ntype textureFilter\n\ntype wrapMode\n\ntype texFilter\n\ntype uniformType\n\ntype colorspaceConversion\n\ntype shaderPrecisionType\n\ntype objectType\n\n(** 5.2 WebGLContextAttributes *)\nclass type contextAttributes = object\n  method alpha : bool t prop\n\n  method depth : bool t prop\n\n  method stencil : bool t prop\n\n  method antialias : bool t prop\n\n  method premultipliedAlpha : bool t prop\n\n  method preserveDrawingBuffer : bool t prop\n\n  method preferLowPowerToHighPerformance : bool t prop\n\n  method failIfMajorPerformanceCaveat : bool t prop\nend\n\nlet defaultContextAttributes =\n  Js.Unsafe.(\n    obj\n      [| \"alpha\", inject _true\n       ; \"depth\", inject _true\n       ; \"stencil\", inject _false\n       ; \"antialias\", inject _true\n       ; \"premultipliedAlpha\", inject _false\n       ; \"preserveDrawingBuffer\", inject _false\n       ; \"preferLowPowerToHighPerformance\", inject _false\n       ; \"failIfMajorPerformanceCaveat\", inject _false\n      |])\n\ntype buffer\n\ntype framebuffer\n\ntype program\n\ntype renderbuffer\n\ntype shader\n\ntype texture\n\ntype 'a uniformLocation\n\nclass type activeInfo = object\n  method size : int readonly_prop\n\n  method _type : uniformType readonly_prop\n\n  method name : js_string t readonly_prop\nend\n\nclass type shaderPrecisionFormat = object\n  method rangeMin : int readonly_prop\n\n  method rangeMax : int readonly_prop\n\n  method precision : int readonly_prop\nend\n\nclass type renderingContext = object\n  (** 5.13.1 Attributes *)\n\n  method canvas : Dom_html.canvasElement t readonly_prop\n\n  method drawingBufferWidth : sizei readonly_prop\n\n  method drawingBufferHeight : sizei readonly_prop\n\n  (** 5.13.2 Getting information about the context *)\n\n  method getContextAttributes : contextAttributes t meth\n\n  (** 5.13.3 Setting and getting state *)\n\n  method activeTexture : textureUnit -> unit meth\n\n  method blendColor : clampf -> clampf -> clampf -> clampf -> unit meth\n\n  method blendEquation : blendMode -> unit meth\n\n  method blendEquationSeparate : blendMode -> blendMode -> unit meth\n\n  method blendFunc : blendingFactor -> blendingFactor -> unit meth\n\n  method blendFuncSeparate :\n    blendingFactor -> blendingFactor -> blendingFactor -> blendingFactor -> unit meth\n\n  method clearColor : clampf -> clampf -> clampf -> clampf -> unit meth\n\n  method clearDepth : clampf -> unit meth\n\n  method clearStencil : int -> unit meth\n\n  method colorMask : bool t -> bool t -> bool t -> bool t -> unit meth\n\n  method cullFace : cullFaceMode -> unit meth\n\n  method depthFunc : depthFunction -> unit meth\n\n  method depthMask : bool t -> unit meth\n\n  method depthRange : clampf -> clampf -> unit meth\n\n  method disable : enableCap -> unit meth\n\n  method enable : enableCap -> unit meth\n\n  method frontFace : frontFaceDir -> unit meth\n\n  method getParameter : 'a. 'a parameter -> 'a meth\n\n  method getError : errorCode meth\n\n  method hint : hintTarget -> hintMode -> unit meth\n\n  method isEnabled : enableCap -> bool t meth\n\n  method lineWidth : number_t -> unit meth\n\n  method pixelStorei : 'a. 'a pixelStoreParam -> 'a -> unit meth\n\n  method polygonOffset : number_t -> number_t -> unit meth\n\n  method sampleCoverage : clampf -> bool t -> unit meth\n\n  method stencilFunc : depthFunction -> int -> uint -> unit meth\n\n  method stencilFuncSeparate : cullFaceMode -> depthFunction -> int -> uint -> unit meth\n\n  method stencilMask : uint -> unit meth\n\n  method stencilMaskSeparate : cullFaceMode -> uint -> unit meth\n\n  method stencilOp : stencilOp -> stencilOp -> stencilOp -> unit meth\n\n  method stencilOpSeparate :\n    cullFaceMode -> stencilOp -> stencilOp -> stencilOp -> unit meth\n\n  (** 5.13.4 Viewing and clipping *)\n\n  method scissor : int -> int -> sizei -> sizei -> unit meth\n\n  method viewport : int -> int -> sizei -> sizei -> unit meth\n\n  (** 5.13.5 Buffer objects *)\n\n  method bindBuffer : bufferTarget -> buffer t -> unit meth\n\n  method bindBuffer_ : bufferTarget -> buffer t opt -> unit meth\n\n  method bufferData_create : bufferTarget -> sizeiptr -> bufferUsage -> unit meth\n\n  method bufferData :\n    bufferTarget -> #Typed_array.arrayBufferView t -> bufferUsage -> unit meth\n\n  method bufferData_raw :\n    bufferTarget -> Typed_array.arrayBuffer t -> bufferUsage -> unit meth\n\n  method bufferSubData :\n    bufferTarget -> intptr -> #Typed_array.arrayBufferView t -> unit meth\n\n  method bufferSubData_raw :\n    bufferTarget -> intptr -> Typed_array.arrayBuffer t -> unit meth\n\n  method createBuffer : buffer t meth\n\n  method deleteBuffer : buffer t -> unit meth\n\n  method getBufferParameter : 'a. bufferTarget -> 'a bufferParameter -> 'a meth\n\n  method isBuffer : buffer t -> bool t meth\n\n  (** 5.13.6 Framebuffer objects *)\n\n  method bindFramebuffer : fbTarget -> framebuffer t -> unit meth\n\n  method bindFramebuffer_ : fbTarget -> framebuffer t opt -> unit meth\n\n  method checkFramebufferStatus : fbTarget -> framebufferStatus meth\n\n  method createFramebuffer : framebuffer t meth\n\n  method deleteFramebuffer : framebuffer t -> unit meth\n\n  method framebufferRenderbuffer :\n    fbTarget -> attachmentPoint -> rbTarget -> renderbuffer t -> unit meth\n\n  method framebufferTexture2D :\n    fbTarget -> attachmentPoint -> texTarget -> texture t -> int -> unit meth\n\n  method getFramebufferAttachmentParameter :\n    'a. fbTarget -> attachmentPoint -> 'a attachParam -> 'a meth\n\n  method isFramebuffer : framebuffer t -> bool t meth\n\n  (** 5.13.7 Renderbuffer objects *)\n\n  method bindRenderbuffer : rbTarget -> renderbuffer t -> unit meth\n\n  method bindRenderbuffer_ : rbTarget -> renderbuffer t opt -> unit meth\n\n  method createRenderbuffer : renderbuffer t meth\n\n  method deleteRenderbuffer : renderbuffer t -> unit meth\n\n  method getRenderbufferParameter : 'a. rbTarget -> 'a renderbufferParam -> 'a meth\n\n  method isRenderbuffer : renderbuffer t -> bool t meth\n\n  method renderbufferStorage : rbTarget -> format -> sizei -> sizei -> unit meth\n\n  (** 5.13.8 Texture objects *)\n\n  method bindTexture : texTarget -> texture t -> unit meth\n\n  method bindTexture_ : texTarget -> texture t opt -> unit meth\n\n  method compressedTexImage2D :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> sizei\n    -> sizei\n    -> int\n    -> #Typed_array.arrayBufferView t\n    -> unit meth\n\n  method compressedTexSubImage2D :\n       texTarget\n    -> int\n    -> int\n    -> int\n    -> sizei\n    -> sizei\n    -> pixelFormat\n    -> #Typed_array.arrayBufferView t\n    -> unit meth\n\n  method copyTexImage2D :\n    texTarget -> int -> pixelFormat -> int -> int -> sizei -> sizei -> int -> unit meth\n\n  method copyTexSubImage2D :\n    texTarget -> int -> int -> int -> int -> int -> sizei -> sizei -> unit meth\n\n  method createTexture : texture t meth\n\n  method deleteTexture : texture t -> unit meth\n\n  method generateMipmap : texTarget -> unit meth\n\n  method getTexParameter : texTarget -> 'a texParam -> 'a meth\n\n  method isTexture : texture t -> bool t meth\n\n  method texImage2D_new :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> sizei\n    -> sizei\n    -> int\n    -> pixelFormat\n    -> pixelType\n    -> void opt\n    -> unit meth\n\n  method texImage2D_fromView :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> sizei\n    -> sizei\n    -> int\n    -> pixelFormat\n    -> pixelType\n    -> #Typed_array.arrayBufferView t\n    -> unit meth\n\n  method texImage2D_fromImageData :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.imageData t\n    -> unit meth\n\n  method texImage2D_fromImage :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.imageElement t\n    -> unit meth\n\n  method texImage2D_fromCanvas :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.canvasElement t\n    -> unit meth\n\n  method texImage2D_fromVideo :\n       texTarget\n    -> int\n    -> pixelFormat\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.videoElement t\n    -> unit meth\n\n  (* {[\n      method texParameterf : texTarget -> texParam -> number_t -> unit meth\n     ]}\n  *)\n  method texParameteri : texTarget -> 'a texParam -> 'a -> unit meth\n\n  method texSubImage2D_fromView :\n       texTarget\n    -> int\n    -> int\n    -> int\n    -> sizei\n    -> sizei\n    -> pixelFormat\n    -> pixelType\n    -> #Typed_array.arrayBufferView t\n    -> unit meth\n\n  method texSubImage2D_fromImageData :\n       texTarget\n    -> int\n    -> int\n    -> int\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.imageData t\n    -> unit meth\n\n  method texSubImage2D_fromImage :\n       texTarget\n    -> int\n    -> int\n    -> int\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.imageElement t\n    -> unit meth\n\n  method texSubImage2D_fromCanvas :\n       texTarget\n    -> int\n    -> int\n    -> int\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.canvasElement t\n    -> unit meth\n\n  method texSubImage2D_fromVideo :\n       texTarget\n    -> int\n    -> int\n    -> int\n    -> pixelFormat\n    -> pixelType\n    -> Dom_html.videoElement t\n    -> unit meth\n\n  (** 5.13.9 Programs and Shaders *)\n\n  method attachShader : program t -> shader t -> unit meth\n\n  method bindAttribLocation : program t -> uint -> js_string t -> unit meth\n\n  method compileShader : shader t -> unit meth\n\n  method createProgram : program t meth\n\n  method createShader : shaderType -> shader t meth\n\n  method deleteProgram : program t -> unit meth\n\n  method deleteShader : shader t -> unit meth\n\n  method detachShader : program t -> shader t -> unit meth\n\n  method getAttachedShaders : program t -> shader t js_array t meth\n\n  method getProgramParameter : 'a. program t -> 'a programParam -> 'a meth\n\n  method getProgramInfoLog : program t -> js_string t meth\n\n  method getShaderParameter : 'a. shader t -> 'a shaderParam -> 'a meth\n\n  method getShaderPrecisionFormat :\n    shaderType -> shaderPrecisionType -> shaderPrecisionFormat t meth\n\n  method getShaderInfoLog : shader t -> js_string t meth\n\n  method getShaderSource : shader t -> js_string t meth\n\n  method isProgram : program t -> bool t meth\n\n  method isShader : shader t -> bool t meth\n\n  method linkProgram : program t -> unit meth\n\n  method shaderSource : shader t -> js_string t -> unit meth\n\n  method useProgram : program t -> unit meth\n\n  method validateProgram : program t -> unit meth\n\n  (** 5.13.10 Uniforms and attributes *)\n\n  method disableVertexAttribArray : uint -> unit meth\n\n  method enableVertexAttribArray : uint -> unit meth\n\n  method getActiveAttrib : program t -> uint -> activeInfo t meth\n\n  method getActiveUniform : program t -> uint -> activeInfo t meth\n\n  method getAttribLocation : program t -> js_string t -> int meth\n\n  method getUniform : 'a 'b. program t -> 'a uniformLocation t -> 'b meth\n\n  method getUniformLocation : 'a. program t -> js_string t -> 'a uniformLocation t meth\n\n  method getVertexAttrib : 'a. uint -> 'a vertexAttribParam -> 'a meth\n\n  method getVertexAttribOffset : uint -> vertexAttribPointerParam -> sizeiptr meth\n\n  method uniform1f : number_t uniformLocation t -> number_t -> unit meth\n\n  method uniform1fv_typed :\n    number_t uniformLocation t -> Typed_array.float32Array t -> unit meth\n\n  method uniform1fv : number_t uniformLocation t -> number_t js_array t -> unit meth\n\n  method uniform1i : int uniformLocation t -> int -> unit meth\n\n  method uniform1iv_typed : int uniformLocation t -> Typed_array.int32Array t -> unit meth\n\n  method uniform1iv : int uniformLocation t -> int js_array t -> unit meth\n\n  method uniform2f : [ `vec2 ] uniformLocation t -> number_t -> number_t -> unit meth\n\n  method uniform2fv_typed :\n    [ `vec2 ] uniformLocation t -> Typed_array.float32Array t -> unit meth\n\n  method uniform2fv : [ `vec2 ] uniformLocation t -> number_t js_array t -> unit meth\n\n  method uniform2i : [ `ivec2 ] uniformLocation t -> int -> int -> unit meth\n\n  method uniform2iv : [ `ivec2 ] uniformLocation t -> int js_array t -> unit meth\n\n  method uniform2iv_typed :\n    [ `ivec2 ] uniformLocation t -> Typed_array.int32Array t -> unit meth\n\n  method uniform3f :\n    [ `vec3 ] uniformLocation t -> number_t -> number_t -> number_t -> unit meth\n\n  method uniform3fv_typed :\n    [ `vec3 ] uniformLocation t -> Typed_array.float32Array t -> unit meth\n\n  method uniform3fv : [ `vec3 ] uniformLocation t -> number_t js_array t -> unit meth\n\n  method uniform3i : [ `ivec3 ] uniformLocation t -> int -> int -> int -> unit meth\n\n  method uniform3iv : [ `ivec3 ] uniformLocation t -> int js_array t -> unit meth\n\n  method uniform3iv_typed :\n    [ `ivec3 ] uniformLocation t -> Typed_array.int32Array t -> unit meth\n\n  method uniform4f :\n       [ `vec4 ] uniformLocation t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> unit meth\n\n  method uniform4fv_typed :\n    [ `vec4 ] uniformLocation t -> Typed_array.float32Array t -> unit meth\n\n  method uniform4fv : [ `vec4 ] uniformLocation t -> number_t js_array t -> unit meth\n\n  method uniform4i : [ `ivec4 ] uniformLocation t -> int -> int -> int -> int -> unit meth\n\n  method uniform4iv : [ `ivec4 ] uniformLocation t -> int js_array t -> unit meth\n\n  method uniform4iv_typed :\n    [ `ivec4 ] uniformLocation t -> Typed_array.int32Array t -> unit meth\n\n  method uniformMatrix2fv :\n    [ `mat2 ] uniformLocation t -> bool t -> number_t js_array t -> unit meth\n\n  method uniformMatrix2fv_typed :\n    [ `mat2 ] uniformLocation t -> bool t -> Typed_array.float32Array t -> unit meth\n\n  method uniformMatrix3fv :\n    [ `mat3 ] uniformLocation t -> bool t -> number_t js_array t -> unit meth\n\n  method uniformMatrix3fv_typed :\n    [ `mat3 ] uniformLocation t -> bool t -> Typed_array.float32Array t -> unit meth\n\n  method uniformMatrix4fv :\n    [ `mat4 ] uniformLocation t -> bool t -> number_t js_array t -> unit meth\n\n  method uniformMatrix4fv_typed :\n    [ `mat4 ] uniformLocation t -> bool t -> Typed_array.float32Array t -> unit meth\n\n  method vertexAttrib1f : uint -> number_t -> unit meth\n\n  method vertexAttrib1fv : uint -> number_t js_array t -> unit meth\n\n  method vertexAttrib1fv_typed : uint -> Typed_array.float32Array t -> unit meth\n\n  method vertexAttrib2f : uint -> number_t -> number_t -> unit meth\n\n  method vertexAttrib2fv : uint -> number_t js_array t -> unit meth\n\n  method vertexAttrib2fv_typed : uint -> Typed_array.float32Array t -> unit meth\n\n  method vertexAttrib3f : uint -> number_t -> number_t -> number_t -> unit meth\n\n  method vertexAttrib3fv : uint -> number_t js_array t -> unit meth\n\n  method vertexAttrib3fv_typed : uint -> Typed_array.float32Array t -> unit meth\n\n  method vertexAttrib4f :\n    uint -> number_t -> number_t -> number_t -> number_t -> unit meth\n\n  method vertexAttrib4fv : uint -> number_t js_array t -> unit meth\n\n  method vertexAttrib4fv_typed : uint -> Typed_array.float32Array t -> unit meth\n\n  method vertexAttribPointer :\n    uint -> int -> dataType -> bool t -> sizei -> intptr -> unit meth\n\n  (** 5.13.11 Writing to the drawing buffer *)\n\n  method clear : clearBufferMask -> unit meth\n\n  method drawArrays : beginMode -> int -> sizei -> unit meth\n\n  method drawElements : beginMode -> sizei -> dataType -> intptr -> unit meth\n\n  method finish : unit meth\n\n  method flush : unit meth\n\n  (** 5.13.12 Reading back pixels *)\n\n  method readPixels :\n       int\n    -> int\n    -> sizei\n    -> sizei\n    -> pixelFormat\n    -> pixelType\n    -> #Typed_array.arrayBufferView t\n    -> unit meth\n\n  (** 5.13.13 Detecting context lost events *)\n\n  method isContextLost : bool t meth\n\n  (** 5.13.14 Detecting and enabling extensions *)\n\n  method getSupportedExtensions : js_string t js_array t meth\n\n  method getExtension : 'a. js_string t -> 'a t opt meth\n\n  (* Untyped! *)\n  (** Constants *)\n\n  method _DEPTH_BUFFER_BIT_ : clearBufferMask readonly_prop\n\n  method _STENCIL_BUFFER_BIT_ : clearBufferMask readonly_prop\n\n  method _COLOR_BUFFER_BIT_ : clearBufferMask readonly_prop\n\n  method _POINTS : beginMode readonly_prop\n\n  method _LINES : beginMode readonly_prop\n\n  method _LINE_LOOP_ : beginMode readonly_prop\n\n  method _LINE_STRIP_ : beginMode readonly_prop\n\n  method _TRIANGLES : beginMode readonly_prop\n\n  method _TRIANGLE_STRIP_ : beginMode readonly_prop\n\n  method _TRIANGLE_FAN_ : beginMode readonly_prop\n\n  method _ZERO : blendingFactor readonly_prop\n\n  method _ONE : blendingFactor readonly_prop\n\n  method _SRC_COLOR_ : blendingFactor readonly_prop\n\n  method _ONE_MINUS_SRC_COLOR_ : blendingFactor readonly_prop\n\n  method _SRC_ALPHA_ : blendingFactor readonly_prop\n\n  method _ONE_MINUS_SRC_ALPHA_ : blendingFactor readonly_prop\n\n  method _DST_ALPHA_ : blendingFactor readonly_prop\n\n  method _ONE_MINUS_DST_ALPHA_ : blendingFactor readonly_prop\n\n  method _DST_COLOR_ : blendingFactor readonly_prop\n\n  method _ONE_MINUS_DST_COLOR_ : blendingFactor readonly_prop\n\n  method _SRC_ALPHA_SATURATE_ : blendingFactor readonly_prop\n\n  method _FUNC_ADD_ : blendMode readonly_prop\n\n  method _FUNC_SUBTRACT_ : blendMode readonly_prop\n\n  method _FUNC_REVERSE_SUBTRACT_ : blendMode readonly_prop\n\n  method _CONSTANT_COLOR_ : blendMode readonly_prop\n\n  method _ONE_MINUS_CONSTANT_COLOR_ : blendMode readonly_prop\n\n  method _CONSTANT_ALPHA_ : blendMode readonly_prop\n\n  method _ONE_MINUS_CONSTANT_ALPHA_ : blendMode readonly_prop\n\n  method _ARRAY_BUFFER_ : bufferTarget readonly_prop\n\n  method _ELEMENT_ARRAY_BUFFER_ : bufferTarget readonly_prop\n\n  method _STREAM_DRAW_ : bufferUsage readonly_prop\n\n  method _STATIC_DRAW_ : bufferUsage readonly_prop\n\n  method _DYNAMIC_DRAW_ : bufferUsage readonly_prop\n\n  method _FRONT : cullFaceMode readonly_prop\n\n  method _BACK : cullFaceMode readonly_prop\n\n  method _FRONT_AND_BACK_ : cullFaceMode readonly_prop\n\n  method _CULL_FACE_ : enableCap readonly_prop\n\n  method _BLEND : enableCap readonly_prop\n\n  method _DITHER : enableCap readonly_prop\n\n  method _STENCIL_TEST_ : enableCap readonly_prop\n\n  method _DEPTH_TEST_ : enableCap readonly_prop\n\n  method _SCISSOR_TEST_ : enableCap readonly_prop\n\n  method _POLYGON_OFFSET_FILL_ : enableCap readonly_prop\n\n  method _SAMPLE_ALPHA_TO_COVERAGE_ : enableCap readonly_prop\n\n  method _SAMPLE_COVERAGE_ : enableCap readonly_prop\n\n  method _NO_ERROR_ : errorCode readonly_prop\n\n  method _INVALID_ENUM_ : errorCode readonly_prop\n\n  method _INVALID_VALUE_ : errorCode readonly_prop\n\n  method _INVALID_OPERATION_ : errorCode readonly_prop\n\n  method _OUT_OF_MEMORY_ : errorCode readonly_prop\n\n  method _CONTEXT_LOST_WEBGL_ : errorCode readonly_prop\n\n  method _INVALID_FRAMEBUFFER_OPERATION_ : errorCode readonly_prop\n\n  method _CW : frontFaceDir readonly_prop\n\n  method _CCW : frontFaceDir readonly_prop\n\n  method _DONT_CARE_ : hintMode readonly_prop\n\n  method _FASTEST : hintMode readonly_prop\n\n  method _NICEST : hintMode readonly_prop\n\n  method _GENERATE_MIPMAP_HINT_ : hintTarget readonly_prop\n\n  method _BLEND_EQUATION_ : blendMode parameter readonly_prop\n\n  method _BLEND_EQUATION_RGB_ : blendMode parameter readonly_prop\n\n  method _BLEND_EQUATION_ALPHA_ : blendMode parameter readonly_prop\n\n  method _BLEND_DST_RGB_ : blendingFactor parameter readonly_prop\n\n  method _BLEND_SRC_RGB_ : blendingFactor parameter readonly_prop\n\n  method _BLEND_DST_ALPHA_ : blendingFactor parameter readonly_prop\n\n  method _BLEND_SRC_ALPHA_ : blendingFactor parameter readonly_prop\n\n  method _BLEND_COLOR_ : Typed_array.float32Array t parameter readonly_prop\n\n  method _ARRAY_BUFFER_BINDING_ : buffer t opt parameter readonly_prop\n\n  method _ELEMENT_ARRAY_BUFFER_BINDING_ : buffer t opt parameter readonly_prop\n\n  method _CULL_FACE_PARAM : bool t parameter readonly_prop\n\n  method _BLEND_PARAM : bool t parameter readonly_prop\n\n  method _DITHER_PARAM : bool t parameter readonly_prop\n\n  method _STENCIL_TEST_PARAM : bool t parameter readonly_prop\n\n  method _DEPTH_TEST_PARAM : bool t parameter readonly_prop\n\n  method _SCISSOR_TEST_PARAM : bool t parameter readonly_prop\n\n  method _POLYGON_OFFSET_FILL_PARAM : bool t parameter readonly_prop\n\n  method _LINE_WIDTH_ : number_t parameter readonly_prop\n\n  method _ALIASED_POINT_SIZE_RANGE_ : Typed_array.float32Array t parameter readonly_prop\n\n  method _ALIASED_LINE_WIDTH_RANGE_ : Typed_array.float32Array t parameter readonly_prop\n\n  method _CULL_FACE_MODE_ : cullFaceMode parameter readonly_prop\n\n  method _FRONT_FACE_ : frontFaceDir parameter readonly_prop\n\n  method _DEPTH_RANGE_ : Typed_array.float32Array t parameter readonly_prop\n\n  method _DEPTH_WRITEMASK_ : bool t parameter readonly_prop\n\n  method _DEPTH_CLEAR_VALUE_ : number_t parameter readonly_prop\n\n  method _DEPTH_FUNC_ : depthFunction parameter readonly_prop\n\n  method _STENCIL_CLEAR_VALUE_ : int parameter readonly_prop\n\n  method _STENCIL_FUNC_ : int parameter readonly_prop\n\n  method _STENCIL_FAIL_ : int parameter readonly_prop\n\n  method _STENCIL_PASS_DEPTH_FAIL_ : int parameter readonly_prop\n\n  method _STENCIL_PASS_DEPTH_PASS_ : int parameter readonly_prop\n\n  method _STENCIL_REF_ : int parameter readonly_prop\n\n  method _STENCIL_VALUE_MASK_ : int parameter readonly_prop\n\n  method _STENCIL_WRITEMASK_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_FUNC_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_FAIL_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_PASS_DEPTH_FAIL_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_PASS_DEPTH_PASS_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_REF_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_VALUE_MASK_ : int parameter readonly_prop\n\n  method _STENCIL_BACK_WRITEMASK_ : int parameter readonly_prop\n\n  method _VIEWPORT : Typed_array.int32Array t parameter readonly_prop\n\n  method _SCISSOR_BOX_ : Typed_array.int32Array t parameter readonly_prop\n\n  method _COLOR_CLEAR_VALUE_ : Typed_array.float32Array t parameter readonly_prop\n\n  method _COLOR_WRITEMASK_ : bool t js_array t parameter readonly_prop\n\n  method _UNPACK_ALIGNMENT_PARAM : int parameter readonly_prop\n\n  method _PACK_ALIGNMENT_ : int parameter readonly_prop\n\n  method _MAX_TEXTURE_SIZE_ : int parameter readonly_prop\n\n  method _MAX_VIEWPORT_DIMS_ : Typed_array.int32Array t parameter readonly_prop\n\n  method _SUBPIXEL_BITS_ : int parameter readonly_prop\n\n  method _RED_BITS_ : int parameter readonly_prop\n\n  method _GREEN_BITS_ : int parameter readonly_prop\n\n  method _BLUE_BITS_ : int parameter readonly_prop\n\n  method _ALPHA_BITS_ : int parameter readonly_prop\n\n  method _DEPTH_BITS_ : int parameter readonly_prop\n\n  method _STENCIL_BITS_ : int parameter readonly_prop\n\n  method _POLYGON_OFFSET_UNITS_ : number_t parameter readonly_prop\n\n  method _POLYGON_OFFSET_FACTOR_ : number_t parameter readonly_prop\n\n  method _TEXTURE_BINDING_2D_ : texture t opt parameter readonly_prop\n\n  method _TEXTURE_BINDING_CUBE_MAP_ : texture t opt parameter readonly_prop\n\n  method _SAMPLE_BUFFERS_ : int parameter readonly_prop\n\n  method _SAMPLES_ : int parameter readonly_prop\n\n  method _SAMPLE_COVERAGE_VALUE_ : number_t parameter readonly_prop\n\n  method _SAMPLE_COVERAGE_INVERT_ : bool t parameter readonly_prop\n\n  method _NUM_COMPRESSED_TEXTURE_FORMATS_ : int parameter readonly_prop\n\n  method _COMPRESSED_TEXTURE_FORMATS_ : Typed_array.uint32Array t parameter readonly_prop\n\n  method _GENERATE_MIPMAP_HINT_PARAM_ : hintMode parameter readonly_prop\n\n  method _BUFFER_SIZE_ : int bufferParameter readonly_prop\n\n  method _BUFFER_USAGE_ : bufferUsage bufferParameter readonly_prop\n\n  method _BYTE : dataType readonly_prop\n\n  method _UNSIGNED_BYTE_DT : dataType readonly_prop\n\n  method _SHORT : dataType readonly_prop\n\n  method _UNSIGNED_SHORT_ : dataType readonly_prop\n\n  method _INT : dataType readonly_prop\n\n  method _UNSIGNED_INT_ : dataType readonly_prop\n\n  method _FLOAT : dataType readonly_prop\n\n  method _UNSIGNED_BYTE_ : pixelType readonly_prop\n\n  method _UNSIGNED_SHORT_4_4_4_4_ : pixelType readonly_prop\n\n  method _UNSIGNED_SHORT_5_5_5_1_ : pixelType readonly_prop\n\n  method _UNSIGNED_SHORT_5_6_5_ : pixelType readonly_prop\n\n  method _ALPHA : pixelFormat readonly_prop\n\n  method _RGB : pixelFormat readonly_prop\n\n  method _RGBA : pixelFormat readonly_prop\n\n  method _LUMINANCE : pixelFormat readonly_prop\n\n  method _LUMINANCE_ALPHA_ : pixelFormat readonly_prop\n\n  method _STENCIL_INDEX_ : pixelFormat readonly_prop\n\n  method _DEPTH_STENCIL_ : pixelFormat readonly_prop\n\n  method _DEPTH_COMPONENT_ : pixelFormat readonly_prop\n\n  method _FRAGMENT_SHADER_ : shaderType readonly_prop\n\n  method _VERTEX_SHADER_ : shaderType readonly_prop\n\n  method _MAX_VERTEX_ATTRIBS_ : int parameter readonly_prop\n\n  method _MAX_VERTEX_UNIFORM_VECTORS_ : int parameter readonly_prop\n\n  method _MAX_VARYING_VECTORS_ : int parameter readonly_prop\n\n  method _MAX_COMBINED_TEXTURE_IMAGE_UNITS_ : int parameter readonly_prop\n\n  method _MAX_VERTEX_TEXTURE_IMAGE_UNITS_ : int parameter readonly_prop\n\n  method _MAX_TEXTURE_IMAGE_UNITS_ : int parameter readonly_prop\n\n  method _MAX_FRAGMENT_UNIFORM_VECTORS_ : int parameter readonly_prop\n\n  method _SHADER_TYPE_ : shaderType shaderParam readonly_prop\n\n  method _DELETE_STATUS_ : bool t shaderParam readonly_prop\n\n  method _COMPILE_STATUS_ : bool t shaderParam readonly_prop\n\n  method _DELETE_STATUS_PROG : bool t programParam readonly_prop\n\n  method _LINK_STATUS_ : bool t programParam readonly_prop\n\n  method _VALIDATE_STATUS_ : bool t programParam readonly_prop\n\n  method _ATTACHED_SHADERS_ : int programParam readonly_prop\n\n  method _ACTIVE_UNIFORMS_ : int programParam readonly_prop\n\n  method _ACTIVE_ATTRIBUTES_ : int programParam readonly_prop\n\n  method _SHADING_LANGUAGE_VERSION_ : js_string t parameter readonly_prop\n\n  method _CURRENT_PROGRAM_ : program t opt parameter readonly_prop\n\n  method _VENDOR : js_string t parameter readonly_prop\n\n  method _RENDERER : js_string t parameter readonly_prop\n\n  method _VERSION : js_string t parameter readonly_prop\n\n  method _MAX_CUBE_MAP_TEXTURE_SIZE_ : int parameter readonly_prop\n\n  method _ACTIVE_TEXTURE_ : int parameter readonly_prop\n\n  method _FRAMEBUFFER_BINDING_ : framebuffer t opt parameter readonly_prop\n\n  method _RENDERBUFFER_BINDING_ : renderbuffer t opt parameter readonly_prop\n\n  method _MAX_RENDERBUFFER_SIZE : int parameter readonly_prop\n\n  method _NEVER : depthFunction readonly_prop\n\n  method _LESS : depthFunction readonly_prop\n\n  method _EQUAL : depthFunction readonly_prop\n\n  method _LEQUAL : depthFunction readonly_prop\n\n  method _GREATER : depthFunction readonly_prop\n\n  method _NOTEQUAL : depthFunction readonly_prop\n\n  method _GEQUAL : depthFunction readonly_prop\n\n  method _ALWAYS : depthFunction readonly_prop\n\n  method _KEEP : stencilOp readonly_prop\n\n  method _REPLACE : stencilOp readonly_prop\n\n  method _INCR : stencilOp readonly_prop\n\n  method _DECR : stencilOp readonly_prop\n\n  method _INVERT : stencilOp readonly_prop\n\n  method _INCR_WRAP_ : stencilOp readonly_prop\n\n  method _DECR_WRAP_ : stencilOp readonly_prop\n\n  method _ZERO_ : stencilOp readonly_prop\n\n  method _NEAREST : texFilter readonly_prop\n\n  method _LINEAR : texFilter readonly_prop\n\n  method _NEAREST_MIPMAP_NEAREST_ : texFilter readonly_prop\n\n  method _LINEAR_MIPMAP_NEAREST_ : texFilter readonly_prop\n\n  method _NEAREST_MIPMAP_LINEAR_ : texFilter readonly_prop\n\n  method _LINEAR_MIPMAP_LINEAR_ : texFilter readonly_prop\n\n  method _TEXTURE_MAG_FILTER_ : texFilter texParam readonly_prop\n\n  method _TEXTURE_MIN_FILTER_ : texFilter texParam readonly_prop\n\n  method _TEXTURE_WRAP_S_ : wrapMode texParam readonly_prop\n\n  method _TEXTURE_WRAP_T_ : wrapMode texParam readonly_prop\n\n  method _NONE_OT : objectType readonly_prop\n\n  method _TEXTURE_OT : objectType readonly_prop\n\n  method _RENDERBUFFER_OT : objectType readonly_prop\n\n  method _TEXTURE_2D_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_POSITIVE_X_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_NEGATIVE_X_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_POSITIVE_Y_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_NEGATIVE_Y_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_POSITIVE_Z_ : texTarget readonly_prop\n\n  method _TEXTURE_CUBE_MAP_NEGATIVE_Z_ : texTarget readonly_prop\n\n  method _TEXTURE0 : textureUnit readonly_prop\n\n  method _TEXTURE1 : textureUnit readonly_prop\n\n  method _TEXTURE2 : textureUnit readonly_prop\n\n  method _TEXTURE3 : textureUnit readonly_prop\n\n  method _TEXTURE4 : textureUnit readonly_prop\n\n  method _TEXTURE5 : textureUnit readonly_prop\n\n  method _TEXTURE6 : textureUnit readonly_prop\n\n  method _TEXTURE7 : textureUnit readonly_prop\n\n  method _TEXTURE8 : textureUnit readonly_prop\n\n  method _TEXTURE9 : textureUnit readonly_prop\n\n  method _TEXTURE10 : textureUnit readonly_prop\n\n  method _TEXTURE11 : textureUnit readonly_prop\n\n  method _TEXTURE12 : textureUnit readonly_prop\n\n  method _TEXTURE13 : textureUnit readonly_prop\n\n  method _TEXTURE14 : textureUnit readonly_prop\n\n  method _TEXTURE15 : textureUnit readonly_prop\n\n  method _TEXTURE16 : textureUnit readonly_prop\n\n  method _TEXTURE17 : textureUnit readonly_prop\n\n  method _TEXTURE18 : textureUnit readonly_prop\n\n  method _TEXTURE19 : textureUnit readonly_prop\n\n  method _TEXTURE20 : textureUnit readonly_prop\n\n  method _TEXTURE21 : textureUnit readonly_prop\n\n  method _TEXTURE22 : textureUnit readonly_prop\n\n  method _TEXTURE23 : textureUnit readonly_prop\n\n  method _TEXTURE24 : textureUnit readonly_prop\n\n  method _TEXTURE25 : textureUnit readonly_prop\n\n  method _TEXTURE26 : textureUnit readonly_prop\n\n  method _TEXTURE27 : textureUnit readonly_prop\n\n  method _TEXTURE28 : textureUnit readonly_prop\n\n  method _TEXTURE29 : textureUnit readonly_prop\n\n  method _TEXTURE30 : textureUnit readonly_prop\n\n  method _TEXTURE31 : textureUnit readonly_prop\n\n  method _REPEAT : wrapMode readonly_prop\n\n  method _CLAMP_TO_EDGE_ : wrapMode readonly_prop\n\n  method _MIRRORED_REPEAT_ : wrapMode readonly_prop\n\n  method _FLOAT_ : uniformType readonly_prop\n\n  method _FLOAT_VEC2_ : uniformType readonly_prop\n\n  method _FLOAT_VEC3_ : uniformType readonly_prop\n\n  method _FLOAT_VEC4_ : uniformType readonly_prop\n\n  method _INT_ : uniformType readonly_prop\n\n  method _INT_VEC2_ : uniformType readonly_prop\n\n  method _INT_VEC3_ : uniformType readonly_prop\n\n  method _INT_VEC4_ : uniformType readonly_prop\n\n  method _BOOL_ : uniformType readonly_prop\n\n  method _BOOL_VEC2_ : uniformType readonly_prop\n\n  method _BOOL_VEC3_ : uniformType readonly_prop\n\n  method _BOOL_VEC4_ : uniformType readonly_prop\n\n  method _FLOAT_MAT2_ : uniformType readonly_prop\n\n  method _FLOAT_MAT3_ : uniformType readonly_prop\n\n  method _FLOAT_MAT4_ : uniformType readonly_prop\n\n  method _SAMPLER_2D_ : uniformType readonly_prop\n\n  method _SAMPLER_CUBE_ : uniformType readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_ENABLED_ : bool t vertexAttribParam readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_SIZE_ : int vertexAttribParam readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_STRIDE_ : int vertexAttribParam readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_TYPE_ : int vertexAttribParam readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_NORMALIZED_ : bool t vertexAttribParam readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_POINTER_ : vertexAttribPointerParam readonly_prop\n\n  method _VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ :\n    buffer t opt vertexAttribParam readonly_prop\n\n  method _CURRENT_VERTEX_ATTRIB_ :\n    Typed_array.float32Array t vertexAttribParam readonly_prop\n\n  method _LOW_FLOAT_ : shaderPrecisionType readonly_prop\n\n  method _MEDIUM_FLOAT_ : shaderPrecisionType readonly_prop\n\n  method _HIGH_FLOAT_ : shaderPrecisionType readonly_prop\n\n  method _LOW_INT_ : shaderPrecisionType readonly_prop\n\n  method _MEDIUM_INT_ : shaderPrecisionType readonly_prop\n\n  method _HIGH_INT_ : shaderPrecisionType readonly_prop\n\n  method _FRAMEBUFFER : fbTarget readonly_prop\n\n  method _RENDERBUFFER : rbTarget readonly_prop\n\n  method _RGBA4 : format readonly_prop\n\n  method _RGB5_A1_ : format readonly_prop\n\n  method _RGB565 : format readonly_prop\n\n  method _DEPTH_COMPONENT16_ : format readonly_prop\n\n  method _STENCIL_INDEX8_ : format readonly_prop\n\n  method _RENDERBUFFER_WIDTH_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_HEIGHT_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_INTERNAL_FORMAT_ : format renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_RED_SIZE_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_GREEN_SIZE_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_BLUE_SIZE_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_ALPHA_SIZE_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_DEPTH_SIZE_ : int renderbufferParam readonly_prop\n\n  method _RENDERBUFFER_STENCIL_SIZE_ : int renderbufferParam readonly_prop\n\n  method _FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_ : objectType attachParam readonly_prop\n\n  method _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_RENDERBUFFER :\n    renderbuffer t attachParam readonly_prop\n\n  method _FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_TEXTURE : texture t attachParam readonly_prop\n\n  method _FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_ : int attachParam readonly_prop\n\n  method _FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_ : int attachParam readonly_prop\n\n  method _COLOR_ATTACHMENT0_ : attachmentPoint readonly_prop\n\n  method _DEPTH_ATTACHMENT_ : attachmentPoint readonly_prop\n\n  method _STENCIL_ATTACHMENT_ : attachmentPoint readonly_prop\n\n  method _DEPTH_STENCIL_ATTACHMENT_ : attachmentPoint readonly_prop\n\n  method _FRAMEBUFFER_COMPLETE_ : framebufferStatus readonly_prop\n\n  method _FRAMEBUFFER_INCOMPLETE_ATTACHMENT_ : framebufferStatus readonly_prop\n\n  method _FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_ : framebufferStatus readonly_prop\n\n  method _FRAMEBUFFER_INCOMPLETE_DIMENSIONS_ : framebufferStatus readonly_prop\n\n  method _FRAMEBUFFER_UNSUPPORTED_ : framebufferStatus readonly_prop\n\n  method _UNPACK_FLIP_Y_WEBGL_PARAM : bool t parameter readonly_prop\n\n  method _UNPACK_PREMULTIPLY_ALPHA_WEBGL_PARAM : bool t parameter readonly_prop\n\n  method _UNPACK_COLORSPACE_CONVERSION_WEBGL_PARAM :\n    colorspaceConversion parameter readonly_prop\n\n  method _NONE : colorspaceConversion readonly_prop\n\n  method _BROWSER_DEFAULT_WEBGL_ : colorspaceConversion readonly_prop\n\n  method _UNPACK_ALIGNMENT_ : int pixelStoreParam readonly_prop\n\n  method _UNPACK_FLIP_Y_WEBGL_ : bool t pixelStoreParam readonly_prop\n\n  method _UNPACK_PREMULTIPLY_ALPHA_WEBGL_ : bool t pixelStoreParam readonly_prop\n\n  method _UNPACK_COLORSPACE_CONVERSION_WEBGL_ : int pixelStoreParam readonly_prop\nend\n\n(** 5.14 WebGLContextEvent *)\n\nclass type contextEvent = object\n  inherit Dom_html.event\n\n  method statusMessage : js_string t readonly_prop\nend\n\nmodule Event = struct\n  let webglcontextlost = Dom_html.Event.make \"webglcontextlost\"\n\n  let webglcontextrestored = Dom_html.Event.make \"webglcontextrestored\"\n\n  let webglcontextcreationerror = Dom_html.Event.make \"webglcontextcreationerror\"\nend\n\n(****)\n\nclass type canvasElement = object\n  method getContext : js_string t -> renderingContext t opt meth\n\n  method getContext_ : js_string t -> contextAttributes t -> renderingContext t opt meth\nend\n\nlet getContext (c : Dom_html.canvasElement t) =\n  let c : canvasElement t = Js.Unsafe.coerce c in\n  let ctx = c##getContext (Js.string \"webgl\") in\n  if Opt.test ctx then ctx else c ## (getContext (Js.string \"experimental-webgl\"))\n\nlet getContextWithAttributes (c : Dom_html.canvasElement t) attribs =\n  let c : canvasElement t = Js.Unsafe.coerce c in\n  let ctx = c##getContext_ (Js.string \"webgl\") attribs in\n  if Opt.test ctx then ctx else c##getContext_ (Js.string \"experimental-webgl\") attribs\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Raphaël Proust, Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\ntype regexp = Js.regExp Js.t\n\ntype result = Js.match_result Js.t\n\nlet regexp s = new%js Js.regExp_withFlags (Js.bytestring s) (Js.string \"g\")\n\nlet regexp_case_fold s = new%js Js.regExp_withFlags (Js.bytestring s) (Js.string \"gi\")\n\nlet regexp_with_flag s f =\n  new%js Js.regExp_withFlags (Js.bytestring s) (Js.string (\"g\" ^ f))\n\nlet blunt_str_array_get a i =\n  Js.to_bytestring (Js.Optdef.get (Js.array_get a i) (fun () -> assert false))\n\nlet string_match r s i =\n  r##.lastIndex := i;\n  Js.Opt.to_option (Js.Opt.map (r##exec (Js.bytestring s)) Js.match_result)\n\nlet search r s i =\n  r##.lastIndex := i;\n  Js.Opt.to_option\n    (Js.Opt.map\n       (r##exec (Js.bytestring s))\n       (fun res_pre ->\n         let res = Js.match_result res_pre in\n         res##.index, res))\n\nlet search_forward = search\n\nlet matched_string r = blunt_str_array_get r 0\n\nlet matched_group r i =\n  Js.Optdef.to_option (Js.Optdef.map (Js.array_get r i) Js.to_bytestring)\n\nlet quote_repl_re = new%js Js.regExp_withFlags (Js.string \"[$]\") (Js.string \"g\")\n\nlet quote_repl s = (Js.bytestring s)##replace quote_repl_re (Js.string \"$$$$\")\n\nlet global_replace r s s_by =\n  r##.lastIndex := 0;\n  Js.to_bytestring (Js.bytestring s) ## (replace r (quote_repl s_by))\n\nlet replace_first r s s_by =\n  let flags =\n    match Js.to_bool r##.ignoreCase, Js.to_bool r##.multiline with\n    | false, false -> Js.string \"\"\n    | false, true -> Js.string \"m\"\n    | true, false -> Js.string \"i\"\n    | true, true -> Js.string \"mi\"\n  in\n  let r' = new%js Js.regExp_withFlags r##.source flags in\n  Js.to_bytestring (Js.bytestring s) ## (replace r' (quote_repl s_by))\n\nlet list_of_js_array a =\n  let rec aux accu idx =\n    if idx < 0 then accu else aux (blunt_str_array_get a idx :: accu) (idx - 1)\n  in\n  aux [] (a##.length - 1)\n\nlet split r s =\n  r##.lastIndex := 0;\n  list_of_js_array (Js.str_array (Js.bytestring s) ## (split_regExp r))\n\nlet bounded_split r s i =\n  r##.lastIndex := 0;\n  list_of_js_array (Js.str_array (Js.bytestring s) ## (split_regExpLimited r i))\n\n(* More constructors *)\n\nlet quote_re = regexp \"[\\\\][()\\\\\\\\|+*.?{}^$]\"\n\nlet quote s = Js.to_bytestring (Js.bytestring s) ## (replace quote_re (Js.string \"\\\\$&\"))\n\nlet regexp_string s = regexp (quote s)\n\nlet regexp_string_case_fold s = regexp_case_fold (quote s)\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Raphaël Proust\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\n(* Url tampering. *)\n\nlet split c s = Js.str_array (s##split (Js.string (String.make 1 c)))\n\nlet split_2 c s =\n  let index = s##indexOf (Js.string (String.make 1 c)) in\n  if index < 0 then Js.undefined else Js.def (s##slice 0 index, s##slice_end (index + 1))\n\nexception Local_exn\n\nlet interrupt () = raise Local_exn\n\n(* url (AKA percent) encoding/decoding *)\n\nlet plus_re = Regexp.regexp_string \"+\"\n\nlet escape_plus s = Regexp.global_replace plus_re s \"%2B\"\n\nlet unescape_plus s = Regexp.global_replace plus_re s \" \"\n\nlet plus_re_js_string = new%js Js.regExp_withFlags (Js.string \"\\\\+\") (Js.string \"g\")\n\nlet unescape_plus_js_string s =\n  plus_re_js_string##.lastIndex := 0;\n  s##replace plus_re_js_string (Js.string \" \")\n\nlet urldecode_js_string_string s =\n  Js.to_bytestring (Js.unescape (unescape_plus_js_string s))\n\nlet urldecode s = Js.to_bytestring (Js.unescape (Js.bytestring (unescape_plus s)))\n\n(*let urlencode_js_string_string s =\n  Js.to_bytestring (Js.escape s)*)\n\nlet urlencode ?(with_plus = true) s =\n  if with_plus\n  then escape_plus (Js.to_bytestring (Js.escape (Js.bytestring s)))\n  else Js.to_bytestring (Js.escape (Js.bytestring s))\n\ntype http_url =\n  { hu_host : string  (** The host part of the url. *)\n  ; hu_port : int  (** The port for the connection if any. *)\n  ; hu_path : string list  (** The path split on ['/'] characters. *)\n  ; hu_path_string : string  (** The original entire path. *)\n  ; hu_arguments : (string * string) list\n        (** Arguments as a field-value\n                                             association list.*)\n  ; hu_fragment : string  (** The fragment part (after the ['#'] character). *)\n  }\n(** The type for HTTP url. *)\n\ntype file_url =\n  { fu_path : string list\n  ; fu_path_string : string\n  ; fu_arguments : (string * string) list\n  ; fu_fragment : string\n  }\n(** The type for local file urls. *)\n\ntype url =\n  | Http of http_url\n  | Https of http_url\n  | File of file_url\n      (** The type for urls. [File] is for local files and [Exotic s] is for\n    unknown/unsupported protocols. *)\n\nexception Not_an_http_protocol\n\nlet is_secure prot_string =\n  match Js.to_bytestring prot_string##toLowerCase with\n  | \"https:\" | \"https\" -> true\n  | \"http:\" | \"http\" -> false\n  | \"file:\" | \"file\" | _ -> raise Not_an_http_protocol\n\n(* port number *)\nlet default_http_port = 80\n\nlet default_https_port = 443\n\n(* path *)\nlet path_of_path_string s =\n  let l = String.length s in\n  let rec aux i =\n    let j = try String.index_from s i '/' with Not_found -> l in\n    let word = String.sub s i (j - i) in\n    if j >= l then [ word ] else word :: aux (j + 1)\n  in\n  match aux 0 with\n  | [ \"\" ] -> []\n  | [ \"\"; \"\" ] -> [ \"\" ]\n  | a -> a\n\n(* Arguments *)\nlet encode_arguments l =\n  String.concat \"&\" (List.map (fun (n, v) -> urlencode n ^ \"=\" ^ urlencode v) l)\n\nlet decode_arguments_js_string s =\n  let arr = split '&' s in\n  let len = arr##.length in\n  let name_value_split s = split_2 '=' s in\n  let rec aux acc idx =\n    if idx < 0\n    then acc\n    else\n      try\n        aux\n          (Js.Optdef.case (Js.array_get arr idx) interrupt (fun s ->\n               Js.Optdef.case (name_value_split s) interrupt (fun (x, y) ->\n                   let get = urldecode_js_string_string in\n                   get x, get y))\n          :: acc)\n          (pred idx)\n      with Local_exn -> aux acc (pred idx)\n  in\n  aux [] (len - 1)\n\nlet decode_arguments s = decode_arguments_js_string (Js.bytestring s)\n\nlet url_re =\n  new%js Js.regExp\n    (Js.bytestring\n       \"^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\\\[[0-9a-zA-Z.-]+\\\\]|\\\\[[0-9A-Fa-f:.]+\\\\])?(:([0-9]+))?(/([^\\\\?#]*)(\\\\?([^#]*))?(#(.*))?)?$\")\n\nlet file_re =\n  new%js Js.regExp\n    (Js.bytestring \"^([Ff][Ii][Ll][Ee])://([^\\\\?#]*)(\\\\?([^#]*))?(#(.*))?$\")\n\nlet url_of_js_string s =\n  Js.Opt.case\n    (url_re##exec s)\n    (fun () ->\n      Js.Opt.case\n        (file_re##exec s)\n        (fun () -> None)\n        (fun handle ->\n          let res = Js.match_result handle in\n          let path_str =\n            urldecode_js_string_string (Js.Optdef.get (Js.array_get res 2) interrupt)\n          in\n          Some\n            (File\n               { fu_path = path_of_path_string path_str\n               ; fu_path_string = path_str\n               ; fu_arguments =\n                   decode_arguments_js_string\n                     (Js.Optdef.get (Js.array_get res 4) (fun () -> Js.bytestring \"\"))\n               ; fu_fragment =\n                   Js.to_bytestring\n                     (Js.Optdef.get (Js.array_get res 6) (fun () -> Js.bytestring \"\"))\n               })))\n    (fun handle ->\n      let res = Js.match_result handle in\n      let ssl = is_secure (Js.Optdef.get (Js.array_get res 1) interrupt) in\n      let port_of_string = function\n        | \"\" -> if ssl then 443 else 80\n        | s -> int_of_string s\n      in\n      let path_str =\n        urldecode_js_string_string\n          (Js.Optdef.get (Js.array_get res 6) (fun () -> Js.bytestring \"\"))\n      in\n      let url =\n        { hu_host =\n            urldecode_js_string_string (Js.Optdef.get (Js.array_get res 2) interrupt)\n        ; hu_port =\n            port_of_string\n              (Js.to_bytestring\n                 (Js.Optdef.get (Js.array_get res 4) (fun () -> Js.bytestring \"\")))\n        ; hu_path = path_of_path_string path_str\n        ; hu_path_string = path_str\n        ; hu_arguments =\n            decode_arguments_js_string\n              (Js.Optdef.get (Js.array_get res 8) (fun () -> Js.bytestring \"\"))\n        ; hu_fragment =\n            urldecode_js_string_string\n              (Js.Optdef.get (Js.array_get res 10) (fun () -> Js.bytestring \"\"))\n        }\n      in\n      Some (if ssl then Https url else Http url))\n\nlet url_of_string s = url_of_js_string (Js.bytestring s)\n\nlet string_of_url = function\n  | File { fu_path = path; fu_arguments = args; fu_fragment = frag; _ } -> (\n      \"file://\"\n      ^ String.concat \"/\" (List.map (fun x -> urlencode x) path)\n      ^ (match args with\n        | [] -> \"\"\n        | l -> \"?\" ^ encode_arguments l)\n      ^\n      match frag with\n      | \"\" -> \"\"\n      | s -> \"#\" ^ urlencode s)\n  | Http\n      { hu_host = host\n      ; hu_port = port\n      ; hu_path = path\n      ; hu_arguments = args\n      ; hu_fragment = frag\n      ; _\n      } -> (\n      \"http://\"\n      ^ urlencode host\n      ^ (match port with\n        | 80 -> \"\"\n        | n -> \":\" ^ string_of_int n)\n      ^ \"/\"\n      ^ String.concat \"/\" (List.map (fun x -> urlencode x) path)\n      ^ (match args with\n        | [] -> \"\"\n        | l -> \"?\" ^ encode_arguments l)\n      ^\n      match frag with\n      | \"\" -> \"\"\n      | s -> \"#\" ^ urlencode s)\n  | Https\n      { hu_host = host\n      ; hu_port = port\n      ; hu_path = path\n      ; hu_arguments = args\n      ; hu_fragment = frag\n      ; _\n      } -> (\n      \"https://\"\n      ^ urlencode host\n      ^ (match port with\n        | 443 -> \"\"\n        | n -> \":\" ^ string_of_int n)\n      ^ \"/\"\n      ^ String.concat \"/\" (List.map (fun x -> urlencode x) path)\n      ^ (match args with\n        | [] -> \"\"\n        | l -> \"?\" ^ encode_arguments l)\n      ^\n      match frag with\n      | \"\" -> \"\"\n      | s -> \"#\" ^ urlencode s)\n\nmodule Current = struct\n  let l =\n    if Js.Optdef.test (Js.Optdef.return Dom_html.window##.location)\n    then Dom_html.window##.location\n    else\n      let empty = Js.string \"\" in\n      object%js\n        val mutable href = empty\n\n        val mutable protocol = empty\n\n        val mutable host = empty\n\n        val mutable hostname = empty\n\n        val mutable port = empty\n\n        val mutable pathname = empty\n\n        val mutable search = empty\n\n        val mutable hash = empty\n\n        val origin = Js.undefined\n\n        method reload = ()\n\n        method replace _ = ()\n\n        method assign _ = ()\n      end\n\n  let host = urldecode_js_string_string l##.hostname\n\n  let protocol = urldecode_js_string_string l##.protocol\n\n  let port =\n    (fun () ->\n      try Some (int_of_string (Js.to_bytestring l##.port)) with Failure _ -> None)\n      ()\n\n  let path_string = urldecode_js_string_string l##.pathname\n\n  let path = path_of_path_string path_string\n\n  let arguments =\n    decode_arguments_js_string\n      (if Js.equals (l##.search##charAt 0) (Js.string \"?\")\n       then l##.search##slice_end 1\n       else l##.search)\n\n  let get_fragment () =\n    let s = Js.to_bytestring l##.hash in\n    if String.length s > 0 && Char.equal s.[0] '#'\n    then String.sub s 1 (String.length s - 1)\n    else s\n\n  let set_fragment s = l##.hash := Js.bytestring s\n\n  let get () = url_of_js_string l##.href\n\n  let set u = l##.href := Js.bytestring (string_of_url u)\n\n  let as_string = urldecode_js_string_string l##.href\nend\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2014 Hugo Heuzard\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\nexternal create_file : name:string -> content:string -> unit = \"caml_create_file\"\n\nexternal read_file : name:string -> string = \"caml_read_file_content\"\n\nlet update_file ~name ~content =\n  let oc = open_out name in\n  output_string oc content;\n  close_out oc\n\nexternal set_channel_output' :\n  out_channel -> (Js.js_string Js.t -> unit) Js.callback -> unit\n  = \"caml_ml_set_channel_output\"\n\nexternal set_channel_input' : in_channel -> (unit -> string) Js.callback -> unit\n  = \"caml_ml_set_channel_refill\"\n\nlet set_channel_flusher (out_channel : out_channel) (f : string -> unit) =\n  let f' : (Js.js_string Js.t -> unit) Js.callback =\n    Js.wrap_callback (fun s -> f (Js.to_bytestring s))\n  in\n  set_channel_output' out_channel f'\n\nlet set_channel_filler (in_channel : in_channel) (f : unit -> string) =\n  let f' : (unit -> string) Js.callback = Js.wrap_callback f in\n  set_channel_input' in_channel f'\n\nexternal mount_point : unit -> string list = \"caml_list_mount_point\"\n\nexternal mount_autoload :\n  string -> (string -> string -> string option) Js.callback -> unit\n  = \"caml_mount_autoload\"\n\nexternal unmount : string -> unit = \"caml_unmount\"\n\nlet mount ~path f =\n  mount_autoload path (Js.wrap_callback (fun prefix path -> f ~prefix ~path))\n\nlet unmount ~path = unmount path\n\nlet js_of_ocaml_version =\n  if String.equal Lib_version.git_version \"\"\n  then Lib_version.s\n  else Lib_version.s ^ \"+\" ^ Lib_version.git_version\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2019 Alexander Yanin\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\nclass type resizeObserverSize = object\n  method inlineSize : Js.number_t Js.readonly_prop\n\n  method blockSize : Js.number_t Js.readonly_prop\nend\n\nclass type resizeObserverEntry = object\n  method target : Dom.node Js.t Js.readonly_prop\n\n  method contentRect : Dom_html.clientRect Js.t Js.readonly_prop\n\n  method borderBoxSize : resizeObserverSize Js.t Js.js_array Js.t Js.readonly_prop\n\n  method contentBoxSize : resizeObserverSize Js.t Js.js_array Js.t Js.readonly_prop\nend\n\nclass type resizeObserverOptions = object\n  method box : Js.js_string Js.t Js.writeonly_prop\nend\n\nclass type resizeObserver = object\n  method observe : #Dom.node Js.t -> unit Js.meth\n\n  method observe_withOptions :\n    #Dom.node Js.t -> resizeObserverOptions Js.t -> unit Js.meth\n\n  method unobserve : #Dom.node Js.t -> unit Js.meth\n\n  method disconnect : unit Js.meth\nend\n\nlet empty_resize_observer_options () : resizeObserverOptions Js.t = Js.Unsafe.obj [||]\n\nlet resizeObserver = Js.Unsafe.global##._ResizeObserver\n\nlet is_supported () = Js.Optdef.test resizeObserver\n\nlet resizeObserver :\n    (   (resizeObserverEntry Js.t Js.js_array Js.t -> resizeObserver Js.t -> unit)\n        Js.callback\n     -> resizeObserver Js.t)\n    Js.constr =\n  resizeObserver\n\nlet observe\n    ~(node : #Dom.node Js.t)\n    ~(f : resizeObserverEntry Js.t Js.js_array Js.t -> resizeObserver Js.t -> unit)\n    ?(box : Js.js_string Js.t option)\n    () : resizeObserver Js.t =\n  let obs = new%js resizeObserver (Js.wrap_callback f) in\n  (match box with\n  | None -> obs##observe node\n  | Some box ->\n      let opts = empty_resize_observer_options () in\n      opts##.box := box;\n      obs##observe_withOptions node opts);\n  obs\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2021 Philip White\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen! Import\n\nclass type performanceObserverInit = object\n  method entryTypes : Js.js_string Js.t Js.js_array Js.t Js.writeonly_prop\nend\n\nclass type performanceEntry = object\n  method name : Js.js_string Js.t Js.readonly_prop\n\n  method entryType : Js.js_string Js.t Js.readonly_prop\n\n  method startTime : Js.number_t Js.readonly_prop\n\n  method duration : Js.number_t Js.readonly_prop\nend\n\nclass type performanceObserverEntryList = object\n  method getEntries : performanceEntry Js.t Js.js_array Js.t Js.meth\nend\n\nclass type performanceObserver = object\n  method observe : performanceObserverInit Js.t -> unit Js.meth\n\n  method disconnect : unit Js.meth\n\n  method takeRecords : performanceEntry Js.t Js.js_array Js.t Js.meth\nend\n\nlet performanceObserver = Js.Unsafe.global##._PerformanceObserver\n\nlet is_supported () = Js.Optdef.test performanceObserver\n\nlet performanceObserver :\n    (   (performanceObserverEntryList Js.t -> performanceObserver Js.t -> unit) Js.callback\n     -> performanceObserver Js.t)\n    Js.constr =\n  performanceObserver\n\nlet observe ~entry_types ~f =\n  let entry_types = entry_types |> List.map Js.string |> Array.of_list |> Js.array in\n  let performance_observer_init : performanceObserverInit Js.t = Js.Unsafe.obj [||] in\n  let () = performance_observer_init##.entryTypes := entry_types in\n  let obs = new%js performanceObserver (Js.wrap_callback f) in\n  let () = obs##observe performance_observer_init in\n  obs\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2015 Stéphane Legrand\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\nclass type mutationObserverInit = object\n  method childList : bool Js.writeonly_prop\n\n  method attributes : bool Js.writeonly_prop\n\n  method characterData : bool Js.writeonly_prop\n\n  method subtree : bool Js.writeonly_prop\n\n  method attributeOldValue : bool Js.writeonly_prop\n\n  method characterDataOldValue : bool Js.writeonly_prop\n\n  method attributeFilter : Js.js_string Js.t Js.js_array Js.t Js.writeonly_prop\nend\n\nclass type mutationRecord = object\n  method _type : Js.js_string Js.t Js.readonly_prop\n\n  method target : Dom.node Js.t Js.readonly_prop\n\n  method addedNodes : Dom.node Dom.nodeList Js.t Js.readonly_prop\n\n  method removedNodes : Dom.node Dom.nodeList Js.t Js.readonly_prop\n\n  method previousSibling : Dom.node Js.t Js.opt Js.readonly_prop\n\n  method nextSibling : Dom.node Js.t Js.opt Js.readonly_prop\n\n  method attributeName : Js.js_string Js.t Js.opt Js.readonly_prop\n\n  method attributeNamespace : Js.js_string Js.t Js.opt Js.readonly_prop\n\n  method oldValue : Js.js_string Js.t Js.opt Js.readonly_prop\nend\n\nclass type mutationObserver = object\n  method observe : #Dom.node Js.t -> mutationObserverInit Js.t -> unit Js.meth\n\n  method disconnect : unit Js.meth\n\n  method takeRecords : mutationRecord Js.t Js.js_array Js.t Js.meth\nend\n\nlet empty_mutation_observer_init () : mutationObserverInit Js.t = Js.Unsafe.obj [||]\n\nlet mutationObserver = Js.Unsafe.global##._MutationObserver\n\nlet is_supported () = Js.Optdef.test mutationObserver\n\nlet mutationObserver :\n    (   (mutationRecord Js.t Js.js_array Js.t -> mutationObserver Js.t -> unit) Js.callback\n     -> mutationObserver Js.t)\n    Js.constr =\n  mutationObserver\n\nlet observe\n    ~(node : #Dom.node Js.t)\n    ~(f : mutationRecord Js.t Js.js_array Js.t -> mutationObserver Js.t -> unit)\n    ?(child_list : bool option)\n    ?(attributes : bool option)\n    ?(character_data : bool option)\n    ?(subtree : bool option)\n    ?(attribute_old_value : bool option)\n    ?(character_data_old_value : bool option)\n    ?(attribute_filter : Js.js_string Js.t list option)\n    () : mutationObserver Js.t =\n  let opt_iter x f =\n    match x with\n    | None -> ()\n    | Some x -> f x\n  in\n  let obs = new%js mutationObserver (Js.wrap_callback f) in\n  let cfg = empty_mutation_observer_init () in\n  let () = opt_iter child_list (fun v -> cfg##.childList := v) in\n  let () = opt_iter attributes (fun v -> cfg##.attributes := v) in\n  let () = opt_iter character_data (fun v -> cfg##.characterData := v) in\n  let () = opt_iter subtree (fun v -> cfg##.subtree := v) in\n  let () = opt_iter attribute_old_value (fun v -> cfg##.attributeOldValue := v) in\n  let () =\n    opt_iter character_data_old_value (fun v -> cfg##.characterDataOldValue := v)\n  in\n  let () =\n    opt_iter attribute_filter (fun l ->\n        cfg##.attributeFilter := Js.array (Array.of_list l))\n  in\n  let () = obs##observe node cfg in\n  obs\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright Pierre Chambart 2012.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\ntype 'a t = < > Js.t\n\nlet obj = Js.Unsafe.global##._Object\n\nlet create () : 'a t = new%js obj\n\nlet add (t : 'a t) (k : Js.js_string Js.t) (v : 'a) =\n  (* '_' is added to avoid conflicts with objects methods *)\n  Js.Unsafe.set t (k##concat (Js.string \"_\")) v\n\nlet remove (t : 'a t) (k : Js.js_string Js.t) =\n  Js.Unsafe.delete t (k##concat (Js.string \"_\"))\n\nlet find (t : 'a t) (k : Js.js_string Js.t) : 'a Js.Optdef.t =\n  Js.Unsafe.get t (k##concat (Js.string \"_\"))\n\nlet keys (t : 'a t) : Js.js_string Js.t list =\n  let key_array : Js.js_string Js.t Js.js_array Js.t =\n    Js.Unsafe.global##._Object##keys t\n  in\n  let res = ref [] in\n  for i = 0 to pred key_array##.length do\n    let key =\n      Js.Optdef.get (Js.array_get key_array i) (fun () -> failwith \"Jstable.keys\")\n    in\n    res := key##substring 0 (pred key##.length) :: !res\n  done;\n  List.rev !res\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright Grégoire Henry 2010.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nclass type json = object\n  method parse : 'a. js_string t -> 'a meth\n\n  method parse_ :\n    'a 'b 'c 'd. js_string t -> ('b t, js_string t -> 'c -> 'd) meth_callback -> 'a meth\n\n  method stringify : 'a. 'a -> js_string t meth\n\n  method stringify_ :\n    'a 'b 'c 'd. 'a -> ('b, js_string t -> 'c -> 'd) meth_callback -> js_string t meth\nend\n\nlet json : json Js.t = Unsafe.global##._JSON\n\nlet input_reviver =\n  let reviver _this _key (value : Unsafe.any) : Obj.t =\n    if Js.equals (typeof value) (string \"string\")\n    then Obj.repr (to_bytestring (Unsafe.coerce value))\n    else if instanceof value Js.array_empty\n            && (Unsafe.coerce value)##.length == 4\n            && Unsafe.get value 0 == 255\n    then\n      Obj.repr\n        (Jsoo_runtime.Int64.create_int64_lo_mi_hi\n           (Unsafe.get value 1)\n           (Unsafe.get value 2)\n           (Unsafe.get value 3))\n    else Obj.repr value\n  in\n  wrap_meth_callback reviver\n\nlet unsafe_input s = json##parse_ s input_reviver\n\nclass type obj = object\n  method constructor : 'a. 'a constr Js.readonly_prop\nend\n\nlet mlInt64_constr =\n  let dummy_int64 = 1L in\n  let dummy_obj : obj t = Obj.magic dummy_int64 in\n  dummy_obj##.constructor\n\nlet output_reviver _key (value : Unsafe.any) : Obj.t =\n  if Obj.tag (Obj.repr value) = Obj.string_tag\n  then Obj.repr (bytestring (Obj.magic value : string))\n  else if instanceof value mlInt64_constr\n  then\n    let value = Unsafe.coerce value in\n    Obj.repr (array [| 255; value##.lo; value##.mi; value##.hi |])\n  else Obj.repr value\n\nlet output obj = json##stringify_ obj (Js.wrap_callback output_reviver)\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Raphaël Proust\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen! Import\n\nmodule Color = struct\n  (* The type of CSS colors. First by name and then by constructor. *)\n  type name =\n    | Aliceblue\n    | Antiquewhite\n    | Aqua\n    | Aquamarine\n    | Azure\n    | Beige\n    | Bisque\n    | Black\n    | Blanchedalmond\n    | Blue\n    | Blueviolet\n    | Brown\n    | Burlywood\n    | Cadetblue\n    | Chartreuse\n    | Chocolate\n    | Coral\n    | Cornflowerblue\n    | Cornsilk\n    | Crimson\n    | Cyan\n    | Darkblue\n    | Darkcyan\n    | Darkgoldenrod\n    | Darkgray\n    | Darkgreen\n    | Darkgrey\n    | Darkkhaki\n    | Darkmagenta\n    | Darkolivegreen\n    | Darkorange\n    | Darkorchid\n    | Darkred\n    | Darksalmon\n    | Darkseagreen\n    | Darkslateblue\n    | Darkslategray\n    | Darkslategrey\n    | Darkturquoise\n    | Darkviolet\n    | Deeppink\n    | Deepskyblue\n    | Dimgray\n    | Dimgrey\n    | Dodgerblue\n    | Firebrick\n    | Floralwhite\n    | Forestgreen\n    | Fuchsia\n    | Gainsboro\n    | Ghostwhite\n    | Gold\n    | Goldenrod\n    | Gray\n    | Grey\n    | Green\n    | Greenyellow\n    | Honeydew\n    | Hotpink\n    | Indianred\n    | Indigo\n    | Ivory\n    | Khaki\n    | Lavender\n    | Lavenderblush\n    | Lawngreen\n    | Lemonchiffon\n    | Lightblue\n    | Lightcoral\n    | Lightcyan\n    | Lightgoldenrodyellow\n    | Lightgray\n    | Lightgreen\n    | Lightgrey\n    | Lightpink\n    | Lightsalmon\n    | Lightseagreen\n    | Lightskyblue\n    | Lightslategray\n    | Lightslategrey\n    | Lightsteelblue\n    | Lightyellow\n    | Lime\n    | Limegreen\n    | Linen\n    | Magenta\n    | Maroon\n    | Mediumaquamarine\n    | Mediumblue\n    | Mediumorchid\n    | Mediumpurple\n    | Mediumseagreen\n    | Mediumslateblue\n    | Mediumspringgreen\n    | Mediumturquoise\n    | Mediumvioletred\n    | Midnightblue\n    | Mintcream\n    | Mistyrose\n    | Moccasin\n    | Navajowhite\n    | Navy\n    | Oldlace\n    | Olive\n    | Olivedrab\n    | Orange\n    | Orangered\n    | Orchid\n    | Palegoldenrod\n    | Palegreen\n    | Paleturquoise\n    | Palevioletred\n    | Papayawhip\n    | Peachpuff\n    | Peru\n    | Pink\n    | Plum\n    | Powderblue\n    | Purple\n    | Red\n    | Rosybrown\n    | Royalblue\n    | Saddlebrown\n    | Salmon\n    | Sandybrown\n    | Seagreen\n    | Seashell\n    | Sienna\n    | Silver\n    | Skyblue\n    | Slateblue\n    | Slategray\n    | Slategrey\n    | Snow\n    | Springgreen\n    | Steelblue\n    | Tan\n    | Teal\n    | Thistle\n    | Tomato\n    | Turquoise\n    | Violet\n    | Wheat\n    | White\n    | Whitesmoke\n    | Yellow\n    | Yellowgreen\n\n  let string_of_name = function\n    | Aliceblue -> \"aliceblue\"\n    | Antiquewhite -> \"antiquewhite\"\n    | Aqua -> \"aqua\"\n    | Aquamarine -> \"aquamarine\"\n    | Azure -> \"azure\"\n    | Beige -> \"beige\"\n    | Bisque -> \"bisque\"\n    | Black -> \"black\"\n    | Blanchedalmond -> \"blanchedalmond\"\n    | Blue -> \"blue\"\n    | Blueviolet -> \"blueviolet\"\n    | Brown -> \"brown\"\n    | Burlywood -> \"burlywood\"\n    | Cadetblue -> \"cadetblue\"\n    | Chartreuse -> \"chartreuse\"\n    | Chocolate -> \"chocolate\"\n    | Coral -> \"coral\"\n    | Cornflowerblue -> \"cornflowerblue\"\n    | Cornsilk -> \"cornsilk\"\n    | Crimson -> \"crimson\"\n    | Cyan -> \"cyan\"\n    | Darkblue -> \"darkblue\"\n    | Darkcyan -> \"darkcyan\"\n    | Darkgoldenrod -> \"darkgoldenrod\"\n    | Darkgray -> \"darkgray\"\n    | Darkgreen -> \"darkgreen\"\n    | Darkgrey -> \"darkgrey\"\n    | Darkkhaki -> \"darkkhaki\"\n    | Darkmagenta -> \"darkmagenta\"\n    | Darkolivegreen -> \"darkolivegreen\"\n    | Darkorange -> \"darkorange\"\n    | Darkorchid -> \"darkorchid\"\n    | Darkred -> \"darkred\"\n    | Darksalmon -> \"darksalmon\"\n    | Darkseagreen -> \"darkseagreen\"\n    | Darkslateblue -> \"darkslateblue\"\n    | Darkslategray -> \"darkslategray\"\n    | Darkslategrey -> \"darkslategrey\"\n    | Darkturquoise -> \"darkturquoise\"\n    | Darkviolet -> \"darkviolet\"\n    | Deeppink -> \"deeppink\"\n    | Deepskyblue -> \"deepskyblue\"\n    | Dimgray -> \"dimgray\"\n    | Dimgrey -> \"dimgrey\"\n    | Dodgerblue -> \"dodgerblue\"\n    | Firebrick -> \"firebrick\"\n    | Floralwhite -> \"floralwhite\"\n    | Forestgreen -> \"forestgreen\"\n    | Fuchsia -> \"fuchsia\"\n    | Gainsboro -> \"gainsboro\"\n    | Ghostwhite -> \"ghostwhite\"\n    | Gold -> \"gold\"\n    | Goldenrod -> \"goldenrod\"\n    | Gray -> \"gray\"\n    | Green -> \"green\"\n    | Greenyellow -> \"greenyellow\"\n    | Grey -> \"grey\"\n    | Honeydew -> \"honeydew\"\n    | Hotpink -> \"hotpink\"\n    | Indianred -> \"indianred\"\n    | Indigo -> \"indigo\"\n    | Ivory -> \"ivory\"\n    | Khaki -> \"khaki\"\n    | Lavender -> \"lavender\"\n    | Lavenderblush -> \"lavenderblush\"\n    | Lawngreen -> \"lawngreen\"\n    | Lemonchiffon -> \"lemonchiffon\"\n    | Lightblue -> \"lightblue\"\n    | Lightcoral -> \"lightcoral\"\n    | Lightcyan -> \"lightcyan\"\n    | Lightgoldenrodyellow -> \"lightgoldenrodyellow\"\n    | Lightgray -> \"lightgray\"\n    | Lightgreen -> \"lightgreen\"\n    | Lightgrey -> \"lightgrey\"\n    | Lightpink -> \"lightpink\"\n    | Lightsalmon -> \"lightsalmon\"\n    | Lightseagreen -> \"lightseagreen\"\n    | Lightskyblue -> \"lightskyblue\"\n    | Lightslategray -> \"lightslategray\"\n    | Lightslategrey -> \"lightslategrey\"\n    | Lightsteelblue -> \"lightsteelblue\"\n    | Lightyellow -> \"lightyellow\"\n    | Lime -> \"lime\"\n    | Limegreen -> \"limegreen\"\n    | Linen -> \"linen\"\n    | Magenta -> \"magenta\"\n    | Maroon -> \"maroon\"\n    | Mediumaquamarine -> \"mediumaquamarine\"\n    | Mediumblue -> \"mediumblue\"\n    | Mediumorchid -> \"mediumorchid\"\n    | Mediumpurple -> \"mediumpurple\"\n    | Mediumseagreen -> \"mediumseagreen\"\n    | Mediumslateblue -> \"mediumslateblue\"\n    | Mediumspringgreen -> \"mediumspringgreen\"\n    | Mediumturquoise -> \"mediumturquoise\"\n    | Mediumvioletred -> \"mediumvioletred\"\n    | Midnightblue -> \"midnightblue\"\n    | Mintcream -> \"mintcream\"\n    | Mistyrose -> \"mistyrose\"\n    | Moccasin -> \"moccasin\"\n    | Navajowhite -> \"navajowhite\"\n    | Navy -> \"navy\"\n    | Oldlace -> \"oldlace\"\n    | Olive -> \"olive\"\n    | Olivedrab -> \"olivedrab\"\n    | Orange -> \"orange\"\n    | Orangered -> \"orangered\"\n    | Orchid -> \"orchid\"\n    | Palegoldenrod -> \"palegoldenrod\"\n    | Palegreen -> \"palegreen\"\n    | Paleturquoise -> \"paleturquoise\"\n    | Palevioletred -> \"palevioletred\"\n    | Papayawhip -> \"papayawhip\"\n    | Peachpuff -> \"peachpuff\"\n    | Peru -> \"peru\"\n    | Pink -> \"pink\"\n    | Plum -> \"plum\"\n    | Powderblue -> \"powderblue\"\n    | Purple -> \"purple\"\n    | Red -> \"red\"\n    | Rosybrown -> \"rosybrown\"\n    | Royalblue -> \"royalblue\"\n    | Saddlebrown -> \"saddlebrown\"\n    | Salmon -> \"salmon\"\n    | Sandybrown -> \"sandybrown\"\n    | Seagreen -> \"seagreen\"\n    | Seashell -> \"seashell\"\n    | Sienna -> \"sienna\"\n    | Silver -> \"silver\"\n    | Skyblue -> \"skyblue\"\n    | Slateblue -> \"slateblue\"\n    | Slategray -> \"slategray\"\n    | Slategrey -> \"slategrey\"\n    | Snow -> \"snow\"\n    | Springgreen -> \"springgreen\"\n    | Steelblue -> \"steelblue\"\n    | Tan -> \"tan\"\n    | Teal -> \"teal\"\n    | Thistle -> \"thistle\"\n    | Tomato -> \"tomato\"\n    | Turquoise -> \"turquoise\"\n    | Violet -> \"violet\"\n    | Wheat -> \"wheat\"\n    | White -> \"white\"\n    | Whitesmoke -> \"whitesmoke\"\n    | Yellow -> \"yellow\"\n    | Yellowgreen -> \"yellowgreen\"\n\n  let name_of_string = function\n    | \"aliceblue\" -> Aliceblue\n    | \"antiquewhite\" -> Antiquewhite\n    | \"aqua\" -> Aqua\n    | \"aquamarine\" -> Aquamarine\n    | \"azure\" -> Azure\n    | \"beige\" -> Beige\n    | \"bisque\" -> Bisque\n    | \"black\" -> Black\n    | \"blanchedalmond\" -> Blanchedalmond\n    | \"blue\" -> Blue\n    | \"blueviolet\" -> Blueviolet\n    | \"brown\" -> Brown\n    | \"burlywood\" -> Burlywood\n    | \"cadetblue\" -> Cadetblue\n    | \"chartreuse\" -> Chartreuse\n    | \"chocolate\" -> Chocolate\n    | \"coral\" -> Coral\n    | \"cornflowerblue\" -> Cornflowerblue\n    | \"cornsilk\" -> Cornsilk\n    | \"crimson\" -> Crimson\n    | \"cyan\" -> Cyan\n    | \"darkblue\" -> Darkblue\n    | \"darkcyan\" -> Darkcyan\n    | \"darkgoldenrod\" -> Darkgoldenrod\n    | \"darkgray\" -> Darkgray\n    | \"darkgreen\" -> Darkgreen\n    | \"darkgrey\" -> Darkgrey\n    | \"darkkhaki\" -> Darkkhaki\n    | \"darkmagenta\" -> Darkmagenta\n    | \"darkolivegreen\" -> Darkolivegreen\n    | \"darkorange\" -> Darkorange\n    | \"darkorchid\" -> Darkorchid\n    | \"darkred\" -> Darkred\n    | \"darksalmon\" -> Darksalmon\n    | \"darkseagreen\" -> Darkseagreen\n    | \"darkslateblue\" -> Darkslateblue\n    | \"darkslategray\" -> Darkslategray\n    | \"darkslategrey\" -> Darkslategrey\n    | \"darkturquoise\" -> Darkturquoise\n    | \"darkviolet\" -> Darkviolet\n    | \"deeppink\" -> Deeppink\n    | \"deepskyblue\" -> Deepskyblue\n    | \"dimgray\" -> Dimgray\n    | \"dimgrey\" -> Dimgrey\n    | \"dodgerblue\" -> Dodgerblue\n    | \"firebrick\" -> Firebrick\n    | \"floralwhite\" -> Floralwhite\n    | \"forestgreen\" -> Forestgreen\n    | \"fuchsia\" -> Fuchsia\n    | \"gainsboro\" -> Gainsboro\n    | \"ghostwhite\" -> Ghostwhite\n    | \"gold\" -> Gold\n    | \"goldenrod\" -> Goldenrod\n    | \"gray\" -> Gray\n    | \"green\" -> Green\n    | \"greenyellow\" -> Greenyellow\n    | \"grey\" -> Grey\n    | \"honeydew\" -> Honeydew\n    | \"hotpink\" -> Hotpink\n    | \"indianred\" -> Indianred\n    | \"indigo\" -> Indigo\n    | \"ivory\" -> Ivory\n    | \"khaki\" -> Khaki\n    | \"lavender\" -> Lavender\n    | \"lavenderblush\" -> Lavenderblush\n    | \"lawngreen\" -> Lawngreen\n    | \"lemonchiffon\" -> Lemonchiffon\n    | \"lightblue\" -> Lightblue\n    | \"lightcoral\" -> Lightcoral\n    | \"lightcyan\" -> Lightcyan\n    | \"lightgoldenrodyellow\" -> Lightgoldenrodyellow\n    | \"lightgray\" -> Lightgray\n    | \"lightgreen\" -> Lightgreen\n    | \"lightgrey\" -> Lightgrey\n    | \"lightpink\" -> Lightpink\n    | \"lightsalmon\" -> Lightsalmon\n    | \"lightseagreen\" -> Lightseagreen\n    | \"lightskyblue\" -> Lightskyblue\n    | \"lightslategray\" -> Lightslategray\n    | \"lightslategrey\" -> Lightslategrey\n    | \"lightsteelblue\" -> Lightsteelblue\n    | \"lightyellow\" -> Lightyellow\n    | \"lime\" -> Lime\n    | \"limegreen\" -> Limegreen\n    | \"linen\" -> Linen\n    | \"magenta\" -> Magenta\n    | \"maroon\" -> Maroon\n    | \"mediumaquamarine\" -> Mediumaquamarine\n    | \"mediumblue\" -> Mediumblue\n    | \"mediumorchid\" -> Mediumorchid\n    | \"mediumpurple\" -> Mediumpurple\n    | \"mediumseagreen\" -> Mediumseagreen\n    | \"mediumslateblue\" -> Mediumslateblue\n    | \"mediumspringgreen\" -> Mediumspringgreen\n    | \"mediumturquoise\" -> Mediumturquoise\n    | \"mediumvioletred\" -> Mediumvioletred\n    | \"midnightblue\" -> Midnightblue\n    | \"mintcream\" -> Mintcream\n    | \"mistyrose\" -> Mistyrose\n    | \"moccasin\" -> Moccasin\n    | \"navajowhite\" -> Navajowhite\n    | \"navy\" -> Navy\n    | \"oldlace\" -> Oldlace\n    | \"olive\" -> Olive\n    | \"olivedrab\" -> Olivedrab\n    | \"orange\" -> Orange\n    | \"orangered\" -> Orangered\n    | \"orchid\" -> Orchid\n    | \"palegoldenrod\" -> Palegoldenrod\n    | \"palegreen\" -> Palegreen\n    | \"paleturquoise\" -> Paleturquoise\n    | \"palevioletred\" -> Palevioletred\n    | \"papayawhip\" -> Papayawhip\n    | \"peachpuff\" -> Peachpuff\n    | \"peru\" -> Peru\n    | \"pink\" -> Pink\n    | \"plum\" -> Plum\n    | \"powderblue\" -> Powderblue\n    | \"purple\" -> Purple\n    | \"red\" -> Red\n    | \"rosybrown\" -> Rosybrown\n    | \"royalblue\" -> Royalblue\n    | \"saddlebrown\" -> Saddlebrown\n    | \"salmon\" -> Salmon\n    | \"sandybrown\" -> Sandybrown\n    | \"seagreen\" -> Seagreen\n    | \"seashell\" -> Seashell\n    | \"sienna\" -> Sienna\n    | \"silver\" -> Silver\n    | \"skyblue\" -> Skyblue\n    | \"slateblue\" -> Slateblue\n    | \"slategray\" -> Slategray\n    | \"slategrey\" -> Slategrey\n    | \"snow\" -> Snow\n    | \"springgreen\" -> Springgreen\n    | \"steelblue\" -> Steelblue\n    | \"tan\" -> Tan\n    | \"teal\" -> Teal\n    | \"thistle\" -> Thistle\n    | \"tomato\" -> Tomato\n    | \"turquoise\" -> Turquoise\n    | \"violet\" -> Violet\n    | \"wheat\" -> Wheat\n    | \"white\" -> White\n    | \"whitesmoke\" -> Whitesmoke\n    | \"yellow\" -> Yellow\n    | \"yellowgreen\" -> Yellowgreen\n    | s -> raise (Invalid_argument (s ^ \" is not a valid color name\"))\n\n  let rgb_of_name = function\n    | Aliceblue -> 240, 248, 255\n    | Antiquewhite -> 250, 235, 215\n    | Aqua -> 0, 255, 255\n    | Aquamarine -> 127, 255, 212\n    | Azure -> 240, 255, 255\n    | Beige -> 245, 245, 220\n    | Bisque -> 255, 228, 196\n    | Black -> 0, 0, 0\n    | Blanchedalmond -> 255, 235, 205\n    | Blue -> 0, 0, 255\n    | Blueviolet -> 138, 43, 226\n    | Brown -> 165, 42, 42\n    | Burlywood -> 222, 184, 135\n    | Cadetblue -> 95, 158, 160\n    | Chartreuse -> 127, 255, 0\n    | Chocolate -> 210, 105, 30\n    | Coral -> 255, 127, 80\n    | Cornflowerblue -> 100, 149, 237\n    | Cornsilk -> 255, 248, 220\n    | Crimson -> 220, 20, 60\n    | Cyan -> 0, 255, 255\n    | Darkblue -> 0, 0, 139\n    | Darkcyan -> 0, 139, 139\n    | Darkgoldenrod -> 184, 134, 11\n    | Darkgray -> 169, 169, 169\n    | Darkgreen -> 0, 100, 0\n    | Darkgrey -> 169, 169, 169\n    | Darkkhaki -> 189, 183, 107\n    | Darkmagenta -> 139, 0, 139\n    | Darkolivegreen -> 85, 107, 47\n    | Darkorange -> 255, 140, 0\n    | Darkorchid -> 153, 50, 204\n    | Darkred -> 139, 0, 0\n    | Darksalmon -> 233, 150, 122\n    | Darkseagreen -> 143, 188, 143\n    | Darkslateblue -> 72, 61, 139\n    | Darkslategray -> 47, 79, 79\n    | Darkslategrey -> 47, 79, 79\n    | Darkturquoise -> 0, 206, 209\n    | Darkviolet -> 148, 0, 211\n    | Deeppink -> 255, 20, 147\n    | Deepskyblue -> 0, 191, 255\n    | Dimgray -> 105, 105, 105\n    | Dimgrey -> 105, 105, 105\n    | Dodgerblue -> 30, 144, 255\n    | Firebrick -> 178, 34, 34\n    | Floralwhite -> 255, 250, 240\n    | Forestgreen -> 34, 139, 34\n    | Fuchsia -> 255, 0, 255\n    | Gainsboro -> 220, 220, 220\n    | Ghostwhite -> 248, 248, 255\n    | Gold -> 255, 215, 0\n    | Goldenrod -> 218, 165, 32\n    | Gray -> 128, 128, 128\n    | Green -> 0, 128, 0\n    | Greenyellow -> 173, 255, 47\n    | Grey -> 128, 128, 128\n    | Honeydew -> 240, 255, 240\n    | Hotpink -> 255, 105, 180\n    | Indianred -> 205, 92, 92\n    | Indigo -> 75, 0, 130\n    | Ivory -> 255, 255, 240\n    | Khaki -> 240, 230, 140\n    | Lavender -> 230, 230, 250\n    | Lavenderblush -> 255, 240, 245\n    | Lawngreen -> 124, 252, 0\n    | Lemonchiffon -> 255, 250, 205\n    | Lightblue -> 173, 216, 230\n    | Lightcoral -> 240, 128, 128\n    | Lightcyan -> 224, 255, 255\n    | Lightgoldenrodyellow -> 250, 250, 210\n    | Lightgray -> 211, 211, 211\n    | Lightgreen -> 144, 238, 144\n    | Lightgrey -> 211, 211, 211\n    | Lightpink -> 255, 182, 193\n    | Lightsalmon -> 255, 160, 122\n    | Lightseagreen -> 32, 178, 170\n    | Lightskyblue -> 135, 206, 250\n    | Lightslategray -> 119, 136, 153\n    | Lightslategrey -> 119, 136, 153\n    | Lightsteelblue -> 176, 196, 222\n    | Lightyellow -> 255, 255, 224\n    | Lime -> 0, 255, 0\n    | Limegreen -> 50, 205, 50\n    | Linen -> 250, 240, 230\n    | Magenta -> 255, 0, 255\n    | Maroon -> 128, 0, 0\n    | Mediumaquamarine -> 102, 205, 170\n    | Mediumblue -> 0, 0, 205\n    | Mediumorchid -> 186, 85, 211\n    | Mediumpurple -> 147, 112, 219\n    | Mediumseagreen -> 60, 179, 113\n    | Mediumslateblue -> 123, 104, 238\n    | Mediumspringgreen -> 0, 250, 154\n    | Mediumturquoise -> 72, 209, 204\n    | Mediumvioletred -> 199, 21, 133\n    | Midnightblue -> 25, 25, 112\n    | Mintcream -> 245, 255, 250\n    | Mistyrose -> 255, 228, 225\n    | Moccasin -> 255, 228, 181\n    | Navajowhite -> 255, 222, 173\n    | Navy -> 0, 0, 128\n    | Oldlace -> 253, 245, 230\n    | Olive -> 128, 128, 0\n    | Olivedrab -> 107, 142, 35\n    | Orange -> 255, 165, 0\n    | Orangered -> 255, 69, 0\n    | Orchid -> 218, 112, 214\n    | Palegoldenrod -> 238, 232, 170\n    | Palegreen -> 152, 251, 152\n    | Paleturquoise -> 175, 238, 238\n    | Palevioletred -> 219, 112, 147\n    | Papayawhip -> 255, 239, 213\n    | Peachpuff -> 255, 218, 185\n    | Peru -> 205, 133, 63\n    | Pink -> 255, 192, 203\n    | Plum -> 221, 160, 221\n    | Powderblue -> 176, 224, 230\n    | Purple -> 128, 0, 128\n    | Red -> 255, 0, 0\n    | Rosybrown -> 188, 143, 143\n    | Royalblue -> 65, 105, 225\n    | Saddlebrown -> 139, 69, 19\n    | Salmon -> 250, 128, 114\n    | Sandybrown -> 244, 164, 96\n    | Seagreen -> 46, 139, 87\n    | Seashell -> 255, 245, 238\n    | Sienna -> 160, 82, 45\n    | Silver -> 192, 192, 192\n    | Skyblue -> 135, 206, 235\n    | Slateblue -> 106, 90, 205\n    | Slategray -> 112, 128, 144\n    | Slategrey -> 112, 128, 144\n    | Snow -> 255, 250, 250\n    | Springgreen -> 0, 255, 127\n    | Steelblue -> 70, 130, 180\n    | Tan -> 210, 180, 140\n    | Teal -> 0, 128, 128\n    | Thistle -> 216, 191, 216\n    | Tomato -> 255, 99, 71\n    | Turquoise -> 64, 224, 208\n    | Violet -> 238, 130, 238\n    | Wheat -> 245, 222, 179\n    | White -> 255, 255, 255\n    | Whitesmoke -> 245, 245, 245\n    | Yellow -> 255, 255, 0\n    | Yellowgreen -> 154, 205, 50\n\n  type t =\n    | Name of name\n    | RGB of (int * int * int)\n        (** Red, Green and Blue values. Clipped to [[0..255]] by most (All?)\n            browsers. *)\n    | RGB_percent of (int * int * int)\n        (** RGB channels are specified as a percentage of their maximal value. *)\n    | RGBA of (int * int * int * float)\n        (** Same as RGB with additional transparency argument. Opacity should be in\n            [0.] (completely transparent) and [1.] (completely opaque). *)\n    | RGBA_percent of (int * int * int * float)\n        (** RGB channels specified as percentage of their maximal value. Alpha\n            channel (opacity) is still a [0.] to [1.] float. *)\n    | HSL of (int * int * int)\n        (** Hue, Saturation and Lightness values. Hue is an angle in degree (in\n            interval [[0..360[]). Saturation is a percentage ([[0..100]]) with [0]\n            being colorless. Lightness is also a percentage ([[0..100]]) with [0]\n            being black. *)\n    | HSLA of (int * int * int * float)\n        (** Same as HSL with an opacity argument between [0.] and [1.]. *)\n\n  let rgb ?a r g b =\n    match a with\n    | None -> RGB (r, g, b)\n    | Some a -> RGBA (r, g, b, a)\n\n  let hsl ?a h s l =\n    match a with\n    | None -> HSL (h, s, l)\n    | Some a -> HSLA (h, s, l, a)\n\n  let string_of_t = function\n    | Name n -> string_of_name n\n    | RGB (r, g, b) -> Printf.sprintf \"rgb(%d,%d,%d)\" r g b\n    | RGB_percent (r, g, b) -> Printf.sprintf \"rgb(%d%%,%d%%,%d%%)\" r g b\n    | RGBA (r, g, b, a) -> Printf.sprintf \"rgba(%d,%d,%d,%f)\" r g b a\n    | RGBA_percent (r, g, b, a) -> Printf.sprintf \"rgba(%d%%,%d%%,%d%%,%f)\" r g b a\n    | HSL (h, s, l) -> Printf.sprintf \"hsl(%d,%d%%,%d%%)\" h s l\n    | HSLA (h, s, l, a) -> Printf.sprintf \"hsla(%d,%d%%,%d%%,%f)\" h s l a\n\n  let hex_of_rgb (red, green, blue) =\n    let in_range i =\n      if i < 0 || i > 255\n      then raise (Invalid_argument (string_of_int i ^ \" is out of valid range\"))\n    in\n    in_range red;\n    in_range green;\n    in_range blue;\n    Printf.sprintf \"#%02X%02X%02X\" red green blue\n\n  (* Ocaml <-> JS representation *)\n  type js_t = Js.js_string Js.t\n\n  (* TODO? be more restrictive, clip values into standard range *)\n  let js_t_of_js_string s =\n    let rgb_re =\n      new%js Js.regExp (Js.bytestring \"^rgb\\\\(\\\\s*\\\\d*,\\\\s*\\\\d*,\\\\s*\\\\d*\\\\)$\")\n    in\n    let rgb_pct_re =\n      new%js Js.regExp (Js.bytestring \"^rgb\\\\(\\\\s*\\\\d*%,\\\\s*\\\\d*%,\\\\s*\\\\d*%\\\\)$\")\n    in\n    let rgba_re =\n      new%js Js.regExp\n        (Js.bytestring \"^rgba\\\\(\\\\s*\\\\d*,\\\\s*\\\\d*,\\\\s*\\\\d*,\\\\d*\\\\.?\\\\d*\\\\)$\")\n    in\n    let rgba_pct_re =\n      new%js Js.regExp\n        (Js.bytestring \"^rgba\\\\(\\\\s*\\\\d*%,\\\\s*\\\\d*%,\\\\s*\\\\d*%,\\\\d*\\\\.?\\\\d*\\\\)$\")\n    in\n    let hsl_re =\n      new%js Js.regExp (Js.bytestring \"^hsl\\\\(\\\\s*\\\\d*,\\\\s*\\\\d*%,\\\\s*\\\\d*%\\\\)$\")\n    in\n    let hsla_re =\n      new%js Js.regExp\n        (Js.bytestring \"^hsla\\\\(\\\\s*\\\\d*,\\\\s*\\\\d*%,\\\\s*\\\\d*%,\\\\d*\\\\.?\\\\d*\\\\)$\")\n    in\n    if Js.to_bool (rgb_re##test s)\n       || Js.to_bool (rgba_re##test s)\n       || Js.to_bool (rgb_pct_re##test s)\n       || Js.to_bool (rgba_pct_re##test s)\n       || Js.to_bool (hsl_re##test s)\n       || Js.to_bool (hsla_re##test s)\n    then s\n    else if List.mem\n              (Js.to_string s)\n              [ \"aliceblue\"\n              ; \"antiquewhite\"\n              ; \"aqua\"\n              ; \"aquamarine\"\n              ; \"azure\"\n              ; \"beige\"\n              ; \"bisque\"\n              ; \"black\"\n              ; \"blanchedalmond\"\n              ; \"blue\"\n              ; \"blueviolet\"\n              ; \"brown\"\n              ; \"burlywood\"\n              ; \"cadetblue\"\n              ; \"chartreuse\"\n              ; \"chocolate\"\n              ; \"coral\"\n              ; \"cornflowerblue\"\n              ; \"cornsilk\"\n              ; \"crimson\"\n              ; \"cyan\"\n              ; \"darkblue\"\n              ; \"darkcyan\"\n              ; \"darkgoldenrod\"\n              ; \"darkgray\"\n              ; \"darkgreen\"\n              ; \"darkgrey\"\n              ; \"darkkhaki\"\n              ; \"darkmagenta\"\n              ; \"darkolivegreen\"\n              ; \"darkorange\"\n              ; \"darkorchid\"\n              ; \"darkred\"\n              ; \"darksalmon\"\n              ; \"darkseagreen\"\n              ; \"darkslateblue\"\n              ; \"darkslategray\"\n              ; \"darkslategrey\"\n              ; \"darkturquoise\"\n              ; \"darkviolet\"\n              ; \"deeppink\"\n              ; \"deepskyblue\"\n              ; \"dimgray\"\n              ; \"dimgrey\"\n              ; \"dodgerblue\"\n              ; \"firebrick\"\n              ; \"floralwhite\"\n              ; \"forestgreen\"\n              ; \"fuchsia\"\n              ; \"gainsboro\"\n              ; \"ghostwhite\"\n              ; \"gold\"\n              ; \"goldenrod\"\n              ; \"gray\"\n              ; \"green\"\n              ; \"greenyellow\"\n              ; \"grey\"\n              ; \"honeydew\"\n              ; \"hotpink\"\n              ; \"indianred\"\n              ; \"indigo\"\n              ; \"ivory\"\n              ; \"khaki\"\n              ; \"lavender\"\n              ; \"lavenderblush\"\n              ; \"lawngreen\"\n              ; \"lemonchiffon\"\n              ; \"lightblue\"\n              ; \"lightcoral\"\n              ; \"lightcyan\"\n              ; \"lightgoldenrodyellow\"\n              ; \"lightgray\"\n              ; \"lightgreen\"\n              ; \"lightgrey\"\n              ; \"lightpink\"\n              ; \"lightsalmon\"\n              ; \"lightseagreen\"\n              ; \"lightskyblue\"\n              ; \"lightslategray\"\n              ; \"lightslategrey\"\n              ; \"lightsteelblue\"\n              ; \"lightyellow\"\n              ; \"lime\"\n              ; \"limegreen\"\n              ; \"linen\"\n              ; \"magenta\"\n              ; \"maroon\"\n              ; \"mediumaquamarine\"\n              ; \"mediumblue\"\n              ; \"mediumorchid\"\n              ; \"mediumpurple\"\n              ; \"mediumseagreen\"\n              ; \"mediumslateblue\"\n              ; \"mediumspringgreen\"\n              ; \"mediumturquoise\"\n              ; \"mediumvioletred\"\n              ; \"midnightblue\"\n              ; \"mintcream\"\n              ; \"mistyrose\"\n              ; \"moccasin\"\n              ; \"navajowhite\"\n              ; \"navy\"\n              ; \"oldlace\"\n              ; \"olive\"\n              ; \"olivedrab\"\n              ; \"orange\"\n              ; \"orangered\"\n              ; \"orchid\"\n              ; \"palegoldenrod\"\n              ; \"palegreen\"\n              ; \"paleturquoise\"\n              ; \"palevioletred\"\n              ; \"papayawhip\"\n              ; \"peachpuff\"\n              ; \"peru\"\n              ; \"pink\"\n              ; \"plum\"\n              ; \"powderblue\"\n              ; \"purple\"\n              ; \"red\"\n              ; \"rosybrown\"\n              ; \"royalblue\"\n              ; \"saddlebrown\"\n              ; \"salmon\"\n              ; \"sandybrown\"\n              ; \"seagreen\"\n              ; \"seashell\"\n              ; \"sienna\"\n              ; \"silver\"\n              ; \"skyblue\"\n              ; \"slateblue\"\n              ; \"slategray\"\n              ; \"slategrey\"\n              ; \"snow\"\n              ; \"springgreen\"\n              ; \"steelblue\"\n              ; \"tan\"\n              ; \"teal\"\n              ; \"thistle\"\n              ; \"tomato\"\n              ; \"turquoise\"\n              ; \"violet\"\n              ; \"wheat\"\n              ; \"white\"\n              ; \"whitesmoke\"\n              ; \"yellow\"\n              ; \"yellowgreen\"\n              ]\n    then s\n    else raise (Invalid_argument (Js.to_string s ^ \" is not a valid color\"))\n\n  let name cn = Js.string (string_of_name cn)\n\n  let js = function\n    | Name n -> name n\n    | (RGB _ | RGB_percent _ | RGBA _ | RGBA_percent _ | HSL _ | HSLA _) as c ->\n        Js.string (string_of_t c)\n\n  let ml c =\n    let s = Js.to_string c in\n    try Name (name_of_string s)\n    with Invalid_argument _ -> (\n      let fail () = raise (Invalid_argument (s ^ \" is not a valid color\")) in\n      let re_rgb =\n        Regexp.regexp \"(rgba?)\\\\((?:(\\\\d*),(\\\\d*),(\\\\d*)(?:,(\\\\d*(?:\\\\.\\\\d*)?))?)\\\\)\"\n      in\n      let re_rgb_pct =\n        Regexp.regexp \"(rgba?)\\\\((?:(\\\\d*)%,(\\\\d*)%,(\\\\d*)%(?:,(\\\\d*(?:\\\\.\\\\d*)?))?)\\\\)\"\n      in\n      let re_hsl =\n        Regexp.regexp \"(hsla?)\\\\((?:(\\\\d*),(\\\\d*)%,(\\\\d*)%(?:,(\\\\d*(?:\\\\.\\\\d*)?))?)\\\\)\"\n      in\n      let i_of_s_o = function\n        | None -> fail ()\n        | Some i -> (\n            try int_of_string i\n            with Invalid_argument s | Failure s ->\n              raise (Invalid_argument (\"color conversion error (\" ^ i ^ \"): \" ^ s)))\n      in\n      let f_of_s f =\n        try float_of_string f\n        with Invalid_argument s | Failure s ->\n          raise (Invalid_argument (\"color conversion error (\" ^ f ^ \"): \" ^ s))\n      in\n      match Regexp.string_match re_rgb s 0 with\n      | Some r -> (\n          let red = Regexp.matched_group r 2 in\n          let green = Regexp.matched_group r 3 in\n          let blue = Regexp.matched_group r 4 in\n          let alpha = Regexp.matched_group r 5 in\n          match Regexp.matched_group r 1 with\n          | Some \"rgb\" -> (\n              match alpha with\n              | Some _ -> fail ()\n              | None -> RGB (i_of_s_o red, i_of_s_o green, i_of_s_o blue))\n          | Some \"rgba\" -> (\n              match alpha with\n              | None -> fail ()\n              | Some a -> RGBA (i_of_s_o red, i_of_s_o green, i_of_s_o blue, f_of_s a))\n          | Some _ | None -> fail ())\n      | None -> (\n          match Regexp.string_match re_rgb_pct s 0 with\n          | Some r -> (\n              let red = Regexp.matched_group r 2 in\n              let green = Regexp.matched_group r 3 in\n              let blue = Regexp.matched_group r 4 in\n              let alpha = Regexp.matched_group r 5 in\n              match Regexp.matched_group r 1 with\n              | Some \"rgb\" -> (\n                  match alpha with\n                  | Some _ -> fail ()\n                  | None -> RGB_percent (i_of_s_o red, i_of_s_o green, i_of_s_o blue))\n              | Some \"rgba\" -> (\n                  match alpha with\n                  | None -> fail ()\n                  | Some a ->\n                      RGBA_percent (i_of_s_o red, i_of_s_o green, i_of_s_o blue, f_of_s a)\n                  )\n              | Some _ | None -> fail ())\n          | None -> (\n              match Regexp.string_match re_hsl s 0 with\n              | Some r -> (\n                  let red = Regexp.matched_group r 2 in\n                  let green = Regexp.matched_group r 3 in\n                  let blue = Regexp.matched_group r 4 in\n                  let alpha = Regexp.matched_group r 5 in\n                  match Regexp.matched_group r 1 with\n                  | Some \"hsl\" -> (\n                      match alpha with\n                      | Some _ -> fail ()\n                      | None -> HSL (i_of_s_o red, i_of_s_o green, i_of_s_o blue))\n                  | Some \"hsla\" -> (\n                      match alpha with\n                      | None -> fail ()\n                      | Some a ->\n                          HSLA (i_of_s_o red, i_of_s_o green, i_of_s_o blue, f_of_s a))\n                  | Some _ | None -> fail ())\n              | None -> fail ())))\nend\n\nmodule Length = struct\n  (* http://www.w3.org/TR/css3-values/#lengths *)\n\n  (* TODO:\n     {[\n       type js_t = private Js.string Js.t\n       val js_t_of_t\n       val t_of_js_t\n       val t_of_string\n     ]}\n  *)\n\n  type t =\n    | Zero\n    (* relative *)\n    | Em of float\n    | Ex of float\n    | Px of float\n    | Gd of float\n    | Rem of float\n    | Vw of float\n    | Vh of float\n    | Vm of float\n    | Ch of float\n    (* absolute *)\n    | Mm of float\n    | Cm of float\n    | In of float\n    | Pt of float\n    | Pc of float\n\n  let string_of_t = function\n    | Zero -> \"0\"\n    | Em f -> Printf.sprintf \"%f%s\" f \"em\"\n    | Ex f -> Printf.sprintf \"%f%s\" f \"ex\"\n    | Px f -> Printf.sprintf \"%f%s\" f \"px\"\n    | Gd f -> Printf.sprintf \"%f%s\" f \"gd\"\n    | Rem f -> Printf.sprintf \"%f%s\" f \"rem\"\n    | Vw f -> Printf.sprintf \"%f%s\" f \"vw\"\n    | Vh f -> Printf.sprintf \"%f%s\" f \"vh\"\n    | Vm f -> Printf.sprintf \"%f%s\" f \"vm\"\n    | Ch f -> Printf.sprintf \"%f%s\" f \"ch\"\n    | Mm f -> Printf.sprintf \"%f%s\" f \"mm\"\n    | Cm f -> Printf.sprintf \"%f%s\" f \"cm\"\n    | In f -> Printf.sprintf \"%f%s\" f \"in\"\n    | Pt f -> Printf.sprintf \"%f%s\" f \"pt\"\n    | Pc f -> Printf.sprintf \"%f%s\" f \"pc\"\n\n  type js_t = Js.js_string Js.t\n\n  let js t = Js.string (string_of_t t)\n\n  let ml t =\n    let s = Js.to_string t in\n    if String.equal s \"0\"\n    then Zero\n    else\n      let fail () = raise (Invalid_argument (s ^ \" is not a valid length\")) in\n      let re = Regexp.regexp \"^(\\\\d*(?:\\\\.\\\\d*)?)\\\\s*(\\\\S*)$\" in\n      match Regexp.string_match re s 0 with\n      | None -> fail ()\n      | Some r -> (\n          let f =\n            match Regexp.matched_group r 1 with\n            | None -> fail ()\n            | Some f -> (\n                try float_of_string f\n                with Invalid_argument s ->\n                  raise (Invalid_argument (\"length conversion error: \" ^ s)))\n          in\n          match Regexp.matched_group r 2 with\n          | None -> fail ()\n          | Some \"em\" -> Em f\n          | Some \"ex\" -> Ex f\n          | Some \"px\" -> Px f\n          | Some \"gd\" -> Gd f\n          | Some \"rem\" -> Rem f\n          | Some \"vw\" -> Vw f\n          | Some \"vh\" -> Vh f\n          | Some \"vm\" -> Vm f\n          | Some \"ch\" -> Ch f\n          | Some \"mm\" -> Mm f\n          | Some \"cm\" -> Cm f\n          | Some \"in\" -> In f\n          | Some \"pt\" -> Pt f\n          | Some \"pc\" -> Pc f\n          | Some _ -> fail ())\nend\n\nmodule Angle = struct\n  type t =\n    | Deg of float\n    | Grad of float\n    | Rad of float\n    | Turns of float\n\n  let string_of_t = function\n    | Deg f -> Printf.sprintf \"%f%s\" f \"deg\"\n    | Grad f -> Printf.sprintf \"%f%s\" f \"grad\"\n    | Rad f -> Printf.sprintf \"%f%s\" f \"rad\"\n    | Turns f -> Printf.sprintf \"%f%s\" f \"turns\"\n\n  type js_t = Js.js_string Js.t\n\n  let js t = Js.string (string_of_t t)\n\n  let ml j =\n    let s = Js.to_string j in\n    let re = Regexp.regexp \"^(\\\\d*(?:\\\\.\\\\d*))(deg|grad|rad|turns)$\" in\n    let fail () = raise (Invalid_argument (s ^ \" is not a valid length\")) in\n    match Regexp.string_match re s 0 with\n    | None -> fail ()\n    | Some r -> (\n        let f =\n          match Regexp.matched_group r 1 with\n          | None -> fail ()\n          | Some f -> (\n              try float_of_string f\n              with Invalid_argument s ->\n                raise (Invalid_argument (\"length conversion error: \" ^ s)))\n        in\n        match Regexp.matched_group r 2 with\n        | Some \"deg\" -> Deg f\n        | Some \"grad\" -> Grad f\n        | Some \"rad\" -> Rad f\n        | Some \"turns\" -> Turns f\n        | Some _ | None -> fail ())\nend\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\n(** Javascript events. *)\n\nopen! Import\nmodule Typ = Dom_html.Event\n\ntype listener = Dom_html.event_listener_id\n\nlet listen ?(capture = false) target typ cb =\n  Dom_html.addEventListener\n    target\n    typ\n    (Dom_html.full_handler (fun n e -> Js.bool (cb n e)))\n    (Js.bool capture)\n\nlet stop_listen = Dom_html.removeEventListener\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2014 Hugo Heuzard\n * Copyright (C) 2014 Jérôme Vouillon\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nlet xmlns = Js.string \"http://www.w3.org/2000/svg\"\n\n(* translate spec from http://www.w3.org/TR/SVG/idl.html *)\n(* http://www.w3.org/TR/SVG/struct.html *)\n\ntype error_code =\n  | WRONG_TYPE_ERR\n  | INVALID_VALUE_ERR\n  | MATRIX_NOT_INVERTABLE\n\nclass type svg_error = object\n  inherit Js.error\n\n  method code : error_code t readonly_prop\nend\n\nexception SVGError of svg_error\n\ntype lengthUnitType =\n  | LENGTHTYPE_UNKNOWN\n  | LENGTHTYPE_NUMBER\n  | LENGTHTYPE_PERCENTAGE\n  | LENGTHTYPE_EMS\n  | LENGTHTYPE_EXS\n  | LENGTHTYPE_PX\n  | LENGTHTYPE_CM\n  | LENGTHTYPE_MM\n  | LENGTHTYPE_IN\n  | LENGTHTYPE_PT\n  | LENGTHTYPE_PC\n\ntype angleUnitType =\n  | ANGLETYPE_UNKNOWN\n  | ANGLETYPE_UNSPECIFIED\n  | ANGLETYPE_DEG\n  | ANGLETYPE_RAD\n  | ANGLETYPE_GRAD\n\ntype colorType =\n  | COLORTYPE_UNKNOWN\n  | COLORTYPE_RGBCOLOR\n  | COLORTYPE_RGBCOLOR_ICCCOLOR\n  | COLORTYPE_CURRENTCOLOR\n\ntype alignmentType =\n  | PRESERVEASPECTRATIO_UNKNOWN\n  | PRESERVEASPECTRATIO_NONE\n  | PRESERVEASPECTRATIO_XMINYMIN\n  | PRESERVEASPECTRATIO_XMIDYMIN\n  | PRESERVEASPECTRATIO_XMAXYMIN\n  | PRESERVEASPECTRATIO_XMINYMID\n  | PRESERVEASPECTRATIO_XMIDYMID\n  | PRESERVEASPECTRATIO_XMAXYMID\n  | PRESERVEASPECTRATIO_XMINYMAX\n  | PRESERVEASPECTRATIO_XMIDYMAX\n  | PRESERVEASPECTRATIO_XMAXYMAX\n\ntype meetOrSliceType =\n  | MEETORSLICE_UNKNOWN\n  | MEETORSLICE_MEET\n  | MEETORSLICE_SLICE\n\ntype transformType =\n  | TRANSFORM_UNKNOWN\n  | TRANSFORM_MATRIX\n  | TRANSFORM_TRANSLATE\n  | TRANSFORM_SCALE\n  | TRANSFORM_ROTATE\n  | TRANSFORM_SKEWX\n  | TRANSFORM_SKEWY\n\ntype zoomAndPanType =\n  | ZOOMANDPAN_UNKNOWN\n  | ZOOMANDPAN_DISABLE\n  | ZOOMANDPAN_MAGNIFY\n\ntype lengthAdjust =\n  | LENGTHADJUST_UNKNOWN\n  | LENGTHADJUST_SPACING\n  | LENGTHADJUST_SPACINGANDGLYPHS\n\ntype unitType =\n  | UNIT_TYPE_UNKNOWN\n  | UNIT_TYPE_USERSPACEONUSE\n  | UNIT_TYPE_OBJECTBOUNDINGBOX\n\n(* interface SVGRenderingIntent *)\ntype intentType =\n  | RENDERING_INTENT_UNKNOWN\n  | RENDERING_INTENT_AUTO\n  | RENDERING_INTENT_PERCEPTUAL\n  | RENDERING_INTENT_RELATIVE_COLORIMETRIC\n  | RENDERING_INTENT_SATURATION\n  | RENDERING_INTENT_ABSOLUTE_COLORIMETRIC\n\n(* Path Segment Types *)\ntype pathSegmentType =\n  | PATHSEG_UNKNOWN\n  | PATHSEG_CLOSEPATH\n  | PATHSEG_MOVETO_ABS\n  | PATHSEG_MOVETO_REL\n  | PATHSEG_LINETO_ABS\n  | PATHSEG_LINETO_REL\n  | PATHSEG_CURVETO_CUBIC_ABS\n  | PATHSEG_CURVETO_CUBIC_REL\n  | PATHSEG_CURVETO_QUADRATIC_ABS\n  | PATHSEG_CURVETO_QUADRATIC_REL\n  | PATHSEG_ARC_ABS\n  | PATHSEG_ARC_REL\n  | PATHSEG_LINETO_HORIZONTAL_ABS\n  | PATHSEG_LINETO_HORIZONTAL_REL\n  | PATHSEG_LINETO_VERTICAL_ABS\n  | PATHSEG_LINETO_VERTICAL_REL\n  | PATHSEG_CURVETO_CUBIC_SMOOTH_ABS\n  | PATHSEG_CURVETO_CUBIC_SMOOTH_REL\n  | PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS\n  | PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL\n\n(* textPath Method Types *)\ntype textPathMethodType =\n  | TEXTPATH_METHODTYPE_UNKNOWN\n  | TEXTPATH_METHODTYPE_ALIGN\n  | TEXTPATH_METHODTYPE_STRETCH\n\n(* textPath Spacing Types *)\ntype textPathSpacingType =\n  | TEXTPATH_SPACINGTYPE_UNKNOWN\n  | TEXTPATH_SPACINGTYPE_AUTO\n  | TEXTPATH_SPACINGTYPE_EXACT\n\n(* Spread Method Types *)\ntype spreadMethodType =\n  | SPREADMETHOD_UNKNOWN\n  | SPREADMETHOD_PAD\n  | SPREADMETHOD_REFLECT\n  | SPREADMETHOD_REPEAT\n\ntype suspendHandleID\n\n(****)\n\nclass type ['a] animated = object\n  method baseVal : 'a prop\n\n  method animVal : 'a prop\nend\n\nclass type ['a] list = object\n  method numberOfItems : int readonly_prop\n\n  method clear : unit meth\n\n  method initialize : 'a -> 'a meth\n\n  method getItem : int -> 'a meth\n\n  method insertItemBefore : 'a -> int -> 'a meth\n\n  method replaceItem : 'a -> int -> 'a meth\n\n  method removeItem : int -> 'a meth\n\n  method appendItem : 'a -> 'a meth\nend\n\n(****)\n\n(* interface SVGElement *)\nclass type element = object\n  inherit Dom.element\n\n  method id : js_string t prop\n\n  method xmlbase : js_string t prop\n\n  method ownerSVGElement : svgElement t readonly_prop\n\n  method viewportElement : element t readonly_prop\nend\n\n(* interface SVGAnimatedString *)\nand animatedString = [js_string t] animated\n\n(* interface SVGAnimatedBoolean *)\nand animatedBoolean = [bool t] animated\n\n(* interface SVGStringList *)\nand stringList = [js_string t] list\n\n(* interface SVGAnimatedEnumeration *)\nand animatedEnumeration = [int (*short*)] animated\n\n(* interface SVGAnimatedInteger *)\nand animatedInteger = [int] animated\n\n(* interface SVGAnimatedNumber *)\nand animatedNumber = [number_t] animated\n\n(* interface SVGNumberList *)\nand numberList = [number t] list\n\n(* interface SVGAnimatedNumberList *)\nand animatedNumberList = [numberList t] animated\n\n(* interface SVGLength *)\nand length = object\n  method unitType : lengthUnitType readonly_prop\n\n  method value : number_t prop\n\n  method valueInSpecifiedUnits : number_t prop\n\n  method valueAsString : js_string t prop\n\n  method newValueSpecifiedUnits : lengthUnitType -> number_t -> unit meth\n\n  method convertToSpecifiedUnits : lengthUnitType -> unit meth\nend\n\n(* interface SVGAnimatedLength *)\nand animatedLength = [length t] animated\n\n(* interface SVGLengthList *)\nand lengthList = [length t] list\n\n(* interface SVGAnimatedLengthList *)\nand animatedLengthList = [lengthList t] animated\n\n(* interface SVGAngle *)\nand angle = object\n  method unitType : angleUnitType readonly_prop\n\n  method value : number_t prop\n\n  method valueInSpecifiedUnits : number_t prop\n\n  method valueAsString : js_string t prop\n\n  method newValueSpecifiedUnits : angleUnitType -> number_t -> unit meth\n\n  method convertToSpecifiedUnits : angleUnitType -> unit meth\nend\n\n(* interface SVGAnimatedAngle *)\nand animatedAngle = [angle t] animated\n\n(* XXXXX Move it *)\nand rgbColor = object end\n\n(* interface SVGColor *)\nand color = object\n  (* XXX inherit cssValue *)\n  method colorType : colorType readonly_prop\n\n  method rgbColor : rgbColor t readonly_prop\n\n  method iccColor : iccColor t readonly_prop\n\n  method setRGBColor : js_string t -> unit meth\n\n  method setRGBColorICCColor : js_string t -> js_string t -> unit meth\n\n  method setColor : colorType -> js_string t -> js_string t -> unit meth\nend\n\n(* interface SVGICCColor *)\nand iccColor = object\n  method colorProfile : js_string t prop\n\n  method colors : numberList t readonly_prop\nend\n\n(* interface SVGRect *)\nand rect = object\n  method x : number_t prop\n\n  method y : number_t prop\n\n  method width : number_t prop\n\n  method height : number_t prop\nend\n\n(* interface SVGAnimatedRect *)\nand animatedRect = [rect t] animated\n\n(* interface SVGStylable *)\nand stylable = object\n  method className : animatedString t readonly_prop\n\n  method style : Dom_html.cssStyleDeclaration t readonly_prop\n  (*   CSSValue getPresentationAttribute(in DOMString name); *)\nend\n\n(* interface SVGLocatable *)\nand locatable = object\n  method nearestViewportElement : element t readonly_prop\n\n  method farthestViewportElement : element t readonly_prop\n\n  method getBBox : rect t meth\n\n  method getCTM : matrix t meth\n\n  method getScreenCTM : matrix t meth\n\n  method getTransformToElement : element t -> matrix t meth\nend\n\n(* interface SVGTransformable *)\nand transformable = object\n  inherit locatable\n\n  method transform : animatedTransformList t readonly_prop\nend\n\n(* interface SVGTests *)\nand tests = object\n  method requiredFeatures : stringList t readonly_prop\n\n  method requiredExtensions : stringList t readonly_prop\n\n  method systemLanguage : stringList t readonly_prop\n\n  method hasExtension : js_string t -> bool t meth\nend\n\n(* interface SVGLangSpace *)\nand langSpace = object\n  method xmllang : js_string t prop\n\n  method xmlspace : js_string t prop\nend\n\n(* interface SVGExternalResourcesRequired *)\nand externalResourcesRequired = object\n  method externalResourcesRequired : animatedBoolean t readonly_prop\nend\n\n(* interface SVGFitToViewBox *)\nand fitToViewBox = object\n  method viewBox : animatedRect t readonly_prop\n\n  method preserveAspectRatio : animatedPreserveAspectRatio t readonly_prop\nend\n\n(* interface SVGZoomAndPan *)\nand zoomAndPan = object\n  method zoomAndPan : zoomAndPanType prop\nend\n\n(* interface SVGViewSpec *)\nand viewSpec = object\n  inherit zoomAndPan\n\n  inherit fitToViewBox\n\n  method transform : transformList t readonly_prop\n\n  method viewTarget : element t readonly_prop\n\n  method viewBoxString : js_string t readonly_prop\n\n  method preserveAspectRatioString : js_string t readonly_prop\n\n  method transformString : js_string t readonly_prop\n\n  method viewTargetString : js_string t readonly_prop\nend\n\n(* interface SVGURIReference *)\nand uriReference = object\n  method href : animatedString t readonly_prop\nend\n\n(* interface SVGCSSRule : CSSRule *)\n(*   const unsigned short COLOR_PROFILE_RULE = 7; *)\n(* }; *)\n\n(* interface SVGDocument *)\nand document = object\n  inherit [element] Dom.document\n\n  (*XXX inherit documentEvent *)\n  method title : js_string t prop\n\n  method referrer : js_string t readonly_prop\n\n  method domain : js_string t prop\n\n  method _URL : js_string t readonly_prop\n\n  method rootElement : svgElement t opt readonly_prop\n  (* rootElement will be null or undefined in an html context *)\nend\n\n(* interface SVGSVGElement *)\nand svgElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit locatable\n\n  inherit fitToViewBox\n\n  inherit zoomAndPan\n\n  (*XXX inherit documentevent, viewcss, documentcss *)\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\n\n  method contentScriptType : js_string t prop\n\n  method contentStyleType : js_string t prop\n\n  method viewport : rect t readonly_prop\n\n  method pixelUnitToMillimeterX : number_t readonly_prop\n\n  method pixelUnitToMillimeterY : number_t readonly_prop\n\n  method screenPixelUnitToMillimeterX : number_t readonly_prop\n\n  method screenPixelUnitToMillimeterY : number_t readonly_prop\n\n  method useCurrentView : bool t readonly_prop\n\n  method currentView : viewSpec t readonly_prop\n\n  method currentScale : number_t prop\n\n  method currentTranslate : point t readonly_prop\n\n  method suspendRedraw : int -> suspendHandleID meth\n\n  method unsuspendRedraw : suspendHandleID -> unit meth\n\n  method unsuspendRedrawAll : unit meth\n\n  method forceRedraw : unit meth\n\n  method pauseAnimations : unit meth\n\n  method unpauseAnimations : unit meth\n\n  method animationsPaused : bool t meth\n\n  method getCurrentTime : number_t meth\n\n  method setCurrentTime : int -> unit meth\n\n  method getIntersectionList : rect t -> element t -> element Dom.nodeList t meth\n\n  method getEnclosureList : rect t -> element t -> element Dom.nodeList t meth\n\n  method checkIntersection : element t -> rect t -> bool t\n\n  method checkEnclosure : element t -> rect t -> bool t\n\n  method deselectAll : unit meth\n\n  method createSVGNumber : number t meth\n\n  method createSVGLength : length t meth\n\n  method createSVGAngle : angle t meth\n\n  method createSVGPoint : point t meth\n\n  method createSVGMatrix : matrix t meth\n\n  method createSVGRect : rect t meth\n\n  method createSVGTransform : transform t meth\n\n  method createSVGTransformFromMatrix : matrix t -> transform t meth\n\n  method getElementById : js_string t -> Dom.element t meth\nend\n\n(* interface SVGGElement *)\nand gElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  inherit Dom_html.eventTarget\nend\n\n(* interface SVGDefsElement *)\nand defsElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n  (* XXXXXXX ? inherit Dom_html.eventTarget *)\nend\n\n(* interface SVGDescElement *)\nand descElement = object\n  inherit element\n\n  inherit langSpace\n\n  inherit stylable\n  (* XXXXXXX ? inherit Dom_html.eventTarget *)\nend\n\n(* interface SVGTitleElement *)\nand titleElement = object\n  inherit element\n\n  inherit langSpace\n\n  inherit stylable\nend\n\n(* interface SVGSymbolElement *)\nand symbolElement = object\n  inherit element\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit fitToViewBox\n\n  inherit Dom_html.eventTarget\nend\n\n(* interface SVGUseElement *)\nand useElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\n\n  method instanceRoot : elementInstance t readonly_prop\n\n  method animatedInstanceRoot : elementInstance t readonly_prop\nend\n\nand elementInstance = object\n  inherit Dom_html.eventTarget\n\n  method correspondingElement : element t readonly_prop\n\n  method correspondingUseElement : useElement t readonly_prop\n\n  method parentNode : elementInstance t readonly_prop\n\n  method childNodes : elementInstanceList t readonly_prop\n\n  method firstChild : elementInstance t readonly_prop\n\n  method lastChild : elementInstance t readonly_prop\n\n  method previousSibling : elementInstance t readonly_prop\n\n  method nextSibling : elementInstance t readonly_prop\nend\n\n(* interface SVGElementInstanceList *)\nand elementInstanceList = object\n  method length : int readonly_prop\n\n  method item : int -> elementInstance t\nend\n\n(* interface SVGImageElement *)\nand imageElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\n  (* readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio *)\nend\n\nand switchElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\nend\n\n(* XXX deprecated => interface GetSVGDocument => SVGDocument getSVGDocument() *)\n\n(* interface SVGStyleElement *)\nand styleElement = object\n  inherit element\n\n  inherit langSpace\n\n  method type_ : js_string t prop\n\n  method media : js_string t prop\n\n  method title : js_string t prop\nend\n\n(* interface SVGPoint *)\nand point = object\n  method x : number_t readonly_prop\n\n  method y : number_t readonly_prop\n\n  method matrixTransform : matrix t -> point t meth\nend\n\n(* interface SVGPointList *)\nand pointList = [point t] list\n\n(* interface SVGMatrix *)\nand matrix = object\n  method a : number_t readonly_prop\n\n  method b : number_t readonly_prop\n\n  method c : number_t readonly_prop\n\n  method d : number_t readonly_prop\n\n  method e : number_t readonly_prop\n\n  method f : number_t readonly_prop\n\n  method multiply : matrix t -> matrix t meth\n\n  method inverse : matrix t meth\n\n  method translate : number_t -> number_t -> matrix t meth\n\n  method scale : number_t -> matrix t meth\n\n  method scaleNonUniform : number_t -> number_t -> matrix t meth\n\n  method rotate : number_t -> matrix t meth\n\n  method rotateFromVector : number_t -> number_t -> matrix t meth\n\n  method flipX : matrix t meth\n\n  method flipY : matrix t meth\n\n  method skewX : number_t -> matrix t meth\n\n  method skewY : number_t -> matrix t meth\nend\n\n(* interface SVGTransform *)\nand transform = object\n  method _type : transformType readonly_prop\n\n  method matrix : matrix t readonly_prop\n\n  method angle : number_t readonly_prop\n\n  method setMatrix : matrix t -> unit meth\n\n  method setTranslate : number_t -> number_t -> unit meth\n\n  method setScale : number_t -> number_t -> unit meth\n\n  method setRotate : number_t -> number_t -> number_t -> unit meth\n\n  method setSkewX : number_t -> unit meth\n\n  method setSkewY : number_t -> unit meth\nend\n\n(* interface SVGTransformList *)\nand transformList = object\n  inherit [transform t] list\n\n  method createSVGTransformFromMatrix : matrix -> transform t meth\n\n  method consolidate : transform t meth\nend\n\n(* interface SVGAnimatedTransformList *)\nand animatedTransformList = [transformList t] animated\n\n(* interface SVGPreserveAspectRatio *)\nand preserveAspectRatio = object\n  method align : alignmentType readonly_prop\n\n  method meetOrSlice : meetOrSliceType readonly_prop\nend\n\n(* interface SVGAnimatedPreserveAspectRatio *)\nand animatedPreserveAspectRatio = [preserveAspectRatio t] animated\n\n(* interface SVGPathSeg *)\nand pathSeg = object\n  method pathSegType : pathSegmentType readonly_prop\n\n  method pathSegTypeAsLetter : js_string t readonly_prop\nend\n\n(* interface SVGPathSegClosePath *)\nand pathSegClosePath = pathSeg\n\n(* interface SVGPathSegMovetoAbs *)\n(* interface SVGPathSegMovetoRel *)\nand pathSegMoveto = object\n  inherit pathSeg\n\n  method x : number_t prop\n\n  method y : number_t prop\nend\n\n(* interface SVGPathSegLinetoAbs *)\n(* interface SVGPathSegLinetoRel *)\nand pathSegLineto = object\n  inherit pathSeg\n\n  method x : number_t prop\n\n  method y : number_t prop\nend\n\n(* interface SVGPathSegCurvetoCubicAbs *)\n(* interface SVGPathSegCurvetoCubicRel *)\nand pathSegCurvetoCubic = object\n  inherit pathSeg\n\n  method x : number_t prop\n\n  method y : number_t prop\n\n  method x1 : number_t prop\n\n  method y1 : number_t prop\n\n  method x2 : number_t prop\n\n  method y2 : number_t prop\nend\n\n(* interface SVGPathSegCurvetoQuadraticAbs *)\n(* interface SVGPathSegCurvetoQuadraticRel *)\nand pathSegCurvetoQuadratic = object\n  inherit pathSeg\n\n  method x : number_t prop\n\n  method y : number_t prop\n\n  method x1 : number_t prop\n\n  method y1 : number_t prop\nend\n\n(* interface SVGPathSegArcAbs *)\n(* interface SVGPathSegArcRel*)\nand pathSegArc = object\n  inherit pathSeg\n\n  method y : number_t prop\n\n  method r1 : number_t prop\n\n  method r2 : number_t prop\n\n  method angle : number_t prop\n\n  method largeArcFlag : bool t prop\n\n  method sweepFlag : bool t prop\nend\n\n(* interface SVGPathSegLinetoHorizontalAbs *)\n(* interface SVGPathSegLinetoHorizontalRel *)\nand pathSegLinetoHorizontal = object\n  inherit pathSeg\n\n  method x : number_t\nend\n\n(* interface SVGPathSegLinetoVerticalAbs *)\n(* interface SVGPathSegLinetoVerticalRel *)\nand pathSegLinetoVertical = object\n  inherit pathSeg\n\n  method y : number_t\nend\n\nand pathSegCurvetoCubicSmooth = object\n  inherit pathSeg\n\n  method x : number_t\n\n  method y : number_t\n\n  method x2 : number_t\n\n  method y2 : number_t\nend\n\n(* interface SVGPathSegCurvetoQuadraticSmoothAbs *)\n(* interface SVGPathSegCurvetoQuadraticSmoothRel  *)\nand pathSegCurvetoQuadraticSmooth = object\n  inherit pathSeg\n\n  method x : number_t\n\n  method y : number_t\nend\n\nand pathSegList = [pathSeg t] list\n\n(* interface SVGAnimatedPathData *)\nand animatedPathData = object\n  method pathSegList : pathSegList t prop\n\n  method normalizedPathSegList : pathSegList t prop\n\n  method animatedPathSegList : pathSegList t prop\n\n  method animatedNormalizedPathSegList : pathSegList t prop\nend\n\n(* interface SVGPathElement *)\nand pathElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  inherit animatedPathData\n\n  method pathLength : animatedNumber t readonly_prop\n\n  method getTotalLength : number_t meth\n\n  method getPointAtLength : number_t -> point t meth\n\n  method getPathSegAtLength : number_t -> int\n\n  method createSVGPathSegClosePath : pathSegClosePath meth\n\n  method createSVGPathSegMovetoAbs : number_t -> number_t -> pathSegMoveto meth\n\n  method createSVGPathSegMovetoRel : number_t -> number_t -> pathSegMoveto meth\n\n  method createSVGPathSegLinetoAbs : number_t -> number_t -> pathSegLineto meth\n\n  method createSVGPathSegLinetoRel : number_t -> number_t -> pathSegLineto meth\n\n  method createSVGPathSegCurvetoCubicAbs :\n       number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> pathSegCurvetoCubic meth\n\n  method createSVGPathSegCurvetoCubicRel :\n       number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> pathSegCurvetoCubic meth\n\n  method createSVGPathSegCurvetoQuadraticAbs :\n    number_t -> number_t -> number_t -> number_t -> pathSegCurvetoQuadratic meth\n\n  method createSVGPathSegCurvetoQuadraticRel :\n    number_t -> number_t -> number_t -> number_t -> pathSegCurvetoQuadratic meth\n\n  method createSVGPathSegArcAbs :\n       number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> bool t\n    -> bool t\n    -> pathSegArc meth\n\n  method createSVGPathSegArcRel :\n       number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> number_t\n    -> bool t\n    -> bool t\n    -> pathSegArc meth\n\n  method createSVGPathSegLinetoHorizontalAbs : number_t -> pathSegLinetoHorizontal meth\n\n  method createSVGPathSegLinetoHorizontalRel : number_t -> pathSegLinetoHorizontal meth\n\n  method createSVGPathSegLinetoVerticalAbs : number_t -> pathSegLinetoVertical meth\n\n  method createSVGPathSegLinetoVerticalRel : number_t -> pathSegLinetoVertical meth\n\n  method createSVGPathSegCurvetoCubicSmoothAbs :\n    number_t -> number_t -> number_t -> number_t -> pathSegCurvetoCubicSmooth meth\n\n  method createSVGPathSegCurvetoCubicSmoothRel :\n    number_t -> number_t -> number_t -> number_t -> pathSegCurvetoCubicSmooth meth\n\n  method createSVGPathSegCurvetoQuadraticSmoothAbs :\n    number_t -> number_t -> pathSegCurvetoQuadraticSmooth meth\n\n  method createSVGPathSegCurvetoQuadraticSmoothRel :\n    number_t -> number_t -> pathSegCurvetoQuadraticSmooth meth\nend\n\n(* interface SVGRectElement *)\nand rectElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\n\n  method rx : animatedLength t readonly_prop\n\n  method ry : animatedLength t readonly_prop\nend\n\n(* interface SVGCircleElement *)\nand circleElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method cx : animatedLength t readonly_prop\n\n  method cy : animatedLength t readonly_prop\n\n  method r : animatedLength t readonly_prop\nend\n\n(* interface SVGEllipseElement *)\nand ellipseElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method cx : animatedLength t readonly_prop\n\n  method cy : animatedLength t readonly_prop\n\n  method rx : animatedLength t readonly_prop\n\n  method ry : animatedLength t readonly_prop\nend\n\n(* interface SVGLineElement *)\nclass type lineElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  inherit Dom_html.eventTarget\n\n  method x1 : animatedLength t readonly_prop\n\n  method y1 : animatedLength t readonly_prop\n\n  method x2 : animatedLength t readonly_prop\n\n  method y2 : animatedLength t readonly_prop\nend\n\n(* interface SVGAnimatedPoints *)\nand animatedPoints = object\n  method points : pointList t readonly_prop\n\n  method animatedpoints : pointList t readonly_prop\nend\n\n(* interface SVGPolylineElement *)\nand polyLineElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  inherit animatedPoints\nend\n\n(* interface SVGPolygonElement *)\nand polygonElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  inherit animatedPoints\nend\n\n(* interface SVGTextContentElement *)\nand textContentElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit Dom_html.eventTarget\n\n  method textLength : animatedLength t readonly_prop\n\n  method lengthAdjust : lengthAdjust animated t readonly_prop\n\n  method getNumberOfChars : int meth\n\n  method getComputedTextLength : number_t meth\n\n  method getSubStringLength : int -> int -> number_t meth\n\n  method getStartPositionOfChar : int -> point t meth\n\n  method getEndPositionOfChar : int -> point t meth\n\n  method getExtentOfChar : int -> rect t meth\n\n  method getRotationOfChar : int -> number_t meth\n\n  method getCharNumAtPosition : point -> int meth\n\n  method selectSubString : int -> int -> unit meth\nend\n\n(* interface SVGTextPositioningElement *)\nand textPositioningElement = object\n  inherit textContentElement\n\n  method x : animatedLengthList t readonly_prop\n\n  method y : animatedLengthList t readonly_prop\n\n  method dx : animatedLengthList t readonly_prop\n\n  method dy : animatedLengthList t readonly_prop\n\n  method rotate : animatedNumberList t readonly_prop\nend\n\n(* interface SVGTextElement *)\nand textElement = object\n  inherit textPositioningElement\n\n  inherit transformable\nend\n\nand tspanElement = textPositioningElement\n\nand trefElement = object\n  inherit textPositioningElement\n\n  inherit uriReference\nend\n\n(* interface SVGTextPathElement *)\nand textPathElementMethod = [textPathMethodType] animated\n\nand textPathElementSpacing = [textPathSpacingType] animated\n\nand textPathElement = object\n  inherit textContentElement\n\n  inherit uriReference\n\n  method startOffset : animatedLength t readonly_prop\n\n  method method_ : textPathElementMethod readonly_prop\n\n  method spacing : textPathElementSpacing readonly_prop\nend\n\n(* interface SVGAltGlyphElement *)\nand altGlyphElement = object\n  inherit textPositioningElement\n\n  inherit uriReference\n\n  method glyphRef : js_string t prop\n\n  method format : js_string t prop\nend\n\n(* interface SVGAltGlyphDefElement *)\nand altGlyphDefElement = element\n\n(* interface SVGAltGlyphItemElement *)\nand altGlyphItemElement = element\n\n(* interface SVGGlyphRefElement *)\nand glyphRefElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit stylable\n\n  method glyphRef : js_string t prop\n\n  method format : js_string t prop\n\n  method x : number_t prop\n\n  method y : number_t prop\n\n  method dx : number_t prop\n\n  method dy : number_t prop\nend\n\n(* interface SVGPaint : SVGColor { *)\n\n(*   // Paint Types *)\n(*   const unsigned short SVG_PAINTTYPE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_PAINTTYPE_RGBCOLOR = 1; *)\n(*   const unsigned short SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR = 2; *)\n(*   const unsigned short SVG_PAINTTYPE_NONE = 101; *)\n(*   const unsigned short SVG_PAINTTYPE_CURRENTCOLOR = 102; *)\n(*   const unsigned short SVG_PAINTTYPE_URI_NONE = 103; *)\n(*   const unsigned short SVG_PAINTTYPE_URI_CURRENTCOLOR = 104; *)\n(*   const unsigned short SVG_PAINTTYPE_URI_RGBCOLOR = 105; *)\n(*   const unsigned short SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR = 106; *)\n(*   const unsigned short SVG_PAINTTYPE_URI = 107; *)\n\n(*   readonly attribute unsigned short paintType; *)\n(*   readonly attribute DOMString uri; *)\n\n(*   void setUri(in DOMString uri); *)\n(*   void setPaint(in unsigned short paintType, in DOMString uri, in DOMString rgbColor, in DOMString iccColor) raises(SVGException); *)\n(* }; *)\n\n(* interface SVGMarkerElement : SVGElement, *)\n(*                              SVGLangSpace, *)\n(*                              SVGExternalResourcesRequired, *)\n(*                              SVGStylable, *)\n(*                              SVGFitToViewBox { *)\n\n(*   // Marker Unit Types *)\n(*   const unsigned short SVG_MARKERUNITS_UNKNOWN = 0; *)\n(*   const unsigned short SVG_MARKERUNITS_USERSPACEONUSE = 1; *)\n(*   const unsigned short SVG_MARKERUNITS_STROKEWIDTH = 2; *)\n\n(*   // Marker Orientation Types *)\n(*   const unsigned short SVG_MARKER_ORIENT_UNKNOWN = 0; *)\n(*   const unsigned short SVG_MARKER_ORIENT_AUTO = 1; *)\n(*   const unsigned short SVG_MARKER_ORIENT_ANGLE = 2; *)\n\n(*   readonly attribute SVGAnimatedLength refX; *)\n(*   readonly attribute SVGAnimatedLength refY; *)\n(*   readonly attribute SVGAnimatedEnumeration markerUnits; *)\n(*   readonly attribute SVGAnimatedLength markerWidth; *)\n(*   readonly attribute SVGAnimatedLength markerHeight; *)\n(*   readonly attribute SVGAnimatedEnumeration orientType; *)\n(*   readonly attribute SVGAnimatedAngle orientAngle; *)\n\n(*   void setOrientToAuto() raises(DOMException); *)\n(*   void setOrientToAngle(in SVGAngle angle) raises(DOMException); *)\n(* }; *)\n\n(* interface SVGColorProfileElement : SVGElement, *)\n(*                                    SVGURIReference, *)\n(*                                    SVGRenderingIntent { *)\n(*   attribute DOMString local; *)\n(*   attribute DOMString name; *)\n(*   attribute unsigned short renderingIntent; *)\n(* }; *)\n\n(* interface SVGColorProfileRule : SVGCSSRule, *)\n(*                                 SVGRenderingIntent { *)\n(*   attribute DOMString src setraises(DOMException); *)\n(*   attribute DOMString name setraises(DOMException); *)\n(*   attribute unsigned short renderingIntent setraises(DOMException); *)\n(* }; *)\n\n(* interface SVGGradientElement *)\nand animatedSpreadMethod = [spreadMethodType] animated\n\nand gradientElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit stylable\n\n  (*   readonly attribute SVGAnimatedEnumeration gradientUnits; *)\n  method gradientTransform : animatedTransformList t readonly_prop\n\n  method spreadMethod : animatedSpreadMethod t readonly_prop\nend\n\n(* interface SVGLinearGradientElement *)\nand linearGradientElement = object\n  inherit gradientElement\n\n  method x1 : animatedLength t readonly_prop\n\n  method y1 : animatedLength t readonly_prop\n\n  method x2 : animatedLength t readonly_prop\n\n  method y2 : animatedLength t readonly_prop\nend\n\n(* interface SVGRadialGradientElement *)\nand radialGradientElement = object\n  inherit gradientElement\n\n  method cx : animatedLength t readonly_prop\n\n  method cy : animatedLength t readonly_prop\n\n  method r : animatedLength t readonly_prop\n\n  method fx : animatedLength t readonly_prop\n\n  method fy : animatedLength t readonly_prop\nend\n\n(* interface SVGStopElement *)\nand stopElement = object\n  inherit element\n\n  inherit stylable\n\n  method offset : animatedNumber t readonly_prop\nend\n\n(* interface SVGPatternElement *)\nand patternElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit fitToViewBox\n\n  (*   readonly attribute SVGAnimatedEnumeration patternUnits; *)\n  (*   readonly attribute SVGAnimatedEnumeration patternContentUnits; *)\n  method patternTransform : animatedTransformList t readonly_prop\n\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\nend\n\n(* interface SVGClipPathElement *)\nand clipPathElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n  (*   readonly attribute SVGAnimatedEnumeration clipPathUnits; *)\nend\n\n(* interface SVGMaskElement *)\nand maskElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  (*   readonly attribute SVGAnimatedEnumeration maskUnits; *)\n  (*   readonly attribute SVGAnimatedEnumeration maskContentUnits; *)\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\nend\n\n(* interface SVGFilterElement *)\nand filterElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  (*   readonly attribute SVGAnimatedEnumeration filterUnits; *)\n  (*   readonly attribute SVGAnimatedEnumeration primitiveUnits; *)\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\n\n  method filterResX : animatedInteger t readonly_prop\n\n  method filterResY : animatedInteger t readonly_prop\n\n  method setFilterRes : int -> int -> unit meth\nend\n\n(* interface SVGFilterPrimitiveStandardAttributes : SVGStylable { *)\n(*   readonly attribute SVGAnimatedLength x; *)\n(*   readonly attribute SVGAnimatedLength y; *)\n(*   readonly attribute SVGAnimatedLength width; *)\n(*   readonly attribute SVGAnimatedLength height; *)\n(*   readonly attribute SVGAnimatedString result; *)\n(* }; *)\n\n(* interface SVGFEBlendElement : SVGElement, *)\n(*                               SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Blend Mode Types *)\n(*   const unsigned short SVG_FEBLEND_MODE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_FEBLEND_MODE_NORMAL = 1; *)\n(*   const unsigned short SVG_FEBLEND_MODE_MULTIPLY = 2; *)\n(*   const unsigned short SVG_FEBLEND_MODE_SCREEN = 3; *)\n(*   const unsigned short SVG_FEBLEND_MODE_DARKEN = 4; *)\n(*   const unsigned short SVG_FEBLEND_MODE_LIGHTEN = 5; *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedString in2; *)\n(*   readonly attribute SVGAnimatedEnumeration mode; *)\n(* }; *)\n\n(* interface SVGFEColorMatrixElement : SVGElement, *)\n(*                                     SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Color Matrix Types *)\n(*   const unsigned short SVG_FECOLORMATRIX_TYPE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_FECOLORMATRIX_TYPE_MATRIX = 1; *)\n(*   const unsigned short SVG_FECOLORMATRIX_TYPE_SATURATE = 2; *)\n(*   const unsigned short SVG_FECOLORMATRIX_TYPE_HUEROTATE = 3; *)\n(*   const unsigned short SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA = 4; *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedEnumeration type; *)\n(*   readonly attribute SVGAnimatedNumberList values; *)\n(* }; *)\n\n(* interface SVGFEComponentTransferElement : SVGElement, *)\n(*                                           SVGFilterPrimitiveStandardAttributes { *)\n(*   readonly attribute SVGAnimatedString in1; *)\n(* }; *)\n\n(* interface SVGComponentTransferFunctionElement : SVGElement { *)\n\n(*   // Component Transfer Types *)\n(*   const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY = 1; *)\n(*   const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_TABLE = 2; *)\n(*   const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE = 3; *)\n(*   const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_LINEAR = 4; *)\n(*   const unsigned short SVG_FECOMPONENTTRANSFER_TYPE_GAMMA = 5; *)\n\n(*   readonly attribute SVGAnimatedEnumeration type; *)\n(*   readonly attribute SVGAnimatedNumberList tableValues; *)\n(*   readonly attribute SVGAnimatedNumber slope; *)\n(*   readonly attribute SVGAnimatedNumber intercept; *)\n(*   readonly attribute SVGAnimatedNumber amplitude; *)\n(*   readonly attribute SVGAnimatedNumber exponent; *)\n(*   readonly attribute SVGAnimatedNumber offset; *)\n(* }; *)\n\n(* interface SVGFEFuncRElement : SVGComponentTransferFunctionElement { *)\n(* }; *)\n\n(* interface SVGFEFuncGElement : SVGComponentTransferFunctionElement { *)\n(* }; *)\n\n(* interface SVGFEFuncBElement : SVGComponentTransferFunctionElement { *)\n(* }; *)\n\n(* interface SVGFEFuncAElement : SVGComponentTransferFunctionElement { *)\n(* }; *)\n\n(* interface SVGFECompositeElement : SVGElement, *)\n(*                                   SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Composite Operators *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_UNKNOWN = 0; *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_OVER = 1; *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_IN = 2; *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_OUT = 3; *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_ATOP = 4; *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_XOR = 5; *)\n(*   const unsigned short SVG_FECOMPOSITE_OPERATOR_ARITHMETIC = 6; *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedString in2; *)\n(*   readonly attribute SVGAnimatedEnumeration operator; *)\n(*   readonly attribute SVGAnimatedNumber k1; *)\n(*   readonly attribute SVGAnimatedNumber k2; *)\n(*   readonly attribute SVGAnimatedNumber k3; *)\n(*   readonly attribute SVGAnimatedNumber k4; *)\n(* }; *)\n\n(* interface SVGFEConvolveMatrixElement : SVGElement, *)\n(*                                        SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Edge Mode Values *)\n(*   const unsigned short SVG_EDGEMODE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_EDGEMODE_DUPLICATE = 1; *)\n(*   const unsigned short SVG_EDGEMODE_WRAP = 2; *)\n(*   const unsigned short SVG_EDGEMODE_NONE = 3; *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedInteger orderX; *)\n(*   readonly attribute SVGAnimatedInteger orderY; *)\n(*   readonly attribute SVGAnimatedNumberList kernelMatrix; *)\n(*   readonly attribute SVGAnimatedNumber divisor; *)\n(*   readonly attribute SVGAnimatedNumber bias; *)\n(*   readonly attribute SVGAnimatedInteger targetX; *)\n(*   readonly attribute SVGAnimatedInteger targetY; *)\n(*   readonly attribute SVGAnimatedEnumeration edgeMode; *)\n(*   readonly attribute SVGAnimatedNumber kernelUnitLengthX; *)\n(*   readonly attribute SVGAnimatedNumber kernelUnitLengthY; *)\n(*   readonly attribute SVGAnimatedBoolean preserveAlpha; *)\n(* }; *)\n\n(* interface SVGFEDiffuseLightingElement : SVGElement, *)\n(*                                         SVGFilterPrimitiveStandardAttributes { *)\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedNumber surfaceScale; *)\n(*   readonly attribute SVGAnimatedNumber diffuseConstant; *)\n(*   readonly attribute SVGAnimatedNumber kernelUnitLengthX; *)\n(*   readonly attribute SVGAnimatedNumber kernelUnitLengthY; *)\n(* }; *)\n\n(* interface SVGFEDistantLightElement : SVGElement { *)\n(*   readonly attribute SVGAnimatedNumber azimuth; *)\n(*   readonly attribute SVGAnimatedNumber elevation; *)\n(* }; *)\n\n(* interface SVGFEPointLightElement : SVGElement { *)\n(*   readonly attribute SVGAnimatedNumber x; *)\n(*   readonly attribute SVGAnimatedNumber y; *)\n(*   readonly attribute SVGAnimatedNumber z; *)\n(* }; *)\n\n(* interface SVGFESpotLightElement : SVGElement { *)\n(*   readonly attribute SVGAnimatedNumber x; *)\n(*   readonly attribute SVGAnimatedNumber y; *)\n(*   readonly attribute SVGAnimatedNumber z; *)\n(*   readonly attribute SVGAnimatedNumber pointsAtX; *)\n(*   readonly attribute SVGAnimatedNumber pointsAtY; *)\n(*   readonly attribute SVGAnimatedNumber pointsAtZ; *)\n(*   readonly attribute SVGAnimatedNumber specularExponent; *)\n(*   readonly attribute SVGAnimatedNumber limitingConeAngle; *)\n(* }; *)\n\n(* interface SVGFEDisplacementMapElement : SVGElement, *)\n(*                                         SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Channel Selectors *)\n(*   const unsigned short SVG_CHANNEL_UNKNOWN = 0; *)\n(*   const unsigned short SVG_CHANNEL_R = 1; *)\n(*   const unsigned short SVG_CHANNEL_G = 2; *)\n(*   const unsigned short SVG_CHANNEL_B = 3; *)\n(*   const unsigned short SVG_CHANNEL_A = 4; *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedString in2; *)\n(*   readonly attribute SVGAnimatedNumber scale; *)\n(*   readonly attribute SVGAnimatedEnumeration xChannelSelector; *)\n(*   readonly attribute SVGAnimatedEnumeration yChannelSelector; *)\n(* }; *)\n\n(* interface SVGFEFloodElement : SVGElement, *)\n(*                               SVGFilterPrimitiveStandardAttributes { *)\n(* }; *)\n\n(* interface SVGFEGaussianBlurElement : SVGElement, *)\n(*                                      SVGFilterPrimitiveStandardAttributes { *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedNumber stdDeviationX; *)\n(*   readonly attribute SVGAnimatedNumber stdDeviationY; *)\n\n(*   void setStdDeviation(in float stdDeviationX, in float stdDeviationY) raises(DOMException); *)\n(* }; *)\n\n(* interface SVGFEImageElement : SVGElement, *)\n(*                               SVGURIReference, *)\n(*                               SVGLangSpace, *)\n(*                               SVGExternalResourcesRequired, *)\n(*                               SVGFilterPrimitiveStandardAttributes { *)\n(*   readonly attribute SVGAnimatedPreserveAspectRatio preserveAspectRatio; *)\n(* }; *)\n\n(* interface SVGFEMergeElement : SVGElement, *)\n(*                               SVGFilterPrimitiveStandardAttributes { *)\n(* }; *)\n\n(* interface SVGFEMergeNodeElement : SVGElement { *)\n(*   readonly attribute SVGAnimatedString in1; *)\n(* }; *)\n\n(* interface SVGFEMorphologyElement : SVGElement, *)\n(*                                    SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Morphology Operators *)\n(*   const unsigned short SVG_MORPHOLOGY_OPERATOR_UNKNOWN = 0; *)\n(*   const unsigned short SVG_MORPHOLOGY_OPERATOR_ERODE = 1; *)\n(*   const unsigned short SVG_MORPHOLOGY_OPERATOR_DILATE = 2; *)\n\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedEnumeration operator; *)\n(*   readonly attribute SVGAnimatedNumber radiusX; *)\n(*   readonly attribute SVGAnimatedNumber radiusY; *)\n(* }; *)\n\n(* interface SVGFEOffsetElement : SVGElement, *)\n(*                                SVGFilterPrimitiveStandardAttributes { *)\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedNumber dx; *)\n(*   readonly attribute SVGAnimatedNumber dy; *)\n(* }; *)\n\n(* interface SVGFESpecularLightingElement : SVGElement, *)\n(*                                          SVGFilterPrimitiveStandardAttributes { *)\n(*   readonly attribute SVGAnimatedString in1; *)\n(*   readonly attribute SVGAnimatedNumber surfaceScale; *)\n(*   readonly attribute SVGAnimatedNumber specularConstant; *)\n(*   readonly attribute SVGAnimatedNumber specularExponent; *)\n(*   readonly attribute SVGAnimatedNumber kernelUnitLengthX; *)\n(*   readonly attribute SVGAnimatedNumber kernelUnitLengthY; *)\n(* }; *)\n\n(* interface SVGFETileElement : SVGElement, *)\n(*                              SVGFilterPrimitiveStandardAttributes { *)\n(*   readonly attribute SVGAnimatedString in1; *)\n(* }; *)\n\n(* interface SVGFETurbulenceElement : SVGElement, *)\n(*                                    SVGFilterPrimitiveStandardAttributes { *)\n\n(*   // Turbulence Types *)\n(*   const unsigned short SVG_TURBULENCE_TYPE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_TURBULENCE_TYPE_FRACTALNOISE = 1; *)\n(*   const unsigned short SVG_TURBULENCE_TYPE_TURBULENCE = 2; *)\n\n(*   // Stitch Options *)\n(*   const unsigned short SVG_STITCHTYPE_UNKNOWN = 0; *)\n(*   const unsigned short SVG_STITCHTYPE_STITCH = 1; *)\n(*   const unsigned short SVG_STITCHTYPE_NOSTITCH = 2; *)\n\n(*   readonly attribute SVGAnimatedNumber baseFrequencyX; *)\n(*   readonly attribute SVGAnimatedNumber baseFrequencyY; *)\n(*   readonly attribute SVGAnimatedInteger numOctaves; *)\n(*   readonly attribute SVGAnimatedNumber seed; *)\n(*   readonly attribute SVGAnimatedEnumeration stitchTiles; *)\n(*   readonly attribute SVGAnimatedEnumeration type; *)\n(* }; *)\n\n(* interface SVGCursorElement *)\nand cursorElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit tests\n\n  inherit externalResourcesRequired\n\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\nend\n\n(* interface SVGAElement *)\nand aElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method target : animatedString t readonly_prop\nend\n\n(* interface SVGViewElement *)\nand viewElement = object\n  inherit element\n\n  inherit externalResourcesRequired\n\n  inherit fitToViewBox\n\n  inherit zoomAndPan\n\n  method viewTarget : stringList t readonly_prop\nend\n\n(* interface SVGScriptElement *)\nand scriptElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit externalResourcesRequired\n\n  method type_ : js_string t prop\nend\n\n(* interface SVGZoomEvent : UIEvent *)\n(*   readonly attribute SVGRect zoomRectScreen; *)\n(*   readonly attribute float previousScale; *)\n(*   readonly attribute SVGPoint previousTranslate; *)\n(*   readonly attribute float newScale; *)\n(*   readonly attribute SVGPoint newTranslate; *)\n(* }; *)\n\n(* interface SVGAnimationElement *)\nand animationElement = object\n  inherit element\n\n  inherit tests\n\n  inherit externalResourcesRequired\n\n  (* inherit elementTimeControl *)\n  method targetElement : element t readonly_prop\n\n  method getStartTime : number_t meth\n\n  method getCurrentTime : number_t meth\n\n  method getSimpleDuration : number_t meth\nend\n\n(* interface SVGAnimateElement *)\nand animateElement = object\n  inherit animationElement\n\n  inherit stylable\nend\n\n(* interface SVGSetElement *)\nand setElement = animationElement\n\n(* interface SVGAnimateMotionElement *)\nand animateMotionElement = animationElement\n\n(* interface SVGMPathElement *)\nand mPathElement = object\n  inherit element\n\n  inherit uriReference\n\n  inherit externalResourcesRequired\nend\n\n(* interface SVGAnimateColorElement *)\nand animateColorElement = object\n  inherit animationElement\n\n  inherit stylable\nend\n\n(* interface SVGAnimateTransformElement *)\nand animateTransformElement = animationElement\n\n(* interface SVGFontElement *)\nand fontElement = object\n  inherit element\n\n  inherit stylable\nend\n\n(* interface SVGGlyphElement *)\n(* interface SVGMissingGlyphElement*)\nand glyphElement = object\n  inherit element\n\n  inherit stylable\nend\n\n(* interface SVGHKernElement : SVGElement *)\n(* interface SVGVKernElement : SVGElement *)\n\n(* interface SVGFontFaceElement *)\nclass type fontFaceElement = element\n\n(* interface SVGFontFaceSrcElement *)\nclass type fontFaceSrcElement = element\n\n(* interface SVGFontFaceUriElement *)\nclass type fontFaceUriElement = element\n\n(* interface SVGFontFaceFormatElement *)\nclass type fontFaceFormatElement = element\n\n(* interface SVGFontFaceNameElement *)\nclass type fontFaceNameElement = element\n\n(* interface SVGMetadataElement *)\nclass type metadataElement = element\n\n(* interface SVGForeignObjectElement *)\nclass type foreignObjectElement = object\n  inherit element\n\n  inherit tests\n\n  inherit langSpace\n\n  inherit externalResourcesRequired\n\n  inherit stylable\n\n  inherit transformable\n\n  method x : animatedLength t readonly_prop\n\n  method y : animatedLength t readonly_prop\n\n  method width : animatedLength t readonly_prop\n\n  method height : animatedLength t readonly_prop\nend\n\nlet createElement (doc : document t) name = doc##createElementNS xmlns (Js.string name)\n\nlet unsafeCreateElement doc name = Js.Unsafe.coerce (createElement doc name)\n\nlet createA doc : aElement t = unsafeCreateElement doc \"a\"\n\nlet createAltGlyph doc : altGlyphElement t = unsafeCreateElement doc \"altglyph\"\n\nlet createAltGlyphDef doc : altGlyphDefElement t = unsafeCreateElement doc \"altglyphdef\"\n\nlet createAltGlyphItem doc : altGlyphItemElement t =\n  unsafeCreateElement doc \"altglyphitem\"\n\nlet createAnimate doc : animateElement t = unsafeCreateElement doc \"animate\"\n\nlet createAnimateColor doc : animateColorElement t =\n  unsafeCreateElement doc \"animatecolor\"\n\nlet createAnimateMotion doc : animateMotionElement t =\n  unsafeCreateElement doc \"animatemotion\"\n\nlet createAnimateTransform doc : animateTransformElement t =\n  unsafeCreateElement doc \"animatetransform\"\n\nlet createCircle doc : circleElement t = unsafeCreateElement doc \"circle\"\n\nlet createClipPath doc : clipPathElement t = unsafeCreateElement doc \"clippath\"\n\n(* let createColorProfile doc : colorProfile t = unsafeCreateElement doc \"color-profile\" *)\nlet createCursor doc : cursorElement t = unsafeCreateElement doc \"cursor\"\n\nlet createDefs doc : defsElement t = unsafeCreateElement doc \"defs\"\n\nlet createDesc doc : descElement t = unsafeCreateElement doc \"desc\"\n\nlet createEllipse doc : ellipseElement t = unsafeCreateElement doc \"ellipse\"\n\n(* let createFe* *)\nlet createFilter doc : filterElement t = unsafeCreateElement doc \"filter\"\n\nlet createFont doc : fontElement t = unsafeCreateElement doc \"font\"\n\nlet createFontFace doc : fontElement t = unsafeCreateElement doc \"font-face\"\n\nlet createFontFaceFormat doc : fontElement t = unsafeCreateElement doc \"font-face-format\"\n\nlet createFontFaceName doc : fontElement t = unsafeCreateElement doc \"font-face-name\"\n\nlet createFontFaceSrc doc : fontElement t = unsafeCreateElement doc \"font-face-src\"\n\nlet createFontFaceUri doc : fontElement t = unsafeCreateElement doc \"font-face-uri\"\n\nlet createForeignObject doc : foreignObjectElement t =\n  unsafeCreateElement doc \"foreignObject\"\n\nlet createG doc : gElement t = unsafeCreateElement doc \"g\"\n\nlet createGlyph doc : glyphElement t = unsafeCreateElement doc \"glyph\"\n\nlet createGlyphRef doc : glyphElement t = unsafeCreateElement doc \"glyphref\"\n\nlet createhkern doc : element t = unsafeCreateElement doc \"hkern\"\n\nlet createImage doc : imageElement t = unsafeCreateElement doc \"image\"\n\nlet createLineElement doc : lineElement t = unsafeCreateElement doc \"line\"\n\nlet createLinearElement doc : linearGradientElement t =\n  unsafeCreateElement doc \"lineargradient\"\n\n(* let createMarker doc : markerElement *)\nlet createMask doc : maskElement t = unsafeCreateElement doc \"mask\"\n\nlet createMetaData doc : metadataElement t = unsafeCreateElement doc \"metadata\"\n\nlet createMissingGlyph doc : glyphElement t = unsafeCreateElement doc \"missing-glyph\"\n\nlet createMPath doc : mPathElement t = unsafeCreateElement doc \"mpath\"\n\nlet createPath doc : pathElement t = unsafeCreateElement doc \"path\"\n\nlet createPattern doc : patternElement t = unsafeCreateElement doc \"pattern\"\n\nlet createPolygon doc : polygonElement t = unsafeCreateElement doc \"polygon\"\n\nlet createPolyline doc : polyLineElement t = unsafeCreateElement doc \"polyline\"\n\nlet createRadialgradient doc : radialGradientElement t =\n  unsafeCreateElement doc \"radialgradient\"\n\nlet createRect doc : rectElement t = unsafeCreateElement doc \"rect\"\n\nlet createScript doc : scriptElement t = unsafeCreateElement doc \"script\"\n\nlet createSet doc : setElement t = unsafeCreateElement doc \"set\"\n\nlet createStop doc : stopElement t = unsafeCreateElement doc \"stop\"\n\nlet createStyle doc : styleElement t = unsafeCreateElement doc \"style\"\n\nlet createSvg doc : svgElement t = unsafeCreateElement doc \"svg\"\n\nlet createSwitch doc : switchElement t = unsafeCreateElement doc \"switch\"\n\nlet createSymbol doc : symbolElement t = unsafeCreateElement doc \"symbol\"\n\nlet createTextElement doc : textElement t = unsafeCreateElement doc \"text\"\n\nlet createTextpath doc : textPathElement t = unsafeCreateElement doc \"textpath\"\n\nlet createTitle doc : titleElement t = unsafeCreateElement doc \"title\"\n\nlet createTref doc : trefElement t = unsafeCreateElement doc \"tref\"\n\nlet createTspan doc : tspanElement t = unsafeCreateElement doc \"tspan\"\n\nlet createUse doc : useElement t = unsafeCreateElement doc \"use\"\n\nlet createView doc : viewElement t = unsafeCreateElement doc \"view\"\n\nlet createvkern doc : element t = unsafeCreateElement doc \"vkern\"\n\n(****)\n\nlet svg_element : element t constr = Js.Unsafe.global##._SVGElement\n\nlet document = Js.Unsafe.global##.document\n\nlet getElementById id : element t =\n  Js.Opt.case\n    (Js.Unsafe.global##.document##getElementById (Js.string id))\n    (fun () -> raise Not_found)\n    (fun e -> if Js.instanceof e svg_element then e else raise Not_found)\n\nmodule CoerceTo = struct\n  let element (e : #Dom.node Js.t) : element Js.t Js.opt =\n    if Js.instanceof e svg_element then Js.some (Js.Unsafe.coerce e) else Js.null\n\n  let unsafeCoerce (e : #element t) tag =\n    if Js.equals e##.tagName##toLowerCase (Js.string tag)\n    then Js.some (Js.Unsafe.coerce e)\n    else Js.null\n\n  let a e : aElement t opt = unsafeCoerce e \"a\"\n\n  let altGlyph e : altGlyphElement t opt = unsafeCoerce e \"altglyph\"\n\n  let altGlyphDef e : altGlyphDefElement t opt = unsafeCoerce e \"altglyphdef\"\n\n  let altGlyphItem e : altGlyphItemElement t opt = unsafeCoerce e \"altglyphitem\"\n\n  let animate e : animateElement t opt = unsafeCoerce e \"animate\"\n\n  let animateColor e : animateColorElement t opt = unsafeCoerce e \"animatecolor\"\n\n  let animateMotion e : animateMotionElement t opt = unsafeCoerce e \"animatemotion\"\n\n  let animateTransform e : animateTransformElement t opt =\n    unsafeCoerce e \"animatetransform\"\n\n  let circle e : circleElement t opt = unsafeCoerce e \"circle\"\n\n  let clipPath e : clipPathElement t opt = unsafeCoerce e \"clippath\"\n\n  (* let ColorProfile e : colorProfile t opt = unsafeCoerce e \"color-profile\" *)\n  let cursor e : cursorElement t opt = unsafeCoerce e \"cursor\"\n\n  let defs e : defsElement t opt = unsafeCoerce e \"defs\"\n\n  let desc e : descElement t opt = unsafeCoerce e \"desc\"\n\n  let ellipse e : ellipseElement t opt = unsafeCoerce e \"ellipse\"\n\n  (* let Fe* *)\n  let filter e : filterElement t opt = unsafeCoerce e \"filter\"\n\n  let font e : fontElement t opt = unsafeCoerce e \"font\"\n\n  let fontFace e : fontElement t opt = unsafeCoerce e \"font-face\"\n\n  let fontFaceFormat e : fontElement t opt = unsafeCoerce e \"font-face-format\"\n\n  let fontFaceName e : fontElement t opt = unsafeCoerce e \"font-face-name\"\n\n  let fontFaceSrc e : fontElement t opt = unsafeCoerce e \"font-face-src\"\n\n  let fontFaceUri e : fontElement t opt = unsafeCoerce e \"font-face-uri\"\n\n  let foreignObject e : foreignObjectElement t opt = unsafeCoerce e \"foreignobject\"\n\n  let g e : gElement t opt = unsafeCoerce e \"g\"\n\n  let glyph e : glyphElement t opt = unsafeCoerce e \"glyph\"\n\n  let glyphRef e : glyphElement t opt = unsafeCoerce e \"glyphref\"\n\n  let hkern e : element t opt = unsafeCoerce e \"hkern\"\n\n  let image e : imageElement t opt = unsafeCoerce e \"image\"\n\n  let lineElement e : lineElement t opt = unsafeCoerce e \"line\"\n\n  let linearElement e : linearGradientElement t opt = unsafeCoerce e \"lineargradient\"\n\n  (* let Marker e : markerElement *)\n  let mask e : maskElement t opt = unsafeCoerce e \"mask\"\n\n  let metaData e : metadataElement t opt = unsafeCoerce e \"metadata\"\n\n  let missingGlyph e : glyphElement t opt = unsafeCoerce e \"missing-glyph\"\n\n  let mPath e : mPathElement t opt = unsafeCoerce e \"mpath\"\n\n  let path e : pathElement t opt = unsafeCoerce e \"path\"\n\n  let pattern e : patternElement t opt = unsafeCoerce e \"pattern\"\n\n  let polygon e : polygonElement t opt = unsafeCoerce e \"polygon\"\n\n  let polyline e : polyLineElement t opt = unsafeCoerce e \"polyline\"\n\n  let radialgradient e : radialGradientElement t opt = unsafeCoerce e \"radialgradient\"\n\n  let rect e : rectElement t opt = unsafeCoerce e \"rect\"\n\n  let script e : scriptElement t opt = unsafeCoerce e \"script\"\n\n  let set e : setElement t opt = unsafeCoerce e \"set\"\n\n  let stop e : stopElement t opt = unsafeCoerce e \"stop\"\n\n  let style e : styleElement t opt = unsafeCoerce e \"style\"\n\n  let svg e : svgElement t opt = unsafeCoerce e \"svg\"\n\n  let switch e : switchElement t opt = unsafeCoerce e \"switch\"\n\n  let symbol e : symbolElement t opt = unsafeCoerce e \"symbol\"\n\n  let textElement e : textElement t opt = unsafeCoerce e \"text\"\n\n  let textpath e : textPathElement t opt = unsafeCoerce e \"textpath\"\n\n  let title e : titleElement t opt = unsafeCoerce e \"title\"\n\n  let tref e : trefElement t opt = unsafeCoerce e \"tref\"\n\n  let tspan e : tspanElement t opt = unsafeCoerce e \"tspan\"\n\n  let use e : useElement t opt = unsafeCoerce e \"use\"\n\n  let view e : viewElement t opt = unsafeCoerce e \"view\"\n\n  let vkern e : element t opt = unsafeCoerce e \"vkern\"\nend\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2014 Hugo Heuzard\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\n(* https://developer.mozilla.org/en-US/docs/Web/API/EventSource *)\nopen Js\nopen Dom\nopen! Import\n\ntype state =\n  | CONNECTING\n  | OPEN\n  | CLOSED\n\nclass type ['a] messageEvent = object\n  inherit ['a] Dom.event\n\n  method data : js_string t readonly_prop\n\n  method origin : js_string t readonly_prop\n\n  method lastEventId : js_string t readonly_prop\n  (* method source : unit *)\nend\n\nclass type eventSource = object ('self)\n  method url : string t readonly_prop\n\n  method withCredentials : bool t readonly_prop\n\n  method readyState : state readonly_prop\n\n  method close : unit meth\n\n  method onopen : ('self t, 'self messageEvent t) event_listener writeonly_prop\n\n  method onmessage : ('self t, 'self messageEvent t) event_listener writeonly_prop\n\n  method onerror : ('self t, 'self messageEvent t) event_listener writeonly_prop\nend\n\nclass type options = object\n  method withCredentials : bool t writeonly_prop\nend\n\nlet withCredentials b : options t =\n  let init = Js.Unsafe.obj [||] in\n  init##.withCredentials := Js.bool b;\n  init\n\nlet eventSource = Js.Unsafe.global##._EventSource\n\nlet eventSource_options = Js.Unsafe.global##._EventSource\n\nlet addEventListener = Dom.addEventListener\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2010 Jérôme Vouillon\n * Laboratoire PPS - CNRS Université Paris Diderot\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\n\nopen Js\nopen! Import\n\nclass type console = object\n  method log : _ -> unit meth\n\n  method log_2 : _ -> _ -> unit meth\n\n  method log_3 : _ -> _ -> _ -> unit meth\n\n  method log_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method log_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method log_6 : _ -> _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method log_7 : _ -> _ -> _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method log_8 : _ -> _ -> _ -> _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method debug : _ -> unit meth\n\n  method debug_2 : _ -> _ -> unit meth\n\n  method debug_3 : _ -> _ -> _ -> unit meth\n\n  method debug_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method debug_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method info : _ -> unit meth\n\n  method info_2 : _ -> _ -> unit meth\n\n  method info_3 : _ -> _ -> _ -> unit meth\n\n  method info_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method info_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method warn : _ -> unit meth\n\n  method warn_2 : _ -> _ -> unit meth\n\n  method warn_3 : _ -> _ -> _ -> unit meth\n\n  method warn_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method warn_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method error : _ -> unit meth\n\n  method error_2 : _ -> _ -> unit meth\n\n  method error_3 : _ -> _ -> _ -> unit meth\n\n  method error_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method error_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method assert_ : bool t -> unit meth\n\n  method assert_1 : bool t -> _ -> unit meth\n\n  method assert_2 : bool t -> _ -> _ -> unit meth\n\n  method assert_3 : bool t -> _ -> _ -> _ -> unit meth\n\n  method assert_4 : bool t -> _ -> _ -> _ -> _ -> unit meth\n\n  method assert_5 : bool t -> _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method dir : _ -> unit meth\n\n  method dirxml : Dom.node t -> unit meth\n\n  method trace : unit meth\n\n  method group : _ -> unit meth\n\n  method group_2 : _ -> _ -> unit meth\n\n  method group_3 : _ -> _ -> _ -> unit meth\n\n  method group_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method group_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method groupCollapsed : _ -> unit meth\n\n  method groupCollapsed_2 : _ -> _ -> unit meth\n\n  method groupCollapsed_3 : _ -> _ -> _ -> unit meth\n\n  method groupCollapsed_4 : _ -> _ -> _ -> _ -> unit meth\n\n  method groupCollapsed_5 : _ -> _ -> _ -> _ -> _ -> unit meth\n\n  method groupEnd : unit meth\n\n  method time : js_string t -> unit meth\n\n  method timeEnd : js_string t -> unit meth\nend\n\nexternal get_console : unit -> console t = \"caml_js_get_console\"\n\nlet console = get_console ()\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2015 Stéphane Legrand\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\ntype positionErrorCode\n\ntype watchId\n\nclass type coordinates = object\n  method latitude : Js.number_t Js.readonly_prop\n\n  method longitude : Js.number_t Js.readonly_prop\n\n  method altitude : Js.number_t Js.opt Js.readonly_prop\n\n  method accuracy : Js.number_t Js.readonly_prop\n\n  method altitudeAccuracy : Js.number_t Js.opt Js.readonly_prop\n\n  method heading : Js.number_t Js.opt Js.readonly_prop\n\n  method speed : Js.number_t Js.opt Js.readonly_prop\nend\n\nclass type position = object\n  method coords : coordinates Js.t Js.readonly_prop\n\n  method timestamp : Js.date Js.readonly_prop\nend\n\nclass type positionOptions = object\n  method enableHighAccuracy : bool Js.writeonly_prop\n\n  method timeout : int Js.writeonly_prop\n\n  method maximumAge : int Js.writeonly_prop\nend\n\nclass type positionError = object\n  method _PERMISSION_DENIED_ : positionErrorCode Js.readonly_prop\n\n  method _POSITION_UNAVAILABLE_ : positionErrorCode Js.readonly_prop\n\n  method _TIMEOUT : positionErrorCode Js.readonly_prop\n\n  method code : positionErrorCode Js.readonly_prop\n\n  method message : Js.js_string Js.t Js.readonly_prop\nend\n\nclass type geolocation = object\n  method getCurrentPosition :\n       (position Js.t -> unit) Js.callback\n    -> (positionError Js.t -> unit) Js.callback\n    -> positionOptions Js.t\n    -> unit Js.meth\n\n  method watchPosition :\n       (position Js.t -> unit) Js.callback\n    -> (positionError Js.t -> unit) Js.callback\n    -> positionOptions Js.t\n    -> watchId Js.meth\n\n  method clearWatch : watchId -> unit Js.meth\nend\n\nlet empty_position_options () = Js.Unsafe.obj [||]\n\nlet geolocation =\n  let x = Js.Unsafe.global##.navigator in\n  if Js.Optdef.test x then x##.geolocation else x\n\n(* undefined *)\n\nlet is_supported () = Js.Optdef.test geolocation\n","class type intersectionObserverEntry = object\n  method target : Dom.node Js.t Js.readonly_prop\n\n  method boundingClientRect : Dom_html.clientRect Js.t Js.readonly_prop\n\n  method rootBounds : Dom_html.clientRect Js.t Js.opt Js.readonly_prop\n\n  method intersectionRect : Dom_html.clientRect Js.t Js.readonly_prop\n\n  method intersectionRatio : Js.number_t Js.readonly_prop\n\n  method isIntersecting : bool Js.t Js.readonly_prop\n\n  method time : Js.number_t Js.readonly_prop\nend\n\nclass type intersectionObserverOptions = object\n  method root : Dom.node Js.t Js.writeonly_prop\n\n  method rootMargin : Js.js_string Js.t Js.writeonly_prop\n\n  method threshold : Js.number_t Js.js_array Js.t Js.writeonly_prop\nend\n\nclass type intersectionObserver = object\n  method root : Dom.node Js.t Js.opt Js.readonly_prop\n\n  method rootMargin : Js.js_string Js.t Js.readonly_prop\n\n  method thresholds : Js.number_t Js.js_array Js.t Js.readonly_prop\n\n  method observe : #Dom.node Js.t -> unit Js.meth\n\n  method unobserve : #Dom.node Js.t -> unit Js.meth\n\n  method disconnect : unit Js.meth\n\n  method takeRecords : intersectionObserverEntry Js.t Js.js_array Js.meth\nend\n\nlet empty_intersection_observer_options () : intersectionObserverOptions Js.t =\n  Js.Unsafe.obj [||]\n\nlet intersectionObserver_unsafe = Js.Unsafe.global##._IntersectionObserver\n\nlet is_supported () = Js.Optdef.test intersectionObserver_unsafe\n\nlet intersectionObserver :\n    (   (   intersectionObserverEntry Js.t Js.js_array Js.t\n         -> intersectionObserver Js.t\n         -> unit)\n        Js.callback\n     -> intersectionObserverOptions Js.t\n     -> intersectionObserver Js.t)\n    Js.constr =\n  intersectionObserver_unsafe\n","(* Js_of_ocaml library\n * http://www.ocsigen.org/js_of_ocaml/\n * Copyright (C) 2018 Stéphane Legrand\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, with linking exception;\n * either version 2.1 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n *)\nopen! Import\n\nmodule type Shared = sig\n  class type object_options = object\n    method localeMatcher : Js.js_string Js.t Js.prop\n  end\n\n  val object_options : unit -> object_options Js.t\n\n  class type _object = object\n    method supportedLocalesOf :\n         Js.js_string Js.t Js.js_array Js.t\n      -> object_options Js.t Js.optdef\n      -> Js.js_string Js.t Js.js_array Js.t Js.meth\n  end\nend\n\nmodule Shared : Shared = struct\n  class type object_options = object\n    method localeMatcher : Js.js_string Js.t Js.prop\n  end\n\n  let object_options () =\n    object%js\n      val mutable localeMatcher = Js.string \"best fit\"\n    end\n\n  class type _object = object\n    method supportedLocalesOf :\n         Js.js_string Js.t Js.js_array Js.t\n      -> object_options Js.t Js.optdef\n      -> Js.js_string Js.t Js.js_array Js.t Js.meth\n  end\nend\n\nmodule Collator = struct\n  include Shared\n\n  class type resolved_options = object\n    method locale : Js.js_string Js.t Js.readonly_prop\n\n    method usage : Js.js_string Js.t Js.readonly_prop\n\n    method sensitivity : Js.js_string Js.t Js.readonly_prop\n\n    method ignorePunctuation : bool Js.t Js.readonly_prop\n\n    method collation : Js.js_string Js.t Js.readonly_prop\n\n    method numeric : bool Js.t Js.readonly_prop\n\n    method caseFirst : Js.js_string Js.t Js.readonly_prop\n  end\n\n  class type options = object\n    method localeMatcher : Js.js_string Js.t Js.prop\n\n    method usage : Js.js_string Js.t Js.prop\n\n    method sensitivity : Js.js_string Js.t Js.prop\n\n    method ignorePunctuation : bool Js.t Js.prop\n\n    method numeric : bool Js.t Js.prop\n\n    method caseFirst : Js.js_string Js.t Js.prop\n  end\n\n  let options () =\n    object%js\n      val mutable localeMatcher = Js.string \"best fit\"\n\n      val mutable usage = Js.string \"sort\"\n\n      val mutable sensitivity = Js.string \"variant\"\n\n      val mutable ignorePunctuation = Js._false\n\n      val mutable numeric = Js._false\n\n      val mutable caseFirst = Js.string \"false\"\n    end\n\n  class type t = object\n    method compare : (Js.js_string Js.t -> Js.js_string Js.t -> int) Js.readonly_prop\n\n    method resolvedOptions : unit -> resolved_options Js.t Js.meth\n  end\nend\n\nmodule DateTimeFormat = struct\n  include Shared\n\n  class type resolved_options = object\n    method locale : Js.js_string Js.t Js.readonly_prop\n\n    method calendar : Js.js_string Js.t Js.readonly_prop\n\n    method numberingSystem : Js.js_string Js.t Js.readonly_prop\n\n    method timeZone : Js.js_string Js.t Js.readonly_prop\n\n    method hour12 : bool Js.t Js.readonly_prop\n\n    method weekday : Js.js_string Js.t Js.optdef_prop\n\n    method era : Js.js_string Js.t Js.optdef_prop\n\n    method year : Js.js_string Js.t Js.optdef_prop\n\n    method month : Js.js_string Js.t Js.optdef_prop\n\n    method day : Js.js_string Js.t Js.optdef_prop\n\n    method hour : Js.js_string Js.t Js.optdef_prop\n\n    method minute : Js.js_string Js.t Js.optdef_prop\n\n    method second : Js.js_string Js.t Js.optdef_prop\n\n    method timeZoneName : Js.js_string Js.t Js.optdef_prop\n  end\n\n  class type options = object\n    method dateStyle : Js.js_string Js.t Js.optdef Js.prop\n\n    method timeStyle : Js.js_string Js.t Js.optdef Js.prop\n\n    method calendar : Js.js_string Js.t Js.optdef Js.prop\n\n    method dayPeriod : Js.js_string Js.t Js.optdef Js.prop\n\n    method numberingSystem : Js.js_string Js.t Js.optdef Js.prop\n\n    method localeMatcher : Js.js_string Js.t Js.prop\n\n    method timeZone : Js.js_string Js.t Js.optdef Js.prop\n\n    method hour12 : bool Js.t Js.optdef Js.prop\n\n    method hourCycle : Js.js_string Js.t Js.optdef Js.prop\n\n    method formatMatcher : Js.js_string Js.t Js.prop\n\n    method weekday : Js.js_string Js.t Js.optdef Js.prop\n\n    method era : Js.js_string Js.t Js.optdef Js.prop\n\n    method year : Js.js_string Js.t Js.optdef Js.prop\n\n    method month : Js.js_string Js.t Js.optdef Js.prop\n\n    method day : Js.js_string Js.t Js.optdef Js.prop\n\n    method hour : Js.js_string Js.t Js.optdef Js.prop\n\n    method minute : Js.js_string Js.t Js.optdef Js.prop\n\n    method second : Js.js_string Js.t Js.optdef Js.prop\n\n    method fractionalSecondDigits : int Js.optdef Js.prop\n\n    method timeZoneName : Js.js_string Js.t Js.optdef Js.prop\n  end\n\n  let options () : options Js.t =\n    object%js\n      val mutable dateStyle = Js.undefined\n\n      val mutable timeStyle = Js.undefined\n\n      val mutable calendar = Js.undefined\n\n      val mutable dayPeriod = Js.undefined\n\n      val mutable numberingSystem = Js.undefined\n\n      val mutable localeMatcher = Js.string \"best fit\"\n\n      val mutable timeZone = Js.undefined\n\n      val mutable hour12 = Js.undefined\n\n      val mutable hourCycle = Js.undefined\n\n      val mutable formatMatcher = Js.string \"best fit\"\n\n      val mutable weekday = Js.undefined\n\n      val mutable era = Js.undefined\n\n      val mutable year = Js.undefined\n\n      val mutable month = Js.undefined\n\n      val mutable day = Js.undefined\n\n      val mutable hour = Js.undefined\n\n      val mutable minute = Js.undefined\n\n      val mutable second = Js.undefined\n\n      val mutable fractionalSecondDigits = Js.undefined\n\n      val mutable timeZoneName = Js.undefined\n    end\n\n  class type format_part = object\n    method _type : Js.js_string Js.t Js.readonly_prop\n\n    method _value : Js.js_string Js.t Js.readonly_prop\n  end\n\n  class type t = object\n    method format : (Js.date Js.t -> Js.js_string Js.t) Js.readonly_prop\n\n    method formatToParts :\n      Js.date Js.t Js.optdef -> format_part Js.t Js.js_array Js.t Js.meth\n\n    method resolvedOptions : unit -> resolved_options Js.t Js.meth\n  end\nend\n\nmodule NumberFormat = struct\n  include Shared\n\n  class type resolved_options = object\n    method locale : Js.js_string Js.t Js.readonly_prop\n\n    method numberingSystem : Js.js_string Js.t Js.readonly_prop\n\n    method style : Js.js_string Js.t Js.readonly_prop\n\n    method currency : Js.js_string Js.t Js.optdef_prop\n\n    method currencyDisplay : Js.js_string Js.t Js.optdef_prop\n\n    method useGrouping : bool Js.t Js.readonly_prop\n\n    method minimumIntegerDigits : int Js.optdef_prop\n\n    method minimumFractionDigits : int Js.optdef_prop\n\n    method maximumFractionDigits : int Js.optdef_prop\n\n    method minimumSignificantDigits : int Js.optdef_prop\n\n    method maximumSignificantDigits : int Js.optdef_prop\n  end\n\n  class type options = object\n    method compactDisplay : Js.js_string Js.t Js.optdef Js.prop\n\n    method currency : Js.js_string Js.t Js.optdef Js.prop\n\n    method currencyDisplay : Js.js_string Js.t Js.optdef Js.prop\n\n    method currencySign : Js.js_string Js.t Js.optdef Js.prop\n\n    method localeMatcher : Js.js_string Js.t Js.prop\n\n    method notation : Js.js_string Js.t Js.optdef Js.prop\n\n    method numberingSystem : Js.js_string Js.t Js.optdef Js.prop\n\n    method signDisplay : Js.js_string Js.t Js.optdef Js.prop\n\n    method style : Js.js_string Js.t Js.prop\n\n    method unit : Js.js_string Js.t Js.optdef Js.prop\n\n    method unitDisplay : Js.js_string Js.t Js.optdef Js.prop\n\n    method useGrouping : bool Js.t Js.prop\n\n    method roundingMode : Js.js_string Js.t Js.optdef Js.prop\n\n    method roundingPriority : Js.js_string Js.t Js.optdef Js.prop\n\n    method roundingIncrement : Js.js_string Js.t Js.optdef Js.prop\n\n    method trailingZeroDisplay : Js.js_string Js.t Js.optdef Js.prop\n\n    method minimumIntegerDigits : int Js.optdef Js.prop\n\n    method minimumFractionDigits : int Js.optdef Js.prop\n\n    method maximumFractionDigits : int Js.optdef Js.prop\n\n    method minimumSignificantDigits : int Js.optdef Js.prop\n\n    method maximumSignificantDigits : int Js.optdef Js.prop\n  end\n\n  let options () : options Js.t =\n    object%js\n      val mutable compactDisplay = Js.undefined\n\n      val mutable currency = Js.undefined\n\n      val mutable currencyDisplay = Js.undefined\n\n      val mutable currencySign = Js.undefined\n\n      val mutable localeMatcher = Js.string \"best fit\"\n\n      val mutable notation = Js.undefined\n\n      val mutable numberingSystem = Js.undefined\n\n      val mutable signDisplay = Js.undefined\n\n      val mutable style = Js.string \"decimal\"\n\n      val mutable unit = Js.undefined\n\n      val mutable unitDisplay = Js.undefined\n\n      val mutable useGrouping = Js._true\n\n      val mutable roundingMode = Js.undefined\n\n      val mutable roundingPriority = Js.undefined\n\n      val mutable roundingIncrement = Js.undefined\n\n      val mutable trailingZeroDisplay = Js.undefined\n\n      val mutable minimumIntegerDigits = Js.undefined\n\n      val mutable minimumFractionDigits = Js.undefined\n\n      val mutable maximumFractionDigits = Js.undefined\n\n      val mutable minimumSignificantDigits = Js.undefined\n\n      val mutable maximumSignificantDigits = Js.undefined\n    end\n\n  class type format_part = object\n    method _type : Js.js_string Js.t Js.readonly_prop\n\n    method _value : Js.js_string Js.t Js.readonly_prop\n  end\n\n  class type t = object\n    method format : (Js.number Js.t -> Js.js_string Js.t) Js.readonly_prop\n\n    method formatToParts :\n      Js.number Js.t Js.optdef -> format_part Js.t Js.js_array Js.t Js.meth\n\n    method resolvedOptions : unit -> resolved_options Js.t Js.meth\n  end\nend\n\nmodule PluralRules = struct\n  include Shared\n\n  class type resolved_options = object\n    method locale : Js.js_string Js.t Js.readonly_prop\n\n    method pluralCategories : Js.js_string Js.t Js.js_array Js.t Js.readonly_prop\n\n    method _type : Js.js_string Js.t Js.readonly_prop\n\n    method minimumIntegerDigits : int Js.optdef_prop\n\n    method minimumFractionDigits : int Js.optdef_prop\n\n    method maximumFractionDigits : int Js.optdef_prop\n\n    method minimumSignificantDigits : int Js.optdef_prop\n\n    method maximumSignificantDigits : int Js.optdef_prop\n  end\n\n  class type options = object\n    method localeMatcher : Js.js_string Js.t Js.prop\n\n    method _type : Js.js_string Js.t Js.prop\n  end\n\n  let options () : options Js.t =\n    object%js\n      val mutable localeMatcher = Js.string \"best fit\"\n\n      val mutable _type = Js.string \"cardinal\"\n    end\n\n  class type t = object\n    method select : Js.number Js.t -> Js.js_string Js.t Js.meth\n\n    method resolvedOptions : unit -> resolved_options Js.t Js.meth\n  end\nend\n\nclass type intl = object\n  method _Collator : Collator._object Js.t Js.readonly_prop\n\n  method _DateTimeFormat : DateTimeFormat._object Js.t Js.readonly_prop\n\n  method _NumberFormat : NumberFormat._object Js.t Js.readonly_prop\n\n  method _PluralRules : PluralRules._object Js.t Js.readonly_prop\n\n  method getCanonicalLocales :\n    Js.js_string Js.t Js.js_array Js.t -> Js.js_string Js.t Js.js_array Js.t Js.meth\nend\n\nlet intl = Js.Unsafe.global##._Intl\n\nlet collator_constr = Js.Unsafe.global##._Intl##._Collator\n\nlet dateTimeFormat_constr = Js.Unsafe.global##._Intl##._DateTimeFormat\n\nlet numberFormat_constr = Js.Unsafe.global##._Intl##._NumberFormat\n\nlet pluralRules_constr = Js.Unsafe.global##._Intl##._PluralRules\n\nlet is_supported () = Js.Optdef.test intl\n","type t =\n  | NUMBER of string\n  | STRING of string\n  | UIDENT of string\n  | LIDENT of string\n  | INFIX1 of string\n  | INFIX2 of string\n  | INFIX3 of string\n  | LPARENT\n  | RPARENT\n  | ARROW\n  | EQUAL\n  | DOT\n  | QUOTE\n  | COMMA\n  | STAR\n  | COLON\n  | TILDE\n  | QUESTION\n  | LBRACE\n  | RBRACE\n  | BAR\n  | SEMICOLON\n  | LBRACKET\n  | RBRACKET\n  | LESS\n  | GREATER\n  | DOTDOT\n  | BACKQOUTE\n  | LBRACKETGREATER\n  | LESSSLASH\n  | LET\n  | REC\n  | IN\n  | FUN\n  | IF\n  | THEN\n  | ELSE\n  | STRUCT\n  | END\n  | FUNCTOR\n  | VAL\n  | TYPE\n  | MODULE\n  | SIG\n  | MATCH\n  | WITH\n  | OF\n  | EOF\n[@@deriving show { with_path = false }]\n\nlet precedence token =\n  match token with\n  | INFIX3 _ | STAR -> 3 (* * / *)\n  | INFIX2 _ -> 2 (* + - *)\n  | INFIX1 _ | EQUAL | LESS | GREATER -> 1 (* > < = *)\n  | _ -> assert false\n\nlet is_infix token =\n  match token with\n  | INFIX1 _ | INFIX2 _ | INFIX3 _ | STAR | EQUAL | LESS | GREATER -> true\n  | _ -> false\n\nlet string_of_infix token =\n  match token with\n  | INFIX1 s | INFIX2 s | INFIX3 s -> s\n  | STAR -> \"*\"\n  | EQUAL -> \"=\"\n  | LESS -> \"<\"\n  | GREATER -> \">\"\n  | _ -> assert false\n\nlet keywords =\n  [\n    (\"let\", LET);\n    (\"in\", IN);\n    (\"fun\", FUN);\n    (\"if\", IF);\n    (\"then\", THEN);\n    (\"else\", ELSE);\n    (\"struct\", STRUCT);\n    (\"end\", END);\n    (\"functor\", FUNCTOR);\n    (\"val\", VAL);\n    (\"type\", TYPE);\n    (\"module\", MODULE);\n    (\"sig\", SIG);\n    (\"match\", MATCH);\n    (\"with\", WITH);\n    (\"of\", OF);\n  ]\n\nlet print_token t = print_endline (show t)\n","type position = Lexing.position = {\n  pos_fname : string;\n  pos_lnum : int;\n  pos_bol : int;\n  pos_cnum : int;\n}\n[@@deriving show { with_path = false }]\n\ntype t = { loc_start : position; loc_end : position }\n[@@deriving show { with_path = false }]\n\ntype 'a loc = { txt : 'a; loc : t } [@@deriving show { with_path = false }]\n\nlet dummy_loc = { loc_start = Lexing.dummy_pos; loc_end = Lexing.dummy_pos }\n","type constant = Const_string | Const_number\n[@@deriving show { with_path = false }]\n\ntype arg_label =\n  | Nolabel\n  | Labelled of string  (** [label:T -> ...] *)\n  | Optional of string  (** [?label:T -> ...] *)\n[@@deriving show { with_path = false }]\n\ntype 'a loc = 'a Location.loc = { txt : 'a; loc : Location.t }\n[@@deriving show { with_path = false }]\n","type t = Lident of string | Ldot of t * string\n[@@deriving show { with_path = false }]\n\nlet make ids =\n  List.fold_left\n    (fun acc x -> Ldot (acc, x))\n    (Lident (List.hd ids))\n    (List.tl ids)\n\nlet is_infix s =\n  match s.[0] with\n  | '*' | '/' | '+' | '-' | '>' | '<' | '=' -> true\n  | _ -> false\n\nlet infixify s = if is_infix s then \"( \" ^ s ^ \" )\" else s\n\nlet rec flat id =\n  match id with\n  | Lident s -> [ infixify s ]\n  | Ldot (id1, s) -> flat id1 @ [ infixify s ]\n\nlet ident_of_string s =\n  let Location.{ txt; loc } = s in\n  Location.{ txt = Lident txt; loc }\n\nlet string_of_longident id = String.concat \".\" (flat id)\nlet string_of_shortident id = match id with Lident s -> s | _ -> assert false\n","open Asttypes\n\ntype constant = Pconst_string of string | Pconst_number of string\n[@@deriving show { with_path = false }]\n\ntype expr = { desc : expr_desc; loc : Location.t }\n\nand expr_desc =\n  | EConstant of constant (* integer constants *)\n  | ELongident of Longident.t loc (* id or mod.mod...id *)\n  | EFunction of arg_label * string loc * expr (* fun id -> expr *)\n  | EApply of expr * (arg_label * expr) list (* expr(expr) *)\n  | ELet of string loc * expr * expr\n  | RecordEmpty\n  | RecordExtend of string loc * expr * expr\n  | RecordSelect of expr * string loc\n  | Variant of string * expr\n  | Case of\n      expr * (string * string loc * expr) list * (string loc * expr) option\n  | Ejsxelement of expr * (arg_label * expr) list\n[@@deriving show { with_path = false }]\n\nlet is_infix s =\n  match s.[0] with\n  | '*' | '/' | '+' | '-' | '>' | '<' | '=' -> true\n  | _ -> false\n\nlet label_name l =\n  match l with Nolabel -> \"\" | Labelled s -> s | Optional s -> s\n\nlet string_of_constant c =\n  match c with Pconst_string s -> s | Pconst_number s -> s\n\nlet rec print_expr ?(parenthesis = false) ?(offset = 0) e =\n  match e.desc with\n  | EConstant c -> string_of_constant c\n  | ELongident id ->\n      Longident.infixify (String.concat \".\" (Longident.flat id.txt))\n  | EFunction (l, { txt; _ }, body) ->\n      let ls =\n        match l with\n        | Nolabel -> txt\n        | Labelled s -> \"~\" ^ s\n        | Optional s -> \"?\" ^ s\n      in\n      let b = print_expr ~offset body in\n      if parenthesis then Printf.sprintf \"(fun %s -> %s)\" ls b\n      else Printf.sprintf \"fun %s -> %s\" ls b\n  | EApply (f, args) ->\n      let fs =\n        match f with\n        | { desc = ELongident { txt = Longident.Lident s; _ }; _ }\n          when is_infix s ->\n            s\n        | _ -> print_expr ~parenthesis:true ~offset f\n      in\n      let argss =\n        List.map\n          (fun (l, e) ->\n            (match l with\n            | Nolabel -> \"\"\n            | Labelled s -> \"~\" ^ s ^ \":\"\n            | Optional s -> \"?\" ^ s ^ \":\")\n            ^ print_expr ~offset ~parenthesis:true e)\n          args\n      in\n\n      if is_infix fs then List.nth argss 0 ^ \" \" ^ fs ^ \" \" ^ List.nth argss 1\n      else fs ^ \" \" ^ String.concat \" '\" argss\n  | ELet ({ txt; _ }, e1, body) ->\n      print_endline (\"txt:\" ^ txt);\n      Printf.sprintf \"let %s = %s in %s\" (Longident.infixify txt)\n        (print_expr ~offset e1) (print_expr ~offset body)\n  | RecordEmpty -> \"{}\"\n  | RecordExtend _ as r ->\n      let rec loop r =\n        match r with\n        | RecordExtend (f, e1, e2) ->\n            let rs, res = loop e2.desc in\n            ((f, e1) :: rs, res)\n        | _ -> ([], r)\n      in\n      let fs = loop r in\n      Printf.sprintf \"{ %s%s }\"\n        (String.concat \"; \"\n           (List.map\n              (fun (f, e) -> f.txt ^ \" = \" ^ print_expr ~offset e)\n              (fst fs)))\n        (match snd fs with\n        | RecordEmpty -> \"\"\n        | e -> \" | \" ^ print_expr ~offset { desc = e; loc = Location.dummy_loc })\n  | RecordSelect (e, f) -> print_expr ~offset e ^ \".\" ^ f.txt\n  | Variant (tag, e) -> \"`\" ^ tag ^ \" \" ^ print_expr ~offset e\n  | Case (e1, cases, op) ->\n      print_endline (\"offset\" ^ string_of_int offset);\n      Printf.sprintf \"\\n%smatch %s with\\n%s%s\" (String.make offset ' ')\n        (print_expr ~offset e1)\n        (String.concat \"\\n\"\n           (ListLabels.map cases ~f:(fun (tag, v, e) ->\n                String.make offset ' ' ^ \"| `\" ^ tag ^ \" \" ^ v.txt ^ \" -> \"\n                ^ print_expr ~offset e)))\n        (match op with\n        | None -> \"\"\n        | Some (v, e) ->\n            \"\\n\" ^ String.make offset ' ' ^ \"| \" ^ v.txt ^ \" -> \"\n            ^ print_expr ~offset e)\n  | Ejsxelement (e, el) ->\n      let es = print_expr e in\n      let els =\n        String.concat \"\"\n          (List.map\n             (fun (l, e) -> \" \" ^ label_name l ^ \"={\" ^ print_expr e ^ \"}\")\n             el)\n      in\n      Printf.sprintf \"<%s%s></%s>\" es els es\n\ntype simple_type = { ty_desc : simple_type_desc; loc : Location.t }\n\nand simple_type_desc =\n  | TVar of string (* 'a, 'b *)\n  | Tarrow of arg_label * simple_type * simple_type\n  | Typeconstr of Longident.t loc * simple_type list\n  | TRempty\n  | TRextend of string loc * simple_type * row\n  | Trecord of row\n  | Tvariant of row\n[@@deriving show { with_path = false }]\n\nand row = simple_type [@@deriving show { with_path = false }]\n\nlet rec print_simple_type ?(parenthesis = false) ty =\n  match ty.ty_desc with\n  | TVar s -> \"'\" ^ s\n  | Tarrow (l, t1, t2) ->\n      let ls =\n        match l with\n        | Nolabel -> \"\"\n        | Labelled s -> s ^ \":\"\n        | Optional s -> \"?\" ^ s ^ \":\"\n      in\n      let ty1s = print_simple_type ~parenthesis:true t1 in\n      let ty2s = print_simple_type t2 in\n      if parenthesis then Printf.sprintf \"(%s%s -> %s)\" ls ty1s ty2s\n      else Printf.sprintf \"%s%s -> %s\" ls ty1s ty2s\n  | Typeconstr (p, args) -> (\n      let argss = List.map print_simple_type args |> String.concat \", \" in\n      match p.txt with\n      | Longident.Lident s when s = \"*\" ->\n          Printf.sprintf \"%s * %s\"\n            (print_simple_type ~parenthesis:true (List.nth args 0))\n            (print_simple_type ~parenthesis:true (List.nth args 1))\n      | _ ->\n          let ps = String.concat \".\" (Longident.flat p.txt) in\n          if List.length args > 1 then Printf.sprintf \"(%s) %s\" argss ps\n          else if List.length args = 1 then Printf.sprintf \"%s %s\" argss ps\n          else ps)\n  | Trecord row ->\n      let rec loop row =\n        match row with\n        | TRextend (f, ty, tyr) ->\n            let rs, rem = loop tyr.ty_desc in\n            ((f, ty) :: rs, rem)\n        | TVar \"..\" | TRempty -> ([], row)\n        | _ -> assert false\n      in\n      let fs, res = loop row.ty_desc in\n      if List.length fs = 0 && res = TRempty then \"< >\"\n      else\n        Printf.sprintf \"< %s%s >\"\n          (String.concat \"; \"\n             (List.map (fun (f, ty) -> f.txt ^ \" : \" ^ print_simple_type ty) fs))\n          (match res with\n          | TVar \"..\" -> \"; ..\"\n          | TRempty -> \"\"\n          | _ -> assert false)\n  | TRextend _ | TRempty -> assert false\n  | Tvariant _ -> failwith \"TODO\"\n\n(* and row = simple_type [@@deriving show { with_path = false }] *)\n\ntype def_type = {\n  params : string loc list; (* list of parameters *)\n  defbody : simple_type;\n}\n[@@deriving show { with_path = false }]\n(* body of type definition *)\n\ntype type_decl = { kind : int; manifest : def_type option }\n[@@deriving show { with_path = false }]\n\ntype mod_type = { mt_desc : mod_type_desc; loc : Location.t }\n[@@deriving show { with_path = false }]\n\nand mod_type_desc =\n  | Signature of signature\n  | Functor_type of Longident.t loc * mod_type * mod_type\n[@@deriving show { with_path = false }]\n\nand signature = specification list [@@deriving show { with_path = false }]\n\nand specification =\n  | Value_sig of Longident.t loc * simple_type\n  | Type_sig of Longident.t loc * type_decl\n  | Module_sig of Longident.t loc * mod_type\n[@@deriving show { with_path = false }]\n\ntype mod_expr = { me_desc : mod_expr_desc; loc : Location.t }\n[@@deriving show { with_path = false }]\n\nand mod_expr_desc =\n  | MELongident of Longident.t loc\n  | MEStructure of structure\n  | MEFunctor of Longident.t loc * mod_type * mod_expr\n  | MEApply of mod_expr * mod_expr\n  | MEConstraint of mod_expr * mod_type\n[@@deriving show { with_path = false }]\n\nand structure = definition_comment list [@@deriving show { with_path = false }]\n\nand definition_comment = {\n  definition : definition;\n  prev_comments : string list;\n}\n\nand definition =\n  | Value_str of Longident.t loc * expr\n  | Type_str of Longident.t loc * type_decl\n  | Module_str of Longident.t loc * mod_type option * mod_expr\n[@@deriving show { with_path = false }]\n\nlet print_comment c = \"(*\" ^ c ^ \"*)\"\n\nlet print_type_decl id decl =\n  \"type \"\n  ^ (if decl.kind = 0 then \"\"\n     else\n       let paramss =\n         String.concat \", \"\n           (List.map (fun x -> \"'\" ^ x.txt) (Option.get decl.manifest).params)\n       in\n       if decl.kind = 1 then paramss else \"(\" ^ paramss ^ \")\")\n  ^ Longident.string_of_longident id.txt\n  ^\n  match decl.manifest with\n  | None -> \"\"\n  | Some ty -> \" = \" ^ print_simple_type ty.defbody\n\nlet rec print_mod_type ?(offset = 0) mod_type =\n  match mod_type.mt_desc with\n  | Signature sig_ ->\n      Printf.sprintf \"sig\\n%s\\n%send\"\n        (String.concat \"\\n\"\n           (List.map (fun x -> print_specification ~offset:(offset + 2) x) sig_))\n        (String.make offset ' ')\n  | Functor_type (uid, mty1, mty2) ->\n      Printf.sprintf \"functor(%s: %s) %s\"\n        (Longident.string_of_longident uid.txt)\n        (print_mod_type mty1) (print_mod_type mty2)\n\nand print_specification ~offset spec =\n  let ret =\n    match spec with\n    | Value_sig (id, e) ->\n        Printf.sprintf \"val %s: %s\"\n          (Longident.string_of_longident id.txt)\n          (print_simple_type e)\n    | Type_sig (id, decl) -> print_type_decl id decl\n    | Module_sig (id, mty) ->\n        Printf.sprintf \"module %s: %s\"\n          (Longident.string_of_longident id.txt)\n          (print_mod_type ~offset mty)\n  in\n  String.make offset ' ' ^ ret\n\nlet rec print_mod_expr ?(offset = 0) mod_expr =\n  match mod_expr.me_desc with\n  | MELongident { txt; _ } -> Longident.string_of_longident txt\n  | MEStructure str ->\n      Printf.sprintf \"struct\\n%s\\n%send\"\n        (String.concat \"\\n\"\n           (List.map (fun x -> print_definition ~offset:(offset + 2) x) str))\n        (String.make offset ' ')\n  | MEFunctor (id, mod_ty, mod_e) ->\n      Printf.sprintf \"functor(%s: %s) = %s\"\n        (Longident.string_of_longident id.txt)\n        (print_mod_type mod_ty) (print_mod_expr mod_e)\n  | MEApply (e1, e2) ->\n      Printf.sprintf \"%s(%s)\" (print_mod_expr e1) (print_mod_expr e2)\n  | MEConstraint (e, t) ->\n      Printf.sprintf \"(%s: %s)\" (print_mod_expr e) (print_mod_type t)\n\nand print_definition ~offset str =\n  print_endline (\"print_definition\" ^ string_of_int offset);\n  let ret =\n    match str.definition with\n    | Value_str (id, e) ->\n        Printf.sprintf \"let %s = %s\"\n          (Longident.string_of_longident id.txt)\n          (print_expr ~offset e)\n    | Type_str (id, decl) -> print_type_decl id decl\n    | Module_str (id, mod_ty_opt, mod_e) -> (\n        match mod_ty_opt with\n        | None ->\n            Printf.sprintf \"module %s = %s\"\n              (Longident.string_of_longident id.txt)\n              (print_mod_expr ~offset mod_e)\n        | Some mty ->\n            Printf.sprintf \"module %s: %s = %s\"\n              (Longident.string_of_longident id.txt)\n              (print_mod_type ~offset mty)\n              (print_mod_expr ~offset mod_e))\n  in\n  String.concat \"\\n\"\n    (List.map\n       (fun c -> String.make offset ' ' ^ print_comment c)\n       str.prev_comments\n    @ [ String.make offset ' ' ^ ret ])\n\nlet print_definition_list str =\n  String.concat \"\\n\" (List.map (fun x -> print_definition ~offset:0 x) str)\n","open Token\n\ntype t = {\n  filename : string;\n  src : string;\n  mutable ch : char;\n  mutable err :\n    start_pos:Lexing.position -> end_pos:Lexing.position -> string -> unit;\n  mutable offset : int;\n  mutable lnum : int;\n  mutable col : int;\n  mutable comments : string list;\n}\n\nlet position scanner : Lexing.position =\n  Lexing.\n    {\n      pos_fname = scanner.filename;\n      pos_lnum = scanner.lnum;\n      pos_bol = scanner.offset - scanner.col;\n      pos_cnum = scanner.offset;\n    }\n\nlet make filename src =\n  {\n    filename;\n    src;\n    ch = (if String.length src > 0 then src.[0] else ' ');\n    offset = 0;\n    lnum = 1;\n    col = 0;\n    err = (fun ~start_pos:_ ~end_pos:_ _ -> ());\n    comments = [];\n  }\n\nlet clone scanner = { scanner with src = scanner.src }\nlet at_end scanner = scanner.offset >= String.length scanner.src\nlet peek scanner = scanner.src.[scanner.offset]\nlet peek1 scanner = scanner.src.[scanner.offset + 1]\nlet peekn n scanner = scanner.src.[scanner.offset + n]\n\nlet advance scanner =\n  let offset = scanner.offset + 1 in\n  let ch = scanner.ch in\n  scanner.offset <- offset;\n  if not (at_end scanner) then scanner.ch <- scanner.src.[offset];\n  if ch = '\\n' || ch = '\\r' then (\n    scanner.lnum <- scanner.lnum + 1;\n    scanner.col <- 0)\n  else scanner.col <- scanner.col + 1\n\nlet scan_number scanner =\n  let start = scanner.offset in\n  let rec loop () =\n    if at_end scanner then ()\n    else\n      match scanner.ch with\n      | '0' .. '9' ->\n          advance scanner;\n          loop ()\n      | _ -> ()\n  in\n  loop ();\n  if (not (at_end scanner)) && scanner.ch = '.' then (\n    advance scanner;\n    loop ());\n  let s = String.sub scanner.src start (scanner.offset - start) in\n  NUMBER s\n\nlet scan_string scanner =\n  let start_pos = position scanner in\n  advance scanner;\n  let start = scanner.offset in\n\n  let rec loop () =\n    if at_end scanner then\n      let end_pos = position scanner in\n      scanner.err ~start_pos ~end_pos \"Expect a \\\"\"\n    else\n      match scanner.ch with\n      | '\"' -> advance scanner\n      | _ ->\n          advance scanner;\n          loop ()\n  in\n  loop ();\n  let s = String.sub scanner.src (start - 1) (scanner.offset - start + 1) in\n  STRING s\n\nlet scan_ident scanner =\n  let start = scanner.offset in\n  let rec loop () =\n    if at_end scanner then ()\n    else\n      match scanner.ch with\n      | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' ->\n          advance scanner;\n          loop ()\n      | _ -> ()\n  in\n  loop ();\n  let s = String.sub scanner.src start (scanner.offset - start) in\n  if List.mem_assoc s keywords then List.assoc s keywords\n  else match s.[0] with 'a' .. 'z' -> LIDENT s | _ -> UIDENT s\n\nlet scan_infix_chars scanner =\n  let start = scanner.offset in\n  let rec loop () =\n    if at_end scanner then ()\n    else\n      match scanner.ch with\n      | '*' | '/' | '+' | '-' | '>' | '<' | '=' ->\n          advance scanner;\n          loop ()\n      | _ -> ()\n  in\n  loop ();\n  let s = String.sub scanner.src start (scanner.offset - start) in\n  s\n\nlet rec skip_whitesapce scanner =\n  if at_end scanner then ()\n  else\n    match scanner.ch with\n    | '\\n' | ' ' | '\\r' | '\\t' ->\n        advance scanner;\n        skip_whitesapce scanner\n    | '(' ->\n        if\n          String.length scanner.src - scanner.offset >= 2 && peek1 scanner = '*'\n        then (\n          advance scanner;\n          advance scanner;\n\n          let start = scanner.offset in\n          let _end = ref (String.length scanner.src) in\n          let rec loop () =\n            if at_end scanner then ()\n            else if String.length scanner.src - scanner.offset = 1 then\n              advance scanner\n            else if scanner.ch = '*' && peek1 scanner = ')' then (\n              _end := scanner.offset;\n              advance scanner;\n              advance scanner)\n            else (\n              advance scanner;\n              loop ())\n          in\n          loop ();\n          let s = String.sub scanner.src start (!_end - start) in\n          scanner.comments <- scanner.comments @ [ s ];\n          skip_whitesapce scanner)\n    | _ -> ()\n\nlet rec scan scanner =\n  skip_whitesapce scanner;\n  let start_pos = position scanner in\n  let token =\n    if scanner.offset >= String.length scanner.src then EOF\n    else\n      match scanner.ch with\n      | '0' .. '9' -> scan_number scanner\n      | '\"' -> scan_string scanner\n      | 'a' .. 'z' | 'A' .. 'Z' -> scan_ident scanner\n      | '*' | '/' -> (\n          let s = scan_infix_chars scanner in\n          match s with \"*\" -> STAR | _ -> INFIX3 s)\n      | '-' | '+' -> (\n          let s = scan_infix_chars scanner in\n          match s with \"->\" -> ARROW | _ -> INFIX2 s)\n      | '>'\n        when String.length scanner.src - scanner.offset >= 3\n             && peek1 scanner = '<'\n             && peekn 2 scanner = '/' ->\n          advance scanner;\n          GREATER\n      | '>' | '<' | '=' -> (\n          let s = scan_infix_chars scanner in\n          match s with\n          | \"=\" -> EQUAL\n          | \"<\" -> LESS\n          | \">\" -> GREATER\n          | \"</\" -> LESSSLASH\n          | _ -> INFIX1 s)\n      | '(' ->\n          advance scanner;\n          LPARENT\n      | ')' ->\n          advance scanner;\n          RPARENT\n      | '.' ->\n          advance scanner;\n          if (not (at_end scanner)) && scanner.ch = '.' then (\n            advance scanner;\n            DOTDOT)\n          else DOT\n      | '\\'' ->\n          advance scanner;\n          QUOTE\n      | ',' ->\n          advance scanner;\n          COMMA\n      | ':' ->\n          advance scanner;\n          COLON\n      | '~' ->\n          advance scanner;\n          TILDE\n      | '?' ->\n          advance scanner;\n          QUESTION\n      | '{' ->\n          advance scanner;\n          LBRACE\n      | '}' ->\n          advance scanner;\n          RBRACE\n      | '|' ->\n          advance scanner;\n          BAR\n      | ';' ->\n          advance scanner;\n          SEMICOLON\n      | '`' ->\n          advance scanner;\n          BACKQOUTE\n      | '[' ->\n          advance scanner;\n          if (not (at_end scanner)) && scanner.ch = '>' then (\n            advance scanner;\n            LBRACKETGREATER)\n          else LBRACKET\n      | ']' ->\n          advance scanner;\n          RBRACKET\n      | c ->\n          advance scanner;\n          let end_pos = position scanner in\n          scanner.err ~start_pos ~end_pos (\"Unknown char\" ^ String.make 1 c);\n          let _, _, t = scan scanner in\n          t\n  in\n  let end_pos = position scanner in\n  (start_pos, end_pos, token)\n","open Syntax\nopen Asttypes\nopen Token\n\ntype diagnostic = {\n  start_pos : Location.position;\n  end_pos : Location.position;\n  msg : string;\n}\n[@@deriving show { with_path = false }]\n\ntype t = {\n  mutable scanner : Lexer.t;\n  mutable token : Token.t;\n  mutable start_pos : Lexing.position;\n  mutable end_pos : Lexing.position;\n  mutable prev_end_pos : Lexing.position;\n  mutable diagnostics : diagnostic list;\n}\n\nexception Parse_error\n\nlet err ~start_pos ~end_pos parser msg =\n  parser.diagnostics <- { start_pos; end_pos; msg } :: parser.diagnostics\n\nlet report p = err ~start_pos:p.start_pos ~end_pos:p.end_pos p \"Parse fail\"\n\nlet make filename src =\n  let scanner = Lexer.make filename src in\n  let parser =\n    {\n      scanner;\n      token = EOF;\n      start_pos = Lexing.dummy_pos;\n      end_pos = Lexing.dummy_pos;\n      prev_end_pos = Lexing.dummy_pos;\n      diagnostics = [];\n    }\n  in\n  scanner.err <- err parser;\n  parser\n\nlet make_loc p = Location.{ loc_start = p.start_pos; loc_end = p.end_pos }\n\nlet advance parser =\n  let start_pos, end_pos, token = Lexer.scan parser.scanner in\n  parser.prev_end_pos <- parser.end_pos;\n  parser.token <- token;\n  parser.start_pos <- start_pos;\n  parser.end_pos <- end_pos\n\nlet expect token p =\n  if p.token = token then advance p\n  else (\n    err ~start_pos:p.start_pos ~end_pos:p.end_pos p\n      (\"Expect a \" ^ Token.show token);\n    raise Parse_error)\n\nlet optional token p =\n  if p.token = token then (\n    advance p;\n    true)\n  else false\n\nlet lookahead p callback =\n  let ch = p.scanner.ch in\n  let err = p.scanner.err in\n  let offset = p.scanner.offset in\n  let lnum = p.scanner.lnum in\n  let col = p.scanner.col in\n  let comments = p.scanner.comments in\n  let token = p.token in\n  let start_pos = p.start_pos in\n  let end_pos = p.end_pos in\n  let prev_end_pos = p.prev_end_pos in\n  let diagnostics = p.diagnostics in\n\n  let res = callback p in\n\n  p.scanner.ch <- ch;\n  p.scanner.err <- err;\n  p.scanner.offset <- offset;\n  p.scanner.lnum <- lnum;\n  p.scanner.col <- col;\n  p.scanner.comments <- comments;\n  p.token <- token;\n  p.start_pos <- start_pos;\n  p.end_pos <- end_pos;\n  p.prev_end_pos <- prev_end_pos;\n  p.diagnostics <- diagnostics;\n  res\n\nlet rec sepby1 p1 sep p =\n  let first = p1 p in\n  if sep p.token then (\n    advance p;\n    first :: sepby1 p1 sep p)\n  else [ first ]\n\nlet rec sepby p1 pred sep p =\n  if pred p.token then\n    let first = p1 p in\n    if sep p.token then (\n      advance p;\n      first :: sepby p1 pred sep p)\n    else [ first ]\n  else []\n\nlet rec many1 p1 pred p =\n  let first = p1 p in\n  if pred p.token then first :: many1 p1 pred p else [ first ]\n\nlet rec many p1 pred p =\n  if pred p.token then\n    let first = p1 p in\n    first :: many p1 pred p\n  else []\n\nlet lident parser =\n  let loc_start = parser.start_pos in\n\n  let s =\n    match parser.token with\n    | LIDENT s ->\n        advance parser;\n        s\n    | LPARENT ->\n        advance parser;\n        if is_infix parser.token then (\n          let s = string_of_infix parser.token in\n          advance parser;\n          expect RPARENT parser;\n          s)\n        else (\n          report parser;\n          raise Parse_error)\n    | _ ->\n        report parser;\n        raise Parse_error\n  in\n  let loc_end = parser.prev_end_pos in\n  { txt = s; loc = { loc_start; loc_end } }\n\nlet uident parser =\n  let loc_start = parser.start_pos in\n  let loc_end = parser.end_pos in\n  match parser.token with\n  | UIDENT s ->\n      advance parser;\n      { txt = s; loc = { loc_start; loc_end } }\n  | _ ->\n      err ~start_pos:loc_start ~end_pos:loc_end parser \"\";\n      raise Parse_error\n\nlet longident_end_lident p =\n  let loc_start = p.start_pos in\n  let uids =\n    match p.token with\n    | UIDENT _ ->\n        let uids =\n          sepby1 uident\n            (function\n              | DOT ->\n                  lookahead p (fun p ->\n                      advance p;\n                      match p.token with UIDENT _ -> true | _ -> false)\n              | _ -> false)\n            p\n        in\n        expect DOT p;\n        uids\n    | _ -> []\n  in\n  let lid = lident p in\n  let loc_end = p.prev_end_pos in\n  {\n    txt = Longident.make (List.map (fun x -> x.txt) uids @ [ lid.txt ]);\n    loc = { loc_start; loc_end };\n  }\n\nlet longident p =\n  let loc_start = p.start_pos in\n  print_token p.token;\n  let uids =\n    match p.token with\n    | UIDENT _ ->\n        let uids =\n          sepby1 uident\n            (function\n              | DOT ->\n                  lookahead p (fun p ->\n                      advance p;\n                      match p.token with UIDENT _ -> true | _ -> false)\n              | _ -> false)\n            p\n        in\n        uids\n    | _ -> []\n  in\n  print_token p.token;\n  let lid =\n    match p.token with\n    | DOT ->\n        advance p;\n        [ (lident p).txt ]\n    | LIDENT _ when List.length uids = 0 -> [ (lident p).txt ]\n    | _ -> [ \"make\" ]\n  in\n  let loc_end = p.prev_end_pos in\n  {\n    txt = Longident.make (List.map (fun x -> x.txt) uids @ lid);\n    loc = { loc_start; loc_end };\n  }\n\nlet arg_label_fun p =\n  match p.token with\n  | TILDE ->\n      advance p;\n      fun id -> Labelled id\n  | QUESTION ->\n      advance p;\n      fun id -> Optional id\n  | _ -> fun _ -> Nolabel\n\nlet longident_end_uident p =\n  let loc_start = p.start_pos in\n  let uids =\n    sepby1 uident\n      (function\n        | DOT ->\n            lookahead p (fun p ->\n                advance p;\n                match p.token with UIDENT _ -> true | _ -> false)\n        | _ -> false)\n      p\n  in\n  let loc_end = p.prev_end_pos in\n  {\n    txt = Longident.make (List.map (fun x -> x.txt) uids);\n    loc = { loc_start; loc_end };\n  }\n","open Asttypes\nopen Token\nopen Syntax\nopen Parser_base\n\nlet expr_ref = ref (fun _ -> assert false)\nlet expr p = !expr_ref p\n\nlet rec jsx p =\n  let loc_start = p.start_pos in\n  expect LESS p;\n  print_token p.token;\n  let tag = longident p in\n  print_endline (Longident.string_of_longident tag.txt);\n  let e = ELongident tag in\n  let attrs = jsx_attrs p in\n  print_token p.token;\n  expect GREATER p;\n  let children =\n    match p.token with\n    | LESSSLASH -> []\n    | LESS -> [ (Labelled \"children\", jsx p) ]\n    | LBRACE -> [ (Labelled \"children\", expr p) ]\n    | _ ->\n        report p;\n        raise Parse_error\n  in\n  expect LESSSLASH p;\n  let tag' = longident p in\n  expect GREATER p;\n  let loc_end = p.prev_end_pos in\n  if tag.txt <> tag'.txt then (\n    report p;\n    raise Parse_error)\n  else\n    {\n      desc = Ejsxelement ({ desc = e; loc = tag.loc }, attrs @ children);\n      loc = { loc_start; loc_end };\n    }\n\nand jsx_attrs p =\n  match p.token with\n  | LIDENT _ ->\n      print_token p.token;\n      let lid = lident p in\n      print_token p.token;\n      expect EQUAL p;\n      expect LBRACE p;\n      let e = expr p in\n      expect RBRACE p;\n      (Labelled lid.txt, e) :: jsx_attrs p\n  | _ -> []\n","open Syntax\nopen Parser_base\nopen Token\nopen Asttypes\nopen Parser_jsx\n\nlet rec expr parser =\n  let loc_start = parser.start_pos in\n  let desc =\n    match parser.token with\n    | LET ->\n        advance parser;\n        let is_rec = optional REC in\n        let id = lident parser in\n        let e1 = valbind1 EQUAL parser in\n        expect IN parser;\n        let body = expr parser in\n        ELet (id, e1, body)\n    | FUN ->\n        advance parser;\n        (valbind1 ARROW parser).desc\n    | MATCH ->\n        advance parser;\n        let e1 = expr parser in\n        expect WITH parser;\n        let _ = optional BAR parser in\n        let cases =\n          sepby\n            (fun p ->\n              expect BACKQOUTE p;\n              let uid = uident p in\n              let lid = lident p in\n              expect ARROW p;\n              let e = expr p in\n              (uid.txt, lid, e))\n            (fun x -> x = BACKQOUTE)\n            (fun x -> x = BAR)\n            parser\n        in\n        let op =\n          match parser.token with\n          | LIDENT _ ->\n              let lid = lident parser in\n              expect ARROW parser;\n              let e = expr parser in\n              Some (lid, e)\n          | _ -> None\n        in\n        Case (e1, cases, op)\n    | LESS ->\n        let { desc; _ } = jsx parser in\n        desc\n    | _ ->\n        let { desc; _ } = op_expr parser in\n        desc\n  in\n  let loc_end = parser.prev_end_pos in\n  { desc; loc = { loc_start; loc_end } }\n\nand valbind1 token p =\n  if p.token = token then (\n    advance p;\n    expr p)\n  else\n    let loc_start = p.start_pos in\n    let label_f = arg_label_fun p in\n    let lid = lident p in\n    let body = valbind1 token p in\n    let loc_end = p.prev_end_pos in\n    {\n      desc = EFunction (label_f lid.txt, lid, body);\n      loc = { loc_start; loc_end };\n    }\n\nand op_expr p =\n  let rec expr_bp min_bp =\n    let lhs = apply_expr p in\n    let rec loop (lhs : expr) =\n      if is_infix p.token then\n        let s = string_of_infix p.token in\n        let op =\n          {\n            desc =\n              ELongident { txt = Longident.Lident s; loc = Location.dummy_loc };\n            loc = { loc_start = p.start_pos; loc_end = p.end_pos };\n          }\n        in\n        let prec = precedence p.token in\n        if prec < min_bp then lhs\n        else (\n          advance p;\n          let rhs = expr_bp (prec + 1) in\n          let e =\n            {\n              desc = EApply (op, [ (Nolabel, lhs); (Nolabel, rhs) ]);\n              loc = { loc_start = lhs.loc.loc_start; loc_end = rhs.loc.loc_end };\n            }\n          in\n          loop e)\n      else lhs\n    in\n    loop lhs\n  in\n  expr_bp 0\n\nand apply_expr p =\n  let f = select_expr p in\n  let rec loop () =\n    match p.token with\n    | TILDE -> (\n        advance p;\n        let lid = lident p in\n        expect COLON p;\n        match p.token with\n        | NUMBER _ | LIDENT _ | UIDENT _ | LBRACE | LPARENT | STRING _ ->\n            let f = select_expr p in\n            (Labelled lid.txt, f) :: loop ()\n        | _ ->\n            report p;\n            raise Parse_error)\n    | _ -> (\n        match p.token with\n        | NUMBER _ | LIDENT _ | UIDENT _ | LBRACE | LPARENT ->\n            let f = select_expr p in\n            (Nolabel, f) :: loop ()\n        | _ -> [])\n  in\n\n  let args = loop () in\n  if List.length args = 0 then f\n  else\n    {\n      desc = EApply (f, args);\n      loc =\n        {\n          loc_start = f.loc.loc_start;\n          loc_end = (snd (List.nth args (List.length args - 1))).loc.loc_end;\n        };\n    }\n\nand select_expr p =\n  let atom = atom_expr p in\n  match p.token with\n  | DOT ->\n      let fs =\n        many1\n          (fun p ->\n            expect DOT p;\n            lident p)\n          (fun x -> x = DOT)\n          p\n      in\n      List.fold_left\n        (fun acc f ->\n          {\n            desc = RecordSelect (acc, f);\n            loc = { loc_start = acc.loc.loc_start; loc_end = f.loc.loc_end };\n          })\n        atom fs\n  | _ -> atom\n\nand atom_expr p =\n  let loc_start = p.start_pos in\n  let desc =\n    match p.token with\n    | NUMBER n ->\n        advance p;\n        EConstant (Pconst_number n)\n    | STRING s ->\n        advance p;\n        EConstant (Pconst_string s)\n    | LIDENT s ->\n        advance p;\n        ELongident { txt = Longident.Lident s; loc = Location.dummy_loc }\n    | UIDENT _ ->\n        let lid = longident_end_lident p in\n        ELongident lid\n    | BACKQOUTE ->\n        advance p;\n        let uid = uident p in\n        let e = atom_expr p in\n        Variant (uid.txt, e)\n    | LPARENT ->\n        let infix =\n          lookahead p (fun p ->\n              advance p;\n              is_infix p.token)\n        in\n        if infix then ELongident (Longident.ident_of_string (lident p))\n        else (\n          advance p;\n          let e = expr p in\n          expect RPARENT p;\n          e.desc)\n    | LBRACE ->\n        advance p;\n        let fields =\n          sepby\n            (fun p ->\n              let lid = lident p in\n              expect EQUAL p;\n              let e = expr p in\n              (lid, e))\n            (function LIDENT _ -> true | _ -> false)\n            (fun x -> x = SEMICOLON)\n            p\n        in\n        let ext =\n          match p.token with\n          | BAR ->\n              advance p;\n              expr p\n          | _ -> { desc = RecordEmpty; loc = Location.dummy_loc }\n        in\n        expect RBRACE p;\n        (List.fold_left\n           (fun acc (f, e) ->\n             { desc = RecordExtend (f, e, acc); loc = Location.dummy_loc })\n           ext fields)\n          .desc\n    | _ ->\n        report p;\n        raise Parse_error\n  in\n  let loc_end = p.prev_end_pos in\n  { desc; loc = { loc_start; loc_end } }\n\nlet tvar p =\n  expect QUOTE p;\n  lident p\n\nlet rec simple_type p : simple_type =\n  let mems =\n    List.rev\n      (sepby1\n         (fun p ->\n           let label =\n             match p.token with\n             | QUESTION ->\n                 advance p;\n                 let lid = lident p in\n                 expect COLON p;\n                 Optional lid.txt\n             | _ ->\n                 let labelled =\n                   lookahead p (fun p ->\n                       advance p;\n                       p.token = COLON)\n                 in\n                 if labelled then (\n                   let lid = lident p in\n                   expect COLON p;\n                   Labelled lid.txt)\n                 else Nolabel\n           in\n           let sty = tuple_type p in\n           (label, sty))\n         (fun x -> x = ARROW)\n         p)\n  in\n  List.fold_left\n    (fun acc (l, sty) ->\n      {\n        ty_desc = Tarrow (l, sty, acc);\n        loc = { loc_start = sty.loc.loc_start; loc_end = acc.loc.loc_end };\n      })\n    (snd (List.hd mems))\n    (List.tl mems)\n\nand tuple_type p =\n  let mems = List.rev (sepby1 apply_type (fun x -> x = STAR) p) in\n  List.fold_left\n    (fun acc sty ->\n      {\n        ty_desc =\n          Typeconstr\n            ( { txt = Longident.Lident \"*\"; loc = Location.dummy_loc },\n              [ sty; acc ] );\n        loc = { loc_start = sty.loc.loc_start; loc_end = acc.loc.loc_end };\n      })\n    (List.hd mems) (List.tl mems)\n\nand apply_type p =\n  let ty = atom_type p in\n  let rec loop () =\n    match p.token with\n    | LIDENT _ | UIDENT _ ->\n        let ty = longident_end_lident p in\n        ty :: loop ()\n    | _ -> []\n  in\n  let paths = loop () in\n  List.fold_left\n    (fun acc p ->\n      {\n        ty_desc = Typeconstr (p, [ acc ]);\n        loc = { loc_start = acc.loc.loc_start; loc_end = p.loc.loc_end };\n      })\n    ty paths\n\nand atom_type p =\n  let loc_start = p.start_pos in\n  let ty =\n    match p.token with\n    | QUOTE ->\n        let { txt } = tvar p in\n        TVar txt\n    | LPARENT ->\n        advance p;\n        let simple_tys = sepby1 simple_type (fun t -> t = COMMA) p in\n        expect RPARENT p;\n        let ty_desc =\n          match p.token with\n          | LIDENT _ | UIDENT _ ->\n              let id = longident_end_lident p in\n              Typeconstr (id, simple_tys)\n          | _ when List.length simple_tys = 1 -> (List.hd simple_tys).ty_desc\n          | _ ->\n              report p;\n              raise Parse_error\n        in\n        ty_desc\n    | LIDENT _ | UIDENT _ ->\n        let id = longident_end_lident p in\n        Typeconstr (id, [])\n    | LESS ->\n        advance p;\n        let fields =\n          sepby\n            (fun p ->\n              let lid = lident p in\n              expect COLON p;\n              let e = simple_type p in\n              (lid, e))\n            (function LIDENT _ -> true | _ -> false)\n            (fun x -> x = SEMICOLON)\n            p\n        in\n        print_token p.token;\n        let ext =\n          match p.token with\n          | DOTDOT ->\n              let loc_start = p.start_pos in\n              advance p;\n              let loc_end = p.end_pos in\n              { ty_desc = TVar \"..\"; loc = { loc_start; loc_end } }\n          | _ -> { ty_desc = TRempty; loc = Location.dummy_loc }\n        in\n        expect GREATER p;\n        let row =\n          (List.fold_right\n             (fun (f, e) acc ->\n               { ty_desc = TRextend (f, e, acc); loc = Location.dummy_loc })\n             fields ext)\n            .ty_desc\n        in\n        Trecord { ty_desc = row; loc = Location.dummy_loc }\n    | LBRACKET | LBRACKETGREATER ->\n        let op = p.token = LBRACKETGREATER in\n        let ext =\n          {\n            ty_desc = (if op then TVar \"..\" else TRempty);\n            loc = Location.dummy_loc;\n          }\n        in\n        advance p;\n        let fields =\n          sepby1\n            (fun p ->\n              expect BACKQOUTE p;\n              let uid = uident p in\n              expect OF p;\n              let ty = simple_type p in\n              (uid, ty))\n            (fun x -> x = BAR)\n            p\n        in\n        expect RBRACKET p;\n        let row =\n          (List.fold_right\n             (fun (f, e) acc ->\n               { ty_desc = TRextend (f, e, acc); loc = Location.dummy_loc })\n             fields ext)\n            .ty_desc\n        in\n        Tvariant { ty_desc = row; loc = Location.dummy_loc }\n    | _ ->\n        report p;\n        raise Parse_error\n  in\n\n  let loc_end = p.prev_end_pos in\n  { ty_desc = ty; loc = { loc_start; loc_end } }\n\nlet rec skip_to pred p =\n  if pred p.token then ()\n  else (\n    advance p;\n    skip_to pred p)\n\nlet type_decl p =\n  advance p;\n  let params =\n    match p.token with\n    | QUOTE -> [ tvar p ]\n    | LPARENT ->\n        advance p;\n        let ps = sepby1 tvar (fun x -> x = COMMA) p in\n        expect RPARENT p;\n        ps\n    | _ -> []\n  in\n  let lid = lident p in\n  let def =\n    match p.token with\n    | EQUAL ->\n        advance p;\n        let body = simple_type p in\n        {\n          kind = List.length params;\n          manifest = Some { params; defbody = body };\n        }\n    | _ -> { kind = List.length params; manifest = None }\n  in\n  (lid, def)\n\nlet rec mod_type p =\n  let loc_start = p.start_pos in\n  let desc =\n    match p.token with\n    | SIG ->\n        advance p;\n        let sig_ = signature p in\n        expect END p;\n        Signature sig_\n    | FUNCTOR ->\n        advance p;\n        expect LPARENT p;\n        let uid = uident p in\n        expect COLON p;\n        let pmty = mod_type p in\n        expect RPARENT p;\n        let rmty = mod_type p in\n        Functor_type (Longident.ident_of_string uid, pmty, rmty)\n    | LPARENT ->\n        advance p;\n        let mty = mod_type p in\n        expect RPARENT p;\n        mty.mt_desc\n    | _ ->\n        report p;\n        raise Parse_error\n  in\n  let loc_end = p.prev_end_pos in\n  let ret = { mt_desc = desc; loc = { loc_start; loc_end } } in\n  ret\n\nand signature p =\n  let rec loop () =\n    if p.token = END || p.token = EOF then []\n    else\n      let d =\n        try Some (spec p)\n        with Parse_error ->\n          skip_to\n            (function VAL | TYPE | MODULE | END | EOF -> true | _ -> false)\n            p;\n          None\n      in\n      d :: loop ()\n  in\n  List.filter_map (fun x -> x) (loop ())\n\nand spec p =\n  match p.token with\n  | VAL ->\n      advance p;\n      let lid = lident p in\n      expect COLON p;\n      let ty = simple_type p in\n      Value_sig (Longident.ident_of_string lid, ty)\n  | TYPE ->\n      let lid, def = type_decl p in\n      Type_sig (Longident.ident_of_string lid, def)\n  | MODULE ->\n      advance p;\n      let uid = uident p in\n      expect COLON p;\n      let mty = mod_type p in\n      Module_sig (Longident.ident_of_string uid, mty)\n  | _ ->\n      report p;\n      raise Parse_error\n\nlet rec mod_expr p =\n  let atom = atom_mod_expr p in\n  let args =\n    many\n      (fun p ->\n        expect LPARENT p;\n        let mod_e = mod_expr p in\n        expect RPARENT p;\n        mod_e)\n      (fun x -> x = LPARENT)\n      p\n  in\n  List.fold_left\n    (fun acc m ->\n      {\n        me_desc = MEApply (acc, m);\n        loc = { loc_start = acc.loc.loc_start; loc_end = acc.loc.loc_end };\n      })\n    atom args\n\nand atom_mod_expr p =\n  let loc_start = p.start_pos in\n  let e =\n    match p.token with\n    | STRUCT ->\n        advance p;\n        let str = structure p in\n        expect END p;\n        MEStructure str\n    | FUNCTOR ->\n        advance p;\n        expect LPARENT p;\n        let uid = uident p in\n        expect COLON p;\n        let mod_ty = mod_type p in\n        expect RPARENT p;\n        let mod_e = mod_expr p in\n        MEFunctor (Longident.ident_of_string uid, mod_ty, mod_e)\n    | UIDENT _ ->\n        let path = longident_end_uident p in\n        MELongident path\n    | LPARENT ->\n        advance p;\n        let mod_e = mod_expr p in\n        let ret =\n          if p.token = COLON then (\n            advance p;\n            let mod_ty = mod_type p in\n            MEConstraint (mod_e, mod_ty))\n          else mod_e.me_desc\n        in\n        expect RPARENT p;\n        ret\n    | _ ->\n        report p;\n        raise Parse_error\n  in\n\n  let loc_end = p.prev_end_pos in\n  { me_desc = e; loc = { loc_start; loc_end } }\n\nand structure p =\n  let rec loop () =\n    if p.token = END || p.token = EOF then []\n    else\n      let d =\n        try Some (definition p)\n        with Parse_error ->\n          skip_to\n            (function LET | TYPE | MODULE | END | EOF -> true | _ -> false)\n            p;\n          None\n      in\n      d :: loop ()\n  in\n  List.filter_map (fun x -> x) (loop ())\n\nand definition p =\n  let ret =\n    match p.token with\n    | LET ->\n        advance p;\n        let lid = lident p in\n        let e = valbind1 EQUAL p in\n        Value_str (Longident.ident_of_string lid, e)\n    | TYPE ->\n        let lid, def = type_decl p in\n        Type_str (Longident.ident_of_string lid, def)\n    | MODULE ->\n        advance p;\n        let lid = uident p in\n        let mty =\n          match p.token with\n          | COLON ->\n              advance p;\n              Some (mod_type p)\n          | _ -> None\n        in\n        expect EQUAL p;\n        let e = mod_expr p in\n        Module_str (Longident.ident_of_string lid, mty, e)\n    | _ ->\n        report p;\n        raise Parse_error\n  in\n  let prev_comments = p.scanner.comments in\n  p.scanner.comments <- [];\n  { definition = ret; prev_comments }\n\nlet _ = expr_ref := expr\n\nlet parse p =\n  advance p;\n  let loc_start = p.start_pos in\n  let str = structure p in\n  let loc_end = p.prev_end_pos in\n  { me_desc = MEStructure str; loc = { loc_start; loc_end } }\n","type t = { name : string; stamp : int } [@@deriving show { with_path = false }]\n\nlet currstamp = ref 0\n\nlet create s =\n  currstamp := !currstamp + 1;\n  { name = s; stamp = !currstamp }\n\nlet name id = id.name\nlet equal id1 id2 = id1.stamp = id2.stamp\n\ntype 'a tbl = (t * 'a) list [@@deriving show { with_path = false }]\n\nlet emptytbl = []\nlet add id data tbl = (id, data) :: tbl\n\nlet rec find id1 = function\n  | [] -> raise Not_found\n  | (id2, data) :: rem -> if equal id1 id2 then data else find id1 rem\n\nlet rec find_name name1 env = List.find (fun id -> name id = name1) env\n","type t =\n  | Pident of Ident.t (* identifier *)\n  | Pdot of t * string (* access to a module component *)\n[@@deriving show { with_path = false }]\n\nlet rec path_equal p1 p2 =\n  match (p1, p2) with\n  | Pident id1, Pident id2 -> Ident.equal id1 id2\n  | Pdot (r1, field1), Pdot (r2, field2) -> path_equal r1 r2 && field1 = field2\n  | _, _ -> false\n\nlet rec path_of_longident lid =\n  let open Parsing.Longident in\n  match lid with\n  | Lident s -> Pident (Ident.create s)\n  | Ldot (lid1, s) -> Pdot (path_of_longident lid1, s)\n\nlet rec string_of_path p =\n  match p with\n  | Pident i -> Ident.name i\n  | Pdot (p, f) -> string_of_path p ^ \".\" ^ f\n","type simple_type =\n  | Var of type_variable (* 'a, 'b *)\n  | Tarrow of Parsing.Asttypes.arg_label * simple_type * simple_type\n  | Typeconstr of Path.t * simple_type list\n  | TRempty\n  | TRextend of string * simple_type * row\n  | Trecord of row\n  | Tvariant of row\n[@@deriving show { with_path = false }]\n\nand row = simple_type [@@deriving show { with_path = false }]\n\nand type_variable = {\n  mutable repres : simple_type option; (* representative, for union-find *)\n  mutable level : int;\n}\n[@@deriving show { with_path = false }]\n\nand type_variable_list = type_variable list\n[@@deriving show { with_path = false }]\n\ntype val_type = {\n  quantif : type_variable list; (* quantified variables *)\n  body : simple_type;\n}\n[@@deriving show { with_path = false }]\n(* body of type scheme *)\n\ntype def_type = {\n  params : type_variable list; (* list of parameters *)\n  defbody : simple_type;\n}\n[@@deriving show { with_path = false }]\n(* body of type definition *)\n\ntype kind = { arity : int } [@@deriving show { with_path = false }]\n\ntype type_decl = { kind : kind; manifest : def_type option }\n[@@deriving show { with_path = false }]\n\ntype mod_type =\n  | Signature of signature (* sig ... end *)\n  | Functor_type of Ident.t * mod_type * mod_type\n[@@deriving show { with_path = false }]\n(* functor(X: mty) mty *)\n\nand signature = specification list [@@deriving show { with_path = false }]\n\nand specification =\n  | Value_sig of Ident.t * val_type (* val x: ty *)\n  | Type_sig of Ident.t * type_decl (* type t :: k [= ty] *)\n  | Module_sig of Ident.t Parsing.Asttypes.loc * mod_type\n(* module X: mty *) [@@deriving show { with_path = false }]\n\nlet unknown_mod_type () = Signature []\n\nlet rec typerepr = function\n  | Var ({ repres = Some ty; _ } as var) ->\n      let r = typerepr ty in\n      var.repres <- Some r;\n      r\n  | ty -> ty\n\nlet current_level = ref 0\nlet begin_def () = incr current_level\nlet end_def () = decr current_level\nlet newvar () = { repres = None; level = !current_level }\nlet unknown () = Var (newvar ())\nlet trivial_scheme ty = { quantif = []; body = ty }\n\nlet var_string_of_int ?(quantify = true) i =\n  \"'\"\n  ^ (if quantify then \"\" else \"_\")\n  ^ String.make 1 (Char.chr (Char.code 'a' + i))\n\nlet rec row_repr ty =\n  match ty with\n  | TRempty -> ([], TRempty)\n  | TRextend (field, t1, t2) ->\n      let rest, t = row_repr t2 in\n      ((field, t1) :: rest, t)\n  | Var { repres = Some ty; _ } -> row_repr ty\n  | Var { repres = None; _ } -> ([], ty)\n  | t ->\n      print_endline (show_row t);\n      assert false\n\nlet rec print_val_type vars ?(parent = false) val_type =\n  match typerepr val_type.body with\n  | Var ({ repres = None; _ } as var) ->\n      let vars =\n        if List.mem_assq var vars then vars\n        else\n          ( var,\n            var_string_of_int\n              ~quantify:(List.memq var val_type.quantif)\n              (List.length vars) )\n          :: vars\n      in\n      (vars, List.assq var vars)\n  | Var { repres = Some _; _ } -> assert false\n  | Tarrow (l, t1, t2) ->\n      let ls =\n        match l with\n        | Nolabel -> \"\"\n        | Labelled s -> s ^ \":\"\n        | Optional s -> \"?\" ^ s ^ \":\"\n      in\n      (* print_endline (show_type_variable_list (List.map fst vars)); *)\n      let vars, t1s =\n        print_val_type vars ~parent:true\n          { quantif = val_type.quantif; body = t1 }\n      in\n      let vars, t2s =\n        print_val_type vars { quantif = val_type.quantif; body = t2 }\n      in\n      ( vars,\n        (if parent then Printf.sprintf \"(%s%s -> %s)\"\n         else Printf.sprintf \"%s%s -> %s\")\n          ls t1s t2s )\n  | Typeconstr (p, tl) ->\n      let ps = Path.string_of_path p in\n      let len = List.length tl in\n      if len = 0 then (vars, ps)\n      else if len = 1 then\n        let vars, ret =\n          print_val_type vars\n            { quantif = val_type.quantif; body = List.nth tl 0 }\n        in\n        (vars, ret ^ \" \" ^ ps)\n      else\n        ( vars,\n          Printf.sprintf \"(%s) %s\"\n            (String.concat \", \"\n               (snd\n                  (List.fold_left\n                     (fun (vars, sl) t ->\n                       let vars, s =\n                         print_val_type vars\n                           { quantif = val_type.quantif; body = t }\n                       in\n                       (vars, sl @ [ s ]))\n                     (vars, []) tl)))\n            ps )\n  | Trecord row ->\n      let fields, rest_row = row_repr row in\n      let vars, fs =\n        List.fold_left\n          (fun (vars, sl) (l, ty) ->\n            let vars, tys =\n              print_val_type vars { quantif = val_type.quantif; body = ty }\n            in\n            (vars, sl @ [ l ^ \" : \" ^ tys ]))\n          (vars, []) fields\n      in\n      ( vars,\n        if List.length fs = 0 && rest_row = TRempty then \"< >\"\n        else\n          Printf.sprintf \"< %s%s >\" (String.concat \"; \" fs)\n            (match rest_row with\n            | Var _ -> \"; ..\"\n            | TRempty -> \"\"\n            | _ -> assert false) )\n  | Tvariant row ->\n      let fields, rest_row = row_repr row in\n      let vars, fs =\n        List.fold_left\n          (fun (vars, sl) (l, ty) ->\n            let vars, tys =\n              print_val_type vars { quantif = val_type.quantif; body = ty }\n            in\n            (vars, sl @ [ \"\\`\" ^ l ^ \" of \" ^ tys ]))\n          (vars, []) fields\n      in\n      ( vars,\n        Printf.sprintf \"[%s %s ]\"\n          (match rest_row with\n          | Var _ -> \">\"\n          | TRempty -> \"\"\n          | _ -> assert false)\n          (String.concat \" | \" fs) )\n  | TRempty | TRextend _ -> assert false\n\nlet print_val_type vars ?(parent = false) val_type =\n  snd (print_val_type vars ~parent val_type)\n\nlet rec print_mod_type ?(offset = 0) mod_type =\n  (* print_endline (show_mod_type mod_type); *)\n  match mod_type with\n  | Functor_type (id, mty1, mty2) ->\n      Printf.sprintf \"functor(%s: %s) %s\" (Ident.name id) (print_mod_type mty1)\n        (print_mod_type mty2)\n  | Signature sig_ ->\n      Printf.sprintf \"sig\\n%s\\n%send\"\n        (String.concat \"\\n\"\n           (List.map (fun x -> print_specification ~offset:(offset + 2) x) sig_))\n        (String.make offset ' ')\n\nand print_specification ~offset spec =\n  let ret =\n    match spec with\n    | Value_sig (id, e) ->\n        Printf.sprintf \"val %s: %s\" (Ident.name id) (print_val_type [] e)\n    | Type_sig (id, decl) -> (\n        let len = decl.kind.arity in\n        match decl.manifest with\n        | None ->\n            Printf.sprintf \"type %s%s\"\n              (String.concat \"\"\n                 (List.map\n                    (fun n -> var_string_of_int n ^ \" \")\n                    (List.init len (fun x -> x))))\n              (Ident.name id)\n        | Some body ->\n            let vars =\n              List.mapi (fun i var -> (var, var_string_of_int i)) body.params\n            in\n            let paramss = String.concat \", \" (List.map snd vars) in\n            let bodys = print_val_type vars (trivial_scheme body.defbody) in\n            if len = 0 then Printf.sprintf \"type %s = %s\" (Ident.name id) bodys\n            else if len = 1 then\n              Printf.sprintf \"type %s %s = %s\" paramss (Ident.name id) bodys\n            else\n              Printf.sprintf \"type (%s) %s = %s\" paramss (Ident.name id) bodys)\n    | Module_sig (id, mty) ->\n        Printf.sprintf \"module %s: %s\" (Ident.name id.txt)\n          (print_mod_type ~offset mty)\n  in\n  String.make offset ' ' ^ ret\n","type t = Path.t Ident.tbl\n\nlet identity = Ident.emptytbl\nlet add = Ident.add\n\nlet rec path p sub =\n  match p with\n  | Path.Pident id -> ( try Ident.find id sub with Not_found -> p)\n  | Path.Pdot (root, field) -> Pdot (path root sub, field)\n\nopen Types\n\nlet rec subst_type subst = function\n  | Var { repres = None; _ } as ty -> ty\n  | Var { repres = Some ty; _ } -> subst_type subst ty\n  | Typeconstr (p, tl) ->\n      Typeconstr (path p subst, List.map (subst_type subst) tl)\n  | Tarrow (l, t1, t2) -> Tarrow (l, subst_type subst t1, subst_type subst t2)\n  | TRempty -> TRempty\n  | TRextend (s, ty1, ty2) ->\n      TRextend (s, subst_type subst ty1, subst_type subst ty2)\n  | Tvariant row -> subst_type subst row\n  | Trecord row -> subst_type subst row\n\nlet subst_valtype vty subst =\n  { quantif = vty.quantif; body = subst_type subst vty.body }\n\nlet subst_deftype def subst =\n  { params = def.params; defbody = subst_type subst def.defbody }\n\nlet subst_kind kind subst = kind\n\nlet subst_typedecl decl sub =\n  {\n    kind = subst_kind decl.kind sub;\n    manifest =\n      (match decl.manifest with\n      | None -> None\n      | Some dty -> Some (subst_deftype dty sub));\n  }\n\nlet rec subst_modtype mty sub =\n  match mty with\n  | Signature sg -> Signature (List.map (subst_sig_item sub) sg)\n  | Functor_type (id, mty1, mty2) ->\n      Functor_type (id, subst_modtype mty1 sub, subst_modtype mty2 sub)\n\nand subst_sig_item sub = function\n  | Value_sig (id, vty) -> Value_sig (id, subst_valtype vty sub)\n  | Type_sig (id, decl) -> Type_sig (id, subst_typedecl decl sub)\n  | Module_sig (id, mty) -> Module_sig (id, subst_modtype mty sub)\n","open Parsing\nopen Types\n\ntype binding = Value of val_type | Type of type_decl | Module of mod_type\n[@@deriving show { with_path = false }]\n\ntype t = binding Ident.tbl\n[@@deriving show { with_path = false }]\n\nlet empty = Ident.emptytbl\nlet add_value id vty env = Ident.add id (Value vty) env\nlet add_type id decl env = Ident.add id (Type decl) env\nlet add_module id mty env = Ident.add id (Module mty) env\n\nlet add_spec item env =\n  match item with\n  | Value_sig (id, vty) -> add_value id vty env\n  | Type_sig (id, decl) -> add_type id decl env\n  | Module_sig (id, mty) -> add_module id.txt mty env\n\n(* Why fold_right instead of fold_left? *)\nlet add_signature = List.fold_right add_spec\nlet error s = failwith s\n\nlet rec find path env =\n  match path with\n  | Path.Pident id -> Ident.find id env\n  | Pdot (root, field) -> (\n      match find_module root env with\n      | Signature sg -> find_field root field Subst.identity sg\n      | _ -> error \"structure expected in dot access\")\n\nand find_field p field subst = function\n  | [] -> error \"no such field in structure\"\n  | Value_sig (id, vty) :: rem ->\n      if Ident.name id = field then Value (Subst.subst_valtype vty subst)\n      else find_field p field subst rem\n  | Type_sig (id, decl) :: rem ->\n      if Ident.name id = field then Type (Subst.subst_typedecl decl subst)\n      else\n        find_field p field\n          (Subst.add id (Path.Pdot (p, Ident.name id)) subst)\n          rem\n  | Module_sig (id, mty) :: rem ->\n      if Ident.name id.txt = field then Module (Subst.subst_modtype mty subst)\n      else\n        find_field p field\n          (Subst.add id.txt (Path.Pdot (p, Ident.name id.txt)) subst)\n          rem\n\nand find_value path env =\n  match find path env with\n  | Value vty -> vty\n  | _ -> error \"value field expected\"\n\nand find_type path env =\n  match find path env with\n  | Type decl -> decl\n  | _ -> error \"type field expected\"\n\nand find_module path env =\n  match find path env with\n  | Module mty -> mty\n  | _ -> error \"module field expected\"\n\nlet rec lookup lid (env : t) =\n  match lid with\n  | Longident.Lident id ->\n      let rec loop id env =\n        match env with\n        | [] -> raise Not_found\n        | (ident, data) :: rest ->\n            if Ident.name ident = id then (Path.Pident ident, data)\n            else loop id rest\n      in\n      loop id env\n  | Longident.Ldot (lid1, id) -> (\n      let p, mty = lookup_module lid1 env in\n      match mty with\n      | Signature sig_ ->\n          let binding = find_field p id Subst.identity sig_ in\n          (Path.Pdot (p, id), binding)\n      | _ -> error \"structure expected in dot access\")\n\nand lookup_value lid env =\n  let path, data = lookup lid env in\n  match data with Value ty -> (path, ty) | _ -> error \"value field expected\"\n\nand lookup_type lid env =\n  let path, data = lookup lid env in\n  match data with Type decl -> (path, decl) | _ -> error \"type field expected\"\n\nand lookup_module lid env =\n  let path, data = lookup lid env in\n  match data with\n  | Module mty -> (path, mty)\n  | _ -> failwith \"module field expected\"\n\nlet iniitalenv : t = []\n","open Types\nmodule Asttypes = Parsing.Asttypes\n\ntype term = {\n  term_desc : term_desc;\n  loc : Parsing.Location.t;\n  mutable term_type : simple_type;\n  mutable term_env : Env.t;\n}\n[@@deriving show { with_path = false }]\n\nand term_desc =\n  | Constant of Asttypes.constant (* integer constants *)\n  | Longident of Path.t (* id or mod.mod...id *)\n  | Function of Parsing.Asttypes.arg_label * Ident.t * term (* fun id -> expr *)\n  | Apply of term * (Parsing.Asttypes.arg_label * term) list (* expr(expr) *)\n  | Let of Ident.t Asttypes.loc * term * term (* let id = expr in expr *)\n  | RecordEmpty\n  | RecordExtend of string Asttypes.loc * term * term\n  | RecordSelect of term * string Asttypes.loc\n  | Variant of string * term\n  | Case of\n      term\n      * (string * Ident.t Asttypes.loc * term) list\n      * (Ident.t Asttypes.loc * term) option\n  | Jsxelement of term * (Asttypes.arg_label * term) list\n[@@deriving show { with_path = false }]\n\nlet generalize ty =\n  let rec gen_vars vars ty =\n    match typerepr ty with\n    | Var v ->\n        if v.level > !current_level && not (List.memq v vars) then v :: vars\n        else vars\n    | Typeconstr (path, tl) -> List.fold_left gen_vars vars tl\n    | Tarrow (_, t1, t2) -> gen_vars (gen_vars vars t1) t2\n    | Trecord row -> gen_vars vars row\n    | TRextend (_, t, rest) ->\n        let t_vars = gen_vars vars t in\n        gen_vars t_vars rest\n    | TRempty -> vars\n    | Tvariant row -> gen_vars vars row\n  in\n  { quantif = gen_vars [] ty; body = ty }\n\ntype mod_term = {\n  mod_term_desc : mod_term_desc;\n  loc : Parsing.Location.t;\n  mutable mod_term_type : mod_type;\n  mutable mod_term_env : Env.t;\n}\n\nand mod_term_desc =\n  | Longident of Path.t (* X or X.Y.Z *)\n  | Structure of structure (* struct ... end *)\n  | Functor of Ident.t * mod_type * mod_term (* functor (X: mty) mod *)\n  | Apply of mod_term * mod_term (* mod1(mod2) *)\n  | Constraint of mod_term * mod_type (* (mod : mty) *)\n[@@deriving show { with_path = false }]\n\nand structure = definition list [@@deriving show { with_path = false }]\n\nand definition = {\n  definition_desc : definition_desc;\n  mutable before_env : Env.t;\n  mutable after_env : Env.t;\n}\n\nand definition_desc =\n  | Value_str of Ident.t Asttypes.loc * term (* let x = expr *)\n  | Type_str of Ident.t * kind * def_type (* type t :: k = ty *)\n  | Module_str of Ident.t Asttypes.loc * mod_term (* module X = mod *)\n[@@deriving show { with_path = false }]\n\nmodule Syntax = Parsing.Syntax\nmodule Longident = Parsing.Longident\n\nlet variables = ref ([] : (string * type_variable) list)\nlet reset_type_variables () = variables := []\n\nlet find_type_variable name =\n  try List.assoc name !variables\n  with Not_found ->\n    let v = newvar () in\n    variables := (name, v) :: !variables;\n    v\n\nlet rec map_simple_type sty =\n  let ret =\n    match sty.Syntax.ty_desc with\n    | Syntax.TVar s -> Var (find_type_variable s)\n    | Tarrow (l, t1, t2) -> Tarrow (l, map_simple_type t1, map_simple_type t2)\n    | Typeconstr (lid, tyl) ->\n        Typeconstr (Path.path_of_longident lid.txt, List.map map_simple_type tyl)\n    | Trecord row -> Trecord (map_simple_type row)\n    | Tvariant row -> Tvariant (map_simple_type row)\n    | TRempty -> TRempty\n    | TRextend (l, t1, t2) ->\n        TRextend (l.txt, map_simple_type t1, map_simple_type t2)\n  in\n  ret\n\nlet rec expr_to_typed expr =\n  let open Syntax in\n  let ret =\n    match expr.desc with\n    | EConstant i ->\n        Constant\n          (match i with\n          | Pconst_string _ -> Const_string\n          | Pconst_number _ -> Const_number)\n    | ELongident i -> Longident (Path.path_of_longident i.txt)\n    | EFunction (arg_label, { txt; _ }, expr) ->\n        Function (arg_label, Ident.create txt, expr_to_typed expr)\n    | EApply (f, args) ->\n        Apply\n          (expr_to_typed f, List.map (fun (l, e) -> (l, expr_to_typed e)) args)\n    | ELet (s, e1, e2) ->\n        Let\n          ( { txt = Ident.create s.txt; loc = s.loc },\n            expr_to_typed e1,\n            expr_to_typed e2 )\n    | RecordEmpty -> RecordEmpty\n    | RecordExtend (l, e1, e2) ->\n        RecordExtend (l, expr_to_typed e1, expr_to_typed e2)\n    | RecordSelect (e, l) -> RecordSelect (expr_to_typed e, l)\n    | Variant (tag, e) -> Variant (tag, expr_to_typed e)\n    | Case (e1, cases, o) ->\n        Case\n          ( expr_to_typed e1,\n            List.map\n              (fun (tag, (v : string Asttypes.loc), e) ->\n                ( tag,\n                  { Asttypes.txt = Ident.create v.txt; loc = v.loc },\n                  expr_to_typed e ))\n              cases,\n            match o with\n            | None -> None\n            | Some (v, e) ->\n                Some ({ txt = Ident.create v.txt; loc = v.loc }, expr_to_typed e)\n          )\n    | Ejsxelement (e, el) ->\n        Jsxelement\n          (expr_to_typed e, List.map (fun (l, e) -> (l, expr_to_typed e)) el)\n  in\n  {\n    term_desc = ret;\n    term_type = unknown ();\n    loc = expr.loc;\n    term_env = Env.empty;\n  }\n\nlet rec mod_type_to_typed mty : mod_type =\n  let open Syntax in\n  match mty.mt_desc with\n  | Functor_type (lid, mty1, mty2) ->\n      Functor_type\n        ( Ident.create (Longident.string_of_longident lid.txt),\n          mod_type_to_typed mty1,\n          mod_type_to_typed mty2 )\n  | Signature signature -> Signature (List.map specification_to_typed signature)\n\nand specification_to_typed spec : specification =\n  match spec with\n  | Syntax.Value_sig (lid, sty) ->\n      reset_type_variables ();\n      begin_def ();\n      let ty = map_simple_type sty in\n      end_def ();\n      let ty = generalize ty in\n      Value_sig (Ident.create (Longident.string_of_longident lid.txt), ty)\n  | Type_sig (lid, decl) ->\n      reset_type_variables ();\n      let manifest : def_type option =\n        match decl.manifest with\n        | None -> None\n        | Some def ->\n            let params =\n              List.map\n                (fun (x : string Parsing.Location.loc) ->\n                  find_type_variable x.txt)\n                def.params\n            in\n            Some { params; defbody = map_simple_type def.defbody }\n      in\n      Type_sig\n        ( Ident.create (Longident.string_of_longident lid.txt),\n          { kind = { arity = decl.kind }; manifest } )\n  | Module_sig (lid, mty) ->\n      Module_sig\n        ( {\n            txt = Ident.create (Longident.string_of_longident lid.txt);\n            loc = lid.loc;\n          },\n          mod_type_to_typed mty )\n\nlet rec mod_expr_to_typed me : mod_term =\n  let ret =\n    match me.Syntax.me_desc with\n    | Syntax.MELongident lid -> Longident (Path.path_of_longident lid.txt)\n    | Syntax.MEFunctor (lid, mty, me1) ->\n        Functor\n          ( Ident.create (Longident.string_of_longident lid.txt),\n            mod_type_to_typed mty,\n            mod_expr_to_typed me1 )\n    | Syntax.MEApply (me1, me2) ->\n        Apply (mod_expr_to_typed me1, mod_expr_to_typed me2)\n    | Syntax.MEConstraint (me, mt) ->\n        Constraint (mod_expr_to_typed me, mod_type_to_typed mt)\n    | Syntax.MEStructure structure -> Structure (mod_structure structure)\n  in\n\n  {\n    mod_term_desc = ret;\n    loc = me.loc;\n    mod_term_type = unknown_mod_type ();\n    mod_term_env = Env.empty;\n  }\n\nand mod_structure defs =\n  List.map (fun def -> mod_def_to_typed def.Syntax.definition) defs\n\nand mod_def_to_typed def =\n  let ret =\n    match def with\n    | Syntax.Value_str (lid, expr) ->\n        Value_str\n          ( {\n              txt = Ident.create (Longident.string_of_shortident lid.txt);\n              loc = lid.loc;\n            },\n            expr_to_typed expr )\n    | Syntax.Type_str (lid, decl) ->\n        reset_type_variables ();\n        let manifest =\n          match decl.manifest with\n          | None -> failwith \"Type_str\"\n          | Some def ->\n              let params =\n                List.map\n                  (fun (x : string Parsing.Location.loc) ->\n                    find_type_variable x.txt)\n                  def.params\n              in\n              { params; defbody = map_simple_type def.defbody }\n        in\n        Type_str\n          ( Ident.create (Longident.string_of_longident lid.txt),\n            { arity = decl.kind },\n            manifest )\n    | Syntax.Module_str (lid, mt, me) ->\n        Module_str\n          ( {\n              txt = Ident.create (Longident.string_of_longident lid.txt);\n              loc = lid.loc;\n            },\n            match mt with\n            | None -> mod_expr_to_typed me\n            | Some mty ->\n                print_endline (Syntax.show_mod_type mty);\n                {\n                  mod_term_desc =\n                    Constraint (mod_expr_to_typed me, mod_type_to_typed mty);\n                  loc = Parsing.Location.dummy_loc;\n                  mod_term_type = unknown_mod_type ();\n                  mod_term_env = Env.empty;\n                } )\n  in\n  { definition_desc = ret; before_env = Env.empty; after_env = Env.empty }\n","let d_ref : Parsing.Parser_base.diagnostic list ref = ref []\nlet reset_d_ref () = d_ref := []\nlet add_d_ref d = d_ref := d :: !d_ref\n\nexception Typechecking_error of string\n\nlet error s = raise (Typechecking_error s)\n\nlet report_term s (t : Typed.term) =\n  add_d_ref { msg = s; start_pos = t.loc.loc_start; end_pos = t.loc.loc_end }\n","open Report\n\ntype t = {\n  values : (string * Ident.t) list;\n  types : (string * Ident.t) list;\n  modules : (string * Ident.t) list;\n}\n\nlet empty = { values = []; types = []; modules = [] }\n\nlet enter_value id sc =\n  {\n    values = (Ident.name id, id) :: sc.values;\n    types = sc.types;\n    modules = sc.modules;\n  }\n\nlet enter_type id sc =\n  {\n    types = (Ident.name id, id) :: sc.types;\n    values = sc.values;\n    modules = sc.modules;\n  }\n\nlet enter_module id sc =\n  {\n    modules = (Ident.name id, id) :: sc.modules;\n    values = sc.values;\n    types = sc.types;\n  }\n\nlet scope_value id sc =\n  try List.assoc (Ident.name id) sc.values\n  with Not_found -> error (\"unbound value \" ^ Ident.name id)\n\nlet scope_type id sc =\n  try List.assoc (Ident.name id) sc.types\n  with Not_found -> error (\"unbound type \" ^ Ident.name id)\n\nlet scope_module id sc =\n  try List.assoc (Ident.name id) sc.modules\n  with Not_found -> error (\"unbound module \" ^ Ident.name id)\n\nlet rec scope_path scope_ident path sc =\n  match path with\n  | Path.Pident id -> Path.Pident (scope_ident id sc)\n  | Pdot (root, field) -> Pdot (scope_path scope_module root sc, field)\n\nlet value_path = scope_path scope_value\nlet type_path = scope_path scope_type\nlet module_path = scope_path scope_module\n\nopen Types\nopen Typed\n\nlet rec scope_term sc term =\n  let newterm =\n    try\n      match term.term_desc with\n      | Constant n -> Constant n\n      | Longident path -> Longident (value_path path sc)\n      | Function (l, id, body) ->\n          Function (l, id, scope_term (enter_value id sc) body)\n      | Apply (t1, t2) ->\n          Apply\n            ( scope_term sc t1,\n              List.map (fun (l, tm) -> (l, scope_term sc tm)) t2 )\n      | Let (id, t1, t2) ->\n          Let (id, scope_term sc t1, scope_term (enter_value id.txt sc) t2)\n      | RecordEmpty -> RecordEmpty\n      | RecordExtend (l, e1, e2) ->\n          RecordExtend (l, scope_term sc e1, scope_term sc e2)\n      | RecordSelect (e, l) -> RecordSelect (scope_term sc e, l)\n      | Variant (tag, e) -> Variant (tag, scope_term sc e)\n      | Case (e, cases, pat) ->\n          Case\n            ( scope_term sc e,\n              List.map\n                (fun (tag, var, e) ->\n                  let new_sc = enter_value var.Asttypes.txt sc in\n                  (tag, var, scope_term new_sc e))\n                cases,\n              Option.map\n                (fun (var, e) ->\n                  (var, scope_term (enter_value var.Asttypes.txt sc) e))\n                pat )\n      | Jsxelement (t1, t2) ->\n          Jsxelement\n            ( scope_term sc t1,\n              List.map (fun (l, tm) -> (l, scope_term sc tm)) t2 )\n    with Typechecking_error s ->\n      print_endline s;\n      report_term s term;\n      term.term_desc\n  in\n  { term with term_desc = newterm }\n\nlet rec scope_simple_type sc = function\n  | Var v -> Var v\n  | Typeconstr (path, args) ->\n      Typeconstr (type_path path sc, List.map (scope_simple_type sc) args)\n  | Tarrow (l, t1, t2) ->\n      Tarrow (l, scope_simple_type sc t1, scope_simple_type sc t2)\n  | TRempty -> TRempty\n  | TRextend (s, ty1, ty2) ->\n      TRextend (s, scope_simple_type sc ty1, scope_simple_type sc ty2)\n  | Tvariant ty -> Tvariant (scope_simple_type sc ty)\n  | Trecord ty -> Trecord (scope_simple_type sc ty)\n\nlet scope_valtype sc vty =\n  { quantif = vty.quantif; body = scope_simple_type sc vty.body }\n\nlet scope_deftype sc def =\n  { params = def.params; defbody = scope_simple_type sc def.defbody }\n\nlet scope_kind sc kind = kind\n\nlet scope_typedecl sc decl =\n  {\n    kind = scope_kind sc decl.kind;\n    manifest =\n      (match decl.manifest with\n      | None -> None\n      | Some ty -> Some (scope_deftype sc ty));\n  }\n\nlet rec scope_modtype sc = function\n  | Signature sg -> Signature (scope_signature sc sg)\n  | Functor_type (id, arg, res) ->\n      Functor_type\n        (id, scope_modtype sc arg, scope_modtype (enter_module id sc) res)\n\nand scope_signature sc = function\n  | [] -> []\n  | Value_sig (id, vty) :: rem ->\n      Value_sig (id, scope_valtype sc vty)\n      :: scope_signature (enter_value id sc) rem\n  | Type_sig (id, decl) :: rem ->\n      Type_sig (id, scope_typedecl sc decl)\n      :: scope_signature (enter_type id sc) rem\n  | Module_sig (id, mty) :: rem ->\n      Module_sig (id, scope_modtype sc mty)\n      :: scope_signature (enter_module id.txt sc) rem\n\nlet rec scope_module sc mod_term =\n  let new_mod_term =\n    match mod_term.mod_term_desc with\n    | Longident path -> Longident (module_path path sc)\n    | Structure str -> Structure (scope_structure sc str)\n    | Functor (id, arg, body) ->\n        Functor\n          (id, scope_modtype sc arg, scope_module (enter_module id sc) body)\n    | Apply (m1, m2) -> Apply (scope_module sc m1, scope_module sc m2)\n    | Constraint (m, mty) -> Constraint (scope_module sc m, scope_modtype sc mty)\n  in\n  { mod_term with mod_term_desc = new_mod_term }\n\nand scope_structure sc str =\n  match str with\n  | [] -> []\n  | { definition_desc = Value_str (id, v); _ } :: rem ->\n      {\n        definition_desc = Value_str (id, scope_term sc v);\n        before_env = Env.empty;\n        after_env = Env.empty;\n      }\n      :: scope_structure (enter_value id.txt sc) rem\n  | { definition_desc = Type_str (id, kind, dty); _ } :: rem ->\n      {\n        definition_desc = Type_str (id, scope_kind sc kind, scope_deftype sc dty);\n        before_env = Env.empty;\n        after_env = Env.empty;\n      }\n      :: scope_structure (enter_type id sc) rem\n  | { definition_desc = Module_str (id, m); _ } :: rem ->\n      {\n        definition_desc = Module_str (id, scope_module sc m);\n        before_env = Env.empty;\n        after_env = Env.empty;\n      }\n      :: scope_structure (enter_module id.txt sc) rem\n","open Types\n\nlet arrow_type arg_label t1 t2 = Tarrow (arg_label, t1, t2)\nlet ident_int = Ident.create \"number\"\nlet path_int = Path.Pident ident_int\nlet int_type = Typeconstr (path_int, [])\nlet ident_string = Ident.create \"string\"\nlet path_string = Path.Pident ident_string\nlet string_type = Typeconstr (path_string, [])\nlet ident_star = Ident.create \"*\"\nlet path_star = Path.Pident ident_star\nlet ident_option = Ident.create \"option\"\nlet path_option = Path.Pident ident_option\nlet option_type ty = Typeconstr (path_option, [ ty ])\nlet ident_jsx_element = Ident.create \"jsx_element\"\nlet path_jsx_element = Path.Pident ident_jsx_element\nlet jsx_element_type = Typeconstr (path_jsx_element, [])\n\nlet init_scope_env () =\n  let init_scope = ref Scope.empty in\n  let init_env = ref Env.empty in\n\n  let enter_type id decl =\n    init_scope := Scope.enter_type id !init_scope;\n    init_env := Env.add_type id decl !init_env\n  in\n\n  let enter_val name ty =\n    let id = Ident.create name in\n    init_scope := Scope.enter_value id !init_scope;\n    init_env := Env.add_value id ty !init_env\n  in\n  let ident_bool = Ident.create \"bool\" in\n  let path_bool = Path.Pident ident_bool in\n  let bool_type = Types.Typeconstr (path_bool, []) in\n  (* enter_type ident_arrow\n     { MLMod.kind = { ML.arity = 2 }; MLMod.manifest = None }; *)\n  enter_type ident_star { kind = { arity = 2 }; manifest = None };\n  enter_type ident_int { kind = { arity = 0 }; manifest = None };\n  enter_type ident_string { kind = { arity = 0 }; manifest = None };\n  enter_type ident_bool { kind = { arity = 0 }; manifest = None };\n  enter_type ident_option { kind = { arity = 1 }; manifest = None };\n  enter_type ident_jsx_element { kind = { arity = 0 }; manifest = None };\n  enter_val \"false\" { quantif = []; body = bool_type };\n  enter_val \"true\" { quantif = []; body = bool_type };\n  List.iter\n    (fun name ->\n      enter_val name\n        {\n          quantif = [];\n          body =\n            Types.(\n              arrow_type Nolabel int_type\n                (arrow_type Nolabel int_type bool_type));\n        })\n    [ \"==\"; \"<>\"; \"<\"; \"<=\"; \">\"; \">=\" ];\n  List.iter\n    (fun name ->\n      enter_val name\n        {\n          quantif = [];\n          body =\n            Types.(\n              arrow_type Nolabel int_type (arrow_type Nolabel int_type int_type));\n        })\n    [ \"+\"; \"-\"; \"*\"; \"/\" ];\n  let alpha = Types.newvar () and beta = Types.newvar () in\n  let talpha = Types.Var alpha and tbeta = Types.Var beta in\n  enter_val \",\"\n    {\n      quantif = [ alpha; beta ];\n      body =\n        Types.(\n          arrow_type Nolabel talpha\n            (arrow_type Nolabel tbeta\n               (Typeconstr (path_star, [ talpha; tbeta ]))));\n    };\n  enter_val \"fst\"\n    {\n      quantif = [ alpha; beta ];\n      body =\n        Types.(\n          arrow_type Nolabel (Typeconstr (path_star, [ talpha; tbeta ])) talpha);\n    };\n  enter_val \"snd\"\n    {\n      quantif = [ alpha; beta ];\n      body =\n        Types.(\n          arrow_type Nolabel (Typeconstr (path_star, [ talpha; tbeta ])) tbeta);\n    };\n  enter_val \"conditional\"\n    {\n      quantif = [ alpha ];\n      body =\n        Types.(\n          arrow_type Nolabel bool_type\n            (arrow_type Nolabel talpha (arrow_type Nolabel talpha talpha)));\n    };\n\n  enter_val \"none\" { quantif = [ alpha ]; body = option_type talpha };\n  enter_val \"some\"\n    {\n      quantif = [ alpha ];\n      body = Types.(arrow_type Nolabel talpha (option_type talpha));\n    };\n\n  enter_val \"div\"\n    {\n      quantif = [ alpha ];\n      body =\n        Types.(arrow_type (Optional \"className\") string_type jsx_element_type);\n    };\n\n  (!init_scope, !init_env)\n","open Types\nopen Typed\nopen Predef\nopen Report\n\nlet rec subst_vars subst ty =\n  match typerepr ty with\n  | Var var as tyvar -> ( try List.assq var subst with Not_found -> tyvar)\n  | Typeconstr (p, tl) -> Typeconstr (p, List.map (subst_vars subst) tl)\n  | Tarrow (label, t1, t2) ->\n      Tarrow (label, subst_vars subst t1, subst_vars subst t2)\n  | Trecord row -> Trecord (subst_vars subst row)\n  | TRempty -> TRempty\n  | TRextend (label, t1, rest) ->\n      TRextend (label, subst_vars subst t1, subst_vars subst rest)\n  | Tvariant row -> Tvariant (subst_vars subst row)\n\nexception Cannot_expand\n\nlet expand_manifest env path (args : simple_type list) =\n  match Env.find_type path env with\n  | { manifest = None; _ } -> raise Cannot_expand\n  | { manifest = Some def; _ } ->\n      subst_vars\n        (List.combine def.params args)\n        (def.defbody : Types.simple_type)\n\nlet arg_label_match label1 label2 =\n  let open Parsing.Asttypes in\n  match (label1, label2) with\n  | Nolabel, Nolabel -> true\n  | (Labelled s1 | Optional s1), (Labelled s2 | Optional s2) -> s1 = s2\n  | _ -> false\n\nlet rec scrape_types env ty1 ty2 =\n  let repr1 = typerepr ty1 and repr2 = typerepr ty2 in\n  match (repr1, repr2) with\n  | Typeconstr (path1, args1), Typeconstr (path2, args2) -> (\n      if Path.path_equal path1 path2 then (repr1, repr2)\n      else\n        try scrape_types env (expand_manifest env path1 args1) repr2\n        with Cannot_expand -> (\n          try scrape_types env repr1 (expand_manifest env path2 args2)\n          with Cannot_expand -> (repr1, repr2)))\n  | Typeconstr (path, args), _ -> (\n      try scrape_types env (expand_manifest env path args) repr2\n      with Cannot_expand -> (repr1, repr2))\n  | _, Typeconstr (path, args) -> (\n      try scrape_types env repr1 (expand_manifest env path args)\n      with Cannot_expand -> (repr1, repr2))\n  | _, _ -> (repr1, repr2)\n\nlet rec occur_check var ty =\n  match typerepr ty with\n  | Var var' ->\n      if var == var' then raise (Typechecking_error \"cycle in unification\")\n  | Typeconstr (p, tl) -> List.iter (occur_check var) tl\n  | Tarrow (_, t1, t2) ->\n      occur_check var t1;\n      occur_check var t2\n  | Trecord row -> occur_check var row\n  | TRempty -> ()\n  | TRextend (_, ty1, rest) ->\n      occur_check var ty1;\n      occur_check var rest\n  | Tvariant row -> occur_check var row\n\nlet rec update_levels level_max ty =\n  match typerepr ty with\n  | Var v -> if v.level > level_max then v.level <- level_max\n  | Typeconstr (p, tl) -> List.iter (update_levels level_max) tl\n  | Tarrow (_, t1, t2) ->\n      update_levels level_max t1;\n      update_levels level_max t2\n  | Trecord row -> update_levels level_max row\n  | TRempty -> ()\n  | TRextend (_, ty1, rest) ->\n      update_levels level_max ty1;\n      update_levels level_max rest\n  | Tvariant row -> update_levels level_max row\n\nlet rec unify env t1 t2 =\n  match scrape_types env t1 t2 with\n  | r1, r2 when r1 == r2 -> ()\n  | Var v, r2 ->\n      occur_check v r2;\n      update_levels v.level r2;\n      v.repres <- Some r2\n  | r1, Var v ->\n      occur_check v r1;\n      update_levels v.level r1;\n      v.repres <- Some r1\n  | Typeconstr (path1, args1), Typeconstr (path2, args2) when path1 = path2 ->\n      List.iter2 (unify env) args1 args2\n  | Tarrow (arg_label1, t11, t12), Tarrow (arg_label2, t21, t22) ->\n      if not (arg_label_match arg_label1 arg_label2) then\n        raise\n          (Typechecking_error\n             (Printf.sprintf \"label1: %s, label2: %s\"\n                (Parsing.Asttypes.show_arg_label arg_label1)\n                (Parsing.Asttypes.show_arg_label arg_label2)));\n      unify env t11 t21;\n      unify env t12 t22\n  | Trecord row1, Trecord row2 -> unify env row1 row2\n  | Tvariant row1, Tvariant row2 -> unify env row1 row2\n  | TRextend (label1, t1, rest1), (TRextend _ as row2) ->\n      let rec rewrite_row row label1 t1 =\n        match row with\n        | TRextend (label2, t2, rest) when label1 = label2 ->\n            unify env t1 t2;\n            rest\n        | TRextend (label2, t2, rest) ->\n            TRextend (label2, t2, rewrite_row rest label1 t1)\n        | TRempty ->\n            error (Printf.sprintf \"unify: %s does not exsit on empty\" label1)\n        | Var { repres = Some row2; _ } -> rewrite_row row2 label1 t1\n        | Var ({ repres = None; level } as varref) ->\n            let var = newvar () in\n            var.level <- level;\n            let rest2 = Var var in\n            varref.repres <- Some (TRextend (label1, t1, rest2));\n            rest2\n        | _ -> error \"not a row\"\n      in\n      let rest2 = rewrite_row row2 label1 t1 in\n      unify env rest1 rest2\n  | TRempty, (TRextend (label, _, _) as r)\n  | (TRextend (label, _, _) as r), TRempty ->\n      print_endline (show_simple_type r);\n      error (Printf.sprintf \"unify: %s does not exsit on empty\" label)\n  | ty1, ty2 ->\n      error\n        (Printf.sprintf \"type constructor mismatch in unification: %s, %s\"\n           (show_simple_type ty1) (show_simple_type ty2))\n\nlet instance vty =\n  match vty.quantif with\n  | [] -> vty.body\n  | vars -> subst_vars (List.map (fun v -> (v, unknown ())) vars) vty.body\n\nlet rec flatten_arrow arrow =\n  match typerepr arrow with\n  | Tarrow (label, t1, t2) ->\n      let args, ret = flatten_arrow t2 in\n      ((label, t1) :: args, ret)\n  | t -> ([], t)\n\nlet rec row_remove_label row label =\n  match typerepr row with\n  | TRempty -> TRempty\n  | TRextend (label1, _, rest) when label = label1 -> rest\n  | TRextend (label1, t, rest) ->\n      TRextend (label1, t, row_remove_label rest label)\n  | Var { repres = None; _ } as var -> var\n  | _ ->\n      print_endline (show_simple_type row);\n      assert false\n\nlet rec infer_type env term : term =\n  let ty =\n    match term.term_desc with\n    | Constant n -> (\n        match n with Const_number -> int_type | Const_string -> string_type)\n    | Longident path -> instance (Env.find_value path env)\n    | Function (arg_label, param, body) ->\n        let type_param = unknown () in\n        print_endline (show_simple_type type_param);\n        let type_body =\n          infer_type\n            (Env.add_value param\n               (trivial_scheme\n                  (match arg_label with\n                  | Nolabel | Labelled _ -> type_param\n                  | Optional _ -> option_type type_param))\n               env)\n            body\n        in\n        arrow_type arg_label type_param type_body.term_type\n    | Apply (funct, args) -> (\n        let type_funct = infer_type env funct in\n        let args_tys, ret_ty = flatten_arrow type_funct.term_type in\n        match ret_ty with\n        | Var _ ->\n            let type_result = unknown () in\n            let type_f =\n              List.fold_right\n                (fun (label, arg) r_ty ->\n                  Tarrow (label, (infer_type env arg).term_type, r_ty))\n                args type_result\n            in\n            unify env type_funct.term_type type_f;\n            type_result\n        | _ ->\n            let n = List.length args_tys in\n            let sigma = Array.make (List.length args_tys) (-1) in\n            List.iteri\n              (fun pos (label1, expr) ->\n                let rec loop l i =\n                  match l with\n                  | [] -> error \"Unkonwn label\"\n                  | (label2, ty) :: rest ->\n                      if arg_label_match label1 label2 && sigma.(i) = -1 then (\n                        unify env ty (infer_type env expr).term_type;\n                        sigma.(i) <- pos)\n                      else loop rest (i + 1)\n                in\n                loop args_tys 0)\n              args;\n            let rec fill i pos =\n              if i < Array.length sigma then (\n                if sigma.(i) = -1 then sigma.(i) <- pos;\n                fill (i + 1) (pos + 1))\n            in\n            fill 0 (List.length args);\n            let sigma = Array.to_list sigma in\n            let k =\n              List.filteri\n                (fun i pos ->\n                  pos >= List.length args\n                  && List.exists\n                       (fun j ->\n                         j > i\n                         && fst (List.nth args_tys j) = Nolabel\n                         && List.nth sigma j < List.length args)\n                       (List.init n (fun x -> x)))\n                sigma\n              |> List.length\n            in\n            let extra =\n              List.filteri\n                (fun i _ -> List.nth sigma i >= List.length args)\n                args_tys\n            in\n            let rec erase ty k =\n              match (ty, k) with\n              | _, 0 -> ty\n              | (Parsing.Asttypes.Optional _, _) :: rest, k -> erase rest (k - 1)\n              | t :: rest, k -> t :: erase rest (k - 1)\n              | [], _ -> error \"erase\"\n            in\n            List.fold_right\n              (fun (label, t1) t2 -> Tarrow (label, t1, t2))\n              (erase extra k) ret_ty)\n    | Jsxelement (funct, args) -> (\n        let type_funct = infer_type env funct in\n        let args_tys, ret_ty = flatten_arrow type_funct.term_type in\n        match ret_ty with\n        | Var _ -> error \"Element type should be known\"\n        | _ ->\n            unify env ret_ty jsx_element_type;\n            let n = List.length args_tys in\n            let sigma = Array.make (List.length args_tys) (-1) in\n            List.iteri\n              (fun pos (label1, expr) ->\n                let rec loop l i =\n                  match l with\n                  | [] -> error \"Unkonwn label\"\n                  | (label2, ty) :: rest ->\n                      if arg_label_match label1 label2 && sigma.(i) = -1 then (\n                        unify env ty (infer_type env expr).term_type;\n                        sigma.(i) <- pos)\n                      else loop rest (i + 1)\n                in\n                loop args_tys 0)\n              args;\n            let rec fill i pos =\n              if i < Array.length sigma then (\n                if sigma.(i) = -1 then sigma.(i) <- pos;\n                fill (i + 1) (pos + 1))\n            in\n            fill 0 (List.length args);\n            let sigma = Array.to_list sigma in\n            let k =\n              List.filteri\n                (fun i pos ->\n                  pos >= List.length args\n                  && List.exists\n                       (fun j ->\n                         j > i\n                         && fst (List.nth args_tys j) = Nolabel\n                         && List.nth sigma j < List.length args)\n                       (List.init n (fun x -> x)))\n                sigma\n              |> List.length\n            in\n            let extra =\n              List.filteri\n                (fun i _ -> List.nth sigma i >= List.length args)\n                args_tys\n            in\n            let rec erase ty k =\n              match (ty, k) with\n              | _, 0 -> ty\n              | (Parsing.Asttypes.Optional _, _) :: rest, k -> erase rest (k - 1)\n              | t :: rest, k -> t :: erase rest (k - 1)\n              | [], _ -> error \"erase\"\n            in\n            let d = erase extra k in\n            List.iter\n              (fun (l, _) ->\n                match l with\n                | Asttypes.Optional _ -> ()\n                | Asttypes.Nolabel -> error \"Find a nolabel prop\"\n                | Asttypes.Labelled s -> error (s ^ \" is missing\"))\n              d;\n            ret_ty)\n    | Let (ident, arg, body) ->\n        begin_def ();\n        let type_arg = infer_type env arg in\n        end_def ();\n        (infer_type\n           (Env.add_value ident.txt (generalize type_arg.term_type) env)\n           body)\n          .term_type\n    | RecordEmpty -> Trecord TRempty\n    | RecordExtend (label, e1, e2) ->\n        let ty1 = (infer_type env e1).term_type in\n        let ty_e2 =\n          match (infer_type env e2).term_type with\n          | Trecord row -> Trecord (row_remove_label row label.txt)\n          | _ -> assert false\n        in\n        let rest = unknown () in\n        unify env (Trecord rest) ty_e2;\n        let ret = Trecord (TRextend (label.txt, ty1, rest)) in\n        ret\n    | RecordSelect (e, label) ->\n        let field_ty = unknown () in\n        let e_ty = Trecord (TRextend (label.txt, field_ty, unknown ())) in\n        unify env e_ty (infer_type env e).term_type;\n        field_ty\n    | Variant (tag, e) ->\n        let field_ty = infer_type env e in\n        Tvariant (TRextend (tag, field_ty.term_type, unknown ()))\n    | Case (e, cases, pat) ->\n        let ret = unknown () in\n        let var_tys = List.map (fun _ -> unknown ()) cases in\n        let rest_row = unknown () in\n        List.iter2\n          (fun (_, var, e) vat_ty ->\n            let new_env =\n              Env.add_value var.Asttypes.txt (trivial_scheme vat_ty) env\n            in\n            let e_ty = infer_type new_env e in\n            unify env e_ty.term_type ret)\n          cases var_tys;\n        (match pat with\n        | None -> unify env rest_row TRempty\n        | Some (var, e) ->\n            let new_env =\n              Env.add_value var.txt (trivial_scheme (Tvariant rest_row)) env\n            in\n            let e_ty = infer_type new_env e in\n            unify env e_ty.term_type ret);\n        let variant_ty =\n          Tvariant\n            (List.fold_right2\n               (fun (tag, _, _) var_ty ty ->\n                 TRextend (tag, var_ty, row_remove_label ty tag))\n               cases var_tys rest_row)\n        in\n        unify env variant_ty (infer_type env e).term_type;\n        ret\n  in\n  term.term_type <- ty;\n  term.term_env <- env;\n  term\n\nlet rec check_simple_type env params ty =\n  match typerepr ty with\n  | Var v -> if not (List.memq v params) then error \"free type variable\"\n  | Typeconstr (path, tl) ->\n      let arity = (Env.find_type path env).kind.arity in\n      if List.length tl <> arity then error \"arity error\";\n      List.iter (check_simple_type env params) tl\n  | Tarrow (_, t1, t2) ->\n      check_simple_type env params t1;\n      check_simple_type env params t2\n\nlet kind_deftype env def =\n  print_endline (String.concat \", \" (List.map show_type_variable def.params));\n  check_simple_type env def.params def.defbody;\n  { arity = List.length def.params }\n\nlet check_valtype env vty = check_simple_type env vty.quantif vty.body\nlet check_kind env kind = ()\n\nlet type_term env term =\n  begin_def ();\n  let ty =\n    try infer_type env term with\n    | Typechecking_error s ->\n        add_d_ref\n          {\n            msg = s;\n            start_pos = term.loc.loc_start;\n            end_pos = term.loc.loc_end;\n          };\n        term\n    | _ ->\n        add_d_ref\n          {\n            msg = \"Type error\";\n            start_pos = term.loc.loc_start;\n            end_pos = term.loc.loc_end;\n          };\n        term\n  in\n  end_def ();\n  let ret = generalize ty.term_type in\n  ret\n\nlet valtype_match env vty1 vty2 =\n  (* TODO *)\n  try\n    unify env (instance vty1) (instance vty2);\n    true\n  with _ -> false\n\nlet deftype_equiv env kind def1 def2 =\n  let rec equiv ty1 ty2 =\n    match scrape_types env ty1 ty2 with\n    | Var v1, Var v2 -> v1 == v2\n    | Typeconstr (path1, args1), Typeconstr (path2, args2) ->\n        path1 = path2 && List.for_all2 equiv args1 args2\n    | _, _ -> false\n  in\n  let subst = List.map2 (fun v1 v2 -> (v2, Var v1)) def1.params def2.params in\n  equiv def1.defbody (subst_vars subst def2.defbody)\n\nlet kind_match env kind1 kind2 = kind1.arity = kind2.arity\n\nlet deftype_of_path path kind =\n  let rec make_params n =\n    if n <= 0 then [] else newvar () :: make_params (n - 1)\n  in\n  let params = make_params kind.arity in\n  { params; defbody = Typeconstr (path, List.map (fun v -> Var v) params) }\n\nlet rec modtype_match env mty1 mty2 =\n  match (mty1, mty2) with\n  | Signature sig1, Signature sig2 ->\n      let paired_components, subst = pair_signature_components sig1 sig2 in\n      let ext_env = Env.add_signature sig1 env in\n      List.iter (specification_match ext_env subst) paired_components\n  | Functor_type (param1, arg1, res1), Functor_type (param2, arg2, res2) ->\n      let subst = Subst.add param1 (Path.Pident param2) Subst.identity in\n      let res1' = Subst.subst_modtype res1 subst in\n      modtype_match env arg2 arg1;\n      modtype_match (Env.add_module param2 arg2 env) res1' res2\n  | _, _ -> error \"module type mismatch\"\n\nand pair_signature_components sig1 sig2 =\n  match sig2 with\n  | [] -> ([], Subst.identity)\n  | item2 :: rem2 ->\n      let rec find_matching_component = function\n        | [] -> error \"unmatched signature component\"\n        | item1 :: rem1 -> (\n            match (item1, item2) with\n            | Value_sig (id1, _), Value_sig (id2, _)\n              when Ident.name id1 = Ident.name id2 ->\n                (id1, id2, item1)\n            | Type_sig (id1, _), Type_sig (id2, _)\n              when Ident.name id1 = Ident.name id2 ->\n                (id1, id2, item1)\n            | Module_sig (id1, _), Module_sig (id2, _)\n              when Ident.name id1.txt = Ident.name id2.txt ->\n                (id1.txt, id2.txt, item1)\n            | _ -> find_matching_component rem1)\n      in\n      let id1, id2, item1 = find_matching_component sig1 in\n      let pairs, subst = pair_signature_components sig1 rem2 in\n      ((item1, item2) :: pairs, Subst.add id2 (Path.Pident id1) subst)\n\nand specification_match env subst = function\n  | Value_sig (_, vty1), Value_sig (_, vty2) ->\n      if not (valtype_match env vty1 (Subst.subst_valtype vty2 subst)) then\n        error \"value components do not match\"\n  | Type_sig (id, decl1), Type_sig (_, decl2) ->\n      if not (typedecl_match env id decl1 (Subst.subst_typedecl decl2 subst))\n      then error \"type components do not match\"\n  | Module_sig (_, mty1), Module_sig (_, mty2) ->\n      modtype_match env mty1 (Subst.subst_modtype mty2 subst)\n\nand typedecl_match env id decl1 decl2 =\n  kind_match env decl1.kind decl2.kind\n  &&\n  match (decl1.manifest, decl2.manifest) with\n  | _, None -> true\n  | Some typ1, Some typ2 -> deftype_equiv env decl2.kind typ1 typ2\n  | None, Some typ2 ->\n      deftype_equiv env decl2.kind (deftype_of_path (Pident id) decl1.kind) typ2\n\nlet rec strengthen_modtype path mty =\n  match mty with\n  | Signature sg -> Signature (List.map (strengthen_spec path) sg)\n  | Functor_type (_, _, _) -> mty\n\nand strengthen_spec path item =\n  match item with\n  | Value_sig (id, vty) -> item\n  | Type_sig (id, decl) ->\n      let m =\n        match decl.manifest with\n        | None -> Some (deftype_of_path (Pdot (path, Ident.name id)) decl.kind)\n        | Some ty -> Some ty\n      in\n      Type_sig (id, { kind = decl.kind; manifest = m })\n  | Module_sig (id, mty) ->\n      Module_sig (id, strengthen_modtype (Pdot (path, Ident.name id.txt)) mty)\n\nlet rec check_modtype env = function\n  | Signature sg -> check_signature env [] sg\n  | Functor_type (param, arg, res) ->\n      check_modtype env arg;\n      check_modtype (Env.add_module param arg env) res\n\nand check_signature env seen = function\n  | [] -> ()\n  | Value_sig (id, vty) :: rem ->\n      if List.mem (Ident.name id) seen then error \"repeated value name\";\n      check_valtype env vty;\n      check_signature env (Ident.name id :: seen) rem\n  | Type_sig (id, decl) :: rem ->\n      if List.mem (Ident.name id) seen then error \"repeated type name\";\n      check_kind env decl.kind;\n      (match decl.manifest with\n      | None -> ()\n      | Some typ ->\n          if not (kind_match env (kind_deftype env typ) decl.kind) then\n            error \"kind mismatch in manifest type specification\");\n      check_signature (Env.add_type id decl env) (Ident.name id :: seen) rem\n  | Module_sig (id, mty) :: rem ->\n      if List.mem (Ident.name id.txt) seen then error \"repeated module name\";\n      check_modtype env mty;\n      check_signature (Env.add_module id.txt mty env) (Ident.name id.txt :: seen) rem\n\nlet rec type_module env mod_term : mod_term =\n  let ret =\n    match mod_term.mod_term_desc with\n    | Longident path -> strengthen_modtype path (Env.find_module path env)\n    | Structure str -> Signature (type_structure env [] str)\n    | Functor (param, mty, body) ->\n        check_modtype env mty;\n        Functor_type\n          ( param,\n            mty,\n            (type_module (Env.add_module param mty env) body).mod_term_type )\n    | Apply (funct, arg) -> (\n        match (type_module env funct).mod_term_type with\n        | Functor_type (param, mty_param, mty_res) ->\n            let mty_arg = (type_module env arg).mod_term_type in\n            modtype_match env mty_arg mty_param;\n            let path =\n              match arg.mod_term_desc with\n              | Longident path -> path\n              | _ -> error \"application of a functor to a non-path\"\n            in\n            Subst.subst_modtype mty_res (Subst.add param path Subst.identity)\n        | _ -> error \"application of a non-functor\")\n    | Apply (funct, arg) -> error \"application of a functor to a non-path\"\n    | Constraint (modl, mty) ->\n        check_modtype env mty;\n        modtype_match env (type_module env modl).mod_term_type mty;\n        mty\n  in\n  { mod_term with mod_term_type = ret; mod_term_env = env }\n\nand type_structure env seen = function\n  | [] -> []\n  | stritem :: rem ->\n      stritem.before_env <- env;\n      let sigitem, seen' = type_definition env seen stritem.definition_desc in\n      let new_env = Env.add_spec sigitem env in\n      stritem.after_env <- new_env;\n      sigitem :: type_structure new_env seen' rem\n\nand type_definition env seen = function\n  | Value_str (id, term) ->\n      if List.mem (Ident.name id.txt) seen then error \"repeated value name\";\n      (Value_sig (id.txt, type_term env term), Ident.name id.txt :: seen)\n  | Module_str (id, modl) ->\n      if List.mem (Ident.name id.txt) seen then error \"repeated module name\";\n      let mty = (type_module env modl).mod_term_type in\n      modl.mod_term_type <- mty;\n      (Module_sig (id, mty), Ident.name id.txt :: seen)\n  | Type_str (id, kind, typ) ->\n      if List.mem (Ident.name id) seen then error \"repeated type name\";\n      check_kind env kind;\n      if not (kind_match env (kind_deftype env typ) kind) then\n        error \"kind mismatch in type definition\";\n      (Type_sig (id, { kind; manifest = Some typ }), Ident.name id :: seen)\n","open Js_of_ocaml\nopen Parsing\nopen Typing\n\ntype loc = {\n  start : int * int;\n  _end : int * int; [@key \"end\"]\n  _type : string; [@key \"type\"]\n}\n[@@deriving yojson, show { with_path = false }]\n\ntype loc_list = loc list [@@deriving yojson, show { with_path = false }]\n\ntype diag = { start : int * int; _end : int * int; [@key \"end\"] msg : string }\n[@@deriving yojson, show { with_path = false }]\n\ntype diag_list = diag list [@@deriving yojson, show { with_path = false }]\n\ntype docdata = {\n  tokens : loc_list;\n  formatted : string;\n  diagnostics : diag list;\n  mod_term : Typing.Typed.mod_term;\n}\n[@@deriving show { with_path = false }]\n\nlet js_log s = Firebug.console##log (Js.string s)\n\nlet in_range (l, c) ((l1, c1), (l2, c2)) =\n  (l1 < l && l2 > l)\n  || (l1 <> l2 && l1 = l && c1 <= c)\n  || (l1 <> l2 && l2 = l && c2 > c)\n  || (l1 = l2 && l1 = l && c1 <= c && c2 > c)\n\nlet pos_of_position (s : Location.position) =\n  (s.pos_lnum - 1, s.pos_cnum - s.pos_bol)\n\nlet make_diag (d : Parser_base.diagnostic) =\n  {\n    start = pos_of_position d.start_pos;\n    _end = pos_of_position d.end_pos;\n    msg = d.msg;\n  }\n\nlet tokeinfo src =\n  let scanner = Lexer.make \"file\" src in\n  let rec loop () =\n    let s, e, tok = Lexer.scan scanner in\n    if tok = Token.EOF then [] else (s, e, tok) :: loop ()\n  in\n  let tok_list = loop () in\n  let locs =\n    List.map\n      Location.(\n        fun (s, e, tok) ->\n          {\n            start = (s.pos_lnum - 1, s.pos_cnum - s.pos_bol);\n            _end = (e.pos_lnum - 1, e.pos_cnum - e.pos_bol);\n            _type =\n              Token.(\n                match tok with\n                | UIDENT _ | LIDENT _ -> \"variable\"\n                | NUMBER _ -> \"number\"\n                | STRING _ -> \"string\"\n                | tok when List.mem tok (List.map snd Token.keywords) ->\n                    \"keyword\"\n                | _ -> \"unknown\");\n          })\n      tok_list\n  in\n  List.filter (fun { _type; _ } -> _type <> \"unknown\") locs\n\nlet files = Hashtbl.create 1\n\nlet filechange (uri : string) src =\n  js_log \"filechange\";\n  js_log uri;\n  js_log src;\n  let toks = tokeinfo src in\n  js_log \"tokeinfo done\";\n  let p = Parser_base.make \"file\" src in\n  let mod_expr = Parser.parse p in\n  js_log \"parse done\";\n  let init_scope, init_env = Predef.init_scope_env () in\n  Report.reset_d_ref ();\n  let m =\n    Typed.mod_expr_to_typed mod_expr\n    |> Typing.Scope.scope_module init_scope\n    |> Infer.type_module init_env\n  in\n  js_log \"type done\";\n  js_log (string_of_int (List.length p.diagnostics));\n  let ret =\n    if List.length p.diagnostics = 0 then\n      {\n        tokens = toks;\n        formatted =\n          (match mod_expr.me_desc with\n          | MEStructure defs -> Syntax.print_definition_list defs\n          | _ -> assert false);\n        diagnostics = List.map make_diag !Report.d_ref;\n        mod_term = m;\n      }\n    else\n      {\n        tokens = toks;\n        formatted = src;\n        diagnostics = List.map make_diag (p.diagnostics @ !Report.d_ref);\n        mod_term = m;\n      }\n  in\n  js_log uri;\n  js_log (show_docdata ret);\n  Hashtbl.add files uri ret;\n  ret.diagnostics |> diag_list_to_yojson |> Yojson.Safe.to_string\n\nlet in_loc_range pos loc =\n  in_range pos\n    ( pos_of_position loc.Location.loc_start,\n      pos_of_position loc.Location.loc_end )\n\nlet in_mod_term_range pos mod_term =\n  in_range pos\n    ( pos_of_position mod_term.Typed.loc.loc_start,\n      pos_of_position mod_term.Typed.loc.loc_end )\n\nlet in_term_range pos (term : Typed.term) =\n  in_range pos\n    ( pos_of_position term.Typed.loc.loc_start,\n      pos_of_position term.Typed.loc.loc_end )\n\nlet type_info uri pos =\n  let mod_term = (Hashtbl.find files uri).mod_term in\n  let rec loop_mod_term mod_term =\n    let str = \"\" in\n    match mod_term.Typed.mod_term_desc with\n    | Typed.Apply (m1, m2) ->\n        if in_mod_term_range pos m1 then loop_mod_term m1\n        else if in_mod_term_range pos m2 then loop_mod_term m2\n        else str\n    | Typed.Functor (_, _, m1) ->\n        if in_mod_term_range pos m1 then loop_mod_term m1 else str\n    | Typed.Structure structure ->\n        List.fold_left\n          (fun acc def ->\n            match def.Typed.definition_desc with\n            | Typed.Value_str (id, term) ->\n                if in_loc_range pos id.loc then\n                  Env.find_value (Path.Pident id.txt) def.after_env\n                  |> Types.print_val_type []\n                else if in_term_range pos term then loop_term pos term\n                else acc\n            | Typed.Module_str (id, m) ->\n                if in_loc_range pos id.loc then\n                  Types.print_mod_type m.mod_term_type\n                else if in_mod_term_range pos m then loop_mod_term m\n                else acc\n            | _ -> acc)\n          str structure\n    | _ -> str\n  and loop_term pos term =\n    let str = Types.print_val_type [] (Types.trivial_scheme term.term_type) in\n    match (term : Typed.term).term_desc with\n    | Apply (tm, tml) ->\n        if in_term_range pos tm then loop_term pos tm\n        else loop_term_list pos str (List.map snd tml)\n    | Function (_, _, tm) ->\n        if in_term_range pos tm then loop_term pos tm else str\n    | Let (id, tm1, tm2) ->\n        js_log (Location.show id.loc);\n        if in_loc_range pos id.loc then\n          Env.find_value (Path.Pident id.txt) tm2.term_env\n          |> Types.print_val_type []\n        else loop_term_list pos str [ tm1; tm2 ]\n    | RecordExtend (_, tm1, tm2) -> loop_term_list pos str [ tm1; tm2 ]\n    | _ -> str\n  and loop_term_list pos str tml =\n    List.fold_left\n      (fun acc tm -> if in_term_range pos tm then loop_term pos tm else acc)\n      str tml\n  in\n  loop_mod_term mod_term\n\nlet tokeinfo uri =\n  (Hashtbl.find files uri).tokens |> loc_list_to_yojson |> Yojson.Safe.to_string\n\nlet _ =\n  Js.export_all\n    (object%js\n       method tokeninfo uri = tokeinfo uri\n       method format uri = (Hashtbl.find files uri).formatted\n       method typeinfo uri l c = type_info uri (l, c)\n       method filechange uri src = filechange uri src\n    end)\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Ensure that [at_exit] functions are called at the end of every program *)\n\nlet _ = do_at_exit()\n","import {\n\tBrowserMessageReader, BrowserMessageWriter,\n\tCompletionItem,\n\tCompletionItemKind,\n\tDidChangeConfigurationNotification,\n\tDocumentDiagnosticReportKind,\n\tInitializeParams,\n\tInitializeResult,\n\tSemanticTokenModifiers,\n\tSemanticTokenTypes,\n\tTextDocumentPositionParams,\n\tTextDocumentSyncKind,\n\tTextDocuments,\n\tcreateConnection\n} from 'vscode-languageserver/browser';\n\nimport {\n\tTextDocument\n} from 'vscode-languageserver-textdocument';\nimport * as lib from '../../_build/default/jslib/main.bc.js';\nconst messageReader = new BrowserMessageReader(self);\nconst messageWriter = new BrowserMessageWriter(self);\nconst connection = createConnection(messageReader, messageWriter);\n\nconst documents: TextDocuments<TextDocument> = new TextDocuments(TextDocument);\n\nlet hasConfigurationCapability = false;\nlet hasWorkspaceFolderCapability = false;\nlet hasDiagnosticRelatedInformationCapability = false;\n\nconst tokenTypes = [SemanticTokenTypes.function, SemanticTokenTypes.variable, SemanticTokenTypes.keyword, SemanticTokenTypes.number];\nconst tokenModifiers = [SemanticTokenModifiers.definition];\n\nconnection.onInitialize((params: InitializeParams) => {\n\tconsole.log('onInitialize', params)\n\tconst capabilities = params.capabilities;\n\n\t// Does the client support the `workspace/configuration` request?\n\t// If not, we fall back using global settings.\n\thasConfigurationCapability = !!(\n\t\tcapabilities.workspace && !!capabilities.workspace.configuration\n\t);\n\thasWorkspaceFolderCapability = !!(\n\t\tcapabilities.workspace && !!capabilities.workspace.workspaceFolders\n\t);\n\thasDiagnosticRelatedInformationCapability = !!(\n\t\tcapabilities.textDocument &&\n\t\tcapabilities.textDocument.publishDiagnostics &&\n\t\tcapabilities.textDocument.publishDiagnostics.relatedInformation\n\t);\n\n\t// const legend = new vscode.SemanticTokensLegend(tokenTypes, tokenModifiers);\n\tconst result: InitializeResult = {\n\t\tcapabilities: {\n\t\t\ttextDocumentSync: TextDocumentSyncKind.Incremental,\n\t\t\t// Tell the client that this server supports code completion.\n\t\t\tcompletionProvider: {\n\t\t\t\tresolveProvider: true\n\t\t\t},\n\t\t\tdiagnosticProvider: {\n\t\t\t\tinterFileDependencies: false,\n\t\t\t\tworkspaceDiagnostics: false\n\t\t\t},\n\t\t\tsemanticTokensProvider: {\n\t\t\t\tlegend: { tokenTypes, tokenModifiers },\n\t\t\t\tdocumentSelector: [{ language: 'mod' }],\n\t\t\t\tfull: true,\n\t\t\t},\n\t\t\thoverProvider: true,\n\t\t\tdocumentFormattingProvider: true\n\t\t}\n\t};\n\tif (hasWorkspaceFolderCapability) {\n\t\tresult.capabilities.workspace = {\n\t\t\tworkspaceFolders: {\n\t\t\t\tsupported: true\n\t\t\t}\n\t\t};\n\t}\n\treturn result;\n});\n\n\nconnection.onInitialized(() => {\n\tconsole.log('onInitialized')\n\tif (hasConfigurationCapability) {\n\t\t// Register for all configuration changes.\n\t\tconnection.client.register(DidChangeConfigurationNotification.type, undefined);\n\t}\n\tif (hasWorkspaceFolderCapability) {\n\t\tconnection.workspace.onDidChangeWorkspaceFolders(_event => {\n\t\t\tconnection.console.log('Workspace folder change event received.');\n\t\t});\n\t}\n});\n\n\n// The example settings\ninterface ExampleSettings {\n\tmaxNumberOfProblems: number;\n}\n\n// The global settings, used when the `workspace/configuration` request is not supported by the client.\n// Please note that this is not the case when using this server with the client provided in this example\n// but could happen with other clients.\nconst defaultSettings: ExampleSettings = { maxNumberOfProblems: 1000 };\nlet globalSettings: ExampleSettings = defaultSettings;\n\n// Cache the settings of all open documents\nconst documentSettings: Map<string, Thenable<ExampleSettings>> = new Map();\n\nconnection.languages.semanticTokens.on(async ({ textDocument }) => {\n\tconst doc = documents.get(textDocument.uri)\n\tconst text = doc.getText()\n\n\tlet t: { start: [number, number], end: [number, number]; type: string }[] = []\n\ttry {\n\t\tt = JSON.parse(lib.tokeninfo(textDocument.uri))\n\t} catch (e) {\n\t\tconsole.log(e)\n\t}\n\tconst data = t.map((e, i) => {\n\t\tconst len = doc.offsetAt({ line: e.end[0], character: e.end[1] })\n\t\t\t- doc.offsetAt({ line: e.start[0], character: e.start[1] })\n\t\tconst type = tokenTypes.findIndex(t => t === e.type)\n\t\tif (i === 0) return [e.start[0], e.start[1], len, type, 0]\n\t\telse {\n\t\t\tconst prev = t[i - 1]\n\t\t\tlet deltaLine = e.start[0] - prev.start[0]\n\t\t\tlet deltaChar = e.start[1]\n\t\t\tif (e.start[0] === prev.start[0]) deltaChar = deltaChar - prev.start[1]\n\t\t\treturn [deltaLine, deltaChar, len, type, 0]\n\t\t}\n\t})\n\treturn {\n\t\tdata: data.flat()\n\t}\n})\n// Only keep settings for open documents\ndocuments.onDidClose(e => {\n\tconsole.log('onDidClose', e)\n\tdocumentSettings.delete(e.document.uri);\n});\n\nconnection.onHover(async ({ textDocument, position }) => {\n\tconst text = documents.get(textDocument.uri).getText()\n\tconsole.log(text, position)\n\tconst ty: string = lib.typeinfo(textDocument.uri, position.line, position.character)\n\tconsole.log(ty)\n\treturn {\n\n\t\t'contents': ty\n\t}\n})\n\n\nconnection.languages.diagnostics.on(async (params) => {\n\treturn {\n\t\tkind: DocumentDiagnosticReportKind.Full,\n\t\titems: []\n\t};\n\n});\n\ntype Pos = [number, number]\ntype DocData = {\n\t[K in string]: {\n\t\ttokens: { start: Pos; end: Pos; type: string }[],\n\t\tformatted: string,\n\t\tdiagnostics: { start: Pos, end: Pos, msg: string }[]\n\t}\n}\n\nconst docData: DocData = {}\n// The content of a text document has changed. This event is emitted\n// when the text document first opened or when its content has changed.\ndocuments.onDidChangeContent(change => {\n\tconsole.log('onDidChangeContent')\n\tconst doc = change.document\n\tconsole.log(doc.uri)\n\ttry {\n\t\tconst diagjson = lib.filechange(doc.uri, doc.getText())\n\t\tconst diag: DocData[string]['diagnostics'] = JSON.parse(diagjson)\n\t\tconnection.sendDiagnostics({\n\t\t\turi: doc.uri,\n\t\t\tdiagnostics: diag.filter(d => d.msg).map(d => {\n\t\t\t\treturn {\n\t\t\t\t\t'message': d.msg,\n\t\t\t\t\trange: {\n\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\tline: d.start[0],\n\t\t\t\t\t\t\tcharacter: d.start[1]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\tline: d.end[0],\n\t\t\t\t\t\t\tcharacter: d.end[1]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t} catch {\n\n\t}\n\t// connection.sendDiagnostics({\n\t// \t'diagnostics'\n\t// })\n\n});\n\n\nconnection.onDocumentFormatting(async ({ textDocument }) => {\n\tconst doc = documents.get(textDocument.uri)\n\tconst text = doc.getText()\n\tconst newText = lib.format(textDocument.uri)\n\treturn [{\n\t\trange: {\n\t\t\tstart: doc.positionAt(0),\n\t\t\tend: doc.positionAt(text.length)\n\t\t},\n\t\tnewText\n\t}]\n})\n\n\n\nconnection.onDidChangeWatchedFiles(_change => {\n\t// Monitored files have change in VSCode\n\tconnection.console.log('We received a file change event');\n});\n\nconnection.onDocumentHighlight\n// This handler provides the initial list of the completion items.\nconnection.onCompletion(\n\t(_textDocumentPosition: TextDocumentPositionParams): CompletionItem[] => {\n\t\t// The pass parameter contains the position of the text document in\n\t\t// which code complete got requested. For the example we ignore this\n\t\t// info and always provide the same completion items.\n\t\tconsole.log('onCompletion')\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: 'TypeScript',\n\t\t\t\tkind: CompletionItemKind.Text,\n\t\t\t\tdata: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'JavaScript',\n\t\t\t\tkind: CompletionItemKind.Text,\n\t\t\t\tdata: 2\n\t\t\t}\n\t\t];\n\t}\n);\n\n// This handler resolves additional information for the item selected in\n// the completion list.\nconnection.onCompletionResolve(\n\t(item: CompletionItem): CompletionItem => {\n\t\tconsole.log('onCompletionResolve', item)\n\t\tif (item.data === 1) {\n\t\t\titem.detail = 'TypeScript details';\n\t\t\titem.documentation = 'TypeScript documentation';\n\t\t} else if (item.data === 2) {\n\t\t\titem.detail = 'JavaScript details';\n\t\t\titem.documentation = 'JavaScript documentation';\n\t\t}\n\t\treturn item;\n\t}\n);\n\n// Make the text document manager listen on the connection\n// for open, change and close text document events\ndocuments.listen(connection);\n\n// Listen on the connection\nconnection.listen();\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (let change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        let candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        let candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            let startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        let ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        let ch = text.charCodeAt(i);\n        if (ch === 13 /* CharCode.CarriageReturn */ || ch === 10 /* CharCode.LineFeed */) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n"],"mappings":"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","names":["exports","exports","ErrorCodes","Message","exports","Touch","exports","Disposable","exports","RAL","exports","Event","exports","Is","CancellationToken","exports","CancellationState","exports","exports","Is","MessageReader","ResolvedMessageReaderOptions","exports","Is","MessageWriter","ResolvedMessageWriterOptions","exports","result","exports","Is","CancelNotification","ProgressToken","ProgressNotification","StarRequestHandler","Trace","TraceValues","TraceFormat","SetTraceNotification","LogTraceNotification","ConnectionErrors","ConnectionStrategy","IdCancellationReceiverStrategy","RequestCancellationReceiverStrategy","CancellationReceiverStrategy","CancellationSenderStrategy","CancellationStrategy","MessageStrategy","ConnectionOptions","ConnectionState","messageReader","messageWriter","startTime","connection","exports","exports","RIL","exports","BrowserMessageReader","BrowserMessageWriter","exports","module","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","TextDocument","document","mergeSort","Is","undefined","require_messages","exports","MessageDirection","require_is","exports","exports","ImplementationRequest","exports","TypeDefinitionRequest","exports","WorkspaceFoldersRequest","DidChangeWorkspaceFoldersNotification","exports","ConfigurationRequest","exports","DocumentColorRequest","ColorPresentationRequest","exports","FoldingRangeRequest","FoldingRangeRefreshRequest","exports","DeclarationRequest","exports","SelectionRangeRequest","exports","WorkDoneProgress","WorkDoneProgressCreateRequest","WorkDoneProgressCancelNotification","exports","CallHierarchyPrepareRequest","CallHierarchyIncomingCallsRequest","CallHierarchyOutgoingCallsRequest","exports","TokenFormat","SemanticTokensRegistrationType","SemanticTokensRequest","SemanticTokensDeltaRequest","SemanticTokensRangeRequest","SemanticTokensRefreshRequest","exports","ShowDocumentRequest","exports","LinkedEditingRangeRequest","exports","FileOperationPatternKind","WillCreateFilesRequest","DidCreateFilesNotification","WillRenameFilesRequest","DidRenameFilesNotification","DidDeleteFilesNotification","WillDeleteFilesRequest","exports","UniquenessLevel","MonikerKind","MonikerRequest","exports","TypeHierarchyPrepareRequest","TypeHierarchySupertypesRequest","TypeHierarchySubtypesRequest","exports","InlineValueRequest","InlineValueRefreshRequest","exports","InlayHintRequest","InlayHintResolveRequest","InlayHintRefreshRequest","exports","Is","DiagnosticServerCancellationData","DocumentDiagnosticReportKind","DocumentDiagnosticRequest","WorkspaceDiagnosticRequest","DiagnosticRefreshRequest","exports","Is","NotebookCellKind","ExecutionSummary","NotebookCell","document","NotebookDocument","NotebookDocumentSyncRegistrationType","DidOpenNotebookDocumentNotification","NotebookCellArrayChange","DidChangeNotebookDocumentNotification","DidSaveNotebookDocumentNotification","DidCloseNotebookDocumentNotification","exports","InlineCompletionRequest","exports","Is","TextDocumentFilter","NotebookDocumentFilter","NotebookCellTextDocumentFilter","DocumentSelector","RegistrationRequest","UnregistrationRequest","ResourceOperationKind","FailureHandlingKind","PositionEncodingKind","StaticRegistrationOptions","TextDocumentRegistrationOptions","WorkDoneProgressOptions","InitializeRequest","InitializeErrorCodes","InitializedNotification","ShutdownRequest","ExitNotification","DidChangeConfigurationNotification","MessageType","ShowMessageNotification","ShowMessageRequest","LogMessageNotification","TelemetryEventNotification","TextDocumentSyncKind","DidOpenTextDocumentNotification","TextDocumentContentChangeEvent","DidChangeTextDocumentNotification","DidCloseTextDocumentNotification","DidSaveTextDocumentNotification","TextDocumentSaveReason","WillSaveTextDocumentNotification","WillSaveTextDocumentWaitUntilRequest","DidChangeWatchedFilesNotification","FileChangeType","RelativePattern","WatchKind","PublishDiagnosticsNotification","CompletionTriggerKind","CompletionRequest","CompletionResolveRequest","HoverRequest","SignatureHelpTriggerKind","SignatureHelpRequest","DefinitionRequest","ReferencesRequest","DocumentHighlightRequest","DocumentSymbolRequest","CodeActionRequest","CodeActionResolveRequest","WorkspaceSymbolRequest","WorkspaceSymbolResolveRequest","CodeLensRequest","CodeLensResolveRequest","CodeLensRefreshRequest","DocumentLinkRequest","DocumentLinkResolveRequest","DocumentFormattingRequest","DocumentRangeFormattingRequest","DocumentRangesFormattingRequest","DocumentOnTypeFormattingRequest","PrepareSupportDefaultBehavior","RenameRequest","PrepareRenameRequest","ExecuteCommandRequest","ApplyWorkspaceEditRequest","require_connection","exports","require_api","exports","LSPErrorCodes","require_main","exports","exports","tokenModifiers","exports","exports","TextDocuments","connection","document","exports","connection","change","require_is","exports","exports","exports","connection","ResultProgress","exports","Is","exports","exports","exports","exports","exports","exports","exports","exports","exports","exports","exports","exports","Is","connection","BulkRegistration","BulkUnregistration","one","two","createConnection","result","require_api","exports","ProposedFeatures","require_browser","exports","module","require_main","exports","createConnection","require_browser","exports","module","caml_subarray_to_jsbytes","a","i","len","f","String","null","s","Math","caml_string_of_jsbytes","x","caml_string_of_array","caml_ba_get_1","ba","i0","BigStringReader","bs","this","arr","Array","j","offset","caml_str_repeat","n","r","l","caml_convert_string_to_bytes","jsoo_is_ascii","caml_utf16_of_utf8","b","t","c","c1","c2","v","MlBytes","tag","contents","length","content","caml_utf8_of_utf16","d","caml_string_of_jsstring","unix_error","make_unix_err_args","code","syscall","path","errno","variant","args","caml_named_values","caml_named_value","nm","jsoo_sys_getenv","process","globalThis","undefined","caml_record_backtrace_flag","caml_global_data","caml_exn_with_js_backtrace","exn","force","caml_maybe_attach_backtrace","caml_raise_with_args","caml_is_ml_bytes","caml_is_ml_string","caml_bytes_of_array","Uint8Array","caml_bytes_of_jsbytes","caml_jsbytes_of_string","caml_bytes_of_string","caml_raise_with_arg","arg","caml_raise_with_string","msg","caml_raise_sys_error","caml_raise_no_such_file","name","caml_convert_bytes_to_array","caml_uint8_array_of_bytes","caml_invalid_argument","caml_create_bytes","caml_ml_bytes_length","caml_blit_bytes","s1","i1","s2","i2","MlFile","MlFakeFile","old","buf","pos","clen","new_str","old_data","data","MlFakeFd","file","flags","MlFakeDevice","root","comp","res","Symbol","name_slash","mode","raise_unix","parent","RegExp","seen","m","entry","ok","bytes","MlFakeFd_out","fd","console","src","caml_int64_offset","caml_raise_constant","caml_raise_zero_divide","MlInt64","lo","mi","hi","xhi","h","sign","modulus","divisor","quotient","y","q","MlMutex","MlNat","Int32Array","caml_ml_string_length","caml_string_unsafe_get","caml_uint8_array_of_string","caml_bytes_bound_error","caml_bytes_unsafe_set","caml_bytes_set","MlNodeFd","require","err","buf_offset","read","MlNodeDevice","consts","key","isCharacterDevice","o","js_stats","to_dir","target","link","file_kind","MlObjectTable","NaiveLookup","objs","MlStringReader","caml_int64_create_lo_hi","caml_int64_hi32","caml_int64_lo32","caml_array_bound_error","caml_ba_custom_name","Ml_Bigarray","kind","layout","dims","buffer","ofs","im","re","total","k1","k2","NaN","Ml_Bigarray_c_1_1","UInt8ArrayReader","incr_nat","nat","carry_in","carry","add_nat","nat1","ofs1","len1","nat2","ofs2","len2","caml_ba_get_size","n_dims","size","caml_ba_get_size_per_element","caml_ba_create_unsafe","size_per_element","bigstring_of_array_buffer","ab","ta","bigstring_of_typed_array","bigstring_to_array_buffer","bigstring_to_typed_array","blit_nat","caml_MD5Transform","add","xx","ff","gg","hh","ii","w","caml_MD5Final","ctx","in_buf","caml_MD5Init","ArrayBuffer","b32","Uint32Array","b8","caml_MD5Update","input","input_len","input_pos","missing","caml_acosh_float","caml_call_gen","argsLen","g","nargs","extra_args","arguments","caml_alloc_dummy_infix","caml_alloc_stack","hv","hx","hf","caml_argv","main","argv","p","args2","caml_array_append","a1","a2","l1","l2","caml_array_blit","caml_array_concat","caml_array_fill","array","caml_array_get","index","caml_array_of_bytes","caml_array_of_string","caml_array_set","newval","caml_array_sub","caml_asinh_float","caml_atanh_float","caml_atomic_cas","ref","caml_atomic_exchange","caml_atomic_fetch_add","caml_atomic_load","caml_atomic_make_contended","caml_ba_blit","dst","caml_ba_change_layout","new_dims","caml_ba_compare","caml_ba_create_buffer","view","Float32Array","Float64Array","Int8Array","Int16Array","Uint16Array","caml_js_from_array","caml_ba_create","dims_ml","caml_ba_create_from","data1","data2","jstyp","caml_int32_float_of_bits","int32a","float32a","caml_int64_of_bytes","caml_int64_float_of_bits","exp","Infinity","k","caml_failwith","caml_ba_deserialize","reader","sz","num_dims","size_dim","size_dim_hi","size_dim_lo","sixty","int64","caml_ba_dim","caml_ba_dim_1","caml_ba_dim_2","caml_ba_dim_3","caml_ba_fill","caml_ba_kind_of_typed_array","Uint8ClampedArray","caml_ba_from_typed_array","caml_ba_get_2","caml_ba_get_3","caml_ba_get_generic","caml_mul","caml_hash_mix_int","log2_ok","jsoo_floor_log2","caml_int64_create_lo_mi_hi","caml_int64_bits_of_float","isFinite","isNaN","r3","r2","r1","caml_hash_mix_int64","caml_hash_mix_float","v0","caml_ba_hash","num_elts","caml_ba_init","caml_ba_kind","caml_ba_layout","caml_ba_map_file","vfd","shared","caml_ba_map_file_bytecode","argn","caml_ba_num_dims","caml_ba_reshape","vind","new_dim","caml_int32_bits_of_float","caml_int64_to_bytes","caml_ba_serialize","writer","complex","caml_ba_set_1","caml_ba_set_2","caml_ba_set_3","caml_ba_set_generic","caml_ba_slice","num_inds","sub_dims","new_data","caml_ba_sub","changed_dim","mul","caml_ba_to_typed_array","caml_ba_uint8_get16","b1","b2","caml_ba_uint8_get32","b3","b4","caml_ba_uint8_get64","b5","b6","b7","caml_ba_uint8_set16","caml_ba_uint8_set32","caml_ba_uint8_set64","caml_backtrace_status","_unit","caml_bigstring_blit_ba_to_ba","ba1","pos1","ba2","pos2","slice","caml_bigstring_blit_ba_to_bytes","bytes2","caml_bigstring_blit_bytes_to_ba","str1","caml_bigstring_blit_string_to_ba","caml_bigstring_memcmp","caml_blit_string","e","caml_bswap16","caml_jsstring_of_string","caml_build_symbols","symb","caml_bytes_compare","caml_bytes_equal","caml_bytes_unsafe_get","caml_bytes_get","caml_bytes_get16","caml_bytes_get32","caml_bytes_get64","caml_bytes_lessequal","caml_bytes_greaterequal","caml_bytes_lessthan","caml_bytes_greaterthan","caml_bytes_notequal","caml_bytes_of_utf16_jsstring","caml_bytes_set16","i16","caml_bytes_set32","i32","caml_bytes_set64","i64","caml_callback","caml_cbrt_float","caml_ml_channels","caml_ml_channel_get","id","caml_channel_descriptor","chanid","chan","caml_check_bound","caml_classify_float","caml_is_continuation_tag","caml_int32_unmarshal","caml_nativeint_unmarshal","caml_int64_unmarshal","caml_int64_marshal","sizes","caml_int64_compare","caml_int64_hash","caml_custom_ops","caml_compare_val_get_custom","caml_compare_val_number_custom","num","custom","swap","caml_compare_val_tag","Number","caml_int_compare","caml_string_compare","caml_compare_val","stack","tag_a","tag_b","caml_compare","caml_continuation_use_noexc","cont","caml_continuation_use_and_update_handler_noexc","hval","hexn","heff","caml_convert_raw_backtrace","caml_convert_raw_backtrace_slot","caml_copysign_float","caml_cosh_float","fs_node_supported","make_path_is_absolute","posix","win32","splitDeviceRe","result","device","isUnc","Boolean","sep","path_is_absolute","caml_trailing_slash","caml_current_dir","caml_make_path","comp0","ncomp","caml_get_root","caml_root","jsoo_mount_point","resolve_fs_device","caml_create_file","caml_create_string","caml_custom_event_index","caml_decompress_input","caml_div","caml_domain_dls","caml_domain_dls_get","unit","caml_domain_dls_set","caml_domain_id","caml_ml_mutex_unlock","caml_domain_latest_idx","caml_domain_spawn","mutex","caml_ephe_data_offset","caml_ephe_key_offset","caml_ephe_unset_data","caml_ephe_set_data","caml_ephe_blit_data","caml_ephe_blit_key","caml_ephe_check_data","caml_ephe_check_key","weak","caml_weak_create","caml_ephe_create","caml_ephe_get_data","caml_obj_dup","caml_ephe_get_data_copy","caml_ephe_get_key","caml_ephe_get_key_copy","z","caml_ephe_set_key","Object","caml_ephe_unset_key","count","caml_equal","caml_erf_float","a3","a4","a5","caml_erfc_float","caml_eventlog_pause","caml_eventlog_resume","caml_executable_name","caml_exp2_float","caml_expm1_float","caml_is_special_exception","caml_format_exception","bucket","start","caml_fatal_uncaught_exception","handler","at_exit","caml_fill_bytes","caml_final_register","all_finalizers","caml_final_register_called_without_value","cb","caml_final_release","caml_finish_formatting","rawbuffer","caml_float_compare","caml_float_of_bytes","caml_float_of_string","m3","mantissa","parseInt","exponent","caml_floatarray_blit","caml_floatarray_create","caml_fma_float","SPLIT","MIN_VALUE","EPSILON","C","A","B","multiply","at","ahi","alo","bt","bhi","blo","adjust","scale","xs","ys","zs","xy","u","fs","caml_parse_format","fmt","caml_format_float","toFixed","dp","prec","caml_format_int","caml_oo_last_id","caml_fresh_oo_id","caml_frexp_float","neg","jsoo_create_file","caml_fs_init","tmp","caml_gc_compaction","caml_gc_counters","caml_gc_full_major","caml_gc_get","caml_gc_huge_fallback_count","caml_gc_major","caml_gc_major_slice","work","caml_gc_minor","caml_gc_minor_words","caml_gc_quick_stat","caml_gc_set","_control","caml_gc_stat","caml_get_continuation_callstack","caml_get_current_callstack","caml_get_exception_backtrace","caml_get_exception_raw_backtrace","caml_get_global_data","caml_get_major_bucket","caml_get_major_credit","caml_get_minor_free","caml_method_cache","caml_get_public_method","obj","cacheid","meths","li","caml_gr_arc_aux","cx","cy","ry","rx","rot","xPos","yPos","xPos_prev","yPos_prev","space","delta","caml_gr_state","caml_gr_state_get","caml_gr_blit_image","im2","caml_gr_clear_graph","caml_gr_close_graph","caml_gr_close_subwindow","caml_gr_create_image","caml_gr_current_x","caml_gr_current_y","caml_gr_display_mode","caml_gr_doc_of_state","state","caml_gr_draw_arc","caml_gr_draw_str","str","dx","caml_gr_draw_char","caml_gr_draw_image","canvas","document","image","caml_gr_draw_rect","caml_gr_draw_string","caml_gr_dump_image","caml_gr_fill_arc","caml_gr_fill_poly","ar","caml_gr_fill_rect","caml_gr_lineto","caml_gr_make_image","caml_gr_moveto","caml_gr_set_window_title","jsname","caml_gr_set_line_width","caml_gr_set_text_size","caml_gr_set_font","caml_gr_set_color","color","convert","number","c_str","caml_gr_resize_window","caml_gr_state_init","caml_gr_state_set","caml_gr_state_create","context","caml_gr_open_graph","info","get","specs","status","win","doc","title","body","caml_gr_open_subwindow","caml_gr_plot","caml_gr_point_color","caml_gr_remember_mode","caml_gr_sigio_handler","caml_gr_sigio_signal","caml_gr_size_x","caml_gr_size_y","caml_gr_synchronize","caml_gr_text_size","txt","caml_gr_wait_event","_evl","caml_gr_window_id","caml_greaterequal","caml_greaterthan","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_mix_bytes_arr","caml_ml_bytes_content","caml_hash_mix_bytes","caml_hash_mix_final","caml_hash","limit","seed","queue","rd","wr","caml_hash_mix_bigstring","num_digits_nat","caml_hash_nat","caml_hexstring_of_float","style","exp_sign","sign_str","cst","x_str","idx","caml_hypot_float","caml_marshal_header_size","caml_refill","str_a","nread","caml_raise_end_of_file","caml_marshal_data_size","readvlq","overflow","n7","header_len","data_len","caml_input_value_from_reader","magic","compressed","uncompressed_data_len","num_objects","_size_32","_size_64","intern_obj_table","obj_counter","intern_rec","header","ops","expected_size","old_pos","caml_string_of_bytes","caml_input_value_from_bytes","caml_input_value","block","caml_input_value_from_string","caml_input_value_to_outside_heap","caml_install_signal_handler","caml_int32_bswap","caml_int64_add","caml_int64_and","caml_int64_bswap","caml_int64_div","caml_int64_is_zero","caml_int64_of_int32","caml_int64_to_int32","caml_int64_is_negative","caml_int64_neg","caml_int64_format","wbase","cvtbl","caml_int64_mod","caml_int64_mul","caml_int64_of_float","caml_int64_ult","caml_parse_sign_and_base","base","caml_parse_digit","caml_int64_of_string","base64","threshold","caml_int64_or","caml_int64_shift_left","caml_int64_shift_right","caml_int64_shift_right_unsigned","caml_int64_sub","caml_int64_to_float","caml_int64_xor","caml_int_of_string","caml_is_js","caml_is_printable","caml_js_call","caml_js_delete","caml_js_equals","caml_js_error_of_exception","caml_js_error_option_of_exception","caml_js_eval_string","eval","caml_js_expr","caml_js_from_bool","caml_js_from_float","caml_js_from_string","caml_js_fun_call","caml_js_function_arity","caml_js_get","caml_js_get_console","caml_js_html_entities","entity","temp","caml_js_regexps","caml_js_html_escape","caml_js_instanceof","caml_js_meth_call","caml_js_new","F","caml_js_object","caml_js_on_ie","ua","caml_js_pure_expr","caml_js_set","caml_js_strict_equals","caml_js_to_array","caml_js_to_bool","caml_js_to_byte_string","caml_js_to_float","caml_js_to_int32","caml_js_to_string","caml_js_typeof","caml_js_var","caml_js_wrap_callback","Function","caml_js_wrap_callback_arguments","caml_js_wrap_callback_strict","arity","caml_js_wrap_callback_unsafe","caml_js_wrap_meth_callback","caml_js_wrap_meth_callback_arguments","caml_js_wrap_meth_callback_strict","caml_js_wrap_meth_callback_unsafe","caml_jsoo_flags_effects","caml_jsoo_flags_use_js_string","caml_lazy_make_forward","caml_obj_tag","caml_lazy_read_result","caml_obj_update_tag","caml_lazy_reset_to_lazy","caml_lazy_update_to_forcing","caml_lazy_update_to_forward","caml_ldexp_float","caml_lessequal","caml_lessthan","caml_lex_array","caml_lex_engine","tbl","start_state","lexbuf","lex_buffer","lex_buffer_len","lex_start_pos","lex_curr_pos","lex_last_pos","lex_last_action","lex_eof_reached","lex_base","lex_backtrk","lex_default","lex_trans","lex_check","backtrk","caml_list_mount_point","prev","caml_list_of_js_array","caml_list_to_js_array","caml_log10_float","caml_log1p_float","caml_log2_float","caml_new_string","caml_lxm_next","shift_l","shift_r","or","xor","rotl","set","M","daba","q0","q1","st","x0","x1","caml_make_float_vect","caml_make_vect","init","caml_marshal_constants","caml_maybe_print_stats","caml_md5_bytes","caml_ml_input_block","avail","caml_md5_chan","toread","caml_md5_string","caml_memprof_discard","caml_memprof_set","caml_memprof_start","rate","stack_size","tracker","caml_memprof_stop","caml_ml_channel_redirect","captured","into","to_restore","new_","caml_ml_channel_restore","caml_ml_channel_size","caml_ml_channel_size_64","caml_sys_fds","caml_sys_close","caml_ml_flush","caml_ml_close_channel","caml_ml_condition_broadcast","caml_ml_condition_new","caml_ml_condition_signal","caml_ml_condition_wait","mutext","caml_ml_debug_info_status","caml_ml_domain_cpu_relax","caml_ml_domain_id","caml_ml_domain_set_name","_name","caml_ml_domain_unique_token_","caml_ml_domain_unique_token","caml_runtime_warnings","caml_ml_enable_runtime_warnings","bool","caml_ml_input","caml_ml_input_bigarray","caml_ml_input_char","caml_ml_input_int","caml_ml_input_scan_line","prev_max","caml_ml_is_buffered","caml_ml_mutex_lock","caml_ml_mutex_new","caml_ml_mutex_try_lock","caml_sys_open_for_node","fd2","caml_sys_open_internal","caml_sys_open","_perms","caml_ml_open_descriptor_in","refill","channel","caml_ml_open_descriptor_in_with_flags","caml_ml_open_descriptor_out","buffered","caml_ml_open_descriptor_out_with_flags","caml_ml_out_channels_list","caml_ml_output_ta","caml_ml_output_bytes","caml_ml_output","caml_ml_output_bigarray","caml_ml_output_char","caml_ml_output_int","caml_pos_in","caml_ml_pos_in","caml_ml_pos_in_64","caml_pos_out","caml_ml_pos_out","caml_ml_pos_out_64","caml_ml_runtime_events_pause","caml_ml_runtime_events_resume","caml_ml_runtime_events_start","caml_ml_runtime_warnings_enabled","caml_seek_in","caml_ml_seek_in","caml_ml_seek_in_64","caml_seek_out","caml_ml_seek_out","caml_ml_seek_out_64","caml_ml_set_binary_mode","caml_ml_set_buffered","caml_ml_set_channel_name","caml_ml_set_channel_output","caml_ml_set_channel_refill","caml_mod","caml_modf_float","caml_mount_autoload","caml_lex_run_mem","mem","curr_pos","caml_lex_run_tag","caml_new_lex_engine","lex_mem","lex_base_code","lex_backtrk_code","lex_default_code","lex_trans_code","lex_check_code","lex_code","pc_off","pstate","base_code","caml_nextafter_float","bits","one","caml_notequal","caml_obj_add_offset","caml_obj_block","caml_obj_compare_and_swap","caml_obj_is_block","caml_obj_is_shared","caml_obj_make_forward","caml_obj_raw_field","caml_obj_reachable_words","caml_obj_set_raw_field","caml_obj_set_tag","caml_obj_truncate","caml_obj_with_tag","caml_ojs_new_arr","caml_output_val","Writer","value","no_sharing","closures","memo","existing_offset","extern_rec","sz_32_64","header_pos","type_of_v","caml_output_value_to_string","caml_output_value","caml_output_value_to_buffer","caml_output_value_to_bytes","caml_parser_trace","caml_parse_engine","tables","env","cmd","ERRCODE","loop","testshift","shift","shift_recover","reduce","READ_TOKEN","RAISE_PARSE_ERROR","GROW_STACKS_1","GROW_STACKS_2","COMPUTE_SEMANTIC_ACTION","CALL_ERROR_FUNCTION","env_s_stack","env_v_stack","env_symb_start_stack","env_symb_end_stack","env_stacksize","env_stackbase","env_curr_char","env_lval","env_symb_start","env_symb_end","env_asp","env_rule_len","env_rule_number","env_sp","env_state","env_errflag","tbl_transl_const","tbl_transl_block","tbl_lhs","tbl_len","tbl_defred","tbl_dgoto","tbl_sindex","tbl_rindex","tbl_gindex","tbl_tablesize","tbl_table","tbl_check","tbl_names_const","tbl_names_block","log","token_name","names","print_token","tok","token","n1","n2","state1","sp","errflag","asp","caml_pure_js_expr","caml_raise_not_a_dir","caml_raise_not_found","caml_raw_backtrace_length","caml_raw_backtrace_next_slot","caml_raw_backtrace_slot","caml_read_file_content","caml_recommended_domain_count","caml_record_backtrace","caml_register_channel_for_spacetime","_channel","caml_register_global","name_opt","nid","caml_register_named_value","caml_restore_raw_backtrace","caml_round_float","caml_runtime_events_create_cursor","caml_runtime_events_free_cursor","cursor","caml_runtime_events_read_poll","callbacks","caml_runtime_events_user_register","event_name","event_tag","event_type","caml_runtime_events_user_resolve","caml_runtime_events_user_write","event","event_content","caml_runtime_parameters","caml_runtime_variant","caml_set_oo_id","caml_set_parser_trace","oldflag","caml_set_static_env","caml_signbit_float","caml_sinh_float","caml_spacetime_enabled","caml_spacetime_only_works_for_native_code","caml_str_initialize","caml_string_bound_error","caml_string_concat","caml_string_equal","caml_string_get","caml_string_get16","caml_string_get32","caml_string_get64","caml_string_lessequal","caml_string_greaterequal","caml_string_lessthan","caml_string_greaterthan","caml_string_hash","caml_string_notequal","caml_string_set","caml_string_set16","caml_string_set32","caml_string_set64","caml_string_unsafe_set","caml_sys_argv","caml_sys_chdir","dir","caml_sys_const_backend_type","caml_sys_const_big_endian","caml_sys_const_int_size","caml_sys_const_max_wosize","caml_sys_const_naked_pointers_checked","os_type","caml_sys_const_ostype_cygwin","caml_sys_const_ostype_unix","caml_sys_const_ostype_win32","caml_sys_const_word_size","caml_sys_executable_name","caml_sys_exit","caml_sys_file_exists","caml_sys_get_argv","caml_sys_get_config","caml_sys_getcwd","caml_sys_getenv","caml_sys_is_directory","caml_sys_is_regular_file","caml_sys_isatty","_chan","caml_sys_mkdir","perm","caml_sys_modify_argv","caml_sys_random_seed","now","Date","caml_sys_read_directory","caml_sys_remove","caml_sys_rename","o_root","n_root","caml_sys_rmdir","caml_sys_system_command","child_process","caml_initial_time","caml_sys_time","caml_sys_time_include_children","caml_sys_unsafe_getenv","caml_tanh_float","caml_to_js_string","caml_trampoline","caml_trampoline_return","caml_trunc_float","caml_unix_cleanup","caml_unix_closedir","dir_handle","caml_unix_filedescr_of_fd","caml_unix_findclose","caml_unix_opendir","caml_unix_readdir","caml_unix_findfirst","path_js","first_entry","caml_unix_findnext","caml_unix_getpwuid","caml_unix_gettimeofday","caml_unix_getuid","caml_unix_gmtime","d_num","januaryfirst","doy","caml_unix_has_symlink","caml_unix_inet_addr_of_string","caml_unix_isatty","fileDescriptor","tty","caml_unix_localtime","jan","jul","stdTimezoneOffset","caml_unix_lstat","caml_unix_lstat_64","caml_unix_mkdir","caml_unix_mktime","tm","tm2","caml_unix_readlink","caml_unix_rewinddir","new_dir_handle","caml_unix_rmdir","caml_unix_startup","caml_unix_stat","caml_unix_stat_64","caml_unix_symlink","src_root","dst_root","caml_unix_time","caml_unix_unlink","caml_unmount","caml_update_dummy","caml_weak_set","caml_wrap_exception","caml_xmlhttprequest_create","zstd_decompress","u8","u16","u32","slc","fill","cpw","ec","ind","nt","Error","rb","rzfh","dat","n3","flg","ss","cc","df","fcf","db","di","fsb","fss","ws","wb","msb","val","rfse","mal","tpos","al","probs","sym","ht","freq","dstate","nstate","bb1","syms","nbits","cbt","msk","msk1fb","msv","sval","rbt","sympos","sstep","smask","sf","ns","nb","rhu","wc","hb","hw","rc","ri","_a","ebt","fdt","epos","lb","st1","st2","btr1","btr2","fpos","byte","wes","wt","mb","ts","rem","hbuf","pv","dllt","dmlt","doct","b2bl","bl","llb","llbl","mlb","mlbl","dhu","out","hu","eb","btr","dhu4","sz1","sz2","sz3","rzb","b0","btype","lbt","lss","lcs","s4","spl","hud","scm","dts","md","rbuf","_b","mlt","oct","llt","spos","oubt","lst","ost","mst","llc","lbtr","mlc","mbtr","ofc","obtr","ofp","off","ml","ll","stin","cct","bufs","ol","chk","blk","caml_zstd_initialize","compare_digits_nat","compare_nat","compare_nat_real","complement_nat","create_nat","decr_nat","borrow","deserialize_nat","div_helper","div_digit_nat","natq","ofsq","natr","ofsr","num_leading_zero_bits_in_digit","shift_left_nat","wrap","shift_right_nat","set_to_zero_nat","nat_of_array","mult_digit_nat","nat3","ofs3","x2","x3","sub_nat","div_nat","quo","serialize_nat","initialize_nat","is_digit_int","is_digit_odd","is_digit_zero","jsoo_create_file_extern","jsoo_effect_not_supported","land_digit_nat","length_nat","lor_digit_nat","lxor_digit_nat","mult_nat","len3","nth_digit_nat","nth_digit_nat_native","re_match","re_word_letters","opcodes","is_word_letter","in_bitset","re_match_impl","partial","prog","cpool","normtable","numgroups","numregisters","startchars","pc","quit","groups","re_register","backtrack","item","push","accept","prefix_match","op","sarg","uarg","group","re_partial_match","re_replacement_text","repl","orig","cur","end","re_search_backward","re_search_forward","re_string_match","set_digit_nat","digit","set_digit_nat_native","square_nat","caml_setup_uncaught_exception_handler","origin","erase_rel","rest","rest$0","rest$1","rest$2","rest$3","rest$4","rest$5","rest$6","rest$7","ty","rest$8","ty1","rest$9","rest$10","rest$11","rest$12","rest$13","concat_fmtty","fmtty1","fmtty2","ty2","concat_fmt","fmt1","fmt2","pad","pad$0","pad$1","iconv","prec$0","pad$2","iconv$0","prec$1","pad$3","iconv$1","prec$2","pad$4","iconv$2","prec$3","pad$5","fconv","pad$6","chr","fmtty","pad$7","fmtty$0","pad$8","rest$14","rest$15","rest$16","fmting_lit","rest$17","fmting_gen","rest$18","rest$19","char_set","width_opt","rest$20","counter","rest$21","rest$22","ign","rest$23","failwith","invalid_arg","min","max","abs","lnot","infinity","neg_infinity","nan","max_float","min_float","epsilon_float","symbol_concat","char_of_int","string_of_bool","bool_of_string","bool_of_string_opt","string_of_int","int_of_string_opt","valid_float_lexem","i$0","string_of_float","float_of_string_opt","symbol","h1","h2","tl","h3","stdin","stdout","stderr","open_out_gen","open_out","open_out_bin","flush_all","output_bytes","oc","output_string","output","output_substring","output_value","close_out","close_out_noerr","open_in_gen","open_in","open_in_bin","ic","unsafe_really_input","ofs$0","len$0","len$1","ofs$1","really_input","really_input_string","input_line","build_result","pos$0","hd","accu","beg","accu$0","close_in_noerr","print_char","print_string","print_bytes","print_int","print_float","print_endline","print_newline","prerr_char","prerr_string","prerr_bytes","prerr_int","prerr_float","prerr_endline","prerr_newline","read_line","read_int","read_int_opt","read_float","read_float_opt","string_of_format","symbol$0","str2","exit_function","f_yet_to_run","old_exit","f_yet_to_run$0","old_exit$0","new_exit","success","do_domain_local_at_exit","do_at_exit","exit","retcode","ocaml_version","ocaml_release","executable_name","backend_type","unix","cygwin","max_array_length","max_floatarray_length","max_string_length","getenv_opt","interactive","set_signal","sig_num","sig_beh","catch_break","on","is_block","double_field","set_double_field","start_env","of_val","slot","max_ephe_length","create","raise_if_invalid_offset","get_key","get_key_copy","set_key","unset_key","check_key","blit_key","e1","o1","e2","o2","incr","decr","force_gen_lazy_block","only_val","closure$0","result$0","closure","e$0","force_lazy_block","force_gen","lzv","force_val","from_fun","from_val","is_val","map","map_val","empty","return$0","cons","next","append","seq1","seq2","seq","filter_map","seq$0","filter","concat","flat_map","fold_left","acc","acc$0","acc$1","iter","unfold","u$0","is_empty","uncons","xs$0","xs$1","iteri","fold_lefti","accu$1","for_all","exists","find","find_index","find_map","find_mapi","iter2","ys$0","ys$1","fold_left2","for_all2","exists2","equal","eq","compare","cmp","init_aux","repeat","forever","cycle_nonempty","cycle","iterate1","iterate","mapi_aux","mapi","tail_scan","s$0","scan","take_aux","take","drop","n$0","n$1","take_while","drop_while","node","to_lazy","failure","memoize","once","action","zip","map2","interleave","sorted_merge1","sorted_merge","map_fst","xys","xys$0","map_snd","unzip","filter_map_find_left_map","filter_map_find_right_map","partition_map","partition","peel","xss","transpose","tails","heads","remainders","xss$0","tails$0","heads$0","map_product","product","of_dispenser","it","to_dispenser","ints","some","default$0","bind","join","fold","none","is_none","is_some","o0","v1","to_result","to_list","to_seq","escaped","lowercase_ascii","uppercase_ascii","seeded_hash","hash","err_no_pred","err_no_succ","lo_bound","hi_bound","succ","pred","is_valid","of_int","is_char","of_char","to_char","unsafe_to_char","utf_decode_is_valid","utf_decode_length","utf_decode_uchar","utf_decode","utf_decode_invalid","utf_8_byte_length","utf_16_byte_length","l$0","nth","l$1","nth_opt","rev_append","l1$0","l2$0","l1$1","l2$1","rev","last","i$1","flatten","r1$0","rev_map","fold_right","b1$0","rev_map2","fold_right2","memq","assoc","assoc_opt","assq","assq_opt","mem_assoc","mem_assq","remove_assoc","pair","remove_assq","find_opt","find_all","filteri","concat_map","fold_left_map","l_accu","x$0","yes","no","left","right","v$0","split","combine","merge","t2","t1","stable_sort","sort","tl$1","x2$0","x1$0","rev_sort","tl$0","sort_uniq","c$0","c$1","c$2","c$3","c$4","c$5","c$6","accu$2","compare_lengths","compare_length_with","aux","tail","of_seq","seq$1","lognot","to_string","make","copy","of_string","sub","sub_string","extend","dstoff","srcoff","cpylen","blit","blit_string","seplen","hd$0","cat","is_space","trim","unsafe_escape","b$0","_T_","apply1","capitalize_ascii","uncapitalize_ascii","starts_with","prefix","len_s","len_pre","ends_with","suffix","len_suf","diff","index_rec","lim","index_rec_opt","index_opt","index_from","index_from_opt","rindex_rec","rindex","rindex_from","rindex_rec_opt","rindex_opt","rindex_from_opt","contains_from","contains","rcontains_from","split_on_char","to_seqi","new_len","new_buf","unsafe_get_uint16_le","unsafe_get_uint16_be","get_int8","get_uint16_le","get_uint16_be","get_int16_ne","get_int16_le","get_int16_be","get_int32_le","get_int32_be","get_int64_le","get_int64_be","unsafe_set_uint16_le","unsafe_set_uint16_be","set_int16_le","set_int16_be","set_int32_le","set_int32_be","set_int64_le","set_int64_be","set_uint8","set_uint16_ne","dec_invalid","dec_ret","not_in_x80_to_xBF","not_in_xA0_to_xBF","not_in_x80_to_x9F","not_in_x90_to_xBF","not_in_x80_to_x8F","utf_8_uchar_3","utf_8_uchar_4","get_utf_8_uchar","b1$4","b2$3","i$4","b1$2","i$5","b2$1","i$6","b3$1","i$10","i$11","i$12","i$7","b1$1","i$8","b2$0","i$9","b3$0","i$13","b1$5","i$14","b2$4","i$2","b1$3","i$3","b2$2","i$15","set_utf_8_uchar","last$1","last$0","is_valid_utf_8","last$3","last$2","last$4","last$5","get_utf_16be_uchar","set_utf_16be_uchar","u$1","is_valid_utf_16be","get_utf_16le_uchar","set_utf_16le_uchar","is_valid_utf_16le","bts","bos","of_bytes","to_bytes","make_matrix","sx","sy","map_inplace","mapi_inplace","la","res$0","list_length","of_list","input_array","elt","output_array","elt$0","acc$2","a0","bi","ai","na","maxson","i31","e$1","j$0","father","src1ofs","src1len","src2","src2ofs","src2len","dstofs","src1r","src2r","s2$1","s1$1","i2$0","d$0","s2$0","i1$0","d$1","s1$0","isortto","srcofs","sortto","zero","minus_one","min_int","max_int","max_int$0","unsigned_to_int","of_string_opt","unsigned_compare","unsigned_div","unsigned_rem","dummy_pos","zero_pos","engine","new_engine","from_function","opt","read_fun","sth","with_positions","aux_buffer","newlen","newbuf","from_channel","from_string","set_position","position","set_filename","fname","lexeme","sub_lexeme","sub_lexeme_opt","sub_lexeme_char","sub_lexeme_char_opt","lexeme_char","lexeme_start","lexeme_end","lexeme_start_p","lexeme_end_p","new_line","lcp","flush_input","height","hl","hr","singleton","bal","h$0","lr","ld","lv","lrr","lrd","lrv","lrl","rr","rv","rl","rlr","rld","rlv","rll","r$0","find_first","d0$1","v0$1","d0","d0$0","v0$0","find_first_opt","find_last","find_last_opt","min_binding","min_binding_opt","max_binding","max_binding_opt","remove_min_binding","remove","update","data$0","add_to_list","m$0","add_min_binding","add_max_binding","rh","lh","concat_or_join","pres","pres$0","d1","d2","r2$0","d2$0","v2","d1$0","union","d2$1","d1$1","pvd","fvd","lf","lt","rf","rt","cons_enum","m1","m2","e2$2","e1$2","e2$0","e1$0","e2$1","e1$1","cardinal","bindings_aux","bindings","add_seq","seq_of_enum","snoc_enum","rev_seq_of_enum","to_rev_seq","to_seq_from","low","clear","pop","pop_opt","top","top_opt","cell","match","peek","peek_opt","take_opt","cell$0","q_res","prev$0","transfer","q2","reset","inner","resize","more","old_len","new_buffer","add_char","uchar_utf_8_byte_length_max","uchar_utf_16_byte_length_max","add_utf_8_uchar","add_utf_16be_uchar","add_utf_16le_uchar","add_substring","new_position","add_subbytes","add_string","add_bytes","add_buffer","add_channel","to_read$1","already_read","to_read","already_read$0","to_read$0","output_buffer","add_substitute","lim$1","previous","previous$0","start$0","opening","lim$0","stop$0","new_start","k$2","closing","stop","k$0","k$1","next_i","ident","truncate","add_int8","add_int16_ne","add_int32_ne","add_int64_ne","add_int16_le","add_int16_be","add_int32_le","add_int32_be","add_int64_le","add_int64_be","protect","cpu_relax","unique_value","create_dls","key_counter","parent_keys","new_key","split_from_parent","init_orphan","ki","maybe_grow","new_sz","new_st","get_id","domain","self","is_main_domain","first_domain_spawned","first_spawn_function","before_first_spawn","old_f","new_f","at_exit_key","spawn","pk","term_mutex","term_condition","term_state","ex$0","ex","recommended_domain_count","sub_format","formatting_lit","create_char_set","add_in_char_set","str_ind","mask","freeze_char_set","rev_char_set","char_set$0","is_in_char_set","pad_of_pad_opt","pad_opt","width","param_format_of_ignored_format","pad_opt$0","pad_opt$1","pad_opt$2","pad_opt$3","pad_opt$4","prec_opt","pad_opt$5","ndec","pad_opt$6","pad_opt$7","pad_opt$8","default_float_precision","buffer_create","init_size","buffer_check_size","overhead","min_len","buffer_add_char","buffer_add_string","str_len","buffer_contents","char_of_iconv","char_of_fconv","cF","bprint_padty","padty","bprint_ignored_flag","ign_flag","bprint_pad_opt","bprint_padding","padty$0","bprint_precision","bprint_iconv_flag","bprint_altint_fmt","bprint_fconv_flag","string_of_formatting_lit","str$0","bprint_char_literal","bprint_string_literal","bprint_fmtty","fmtty$1","fmtty$2","fmtty$3","fmtty$4","fmtty$5","fmtty$6","fmtty$7","fmtty$8","fmtty$9","sub_fmtty","fmtty$10","sub_fmtty$0","fmtty$11","fmtty$12","fmtty$13","fmtty$14","fmtty$15","int_of_custom_arity","string_of_fmt","fmtiter","fmt$0","ign_flag$0","str$1","set$0","is_alone","after","before","j$1","fmt$1","symm","fmtty_rel_det","de","ed","af","fa","de$0","ed$0","af$0","fa$0","de$1","ed$1","af$1","fa$1","de$2","ed$2","af$2","fa$2","de$3","ed$3","af$3","fa$3","de$4","ed$4","af$4","fa$4","de$5","ed$5","af$5","fa$5","de$6","ed$6","af$6","fa$6","de$7","ed$7","af$7","fa$7","de$8","ed$8","af$8","fa$8","trans","jd","dj","ga","ag","de$9","ed$9","af$9","fa$9","de$10","ed$10","af$10","fa$10","de$11","ed$11","af$11","fa$11","de$12","ed$12","af$12","fa$12","de$13","ed$13","af$13","fa$13","rest1","rest2","rest1$0","rest2$0","rest1$1","rest2$1","rest1$2","rest2$2","rest1$3","rest2$3","rest1$4","rest2$4","rest1$5","rest2$5","rest1$6","rest2$6","rest1$7","ty1$0","rest2$7","ty2$0","rest1$8","ty12","ty11","rest2$8","ty22","ty21","f4","f2","rest1$9","rest2$9","rest1$10","rest2$10","rest1$11","rest2$11","rest1$12","rest2$12","rest1$13","rest2$13","fmtty_of_fmt","fmtty_of_padding_fmtty","ty_rest","prec_ty","fmtty_of_precision_fmtty","ty_rest$0","prec_ty$0","ty_rest$1","prec_ty$1","ty_rest$2","prec_ty$2","ty_rest$3","prec_ty$3","ty$0","formatting_gen","fmtty_of_custom","arity$0","type_padding","type_padprec","type_format","type_format_gen","fmtty0","fmtty_rest","fmt_rest","fmtty_rest$0","fmt_rest$0","fmt_rest$1","fmtty_rest$1","fmt$2","fmt_rest$2","fmtty_rest$2","fmt$3","fmt_rest$3","fmtty_rest$3","fmt$4","fmt_rest$4","fmtty_rest$4","fmt$5","fmt_rest$5","fmtty_rest$5","prec$4","fmt$6","fmt_rest$6","prec$5","pad$9","pad$10","fmtty_rest$6","prec$6","fmt$7","fmt_rest$7","prec$7","pad$11","pad$12","fmtty_rest$7","prec$8","fmt$8","fmt_rest$8","pad$13","pad$14","fmtty_rest$8","fmt$9","fmt_rest$9","fmt$10","fmt_rest$10","fmt$11","fmt_rest$11","fmt$12","fmtty_rest$9","fmt_rest$12","fmt$13","fmtty_rest$10","sub_fmtty1","fmt_rest$13","sub_fmtty$1","fmt$14","fmtty_rest$11","fmt_rest$14","fmt$15","fmtty_rest$12","fmt_rest$15","fmt$16","fmt_rest$16","fmtty$16","fmt$17","fmt_rest$17","fmtty3","fmt3","fmt1$0","fmtty2$0","fmt2$0","fmtty3$0","fmt3$0","fmtty_rest$13","fmt_rest$18","fmtty$17","fmt$18","fmtty_rest$14","fmt_rest$19","fmtty$18","fmt$19","fmtty_rest$15","fmt_rest$20","fmtty$19","fmt$20","type_ignored_param_one","sub_fmtty$2","sub_fmtty$3","type_ignored_format_substituti","fmtty$21","fmt$22","sub_fmtty$4","fmtty_rest$16","fmtty$20","fmt$21","sub_fmtty_rest","sub_fmtty_rest$0","sub_fmtty_rest$1","sub_fmtty_rest$2","sub_fmtty_rest$3","sub_fmtty_rest$4","sub_fmtty_rest$5","sub_fmtty_rest$6","sub_fmtty_rest$7","sub_fmtty_rest$8","sub_fmtty_rest$9","sub_fmtty_rest$10","sub_fmtty_rest$11","sub_fmtty_rest$12","sub_fmtty_rest$13","sub_fmtty_rest$14","sub2_fmtty","sub_fmtty_rest$15","sub2_fmtty$0","sub_fmtty_rest$16","sub2_fmtty$1","sub1_fmtty","sub_fmtty_rest$17","sub2_fmtty$2","sub1_fmtty$0","sub_fmtty_rest$18","sub_fmtty_rest$19","sub_fmtty_rest$20","sub_fmtty_rest$21","sub_fmtty_rest$22","sub_fmtty_rest$23","sub_fmtty_rest$24","sub_fmtty_rest$25","sub_fmtty_rest$26","recast","fix_padding","width$0","fix_int_precision","res$1","string_to_caml_string","format_of_fconv","transform_int_alt","digits","put","convert_int","convert_int32","convert_nativeint","convert_int64","convert_float","hex","caml_special_val","string_of_fmtty","make_printf$0","new_acc","make_printf","make_padding","make_int_padding_precision","p$0","p$1","acc$3","acc$4","kacc","make_ignored_param$0","make_custom$0","make_invalid_arg","make_from_fmtty$0","make_ignored_param","make_from_fmtty","make_custom","make_iprintf$0","make_iprintf","x$1","x$2","x$3","x$4","x$5","x$6","x$7","x$8","fn_of_padding_precision","x$9","x$10","x$11","x$12","x$13","x$14","x$15","x$16","koc","rest$24","rest$25","x$17","rest$26","x$18","rest$27","x$19","rest$28","rest$29","fn_of_custom_arity$0","fn_of_custom_arity","output_acc","p$3","p$4","p$5","p$2","bufput_acc","strput_acc","failwith_message","open_box_of_string","invalid_box","parse_spaces","wstart","wend","box_name","nstart","nend","indent","exp_end","box_type","make_padding_fmt_ebb","make_padprec_fmt_ebb","fmt_ebb_of_string","legacy_behavior","flag","legacy_behavior$0","invalid_format_message","invalid_format_without","expected_character","expected","parse","lit_start","end_ind","add_literal","str_ind$1","str_ind$2","parse_flags","str_ind$0","parse_tag","str_ind$3","str_ind_1","parse_integer","str_ind_2","str_ind_3","formatting_lit$0","next_ind","str_ind_4","str_ind_5","str_ind$4","str_ind_1$0","str_ind_2$0","str_ind_3$0","s$1","formatting_lit$1","next_ind$0","pct_ind","minus","plus","set_flag","str_ind$5","space$0","hash$0","plus$0","minus$0","zero$0","incompatible_flag","parse_positive","new_ind","parse_after_padding","parse_conversion","parse_literal","parse_after_precision","symb$0","parse_conv","padprec","plus_used","hash_used","space_used","ign_used","pad_used","prec_used","get_plus","get_hash","get_space","get_ign","get_pad","get_prec","get_padprec","get_int_pad","check_no_0","opt_of_pad","width$1","get_pad_opt","get_padprec_opt","fmt_result","sub_end","search_subformat_end","sub_fmt","ignored$2","counter$0","ignored$6","ignored$7","add_range","fail_single_percent","parse_char_set_content","parse_char_set_after_char$0","parse_char_set_after_char","reverse","char_set$1","ignored$9","char_format","fmt_rest$21","fmt_rest$22","fmt_rest$23","ignored$10","fmt_rest$24","fmt_rest$25","sub_end$0","sub_fmt$0","fmt_rest$26","ignored$11","ignored$3","ignored$5","compute_int_conv","ignored$8","space$1","hash$1","plus$2","ignored$4","ignored","ignored$0","ignored$1","plus$1","ign$0","is_open_tag","sub_str","sub_format$0","formatting$0","formatting","sub_end$1","sub_end$2","str_ind$6","str_ind$7","option","subfmt","format_of_string_fmtty","format_of_string_format","kfprintf","kbprintf","ikfprintf","fprintf","bprintf","ifprintf","ibprintf","printf","eprintf","ksprintf","sprintf","locfmt","printers","field","other_fields","use_printers","string_of_extension_constructo","constructor","fields_opt","constructor$0","to_string_default","cst_Out_of_memory","cst_Stack_overflow","char$0","line","char$1","line$0","file$0","char$2","line$1","file$1","print","fct","catch$0","raw_backtrace_entries","convert_raw_backtrace","format_backtrace_slot","is_raise","print_raw_backtrace","outchan","raw_backtrace","backtrace","print_backtrace","raw_backtrace_to_string","backtrace_slot_is_raise","param","backtrace_slot_is_inline","backtrace_slot_location","backtrace_slot_defname","backtrace_slots","backtrace_slots_of_raw_entry","raw_backtrace_length","get_backtrace","register_printer","fn","old_printers","new_printers","exn_slot","exn_slot_id","exn_slot_name","errors","default_uncaught_exception_han","uncaught_exception_handler","set_uncaught_exception_handler","empty_backtrace","handle_uncaught_exception","exn$0","debugger_in_use","exn$1","raw_backtrace$0","string","substring","subbytes","filename","digest","char_hex","to_hex","from_hex","kind_size_in_bytes","cloop","col","floop","dlen","size_in_bytes","size_in_bytes$0","of_value","create$0","dim","size_in_bytes$1","init$0","of_array","create$1","dim1","dim2","size_in_bytes$2","slice_left","slice_right","init$1","of_array$0","row","create$2","dim3","size_in_bytes$3","slice_left_1","slice_right_1","slice_left_2","slice_right_2","init$2","of_array$1","array0_of_genarray","array1_of_genarray","array2_of_genarray","array3_of_genarray","reshape_0","reshape_1","reshape_2","reshape_3","serialization_prefix","i3","i4","i3$0","i4$0","mk","serialization_prefix_len","to_binary_string","of_binary_string","reinit","make_self_init","intaux","int$0","bound","full_int","bits32","int32","bits64","nativebits","nativeint","float$0","mk_default","random_key","bits$0","int$1","full_int$0","int32$0","nativeint$0","int64$0","float$1","bool$0","bits32$0","bits64$0","nativebits$0","full_init","self_init","split$0","get_state","set_state","ongoing_traversal","flip_ongoing_traversal","params","randomized_default","randomized","randomize","is_randomized","prng_key","power_2_above","initial_size","random","copy_bucketlist","key$0","next$0","insert_all_buckets","indexfun","inplace","odata","ndata","nsize","ndata_tail","nidx","match$0","osize","old_trav","filter_map_inplace","bucket_length","stats","mbl","histo","tbl_data","buck","buck$0","buck$1","to_seq_keys","to_seq_values","key_index","next1","next2","k3","d3","next3","replace","replace_seq","hash_param","rebuild","unknown","pp_enqueue","pp_infinity","pp_output_string","pp_output_newline","format_pp_text","text","format_string","break_new_line","real_indent","break_same_line","format_pp_token","size$0","tabs","add_tab","ls","tag_name","marker","breaks","fits","box_type$0","off$0","insertion_point","tabs$0","first","head","tab","off$1","insertion_point$0","width$2","box_type$1","tbox","tag_name$0","marker$0","advance_left","pending_count","enqueue_advance","enqueue_string_as","initialize_scan_stack","queue_elem","set_size","left_total","scan_push","elem","pp_open_box_gen","br_ty","pp_close_box","pp_open_stag","pp_close_stag","pp_set_print_tags","pp_set_mark_tags","pp_get_print_tags","pp_get_mark_tags","pp_set_tags","pp_get_formatter_stag_function","pp_set_formatter_stag_function","pct","pot","mct","mot","pp_rinit","pp_flush_queue","end_with_newline","pp_print_as_size","pp_print_as","isize","pp_print_string","pp_print_bytes","pp_print_int","pp_print_float","pp_print_bool","pp_print_char","pp_open_hbox","pp_open_vbox","pp_open_hvbox","pp_open_hovbox","pp_open_box","pp_print_newline","pp_print_flush","pp_force_newline","pp_print_if_newline","pp_print_custom_break","pp_print_break","pp_print_space","pp_print_cut","pp_open_tbox","pp_close_tbox","pp_print_tbreak","pp_print_tab","pp_set_tab","pp_set_max_boxes","pp_get_max_boxes","pp_over_max_boxes","pp_set_ellipsis_text","pp_get_ellipsis_text","pp_limit","pp_set_max_indent","pp_get_max_indent","pp_set_margin","new_max_indent","validate_geometry","margin","max_indent","check_geometry","geometry","pp_get_margin","pp_set_full_geometry","pp_set_geometry","pp_safe_set_geometry","pp_get_geometry","pp_update_geometry","pp_set_formatter_out_functions","pp_get_formatter_out_functions","pp_set_formatter_output_functi","pp_get_formatter_output_functi","display_newline","blank_line","display_blanks","pp_set_formatter_out_channel","default_pp_mark_open_tag","default_pp_mark_close_tag","default_pp_print_open_tag","default_pp_print_close_tag","pp_make_formatter","pp_queue","sys_tok","scan_stack","pp_margin","formatter_of_out_functions","out_funs","make_formatter","flush","ppf","formatter_of_out_channel","formatter_of_buffer","pp_buffer_size","pp_make_buffer","stdbuf","std_formatter","err_formatter","str_formatter","stdbuf_key","str_formatter_key","buffered_out_string","buffered_out_flush","std_buf_key","err_buf_key","std_formatter_key","err_formatter_key","get_std_formatter","get_err_formatter","get_str_formatter","get_stdbuf","flush_buffer_formatter","flush_str_formatter","make_synchronized_formatter","output$0","flush$0","synchronized_formatter_of_out_","make_symbolic_output_buffer","clear_symbolic_output_buffer","sob","get_symbolic_output_buffer","flush_symbolic_output_buffer","items","add_symbolic_output_item","formatter_of_symbolic_output_b","open_hbox","open_vbox","open_hvbox","open_hovbox","open_box","close_box","open_stag","close_stag","print_as","print_bool","print_break","print_cut","print_space","force_newline","print_flush","print_if_newline","open_tbox","close_tbox","print_tbreak","set_tab","print_tab","set_margin","get_margin","set_max_indent","get_max_indent","set_geometry","safe_set_geometry","get_geometry","update_geometry","set_max_boxes","get_max_boxes","over_max_boxes","set_ellipsis_text","get_ellipsis_text","set_formatter_out_channel","set_formatter_out_functions","get_formatter_out_functions","set_formatter_output_functions","get_formatter_output_functions","set_formatter_stag_functions","get_formatter_stag_functions","set_print_tags","get_print_tags","set_mark_tags","get_mark_tags","set_tags","pp_print_iter","pp_v","pp_sep","is_first","pp_v$0","pp_print_list","pp_print_array","pp_print_seq","pp_print_text","pp_print_option","pp_print_result","error","pp_print_either","compute_tag","tag_acc","output_formatting_lit","bty","f$0","p$6","p$7","f$1","size$1","p$8","kdprintf","dprintf","kasprintf","asprintf","flush_standard_formatters","fs$0","register","register_exception","o$0","public_method_label","compare$0","compare$1","dummy_table","table_count","dummy_met","initial_object_size","fit_size","new_table","pub_labels","methods","new_size","old_size","new_buck","method_count","inst_var_count","new_method","table","get_method_label","label","get_method_labels","set_method","element","get_method","narrow","vars","virt_meths","concr_meths","vars$0","virt_meths$0","concr_meths$0","virt_meth_labs","concr_meth_labs","lab","tvars","by_name","by_label","met","hm","widen","saved_vars","saved_hidden_meths","new_variable","to_array","new_methods_variables","vals","meths$0","nmeths","nvals","get_variable","get_variables","add_initializer","create_table","public_methods","tags","init_class","inherits","cla","super$0","make_class","pub_meths","class_init","env_init","make_class_store","init_table","dummy_class","loc","undef","create_object","create_object_opt","obj_0","iter_f","run_initializers","inits","run_initializers_opt","create_object_and_run_initiali","get_data","build_path","keys","lookup_tables","root_data","tables$0","tables$1","tables_data","new_cache","set_methods","clo","x$20","clo$0","n$38","e$10","n$37","n$36","n$2","n$35","f$20","n$3","f$19","n$34","n$4","f$18","e$9","n$33","f$2","n$5","f$17","n$32","f$3","f$16","y$0","f$4","n$6","f$15","n$31","f$5","n$7","f$14","e$8","n$30","f$6","n$8","f$13","n$29","f$7","n$9","f$12","n$28","f$8","e$2","n$10","f$11","e$7","n$27","f$9","n$11","f$10","n$26","n$12","n$25","n$13","n$24","m$12","n$14","e$3","n$23","e$6","m$11","n$15","m$1","n$22","m$10","m$2","m$9","m$3","n$16","m$8","n$21","m$4","e$4","n$17","m$7","e$5","n$20","m$5","n$18","m$6","n$19","symbol_bind","map_bind","safe_map","utf8_of_code","maxbits","utf8_of_surrogate_pair","high10","low10","version","json_error","init_lexer","lnum","buf$0","buf$1","ocaml_lex_tables","read_junk$0","ocaml_lex_read_junk_rec$0","read_junk","ocaml_lex_state","ocaml_lex_state$0","ocaml_lex_state$1","ocaml_lex_read_junk_rec","git_version","raise","equal$0","max$0","min$0","global","null$0","undefined$0","test","case$0","to_option","return$1","map$0","bind$0","test$0","iter$0","case$1","get$0","option$0","to_option$0","coerce","coerce_opt","true$0","false$0","nfc","nfd","nfkc","nfkd","string_constr","regExp","object_keys","array_constructor","array_get","array_set","array_map","array_mapi","str_array","match_result","date_constr","math","error_constr","exn_with_js_backtrace","message","raise_js_error","string_of_error","JSON","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape","parseFloat","export_js","export$0","export_all","keywords","pp","a0$0","a0$1","a0$2","a0$3","a0$4","a0$5","show","precedence","is_infix","string_of_infix","pp_position","show_position","pp_loc","show_loc","poly_a","dummy_loc","pp_constant","show_constant","pp_arg_label","show_arg_label","ids","infixify","flat","id1","ident_of_string","string_of_longident","string_of_shortident","pp_expr","show_expr","pp_expr_desc","show_expr_desc","a1$0","a2$0","a1$1","a2$1","a1$2","a1$3","a1$4","a0$6","a2$2","a1$5","a0$7","a1$6","a0$8","a1$7","a0$9","label_name","string_of_constant","print_expr","parenthesis","sth$0","argss","body$0","txt$0","rs","cases","el","es","els","pp_simple_type","show_simple_type","pp_simple_type_desc","show_simple_type_desc","pp_row","show_row","print_simple_type","ty1s","ty2s","s$2","ps","tyr","pp_def_type","show_def_type","pp_type_decl","show_type_decl","pp_mod_type","show_mod_type","pp_mod_type_desc","show_mod_type_desc","pp_signature","show_signature","pp_specification","show_specification","pp_mod_expr","show_mod_expr","pp_mod_expr_desc","show_mod_expr_desc","pp_structure","show_structure","pp_definition_comment","show_definition_comment","pp_definition","show_definition","print_comment","print_type_decl","decl","paramss","paramss$0","print_mod_type","mod_type","sig","print_specification","mty2","mty1","uid","spec","ret","id$0","mty","id$1","print_mod_expr","mod_expr","print_definition","mod_e","mod_ty","mod_ty_opt","print_definition_list","scanner","clone","at_end","peek1","peekn","advance","ch","scan_number","scan_string","start_pos","end_pos","scan_ident","scan_infix_chars","skip_whitesapce","t$0","end_pos$0","pp_diagnostic","show_diagnostic","parser","report","make_loc","expect","optional","lookahead","callback","comments","prev_end_pos","diagnostics","sepby1","p1","sepby","many1","many","lident","loc_start","loc_end","uident","longident_end_lident","uids$0","uids","lid","longident","arg_label_fun","longident_end_uident","expr_ref","expr","jsx","attrs","jsx_attrs","children","tag$0","desc","desc$0","valbind1","desc$1","desc$2","op_expr","label_f","expr_bp","min_bp","lhs","apply_expr","lhs$0","rhs","lhs$1","select_expr","atom","atom_expr","infix","fields","ext","tvar","simple_type","labelled","lid$0","sty","tuple_type","mems","apply_type","atom_type","paths","simple_tys","ty_desc","fields$0","loc_start$0","loc_end$0","ext$0","row$0","skip_to","type_decl","def","pmty","rmty","signature","atom_mod_expr","structure","mod_ty$0","mod_e$0","definition","lid$1","prev_comments","currstamp","id2","pp_tbl","show_tbl","find_name","name1","path_equal","p2","field1","field2","path_of_longident","lid1","string_of_path","pp_type_variable","show_type_variable","pp_type_variable_list","show_type_variable_list","pp_val_type","show_val_type","pp_kind","show_kind","unknown_mod_type","typerepr","var$0","current_level","begin_def","end_def","newvar","trivial_scheme","var_string_of_int","quantify","row_repr","ty$1","val_type","t1s","vars$1","t2s","vars$2","vars$3","sl","rest_row","tys","vars$4","rest_row$0","vars$5","print_val_type","bodys","identity","subst_type","subst","subst_valtype","vty","subst_deftype","subst_kind","subst_typedecl","dty","subst_modtype","sg","subst_sig_item","pp_binding","show_binding","add_value","add_type","add_module","add_spec","add_signature","find_module","find_field","subst$0","rem$0","rem$1","find_value","find_type","lookup","lookup_module","binding","env$0","lookup_value","lookup_type","pp_term","show_term","pp_term_desc","show_term_desc","generalize","gen_vars","t_vars","pp_mod_term","show_mod_term","pp_mod_term_desc","show_mod_term_desc","pp_definition_desc","show_definition_desc","variables","reset_type_variables","find_type_variable","map_simple_type","tyl","t2$0","t1$0","expr_to_typed","expr$0","arg_label","mod_type_to_typed","specification_to_typed","manifest","mod_expr_to_typed","me","mod_structure","me1","me2","me1$0","mt","me$0","defs","mod_def_to_typed","def$0","d_ref","reset_d_ref","add_d_ref","report_term","enter_value","sc","enter_type","enter_module","scope_value","scope_type","scope_module","scope_path","scope_ident","value_path","type_path","module_path","scope_term","term","pat","new_sc","t2$1","t1$1","newterm","scope_simple_type","scope_valtype","scope_deftype","scope_kind","scope_typedecl","scope_modtype","scope_signature","scope_module$0","mod_term","new_mod_term","scope_structure","arrow_type","ident_int","path_int","int_type","ident_string","path_string","string_type","ident_star","path_star","ident_option","path_option","option_type","ident_jsx_element","path_jsx_element","jsx_element_type","init_scope_env","init_scope","init_env","enter_val","ident_bool","path_bool","bool_type","alpha","beta","talpha","tbeta","t2$3","t2$2","subst_vars","tyvar","label$0","expand_manifest","arg_label_match","label1","label2","scrape_types","repr1","repr2","path1","path2","args1","args$0","occur_check","var$1","update_levels","level_max","unify","t12","t11","arg_label1","t22","t21","arg_label2","row2","rewrite_row","varref","level","rewrite_row$0","row1","row2$0","row1$0","row2$1","instance","flatten_arrow","arrow","row_remove_label","infer_type","type_param","type_param$0","type_body","funct","type_funct","ret_ty","args_tys","type_result","type_f","r_ty","sigma","pos$1","sigma$0","extra","erase","type_arg","ty_e2","field_ty","e_ty","field_ty$0","ret$0","var_tys","vat_ty","new_env","e_ty$0","variant_ty","var_ty","funct$0","type_funct$0","ret_ty$0","args_tys$0","ret_ty$1","sigma$1","pos$4","pos$2","pos$3","sigma$2","extra$0","erase$0","check_simple_type","kind_deftype","check_valtype","check_kind","type_term","valtype_match","vty1","vty2","deftype_equiv","def1","def2","equiv","kind_match","kind1","kind2","deftype_of_path","make_params","modtype_match","mty1$0","mty2$0","sig1","sig2","pair_signature_components","paired_components","ext_env","specification_match","res1","arg1","param1","res2","arg2","param2","res1$0","env$1","rem2","item2","rem1","item1","id1$0","id2$0","id1$1","id2$1","item1$0","id2$2","id1$2","pairs","decl1","decl2","typedecl_match","typ2","typ1","typ2$0","strengthen_modtype","strengthen_spec","check_modtype","check_signature","param$1","seen$0","typ","type_module","type_structure","mty_res","mty_param","param$0","mty_arg","path$0","path$1","mty$0","modl","stritem","type_definition","sigitem","state$0","loc_list_to_yojson","loc_list_of_yojson","arg0","arg1$0","arg0$0","fields$1","state$1","xs$2","state$2","xs$3","arg1$1","arg0$1","state$3","pp_loc_list","show_loc_list","pp_diag","diag_list_to_yojson","diag_list_of_yojson","pp_diag_list","show_diag_list","pp_docdata","show_docdata","js_log","in_range","pos_of_position","make_diag","files","in_loc_range","in_mod_term_range","in_term_range","uri","tok_list","locs","toks","type","loop_mod_term","mod_term$0","loop_term","mod_term$1","mod_term$2","mod_term$3","term$0","term$1","tml","term$2","loop_term_list","tm1","tm2$0","tm1$0","FullTextDocument","TextDocument","document","TextDocument","t"]}