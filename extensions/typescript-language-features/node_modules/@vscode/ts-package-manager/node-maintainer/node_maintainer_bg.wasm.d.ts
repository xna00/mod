/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_nodemaintaineroptions_free(a: number): void;
export function __wbg_nodemaintainer_free(a: number): void;
export function nodemaintainer_resolveSpec(a: number, b: number, c: number): number;
export function nodemaintainer_resolveManifest(a: number, b: number): number;
export function nodemaintainer_toKdl(a: number, b: number): void;
export function nodemaintainer_packageAtPath(a: number, b: number, c: number): number;
export function nodemaintainer_forEachPackage(a: number, b: number): number;
export function resolveSpec(a: number, b: number, c: number): number;
export function resolveManifest(a: number, b: number): number;
export function packument(a: number, b: number, c: number): number;
export function corgiPackument(a: number, b: number, c: number): number;
export function metadata(a: number, b: number, c: number): number;
export function corgiMetadata(a: number, b: number, c: number): number;
export function tarball(a: number, b: number, c: number): number;
export function entries(a: number, b: number, c: number): number;
export function __wbg_nassun_free(a: number): void;
export function nassun_new(a: number, b: number): void;
export function nassun_resolve(a: number, b: number, c: number): number;
export function nassun_packument(a: number, b: number, c: number): number;
export function nassun_metadata(a: number, b: number, c: number): number;
export function nassun_corgiPackument(a: number, b: number, c: number): number;
export function nassun_corgiMetadata(a: number, b: number, c: number): number;
export function nassun_tarball(a: number, b: number, c: number): number;
export function nassun_entries(a: number, b: number, c: number): number;
export function __wbg_package_free(a: number): void;
export function package_from(a: number): number;
export function package_name(a: number): number;
export function package_resolved(a: number): number;
export function package_corgiPackument(a: number): number;
export function package_corgiMetadata(a: number): number;
export function package_packument(a: number): number;
export function package_metadata(a: number): number;
export function package_tarball(a: number): number;
export function package_entries(a: number): number;
export function __wbg_readablestreamgetreaderoptions_free(a: number): void;
export function readablestreamgetreaderoptions_mode(a: number): number;
export function __wbg_pipeoptions_free(a: number): void;
export function pipeoptions_preventClose(a: number): number;
export function pipeoptions_preventCancel(a: number): number;
export function pipeoptions_preventAbort(a: number): number;
export function pipeoptions_signal(a: number): number;
export function __wbg_queuingstrategy_free(a: number): void;
export function queuingstrategy_highWaterMark(a: number): number;
export function __wbg_intounderlyingsource_free(a: number): void;
export function intounderlyingsource_pull(a: number, b: number): number;
export function intounderlyingsource_cancel(a: number): void;
export function __wbg_intounderlyingsink_free(a: number): void;
export function intounderlyingsink_write(a: number, b: number): number;
export function intounderlyingsink_close(a: number): number;
export function intounderlyingsink_abort(a: number, b: number): number;
export function __wbg_intounderlyingbytesource_free(a: number): void;
export function intounderlyingbytesource_type(a: number): number;
export function intounderlyingbytesource_autoAllocateChunkSize(a: number): number;
export function intounderlyingbytesource_start(a: number, b: number): void;
export function intounderlyingbytesource_pull(a: number, b: number): number;
export function intounderlyingbytesource_cancel(a: number): void;
export function __wbindgen_export_0(a: number): number;
export function __wbindgen_export_1(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_export_3(a: number, b: number, c: number): void;
export function __wbindgen_export_4(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_export_5(a: number, b: number): void;
export function __wbindgen_export_6(a: number): void;
export function __wbindgen_export_7(a: number, b: number, c: number, d: number): void;
