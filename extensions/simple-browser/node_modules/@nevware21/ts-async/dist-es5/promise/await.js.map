{"version":3,"file":"await.js","sourceRoot":"","sources":["../../src/promise/await.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAapD,MAAM,UAAU,eAAe,CAAoC,KAAsB,EAAE,EAAwC;IAC/H,OAAO,OAAO,CAAC,KAAY,EAAE,UAAC,KAAK;QAC/B,EAAE,IAAI,EAAE,CAAC;YACL,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,KAAK;SAClB,CAAC,CAAC;IACP,CAAC,EACD,UAAC,MAAM;QACH,EAAE,IAAI,EAAE,CAAC;YACL,QAAQ,EAAE,IAAI;YACd,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AA4ED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,MAAM,UAAU,OAAO,CAAoC,KAAsB,EAAE,SAA8C,EAAE,QAA2C,EAAE,SAAiC;IAC7M,IAAI,MAAM,GAAG,KAAK,CAAC;IAEnB,IAAI,aAAa,CAAI,KAAK,CAAC,EAAE;QACzB,IAAI,SAAS,IAAI,QAAQ,EAAE;YACvB,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAQ,CAAC;SACnD;KACJ;SAAM;QACH,SAAS,IAAI,SAAS,CAAC,KAAU,CAAC,CAAC;KACtC;IAED,IAAI,SAAS,EAAE;QACX,MAAM,GAAG,SAAS,CAAC,MAAa,EAAE,SAAS,CAAC,CAAC;KAChD;IAED,OAAO,MAAa,CAAC;AACzB,CAAC;AAsBD;;;;;;;GAOG;AACH,MAAM,UAAU,SAAS,CAAI,KAAsB,EAAE,SAAgC;IACjF,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,IAAI,SAAS,EAAE;QACX,IAAI,aAAa,CAAI,KAAK,CAAC,EAAE;YACzB,IAAK,KAAqB,CAAC,OAAO,EAAE;gBAChC,MAAM,GAAI,KAAqB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aACtD;iBAAM;gBACH,oCAAoC;gBACpC,MAAM,GAAG,KAAK,CAAC,IAAI,CACf,UAAS,KAAK;oBACV,SAAS,EAAE,CAAC;oBACZ,OAAO,KAAK,CAAC;gBACjB,CAAC,EAAE,UAAS,MAAW;oBACnB,SAAS,EAAE,CAAC;oBACZ,MAAM,MAAM,CAAC;gBACjB,CAAC,CAAC,CAAC;aACV;SACJ;aAAM;YACH,SAAS,EAAE,CAAC;SACf;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["/*\r\n * @nevware21/ts-async\r\n * https://github.com/nevware21/ts-async\r\n *\r\n * Copyright (c) 2022 Nevware21\r\n * Licensed under the MIT license.\r\n */\r\n\r\nimport { isPromiseLike } from \"@nevware21/ts-utils\";\r\nimport { AwaitResponse } from \"../interfaces/await-response\";\r\nimport { IPromise } from \"../interfaces/IPromise\";\r\nimport { FinallyPromiseHandler, RejectedPromiseHandler, ResolvedPromiseHandler } from \"../interfaces/types\";\r\n\r\n/**\r\n * Helper to coallesce the promise resolved / reject into a single callback to simplify error handling.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param cb - The callback to call with the response of the promise as an IAwaitResponse object.\r\n */\r\nexport function doAwaitResponse<T, TResult1 = T, TResult2 = never>(value: T | Promise<T>, cb: (response: AwaitResponse<T>) => void): T | Promise<T | TResult1 | TResult2>;\r\nexport function doAwaitResponse<T, TResult1 = T, TResult2 = never>(value: T | PromiseLike<T>, cb: (response: AwaitResponse<T>) => void): T | PromiseLike<T | TResult1 | TResult2>;\r\nexport function doAwaitResponse<T, TResult1 = T, TResult2 = never>(value: T | IPromise<T>, cb: (response: AwaitResponse<T>) => void): T | IPromise<T | TResult1 | TResult2> {\r\n    return doAwait(value as any, (value) => {\r\n        cb && cb({\r\n            value: value,\r\n            rejected: false\r\n        });\r\n    },\r\n    (reason) => {\r\n        cb && cb({\r\n            rejected: true,\r\n            reason: reason\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @param finallyFn - The callback to call once the promise has resolved or rejected\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait<T, TResult1 = T, TResult2 = never>(value: T | Promise<T>, resolveFn: ResolvedPromiseHandler<T, TResult1>, rejectFn?: RejectedPromiseHandler<TResult2>, finallyFn?: FinallyPromiseHandler): T | Promise<T | TResult1 | TResult2>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @param finallyFn - The callback to call once the promise has resolved or rejected\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait<T, TResult1 = T, TResult2 = never>(value: T | PromiseLike<T>, resolveFn: ResolvedPromiseHandler<T, TResult1>, rejectFn?: RejectedPromiseHandler<TResult2>, finallyFn?: FinallyPromiseHandler): T | PromiseLike<T | TResult1 | TResult2>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject, if resolved the callback function will be called with it's value and if\r\n * rejected the rejectFn will be called with the reason. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value.\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param resolveFn - The callback to call on the promise successful resolving.\r\n * @param rejectFn - The callback to call when the promise rejects\r\n * @returns The passed value, if it is a promise and there is either a resolve or reject handler\r\n * then it will return a chained promise with the value from the resolve or reject handler (depending\r\n * whether it resolve or rejects)\r\n * @example\r\n * ```ts\r\n * let promise = createPromise<number>((resolve, reject) => {\r\n *     resolve(42);\r\n * });\r\n *\r\n * // Handle via a chained promise\r\n * let chainedPromise = promise.then((value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // Handle via doAwait\r\n * doAwait(promise, (value) => {\r\n *     // Do something with the value\r\n * });\r\n *\r\n * // It can also handle the raw value, so you could process the result of either a\r\n * // synchrounous return of the value or a Promise\r\n * doAwait(42, (value) => {\r\n *     // Do something with the value\r\n * });\r\n * ```\r\n */\r\nexport function doAwait<T, TResult1 = T, TResult2 = never>(value: T | IPromise<T>, resolveFn: ResolvedPromiseHandler<T, TResult1>, rejectFn?: RejectedPromiseHandler<TResult2>, finallyFn?: FinallyPromiseHandler): T | IPromise<T | TResult1 | TResult2> {\r\n    let result = value;\r\n    \r\n    if (isPromiseLike<T>(value)) {\r\n        if (resolveFn || rejectFn) {\r\n            result = value.then(resolveFn, rejectFn) as any;\r\n        }\r\n    } else {\r\n        resolveFn && resolveFn(value as T);\r\n    }\r\n\r\n    if (finallyFn) {\r\n        result = doFinally(result as any, finallyFn);\r\n    }\r\n\r\n    return result as any;\r\n}\r\n\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally<T>(value: T | Promise<T>, finallyFn: FinallyPromiseHandler): T | Promise<T>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally<T>(value: T | PromiseLike<T>, finallyFn: FinallyPromiseHandler): T | PromiseLike<T>;\r\n\r\n/**\r\n * Wait for the promise to resolve or reject and then call the finallyFn. If the passed promise argument is not a promise the callback\r\n * will be called synchronously with the value. If the passed promise doesn't implement finally then a finally implementation will be\r\n * simulated using then(..., ...).\r\n * @group Await Helper\r\n * @param value - The value or promise like value to wait for\r\n * @param finallyFn - The finally function to call once the promise has resolved or rejected\r\n */\r\nexport function doFinally<T>(value: T | IPromise<T>, finallyFn: FinallyPromiseHandler): T | IPromise<T> {\r\n    let result = value;\r\n    if (finallyFn) {\r\n        if (isPromiseLike<T>(value)) {\r\n            if ((value as IPromise<T>).finally) {\r\n                result = (value as IPromise<T>).finally(finallyFn);\r\n            } else {\r\n                // Simulate finally if not available\r\n                result = value.then(\r\n                    function(value) {\r\n                        finallyFn();\r\n                        return value;\r\n                    }, function(reason: any) {\r\n                        finallyFn();\r\n                        throw reason;\r\n                    });\r\n            }\r\n        } else {\r\n            finallyFn();\r\n        }\r\n    }\r\n\r\n    return result;\r\n}"]}