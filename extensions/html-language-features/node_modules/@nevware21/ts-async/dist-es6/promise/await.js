import { isPromiseLike } from "@nevware21/ts-utils";
export function doAwaitResponse(value, cb) {
    return doAwait(value, (value) => {
        cb && cb({
            value: value,
            rejected: false
        });
    }, (reason) => {
        cb && cb({
            rejected: true,
            reason: reason
        });
    });
}
export function doAwait(value, resolveFn, rejectFn, finallyFn) {
    let result = value;
    if (isPromiseLike(value)) {
        if (resolveFn || rejectFn) {
            result = value.then(resolveFn, rejectFn);
        }
    }
    else {
        resolveFn && resolveFn(value);
    }
    if (finallyFn) {
        result = doFinally(result, finallyFn);
    }
    return result;
}
export function doFinally(value, finallyFn) {
    let result = value;
    if (finallyFn) {
        if (isPromiseLike(value)) {
            if (value.finally) {
                result = value.finally(finallyFn);
            }
            else {
                result = value.then(function (value) {
                    finallyFn();
                    return value;
                }, function (reason) {
                    finallyFn();
                    throw reason;
                });
            }
        }
        else {
            finallyFn();
        }
    }
    return result;
}
//# sourceMappingURL=await.js.map