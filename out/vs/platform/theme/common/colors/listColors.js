/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/base/common/color", "vs/platform/theme/common/colorUtils", "vs/platform/theme/common/colors/baseColors", "vs/platform/theme/common/colors/editorColors"], function (require, exports, nls, color_1, colorUtils_1, baseColors_1, editorColors_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tableOddRowsBackgroundColor = exports.tableColumnsBorder = exports.treeInactiveIndentGuidesStroke = exports.treeIndentGuidesStroke = exports.listDeemphasizedForeground = exports.listFilterMatchHighlightBorder = exports.listFilterMatchHighlight = exports.listFilterWidgetShadow = exports.listFilterWidgetNoMatchesOutline = exports.listFilterWidgetOutline = exports.listFilterWidgetBackground = exports.listWarningForeground = exports.listErrorForeground = exports.listInvalidItemForeground = exports.listFocusHighlightForeground = exports.listHighlightForeground = exports.listDropBetweenBackground = exports.listDropOverBackground = exports.listHoverForeground = exports.listHoverBackground = exports.listInactiveFocusOutline = exports.listInactiveFocusBackground = exports.listInactiveSelectionIconForeground = exports.listInactiveSelectionForeground = exports.listInactiveSelectionBackground = exports.listActiveSelectionIconForeground = exports.listActiveSelectionForeground = exports.listActiveSelectionBackground = exports.listFocusAndSelectionOutline = exports.listFocusOutline = exports.listFocusForeground = exports.listFocusBackground = void 0;
    exports.listFocusBackground = (0, colorUtils_1.registerColor)('list.focusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusBackground', "List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
    exports.listFocusForeground = (0, colorUtils_1.registerColor)('list.focusForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusForeground', "List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
    exports.listFocusOutline = (0, colorUtils_1.registerColor)('list.focusOutline', { dark: baseColors_1.focusBorder, light: baseColors_1.focusBorder, hcDark: baseColors_1.activeContrastBorder, hcLight: baseColors_1.activeContrastBorder }, nls.localize('listFocusOutline', "List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
    exports.listFocusAndSelectionOutline = (0, colorUtils_1.registerColor)('list.focusAndSelectionOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listFocusAndSelectionOutline', "List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not."));
    exports.listActiveSelectionBackground = (0, colorUtils_1.registerColor)('list.activeSelectionBackground', { dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: color_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listActiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
    exports.listActiveSelectionForeground = (0, colorUtils_1.registerColor)('list.activeSelectionForeground', { dark: color_1.Color.white, light: color_1.Color.white, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
    exports.listActiveSelectionIconForeground = (0, colorUtils_1.registerColor)('list.activeSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listActiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not."));
    exports.listInactiveSelectionBackground = (0, colorUtils_1.registerColor)('list.inactiveSelectionBackground', { dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: color_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listInactiveSelectionBackground', "List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
    exports.listInactiveSelectionForeground = (0, colorUtils_1.registerColor)('list.inactiveSelectionForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionForeground', "List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
    exports.listInactiveSelectionIconForeground = (0, colorUtils_1.registerColor)('list.inactiveSelectionIconForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveSelectionIconForeground', "List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
    exports.listInactiveFocusBackground = (0, colorUtils_1.registerColor)('list.inactiveFocusBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusBackground', "List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
    exports.listInactiveFocusOutline = (0, colorUtils_1.registerColor)('list.inactiveFocusOutline', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listInactiveFocusOutline', "List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not."));
    exports.listHoverBackground = (0, colorUtils_1.registerColor)('list.hoverBackground', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: color_1.Color.white.transparent(0.1), hcLight: color_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('listHoverBackground', "List/Tree background when hovering over items using the mouse."));
    exports.listHoverForeground = (0, colorUtils_1.registerColor)('list.hoverForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('listHoverForeground', "List/Tree foreground when hovering over items using the mouse."));
    exports.listDropOverBackground = (0, colorUtils_1.registerColor)('list.dropBackground', { dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null }, nls.localize('listDropBackground', "List/Tree drag and drop background when moving items over other items when using the mouse."));
    exports.listDropBetweenBackground = (0, colorUtils_1.registerColor)('list.dropBetweenBackground', { dark: baseColors_1.iconForeground, light: baseColors_1.iconForeground, hcDark: null, hcLight: null }, nls.localize('listDropBetweenBackground', "List/Tree drag and drop border color when moving items between items when using the mouse."));
    exports.listHighlightForeground = (0, colorUtils_1.registerColor)('list.highlightForeground', { dark: '#2AAAFF', light: '#0066BF', hcDark: baseColors_1.focusBorder, hcLight: baseColors_1.focusBorder }, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));
    exports.listFocusHighlightForeground = (0, colorUtils_1.registerColor)('list.focusHighlightForeground', { dark: exports.listHighlightForeground, light: (0, colorUtils_1.ifDefinedThenElse)(exports.listActiveSelectionBackground, exports.listHighlightForeground, '#BBE7FF'), hcDark: exports.listHighlightForeground, hcLight: exports.listHighlightForeground }, nls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));
    exports.listInvalidItemForeground = (0, colorUtils_1.registerColor)('list.invalidItemForeground', { dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' }, nls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));
    exports.listErrorForeground = (0, colorUtils_1.registerColor)('list.errorForeground', { dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));
    exports.listWarningForeground = (0, colorUtils_1.registerColor)('list.warningForeground', { dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));
    exports.listFilterWidgetBackground = (0, colorUtils_1.registerColor)('listFilterWidget.background', { light: (0, colorUtils_1.darken)(editorColors_1.editorWidgetBackground, 0), dark: (0, colorUtils_1.lighten)(editorColors_1.editorWidgetBackground, 0), hcDark: editorColors_1.editorWidgetBackground, hcLight: editorColors_1.editorWidgetBackground }, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));
    exports.listFilterWidgetOutline = (0, colorUtils_1.registerColor)('listFilterWidget.outline', { dark: color_1.Color.transparent, light: color_1.Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' }, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));
    exports.listFilterWidgetNoMatchesOutline = (0, colorUtils_1.registerColor)('listFilterWidget.noMatchesOutline', { dark: '#BE1100', light: '#BE1100', hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));
    exports.listFilterWidgetShadow = (0, colorUtils_1.registerColor)('listFilterWidget.shadow', { dark: editorColors_1.widgetShadow, light: editorColors_1.widgetShadow, hcDark: editorColors_1.widgetShadow, hcLight: editorColors_1.widgetShadow }, nls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));
    exports.listFilterMatchHighlight = (0, colorUtils_1.registerColor)('list.filterMatchBackground', { dark: editorColors_1.editorFindMatchHighlight, light: editorColors_1.editorFindMatchHighlight, hcDark: null, hcLight: null }, nls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));
    exports.listFilterMatchHighlightBorder = (0, colorUtils_1.registerColor)('list.filterMatchBorder', { dark: editorColors_1.editorFindMatchHighlightBorder, light: editorColors_1.editorFindMatchHighlightBorder, hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.activeContrastBorder }, nls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));
    exports.listDeemphasizedForeground = (0, colorUtils_1.registerColor)('list.deemphasizedForeground', { dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' }, nls.localize('listDeemphasizedForeground', "List/Tree foreground color for items that are deemphasized."));
    // ------ tree
    exports.treeIndentGuidesStroke = (0, colorUtils_1.registerColor)('tree.indentGuidesStroke', { dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' }, nls.localize('treeIndentGuidesStroke', "Tree stroke color for the indentation guides."));
    exports.treeInactiveIndentGuidesStroke = (0, colorUtils_1.registerColor)('tree.inactiveIndentGuidesStroke', { dark: (0, colorUtils_1.transparent)(exports.treeIndentGuidesStroke, 0.4), light: (0, colorUtils_1.transparent)(exports.treeIndentGuidesStroke, 0.4), hcDark: (0, colorUtils_1.transparent)(exports.treeIndentGuidesStroke, 0.4), hcLight: (0, colorUtils_1.transparent)(exports.treeIndentGuidesStroke, 0.4) }, nls.localize('treeInactiveIndentGuidesStroke', "Tree stroke color for the indentation guides that are not active."));
    // ------ table
    exports.tableColumnsBorder = (0, colorUtils_1.registerColor)('tree.tableColumnsBorder', { dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null }, nls.localize('tableColumnsBorder', "Table border color between columns."));
    exports.tableOddRowsBackgroundColor = (0, colorUtils_1.registerColor)('tree.tableOddRowsBackground', { dark: (0, colorUtils_1.transparent)(baseColors_1.foreground, 0.04), light: (0, colorUtils_1.transparent)(baseColors_1.foreground, 0.04), hcDark: null, hcLight: null }, nls.localize('tableOddRowsBackgroundColor', "Background color for odd table rows."));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdENvbG9ycy5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvbW9kL21vZC9idWlsZHZzY29kZS92c2NvZGUvc3JjLyIsInNvdXJjZXMiOlsidnMvcGxhdGZvcm0vdGhlbWUvY29tbW9uL2NvbG9ycy9saXN0Q29sb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHOzs7OztJQWFuRixRQUFBLG1CQUFtQixHQUFHLElBQUEsMEJBQWEsRUFBQyxzQkFBc0IsRUFDdEUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQ3hELEdBQUcsQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsNklBQTZJLENBQUMsQ0FBQyxDQUFDO0lBRXhLLFFBQUEsbUJBQW1CLEdBQUcsSUFBQSwwQkFBYSxFQUFDLHNCQUFzQixFQUN0RSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFDeEQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSw2SUFBNkksQ0FBQyxDQUFDLENBQUM7SUFFeEssUUFBQSxnQkFBZ0IsR0FBRyxJQUFBLDBCQUFhLEVBQUMsbUJBQW1CLEVBQ2hFLEVBQUUsSUFBSSxFQUFFLHdCQUFXLEVBQUUsS0FBSyxFQUFFLHdCQUFXLEVBQUUsTUFBTSxFQUFFLGlDQUFvQixFQUFFLE9BQU8sRUFBRSxpQ0FBb0IsRUFBRSxFQUN0RyxHQUFHLENBQUMsUUFBUSxDQUFDLGtCQUFrQixFQUFFLDBJQUEwSSxDQUFDLENBQUMsQ0FBQztJQUVsSyxRQUFBLDRCQUE0QixHQUFHLElBQUEsMEJBQWEsRUFBQywrQkFBK0IsRUFDeEYsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVB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