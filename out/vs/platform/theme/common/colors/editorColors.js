/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/base/common/color", "vs/platform/theme/common/colorUtils", "vs/platform/theme/common/colors/baseColors", "vs/platform/theme/common/colors/miscColors"], function (require, exports, nls, color_1, colorUtils_1, baseColors_1, miscColors_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.problemsInfoIconForeground = exports.problemsWarningIconForeground = exports.problemsErrorIconForeground = exports.overviewRulerSelectionHighlightForeground = exports.overviewRulerFindMatchForeground = exports.overviewRulerCommonContentForeground = exports.overviewRulerIncomingContentForeground = exports.overviewRulerCurrentContentForeground = exports.mergeBorder = exports.mergeCommonContentBackground = exports.mergeCommonHeaderBackground = exports.mergeIncomingContentBackground = exports.mergeIncomingHeaderBackground = exports.mergeCurrentContentBackground = exports.mergeCurrentHeaderBackground = exports.breadcrumbsPickerBackground = exports.breadcrumbsActiveSelectionForeground = exports.breadcrumbsFocusForeground = exports.breadcrumbsBackground = exports.breadcrumbsForeground = exports.toolbarActiveBackground = exports.toolbarHoverOutline = exports.toolbarHoverBackground = exports.widgetBorder = exports.widgetShadow = exports.diffUnchangedTextBackground = exports.diffUnchangedRegionForeground = exports.diffUnchangedRegionBackground = exports.diffDiagonalFill = exports.diffBorder = exports.diffRemovedOutline = exports.diffInsertedOutline = exports.diffOverviewRulerRemoved = exports.diffOverviewRulerInserted = exports.diffRemovedLineGutter = exports.diffInsertedLineGutter = exports.diffRemovedLine = exports.diffInsertedLine = exports.diffRemoved = exports.diffInserted = exports.defaultRemoveColor = exports.defaultInsertColor = exports.snippetFinalTabstopHighlightBorder = exports.snippetFinalTabstopHighlightBackground = exports.snippetTabstopHighlightBorder = exports.snippetTabstopHighlightBackground = exports.editorLightBulbAiForeground = exports.editorLightBulbAutoFixForeground = exports.editorLightBulbForeground = exports.editorInlayHintParameterBackground = exports.editorInlayHintParameterForeground = exports.editorInlayHintTypeBackground = exports.editorInlayHintTypeForeground = exports.editorInlayHintBackground = exports.editorInlayHintForeground = exports.editorHoverStatusBarBackground = exports.editorHoverBorder = exports.editorHoverForeground = exports.editorHoverBackground = exports.editorHoverHighlight = exports.editorFindRangeHighlightBorder = exports.editorFindMatchHighlightBorder = exports.editorFindMatchBorder = exports.editorFindRangeHighlight = exports.editorFindMatchHighlight = exports.editorFindMatch = exports.editorSelectionHighlightBorder = exports.editorSelectionHighlight = exports.editorInactiveSelection = exports.editorSelectionForeground = exports.editorSelectionBackground = exports.editorActiveLinkForeground = exports.editorHintBorder = exports.editorHintForeground = exports.editorInfoBorder = exports.editorInfoForeground = exports.editorInfoBackground = exports.editorWarningBorder = exports.editorWarningForeground = exports.editorWarningBackground = exports.editorErrorBorder = exports.editorErrorForeground = exports.editorErrorBackground = exports.editorWidgetResizeBorder = exports.editorWidgetBorder = exports.editorWidgetForeground = exports.editorWidgetBackground = exports.editorStickyScrollShadow = exports.editorStickyScrollBorder = exports.editorStickyScrollHoverBackground = exports.editorStickyScrollBackground = exports.editorForeground = exports.editorBackground = void 0;
    // ----- editor
    exports.editorBackground = (0, colorUtils_1.registerColor)('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: color_1.Color.black, hcLight: color_1.Color.white }, nls.localize('editorBackground', "Editor background color."));
    exports.editorForeground = (0, colorUtils_1.registerColor)('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: color_1.Color.white, hcLight: baseColors_1.foreground }, nls.localize('editorForeground', "Editor default foreground color."));
    exports.editorStickyScrollBackground = (0, colorUtils_1.registerColor)('editorStickyScroll.background', { light: exports.editorBackground, dark: exports.editorBackground, hcDark: exports.editorBackground, hcLight: exports.editorBackground }, nls.localize('editorStickyScrollBackground', "Background color of sticky scroll in the editor"));
    exports.editorStickyScrollHoverBackground = (0, colorUtils_1.registerColor)('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: color_1.Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', "Background color of sticky scroll on hover in the editor"));
    exports.editorStickyScrollBorder = (0, colorUtils_1.registerColor)('editorStickyScroll.border', { dark: null, light: null, hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('editorStickyScrollBorder', "Border color of sticky scroll in the editor"));
    exports.editorStickyScrollShadow = (0, colorUtils_1.registerColor)('editorStickyScroll.shadow', { dark: miscColors_1.scrollbarShadow, light: miscColors_1.scrollbarShadow, hcDark: miscColors_1.scrollbarShadow, hcLight: miscColors_1.scrollbarShadow }, nls.localize('editorStickyScrollShadow', " Shadow color of sticky scroll in the editor"));
    exports.editorWidgetBackground = (0, colorUtils_1.registerColor)('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: color_1.Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));
    exports.editorWidgetForeground = (0, colorUtils_1.registerColor)('editorWidget.foreground', { dark: baseColors_1.foreground, light: baseColors_1.foreground, hcDark: baseColors_1.foreground, hcLight: baseColors_1.foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));
    exports.editorWidgetBorder = (0, colorUtils_1.registerColor)('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));
    exports.editorWidgetResizeBorder = (0, colorUtils_1.registerColor)('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', "Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget."));
    exports.editorErrorBackground = (0, colorUtils_1.registerColor)('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.editorErrorForeground = (0, colorUtils_1.registerColor)('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));
    exports.editorErrorBorder = (0, colorUtils_1.registerColor)('editorError.border', { dark: null, light: null, hcDark: color_1.Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));
    exports.editorWarningBackground = (0, colorUtils_1.registerColor)('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.editorWarningForeground = (0, colorUtils_1.registerColor)('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));
    exports.editorWarningBorder = (0, colorUtils_1.registerColor)('editorWarning.border', { dark: null, light: null, hcDark: color_1.Color.fromHex('#FFCC00').transparent(0.8), hcLight: color_1.Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));
    exports.editorInfoBackground = (0, colorUtils_1.registerColor)('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.editorInfoForeground = (0, colorUtils_1.registerColor)('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));
    exports.editorInfoBorder = (0, colorUtils_1.registerColor)('editorInfo.border', { dark: null, light: null, hcDark: color_1.Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));
    exports.editorHintForeground = (0, colorUtils_1.registerColor)('editorHint.foreground', { dark: color_1.Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));
    exports.editorHintBorder = (0, colorUtils_1.registerColor)('editorHint.border', { dark: null, light: null, hcDark: color_1.Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));
    exports.editorActiveLinkForeground = (0, colorUtils_1.registerColor)('editorLink.activeForeground', { dark: '#4E94CE', light: color_1.Color.blue, hcDark: color_1.Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));
    // ----- editor selection
    exports.editorSelectionBackground = (0, colorUtils_1.registerColor)('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', "Color of the editor selection."));
    exports.editorSelectionForeground = (0, colorUtils_1.registerColor)('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: color_1.Color.white }, nls.localize('editorSelectionForeground', "Color of the selected text for high contrast."));
    exports.editorInactiveSelection = (0, colorUtils_1.registerColor)('editor.inactiveSelectionBackground', { light: (0, colorUtils_1.transparent)(exports.editorSelectionBackground, 0.5), dark: (0, colorUtils_1.transparent)(exports.editorSelectionBackground, 0.5), hcDark: (0, colorUtils_1.transparent)(exports.editorSelectionBackground, 0.7), hcLight: (0, colorUtils_1.transparent)(exports.editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', "Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations."), true);
    exports.editorSelectionHighlight = (0, colorUtils_1.registerColor)('editor.selectionHighlightBackground', { light: (0, colorUtils_1.lessProminent)(exports.editorSelectionBackground, exports.editorBackground, 0.3, 0.6), dark: (0, colorUtils_1.lessProminent)(exports.editorSelectionBackground, exports.editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.editorSelectionHighlightBorder = (0, colorUtils_1.registerColor)('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: baseColors_1.activeContrastBorder, hcLight: baseColors_1.activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', "Border color for regions with the same content as the selection."));
    // ----- editor find
    exports.editorFindMatch = (0, colorUtils_1.registerColor)('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', "Color of the current search match."));
    exports.editorFindMatchHighlight = (0, colorUtils_1.registerColor)('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', "Color of the other search matches. The color must not be opaque so as not to hide underlying decorations."), true);
    exports.editorFindRangeHighlight = (0, colorUtils_1.registerColor)('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', "Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
    exports.editorFindMatchBorder = (0, colorUtils_1.registerColor)('editor.findMatchBorder', { light: null, dark: null, hcDark: baseColors_1.activeContrastBorder, hcLight: baseColors_1.activeContrastBorder }, nls.localize('editorFindMatchBorder', "Border color of the current search match."));
    exports.editorFindMatchHighlightBorder = (0, colorUtils_1.registerColor)('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: baseColors_1.activeContrastBorder, hcLight: baseColors_1.activeContrastBorder }, nls.localize('findMatchHighlightBorder', "Border color of the other search matches."));
    exports.editorFindRangeHighlightBorder = (0, colorUtils_1.registerColor)('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: (0, colorUtils_1.transparent)(baseColors_1.activeContrastBorder, 0.4), hcLight: (0, colorUtils_1.transparent)(baseColors_1.activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', "Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations."), true);
    // ----- editor hover
    exports.editorHoverHighlight = (0, colorUtils_1.registerColor)('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.editorHoverBackground = (0, colorUtils_1.registerColor)('editorHoverWidget.background', { light: exports.editorWidgetBackground, dark: exports.editorWidgetBackground, hcDark: exports.editorWidgetBackground, hcLight: exports.editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));
    exports.editorHoverForeground = (0, colorUtils_1.registerColor)('editorHoverWidget.foreground', { light: exports.editorWidgetForeground, dark: exports.editorWidgetForeground, hcDark: exports.editorWidgetForeground, hcLight: exports.editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));
    exports.editorHoverBorder = (0, colorUtils_1.registerColor)('editorHoverWidget.border', { light: exports.editorWidgetBorder, dark: exports.editorWidgetBorder, hcDark: exports.editorWidgetBorder, hcLight: exports.editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));
    exports.editorHoverStatusBarBackground = (0, colorUtils_1.registerColor)('editorHoverWidget.statusBarBackground', { dark: (0, colorUtils_1.lighten)(exports.editorHoverBackground, 0.2), light: (0, colorUtils_1.darken)(exports.editorHoverBackground, 0.05), hcDark: exports.editorWidgetBackground, hcLight: exports.editorWidgetBackground }, nls.localize('statusBarBackground', "Background color of the editor hover status bar."));
    // ----- editor inlay hint
    exports.editorInlayHintForeground = (0, colorUtils_1.registerColor)('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: color_1.Color.white, hcLight: color_1.Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));
    exports.editorInlayHintBackground = (0, colorUtils_1.registerColor)('editorInlayHint.background', { dark: (0, colorUtils_1.transparent)(miscColors_1.badgeBackground, .10), light: (0, colorUtils_1.transparent)(miscColors_1.badgeBackground, .10), hcDark: (0, colorUtils_1.transparent)(color_1.Color.white, .10), hcLight: (0, colorUtils_1.transparent)(miscColors_1.badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));
    exports.editorInlayHintTypeForeground = (0, colorUtils_1.registerColor)('editorInlayHint.typeForeground', { dark: exports.editorInlayHintForeground, light: exports.editorInlayHintForeground, hcDark: exports.editorInlayHintForeground, hcLight: exports.editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));
    exports.editorInlayHintTypeBackground = (0, colorUtils_1.registerColor)('editorInlayHint.typeBackground', { dark: exports.editorInlayHintBackground, light: exports.editorInlayHintBackground, hcDark: exports.editorInlayHintBackground, hcLight: exports.editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));
    exports.editorInlayHintParameterForeground = (0, colorUtils_1.registerColor)('editorInlayHint.parameterForeground', { dark: exports.editorInlayHintForeground, light: exports.editorInlayHintForeground, hcDark: exports.editorInlayHintForeground, hcLight: exports.editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));
    exports.editorInlayHintParameterBackground = (0, colorUtils_1.registerColor)('editorInlayHint.parameterBackground', { dark: exports.editorInlayHintBackground, light: exports.editorInlayHintBackground, hcDark: exports.editorInlayHintBackground, hcLight: exports.editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));
    // ----- editor lightbulb
    exports.editorLightBulbForeground = (0, colorUtils_1.registerColor)('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', "The color used for the lightbulb actions icon."));
    exports.editorLightBulbAutoFixForeground = (0, colorUtils_1.registerColor)('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', "The color used for the lightbulb auto fix actions icon."));
    exports.editorLightBulbAiForeground = (0, colorUtils_1.registerColor)('editorLightBulbAi.foreground', { dark: exports.editorLightBulbForeground, light: exports.editorLightBulbForeground, hcDark: exports.editorLightBulbForeground, hcLight: exports.editorLightBulbForeground }, nls.localize('editorLightBulbAiForeground', "The color used for the lightbulb AI icon."));
    // ----- editor snippet
    exports.snippetTabstopHighlightBackground = (0, colorUtils_1.registerColor)('editor.snippetTabstopHighlightBackground', { dark: new color_1.Color(new color_1.RGBA(124, 124, 124, 0.3)), light: new color_1.Color(new color_1.RGBA(10, 50, 100, 0.2)), hcDark: new color_1.Color(new color_1.RGBA(124, 124, 124, 0.3)), hcLight: new color_1.Color(new color_1.RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', "Highlight background color of a snippet tabstop."));
    exports.snippetTabstopHighlightBorder = (0, colorUtils_1.registerColor)('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', "Highlight border color of a snippet tabstop."));
    exports.snippetFinalTabstopHighlightBackground = (0, colorUtils_1.registerColor)('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', "Highlight background color of the final tabstop of a snippet."));
    exports.snippetFinalTabstopHighlightBorder = (0, colorUtils_1.registerColor)('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new color_1.Color(new color_1.RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', "Highlight border color of the final tabstop of a snippet."));
    // ----- diff editor
    exports.defaultInsertColor = new color_1.Color(new color_1.RGBA(155, 185, 85, .2));
    exports.defaultRemoveColor = new color_1.Color(new color_1.RGBA(255, 0, 0, .2));
    exports.diffInserted = (0, colorUtils_1.registerColor)('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.diffRemoved = (0, colorUtils_1.registerColor)('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.diffInsertedLine = (0, colorUtils_1.registerColor)('diffEditor.insertedLineBackground', { dark: exports.defaultInsertColor, light: exports.defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.diffRemovedLine = (0, colorUtils_1.registerColor)('diffEditor.removedLineBackground', { dark: exports.defaultRemoveColor, light: exports.defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.diffInsertedLineGutter = (0, colorUtils_1.registerColor)('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));
    exports.diffRemovedLineGutter = (0, colorUtils_1.registerColor)('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));
    exports.diffOverviewRulerInserted = (0, colorUtils_1.registerColor)('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));
    exports.diffOverviewRulerRemoved = (0, colorUtils_1.registerColor)('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));
    exports.diffInsertedOutline = (0, colorUtils_1.registerColor)('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));
    exports.diffRemovedOutline = (0, colorUtils_1.registerColor)('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));
    exports.diffBorder = (0, colorUtils_1.registerColor)('diffEditor.border', { dark: null, light: null, hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));
    exports.diffDiagonalFill = (0, colorUtils_1.registerColor)('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', "Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views."));
    exports.diffUnchangedRegionBackground = (0, colorUtils_1.registerColor)('diffEditor.unchangedRegionBackground', { dark: 'sideBar.background', light: 'sideBar.background', hcDark: 'sideBar.background', hcLight: 'sideBar.background' }, nls.localize('diffEditor.unchangedRegionBackground', "The background color of unchanged blocks in the diff editor."));
    exports.diffUnchangedRegionForeground = (0, colorUtils_1.registerColor)('diffEditor.unchangedRegionForeground', { dark: 'foreground', light: 'foreground', hcDark: 'foreground', hcLight: 'foreground' }, nls.localize('diffEditor.unchangedRegionForeground', "The foreground color of unchanged blocks in the diff editor."));
    exports.diffUnchangedTextBackground = (0, colorUtils_1.registerColor)('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', "The background color of unchanged code in the diff editor."));
    // ----- widget
    exports.widgetShadow = (0, colorUtils_1.registerColor)('widget.shadow', { dark: (0, colorUtils_1.transparent)(color_1.Color.black, .36), light: (0, colorUtils_1.transparent)(color_1.Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));
    exports.widgetBorder = (0, colorUtils_1.registerColor)('widget.border', { dark: null, light: null, hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));
    // ----- toolbar
    exports.toolbarHoverBackground = (0, colorUtils_1.registerColor)('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', "Toolbar background when hovering over actions using the mouse"));
    exports.toolbarHoverOutline = (0, colorUtils_1.registerColor)('toolbar.hoverOutline', { dark: null, light: null, hcDark: baseColors_1.activeContrastBorder, hcLight: baseColors_1.activeContrastBorder }, nls.localize('toolbarHoverOutline', "Toolbar outline when hovering over actions using the mouse"));
    exports.toolbarActiveBackground = (0, colorUtils_1.registerColor)('toolbar.activeBackground', { dark: (0, colorUtils_1.lighten)(exports.toolbarHoverBackground, 0.1), light: (0, colorUtils_1.darken)(exports.toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', "Toolbar background when holding the mouse over actions"));
    // ----- breadcumbs
    exports.breadcrumbsForeground = (0, colorUtils_1.registerColor)('breadcrumb.foreground', { light: (0, colorUtils_1.transparent)(baseColors_1.foreground, 0.8), dark: (0, colorUtils_1.transparent)(baseColors_1.foreground, 0.8), hcDark: (0, colorUtils_1.transparent)(baseColors_1.foreground, 0.8), hcLight: (0, colorUtils_1.transparent)(baseColors_1.foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
    exports.breadcrumbsBackground = (0, colorUtils_1.registerColor)('breadcrumb.background', { light: exports.editorBackground, dark: exports.editorBackground, hcDark: exports.editorBackground, hcLight: exports.editorBackground }, nls.localize('breadcrumbsBackground', "Background color of breadcrumb items."));
    exports.breadcrumbsFocusForeground = (0, colorUtils_1.registerColor)('breadcrumb.focusForeground', { light: (0, colorUtils_1.darken)(baseColors_1.foreground, 0.2), dark: (0, colorUtils_1.lighten)(baseColors_1.foreground, 0.1), hcDark: (0, colorUtils_1.lighten)(baseColors_1.foreground, 0.1), hcLight: (0, colorUtils_1.lighten)(baseColors_1.foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', "Color of focused breadcrumb items."));
    exports.breadcrumbsActiveSelectionForeground = (0, colorUtils_1.registerColor)('breadcrumb.activeSelectionForeground', { light: (0, colorUtils_1.darken)(baseColors_1.foreground, 0.2), dark: (0, colorUtils_1.lighten)(baseColors_1.foreground, 0.1), hcDark: (0, colorUtils_1.lighten)(baseColors_1.foreground, 0.1), hcLight: (0, colorUtils_1.lighten)(baseColors_1.foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', "Color of selected breadcrumb items."));
    exports.breadcrumbsPickerBackground = (0, colorUtils_1.registerColor)('breadcrumbPicker.background', { light: exports.editorWidgetBackground, dark: exports.editorWidgetBackground, hcDark: exports.editorWidgetBackground, hcLight: exports.editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', "Background color of breadcrumb item picker."));
    // ----- merge
    const headerTransparency = 0.5;
    const currentBaseColor = color_1.Color.fromHex('#40C8AE').transparent(headerTransparency);
    const incomingBaseColor = color_1.Color.fromHex('#40A6FF').transparent(headerTransparency);
    const commonBaseColor = color_1.Color.fromHex('#606060').transparent(0.4);
    const contentTransparency = 0.4;
    const rulerTransparency = 1;
    exports.mergeCurrentHeaderBackground = (0, colorUtils_1.registerColor)('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.mergeCurrentContentBackground = (0, colorUtils_1.registerColor)('merge.currentContentBackground', { dark: (0, colorUtils_1.transparent)(exports.mergeCurrentHeaderBackground, contentTransparency), light: (0, colorUtils_1.transparent)(exports.mergeCurrentHeaderBackground, contentTransparency), hcDark: (0, colorUtils_1.transparent)(exports.mergeCurrentHeaderBackground, contentTransparency), hcLight: (0, colorUtils_1.transparent)(exports.mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.mergeIncomingHeaderBackground = (0, colorUtils_1.registerColor)('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.mergeIncomingContentBackground = (0, colorUtils_1.registerColor)('merge.incomingContentBackground', { dark: (0, colorUtils_1.transparent)(exports.mergeIncomingHeaderBackground, contentTransparency), light: (0, colorUtils_1.transparent)(exports.mergeIncomingHeaderBackground, contentTransparency), hcDark: (0, colorUtils_1.transparent)(exports.mergeIncomingHeaderBackground, contentTransparency), hcLight: (0, colorUtils_1.transparent)(exports.mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.mergeCommonHeaderBackground = (0, colorUtils_1.registerColor)('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.mergeCommonContentBackground = (0, colorUtils_1.registerColor)('merge.commonContentBackground', { dark: (0, colorUtils_1.transparent)(exports.mergeCommonHeaderBackground, contentTransparency), light: (0, colorUtils_1.transparent)(exports.mergeCommonHeaderBackground, contentTransparency), hcDark: (0, colorUtils_1.transparent)(exports.mergeCommonHeaderBackground, contentTransparency), hcLight: (0, colorUtils_1.transparent)(exports.mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.mergeBorder = (0, colorUtils_1.registerColor)('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));
    exports.overviewRulerCurrentContentForeground = (0, colorUtils_1.registerColor)('editorOverviewRuler.currentContentForeground', { dark: (0, colorUtils_1.transparent)(exports.mergeCurrentHeaderBackground, rulerTransparency), light: (0, colorUtils_1.transparent)(exports.mergeCurrentHeaderBackground, rulerTransparency), hcDark: exports.mergeBorder, hcLight: exports.mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));
    exports.overviewRulerIncomingContentForeground = (0, colorUtils_1.registerColor)('editorOverviewRuler.incomingContentForeground', { dark: (0, colorUtils_1.transparent)(exports.mergeIncomingHeaderBackground, rulerTransparency), light: (0, colorUtils_1.transparent)(exports.mergeIncomingHeaderBackground, rulerTransparency), hcDark: exports.mergeBorder, hcLight: exports.mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));
    exports.overviewRulerCommonContentForeground = (0, colorUtils_1.registerColor)('editorOverviewRuler.commonContentForeground', { dark: (0, colorUtils_1.transparent)(exports.mergeCommonHeaderBackground, rulerTransparency), light: (0, colorUtils_1.transparent)(exports.mergeCommonHeaderBackground, rulerTransparency), hcDark: exports.mergeBorder, hcLight: exports.mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));
    exports.overviewRulerFindMatchForeground = (0, colorUtils_1.registerColor)('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);
    exports.overviewRulerSelectionHighlightForeground = (0, colorUtils_1.registerColor)('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);
    // ----- problems
    exports.problemsErrorIconForeground = (0, colorUtils_1.registerColor)('problemsErrorIcon.foreground', { dark: exports.editorErrorForeground, light: exports.editorErrorForeground, hcDark: exports.editorErrorForeground, hcLight: exports.editorErrorForeground }, nls.localize('problemsErrorIconForeground', "The color used for the problems error icon."));
    exports.problemsWarningIconForeground = (0, colorUtils_1.registerColor)('problemsWarningIcon.foreground', { dark: exports.editorWarningForeground, light: exports.editorWarningForeground, hcDark: exports.editorWarningForeground, hcLight: exports.editorWarningForeground }, nls.localize('problemsWarningIconForeground', "The color used for the problems warning icon."));
    exports.problemsInfoIconForeground = (0, colorUtils_1.registerColor)('problemsInfoIcon.foreground', { dark: exports.editorInfoForeground, light: exports.editorInfoForeground, hcDark: exports.editorInfoForeground, hcLight: exports.editorInfoForeground }, nls.localize('problemsInfoIconForeground', "The color used for the problems info icon."));
});
//# sourceMappingURL=data:application/json;base64,