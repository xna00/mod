/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/base/common/color", "vs/platform/theme/common/colorUtils", "vs/platform/theme/common/colors/baseColors"], function (require, exports, nls, color_1, colorUtils_1, baseColors_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.progressBarBackground = exports.scrollbarSliderActiveBackground = exports.scrollbarSliderHoverBackground = exports.scrollbarSliderBackground = exports.scrollbarShadow = exports.badgeForeground = exports.badgeBackground = exports.sashHoverBorder = void 0;
    // ----- sash
    exports.sashHoverBorder = (0, colorUtils_1.registerColor)('sash.hoverBorder', { dark: baseColors_1.focusBorder, light: baseColors_1.focusBorder, hcDark: baseColors_1.focusBorder, hcLight: baseColors_1.focusBorder }, nls.localize('sashActiveBorder', "Border color of active sashes."));
    // ----- badge
    exports.badgeBackground = (0, colorUtils_1.registerColor)('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: color_1.Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', "Badge background color. Badges are small information labels, e.g. for search results count."));
    exports.badgeForeground = (0, colorUtils_1.registerColor)('badge.foreground', { dark: color_1.Color.white, light: '#333', hcDark: color_1.Color.white, hcLight: color_1.Color.white }, nls.localize('badgeForeground', "Badge foreground color. Badges are small information labels, e.g. for search results count."));
    // ----- scrollbar
    exports.scrollbarShadow = (0, colorUtils_1.registerColor)('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', "Scrollbar shadow to indicate that the view is scrolled."));
    exports.scrollbarSliderBackground = (0, colorUtils_1.registerColor)('scrollbarSlider.background', { dark: color_1.Color.fromHex('#797979').transparent(0.4), light: color_1.Color.fromHex('#646464').transparent(0.4), hcDark: (0, colorUtils_1.transparent)(baseColors_1.contrastBorder, 0.6), hcLight: (0, colorUtils_1.transparent)(baseColors_1.contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', "Scrollbar slider background color."));
    exports.scrollbarSliderHoverBackground = (0, colorUtils_1.registerColor)('scrollbarSlider.hoverBackground', { dark: color_1.Color.fromHex('#646464').transparent(0.7), light: color_1.Color.fromHex('#646464').transparent(0.7), hcDark: (0, colorUtils_1.transparent)(baseColors_1.contrastBorder, 0.8), hcLight: (0, colorUtils_1.transparent)(baseColors_1.contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', "Scrollbar slider background color when hovering."));
    exports.scrollbarSliderActiveBackground = (0, colorUtils_1.registerColor)('scrollbarSlider.activeBackground', { dark: color_1.Color.fromHex('#BFBFBF').transparent(0.4), light: color_1.Color.fromHex('#000000').transparent(0.6), hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('scrollbarSliderActiveBackground', "Scrollbar slider background color when clicked on."));
    // ----- progress bar
    exports.progressBarBackground = (0, colorUtils_1.registerColor)('progressBar.background', { dark: color_1.Color.fromHex('#0E70C0'), light: color_1.Color.fromHex('#0E70C0'), hcDark: baseColors_1.contrastBorder, hcLight: baseColors_1.contrastBorder }, nls.localize('progressBarBackground', "Background color of the progress bar that can show for long running operations."));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzY0NvbG9ycy5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvbW9kL21vZC9idWlsZHZzY29kZS92c2NvZGUvc3JjLyIsInNvdXJjZXMiOlsidnMvcGxhdGZvcm0vdGhlbWUvY29tbW9uL2NvbG9ycy9taXNjQ29sb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHOzs7OztJQVloRyxhQUFhO0lBRUEsUUFBQSxlQUFlLEdBQUcsSUFBQSwwQkFBYSxFQUFDLGtCQUFrQixFQUM5RCxFQUFFLElBQUksRUFBRSx3QkFBVyxFQUFFLEtBQUssRUFBRSx3QkFBVyxFQUFFLE1BQU0sRUFBRSx3QkFBVyxFQUFFLE9BQU8sRUFBRSx3QkFBVyxFQUFFLEVBQ3BGLEdBQUcsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO0lBR3JFLGNBQWM7SUFFRCxRQUFBLGVBQWUsR0FBRyxJQUFBLDBCQUFhLEVBQUMsa0JBQWtCLEVBQzlELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxhQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFDOUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSw2RkFBNkYsQ0FBQyxDQUFDLENBQUM7SUFFcEgsUUFBQSxlQUFlLEdBQUcsSUFBQSwwQkFBYSxFQUFDLGtCQUFrQixFQUM5RCxFQUFFLElBQUksRUFBRSxhQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQUssQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGFBQUssQ0FBQyxLQUFLLEVBQUUsRUFDL0UsR0FBRyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSw2RkFBNkYsQ0FBQyxDQUFDLENBQUM7SUFHakksa0JBQWtCO0lBRUwsUUFBQSxlQUFlLEdBQUcsSUFBQSwwQkFBYSxFQUFDLGtCQUFrQixFQUM5RCxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFDbEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSx5REFBeUQsQ0FBQyxDQUFDLENBQUM7SUFFaEYsUUFBQSx5QkFBeUIsR0FBRyxJQUFBLDBCQUFhLEVBQUMsNEJBQTRCLEVBQ2xGLEVBQUUsSUFBSSxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBQSx3QkFBVyxFQUFDLDJCQUFjLEVBQUUsR0FBRyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUEsd0JBQVcsRUFBQywyQkFBYyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQzFMLEdBQUcsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLEVBQUUsb0NBQW9DLENBQUMsQ0FBQyxDQUFDO0lBRXJFLFFBQUEsOEJBQThCLEdBQUcsSUFBQSwwQkFBYSxFQUFDLGlDQUFpQyxFQUM1RixFQUFFLElBQUksRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUEsd0JBQVcsRUFBQywyQkFBYyxFQUFFLEdBQUcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFBLHdCQUFXLEVBQUMsMkJBQWMsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUMxTCxHQUFHLENBQUMsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLGtEQUFrRCxDQUFDLENBQUMsQ0FBQztJQUV4RixRQUFBLCtCQUErQixHQUFHLElBQUEsMEJBQWEsRUFBQyxrQ0FBa0MsRUFDOUYsRUFBRSxJQUFJLEVBQUUsYUFBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSwyQkFBYyxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFLEVBQ3RKLEdBQUcsQ0FBQyxRQUFRLENBQUMsaUNBQWlDLEVBQUUsb0RBQW9ELENBQUMsQ0FBQyxDQUFDO0lBR3hHLHFCQUFxQjtJQUVSLFFBQUEscUJBQXFCLEdBQUcsSUFBQSwwQkFBYSxFQUFDLHdCQUF3QixFQUMxRSxFQUFFLElBQUksRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSwyQkFBYyxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFLEVBQ3BILEdBQUcsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLEVBQUUsaUZBQWlGLENBQUMsQ0FBQyxDQUFDIn0=