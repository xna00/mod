/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "assert", "vs/base/test/common/utils", "vs/code/electron-sandbox/issue/issueReporterModel", "vs/platform/issue/common/issueReporterUtil"], function (require, exports, assert, utils_1, issueReporterModel_1, issueReporterUtil_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('IssueReporter', () => {
        (0, utils_1.ensureNoDisposablesAreLeakedInTestSuite)();
        test('sets defaults to include all data', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel();
            assert.deepStrictEqual(issueReporterModel.getData(), {
                allExtensions: [],
                includeSystemInfo: true,
                includeExtensionData: true,
                includeWorkspaceInfo: true,
                includeProcessInfo: true,
                includeExtensions: true,
                includeExperiments: true,
                issueType: 0
            });
        });
        test('serializes model skeleton when no data is provided', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({});
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes:

Extensions: none
<!-- generated by issue reporter -->`);
        });
        test('serializes GPU information when data is provided', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                issueType: 0,
                systemInfo: {
                    os: 'Darwin',
                    cpus: 'Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)',
                    memory: '16.00GB',
                    vmHint: '0%',
                    processArgs: '',
                    screenReader: 'no',
                    remoteData: [],
                    gpuStatus: {
                        '2d_canvas': 'enabled',
                        'checker_imaging': 'disabled_off'
                    }
                }
            });
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes:

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)|
|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off|
|Load (avg)|undefined|
|Memory (System)|16.00GB|
|Process Argv||
|Screen Reader|no|
|VM|0%|
</details>Extensions: none
<!-- generated by issue reporter -->`);
        });
        test('serializes experiment info when data is provided', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                issueType: 0,
                systemInfo: {
                    os: 'Darwin',
                    cpus: 'Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)',
                    memory: '16.00GB',
                    vmHint: '0%',
                    processArgs: '',
                    screenReader: 'no',
                    remoteData: [],
                    gpuStatus: {
                        '2d_canvas': 'enabled',
                        'checker_imaging': 'disabled_off'
                    }
                },
                experimentInfo: 'vsliv695:30137379\nvsins829:30139715'
            });
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes:

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)|
|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off|
|Load (avg)|undefined|
|Memory (System)|16.00GB|
|Process Argv||
|Screen Reader|no|
|VM|0%|
</details>Extensions: none<details>
<summary>A/B Experiments</summary>

\`\`\`
vsliv695:30137379
vsins829:30139715
\`\`\`

</details>

<!-- generated by issue reporter -->`);
        });
        test('serializes Linux environment information when data is provided', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                issueType: 0,
                systemInfo: {
                    os: 'Darwin',
                    cpus: 'Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)',
                    memory: '16.00GB',
                    vmHint: '0%',
                    processArgs: '',
                    screenReader: 'no',
                    remoteData: [],
                    gpuStatus: {},
                    linuxEnv: {
                        desktopSession: 'ubuntu',
                        xdgCurrentDesktop: 'ubuntu',
                        xdgSessionDesktop: 'ubuntu:GNOME',
                        xdgSessionType: 'x11'
                    }
                }
            });
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes:

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)|
|GPU Status||
|Load (avg)|undefined|
|Memory (System)|16.00GB|
|Process Argv||
|Screen Reader|no|
|VM|0%|
|DESKTOP_SESSION|ubuntu|
|XDG_CURRENT_DESKTOP|ubuntu|
|XDG_SESSION_DESKTOP|ubuntu:GNOME|
|XDG_SESSION_TYPE|x11|
</details>Extensions: none
<!-- generated by issue reporter -->`);
        });
        test('serializes remote information when data is provided', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                issueType: 0,
                systemInfo: {
                    os: 'Darwin',
                    cpus: 'Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)',
                    memory: '16.00GB',
                    vmHint: '0%',
                    processArgs: '',
                    screenReader: 'no',
                    gpuStatus: {
                        '2d_canvas': 'enabled',
                        'checker_imaging': 'disabled_off'
                    },
                    remoteData: [
                        {
                            hostName: 'SSH: Pineapple',
                            machineInfo: {
                                os: 'Linux x64 4.18.0',
                                cpus: 'Intel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz (2 x 2294)',
                                memory: '8GB',
                                vmHint: '100%'
                            }
                        }
                    ]
                }
            });
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes:
Remote OS version: Linux x64 4.18.0

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)|
|GPU Status|2d_canvas: enabled<br>checker_imaging: disabled_off|
|Load (avg)|undefined|
|Memory (System)|16.00GB|
|Process Argv||
|Screen Reader|no|
|VM|0%|

|Item|Value|
|---|---|
|Remote|SSH: Pineapple|
|OS|Linux x64 4.18.0|
|CPUs|Intel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz (2 x 2294)|
|Memory (System)|8GB|
|VM|100%|
</details>Extensions: none
<!-- generated by issue reporter -->`);
        });
        test('escapes backslashes in processArgs', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                issueType: 0,
                systemInfo: {
                    os: 'Darwin',
                    cpus: 'Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)',
                    memory: '16.00GB',
                    vmHint: '0%',
                    processArgs: '\\\\HOST\\path',
                    screenReader: 'no',
                    remoteData: [],
                    gpuStatus: {}
                }
            });
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes:

<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
|CPUs|Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz (8 x 2800)|
|GPU Status||
|Load (avg)|undefined|
|Memory (System)|16.00GB|
|Process Argv|\\\\\\\\HOST\\\\path|
|Screen Reader|no|
|VM|0%|
</details>Extensions: none
<!-- generated by issue reporter -->`);
        });
        test('should supply mode if applicable', () => {
            const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                isUnsupported: true,
                restrictedMode: true
            });
            assert.strictEqual(issueReporterModel.serialize(), `
Type: <b>Bug</b>

undefined

VS Code version: undefined
OS version: undefined
Modes: Restricted, Unsupported

Extensions: none
<!-- generated by issue reporter -->`);
        });
        test('should normalize GitHub urls', () => {
            [
                'https://github.com/repo',
                'https://github.com/repo/',
                'https://github.com/repo.git',
                'https://github.com/repo/issues',
                'https://github.com/repo/issues/',
                'https://github.com/repo/issues/new',
                'https://github.com/repo/issues/new/'
            ].forEach(url => {
                assert.strictEqual('https://github.com/repo', (0, issueReporterUtil_1.normalizeGitHubUrl)(url));
            });
        });
        test('should have support for filing on extensions for bugs, performance issues, and feature requests', () => {
            [
                0 /* IssueType.Bug */,
                2 /* IssueType.FeatureRequest */,
                1 /* IssueType.PerformanceIssue */
            ].forEach(type => {
                const issueReporterModel = new issueReporterModel_1.IssueReporterModel({
                    issueType: type,
                    fileOnExtension: true
                });
                assert.strictEqual(issueReporterModel.fileOnExtension(), true);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdFJlcG9ydGVyTW9kZWwudGVzdC5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvbW9kL21vZC9idWlsZHZzY29kZS92c2NvZGUvc3JjLyIsInNvdXJjZXMiOlsidnMvY29kZS90ZXN0L2VsZWN0cm9uLXNhbmRib3gvaXNzdWUvdGVzdFJlcG9ydGVyTW9kZWwudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O2dHQUdnRzs7OztJQVFoRyxLQUFLLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUMzQixJQUFBLCtDQUF1QyxHQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxNQUFNLGtCQUFrQixHQUFHLElBQUksdUNBQWtCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUNwRCxhQUFhLEVBQUUsRUFBRTtnQkFDakIsaUJBQWlCLEVBQUUsSUFBSTtnQkFDdkIsb0JBQW9CLEVBQUUsSUFBSTtnQkFDMUIsb0JBQW9CLEVBQUUsSUFBSTtnQkFDMUIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsaUJBQWlCLEVBQUUsSUFBSTtnQkFDdkIsa0JBQWtCLEVBQUUsSUFBSTtnQkFDeEIsU0FBUyxFQUFFLENBQUM7YUFDWixDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxvREFBb0QsRUFBRSxHQUFHLEVBQUU7WUFDL0QsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEVBQ2hEOzs7Ozs7Ozs7O3FDQVVrQyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsa0RBQWtELEVBQUUsR0FBRyxFQUFFO1lBQzdELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSx1Q0FBa0IsQ0FBQztnQkFDakQsU0FBUyxFQUFFLENBQUM7Z0JBQ1osVUFBVSxFQUFFO29CQUNYLEVBQUUsRUFBRSxRQUFRO29CQUNaLElBQUksRUFBRSxzREFBc0Q7b0JBQzVELE1BQU0sRUFBRSxTQUFTO29CQUNqQixNQUFNLEVBQUUsSUFBSTtvQkFDWixXQUFXLEVBQUUsRUFBRTtvQkFDZixZQUFZLEVBQUUsSUFBSTtvQkFDbEIsVUFBVSxFQUFFLEVBQUU7b0JBQ2QsU0FBUyxFQUFFO3dCQUNWLFdBQVcsRUFBRSxTQUFTO3dCQUN0QixpQkFBaUIsRUFBRSxjQUFjO3FCQUNqQztpQkFDRDthQUNELENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEVBQ2hEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQXNCa0MsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGtEQUFrRCxFQUFFLEdBQUcsRUFBRTtZQUM3RCxNQUFNLGtCQUFrQixHQUFHLElBQUksdUNBQWtCLENBQUM7Z0JBQ2pELFNBQVMsRUFBRSxDQUFDO2dCQUNaLFVBQVUsRUFBRTtvQkFDWCxFQUFFLEVBQUUsUUFBUTtvQkFDWixJQUFJLEVBQUUsc0RBQXNEO29CQUM1RCxNQUFNLEVBQUUsU0FBUztvQkFDakIsTUFBTSxFQUFFLElBQUk7b0JBQ1osV0FBVyxFQUFFLEVBQUU7b0JBQ2YsWUFBWSxFQUFFLElBQUk7b0JBQ2xCLFVBQVUsRUFBRSxFQUFFO29CQUNkLFNBQVMsRUFBRTt3QkFDVixXQUFXLEVBQUUsU0FBUzt3QkFDdEIsaUJBQWlCLEVBQUUsY0FBYztxQkFDakM7aUJBQ0Q7Z0JBQ0QsY0FBYyxFQUFFLHNDQUFzQzthQUN0RCxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxFQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0ErQmtDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnRUFBZ0UsRUFBRSxHQUFHLEVBQUU7WUFDM0UsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDO2dCQUNqRCxTQUFTLEVBQUUsQ0FBQztnQkFDWixVQUFVLEVBQUU7b0JBQ1gsRUFBRSxFQUFFLFFBQVE7b0JBQ1osSUFBSSxFQUFFLHNEQUFzRDtvQkFDNUQsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLE1BQU0sRUFBRSxJQUFJO29CQUNaLFdBQVcsRUFBRSxFQUFFO29CQUNmLFlBQVksRUFBRSxJQUFJO29CQUNsQixVQUFVLEVBQUUsRUFBRTtvQkFDZCxTQUFTLEVBQUUsRUFBRTtvQkFDYixRQUFRLEVBQUU7d0JBQ1QsY0FBYyxFQUFFLFFBQVE7d0JBQ3hCLGlCQUFpQixFQUFFLFFBQVE7d0JBQzNCLGlCQUFpQixFQUFFLGNBQWM7d0JBQ2pDLGNBQWMsRUFBRSxLQUFLO3FCQUNyQjtpQkFDRDthQUNELENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEVBQ2hEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0EwQmtDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7WUFDaEUsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDO2dCQUNqRCxTQUFTLEVBQUUsQ0FBQztnQkFDWixVQUFVLEVBQUU7b0JBQ1gsRUFBRSxFQUFFLFFBQVE7b0JBQ1osSUFBSSxFQUFFLHNEQUFzRDtvQkFDNUQsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLE1BQU0sRUFBRSxJQUFJO29CQUNaLFdBQVcsRUFBRSxFQUFFO29CQUNmLFlBQVksRUFBRSxJQUFJO29CQUNsQixTQUFTLEVBQUU7d0JBQ1YsV0FBVyxFQUFFLFNBQVM7d0JBQ3RCLGlCQUFpQixFQUFFLGNBQWM7cUJBQ2pDO29CQUNELFVBQVUsRUFBRTt3QkFDWDs0QkFDQyxRQUFRLEVBQUUsZ0JBQWdCOzRCQUMxQixXQUFXLEVBQUU7Z0NBQ1osRUFBRSxFQUFFLGtCQUFrQjtnQ0FDdEIsSUFBSSxFQUFFLHNEQUFzRDtnQ0FDNUQsTUFBTSxFQUFFLEtBQUs7Z0NBQ2IsTUFBTSxFQUFFLE1BQU07NkJBQ2Q7eUJBQ0Q7cUJBQ0Q7aUJBQ0Q7YUFDRCxDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxFQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQ0ErQmtDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7WUFDL0MsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDO2dCQUNqRCxTQUFTLEVBQUUsQ0FBQztnQkFDWixVQUFVLEVBQUU7b0JBQ1gsRUFBRSxFQUFFLFFBQVE7b0JBQ1osSUFBSSxFQUFFLHNEQUFzRDtvQkFDNUQsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLE1BQU0sRUFBRSxJQUFJO29CQUNaLFdBQVcsRUFBRSxnQkFBZ0I7b0JBQzdCLFlBQVksRUFBRSxJQUFJO29CQUNsQixVQUFVLEVBQUUsRUFBRTtvQkFDZCxTQUFTLEVBQUUsRUFBRTtpQkFDYjthQUNELENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEVBQ2hEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQXNCa0MsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtZQUM3QyxNQUFNLGtCQUFrQixHQUFHLElBQUksdUNBQWtCLENBQUM7Z0JBQ2pELGFBQWEsRUFBRSxJQUFJO2dCQUNuQixjQUFjLEVBQUUsSUFBSTthQUNwQixDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxFQUNoRDs7Ozs7Ozs7OztxQ0FVa0MsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtZQUN6QztnQkFDQyx5QkFBeUI7Z0JBQ3pCLDBCQUEwQjtnQkFDMUIsNkJBQTZCO2dCQUM3QixnQ0FBZ0M7Z0JBQ2hDLGlDQUFpQztnQkFDakMsb0NBQW9DO2dCQUNwQyxxQ0FBcUM7YUFDckMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2YsTUFBTSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsRUFBRSxJQUFBLHNDQUFrQixFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEUsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxpR0FBaUcsRUFBRSxHQUFHLEVBQUU7WUFDNUc7Ozs7YUFJQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDaEIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLHVDQUFrQixDQUFDO29CQUNqRCxTQUFTLEVBQUUsSUFBSTtvQkFDZixlQUFlLEVBQUUsSUFBSTtpQkFDckIsQ0FBQyxDQUFDO2dCQUVILE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsZUFBZSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDIn0=