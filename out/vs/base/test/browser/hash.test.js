/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "assert", "vs/base/browser/hash", "vs/base/common/hash", "vs/base/test/common/utils"], function (require, exports, assert, hash_1, hash_2, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('Hash', () => {
        test('string', () => {
            assert.strictEqual((0, hash_2.hash)('hello'), (0, hash_2.hash)('hello'));
            assert.notStrictEqual((0, hash_2.hash)('hello'), (0, hash_2.hash)('world'));
            assert.notStrictEqual((0, hash_2.hash)('hello'), (0, hash_2.hash)('olleh'));
            assert.notStrictEqual((0, hash_2.hash)('hello'), (0, hash_2.hash)('Hello'));
            assert.notStrictEqual((0, hash_2.hash)('hello'), (0, hash_2.hash)('Hello '));
            assert.notStrictEqual((0, hash_2.hash)('h'), (0, hash_2.hash)('H'));
            assert.notStrictEqual((0, hash_2.hash)('-'), (0, hash_2.hash)('_'));
        });
        test('number', () => {
            assert.strictEqual((0, hash_2.hash)(1), (0, hash_2.hash)(1));
            assert.notStrictEqual((0, hash_2.hash)(0), (0, hash_2.hash)(1));
            assert.notStrictEqual((0, hash_2.hash)(1), (0, hash_2.hash)(-1));
            assert.notStrictEqual((0, hash_2.hash)(0x12345678), (0, hash_2.hash)(0x123456789));
        });
        test('boolean', () => {
            assert.strictEqual((0, hash_2.hash)(true), (0, hash_2.hash)(true));
            assert.notStrictEqual((0, hash_2.hash)(true), (0, hash_2.hash)(false));
        });
        test('array', () => {
            assert.strictEqual((0, hash_2.hash)([1, 2, 3]), (0, hash_2.hash)([1, 2, 3]));
            assert.strictEqual((0, hash_2.hash)(['foo', 'bar']), (0, hash_2.hash)(['foo', 'bar']));
            assert.strictEqual((0, hash_2.hash)([]), (0, hash_2.hash)([]));
            assert.strictEqual((0, hash_2.hash)([]), (0, hash_2.hash)(new Array()));
            assert.notStrictEqual((0, hash_2.hash)(['foo', 'bar']), (0, hash_2.hash)(['bar', 'foo']));
            assert.notStrictEqual((0, hash_2.hash)(['foo', 'bar']), (0, hash_2.hash)(['bar', 'foo', null]));
            assert.notStrictEqual((0, hash_2.hash)(['foo', 'bar', null]), (0, hash_2.hash)(['bar', 'foo', null]));
            assert.notStrictEqual((0, hash_2.hash)(['foo', 'bar']), (0, hash_2.hash)(['bar', 'foo', undefined]));
            assert.notStrictEqual((0, hash_2.hash)(['foo', 'bar', undefined]), (0, hash_2.hash)(['bar', 'foo', undefined]));
            assert.notStrictEqual((0, hash_2.hash)(['foo', 'bar', null]), (0, hash_2.hash)(['foo', 'bar', undefined]));
        });
        test('object', () => {
            assert.strictEqual((0, hash_2.hash)({}), (0, hash_2.hash)({}));
            assert.strictEqual((0, hash_2.hash)({}), (0, hash_2.hash)(Object.create(null)));
            assert.strictEqual((0, hash_2.hash)({ 'foo': 'bar' }), (0, hash_2.hash)({ 'foo': 'bar' }));
            assert.strictEqual((0, hash_2.hash)({ 'foo': 'bar', 'foo2': undefined }), (0, hash_2.hash)({ 'foo2': undefined, 'foo': 'bar' }));
            assert.notStrictEqual((0, hash_2.hash)({ 'foo': 'bar' }), (0, hash_2.hash)({ 'foo': 'bar2' }));
            assert.notStrictEqual((0, hash_2.hash)({}), (0, hash_2.hash)([]));
        });
        test('array - unexpected collision', function () {
            const a = (0, hash_2.hash)([undefined, undefined, undefined, undefined, undefined]);
            const b = (0, hash_2.hash)([undefined, undefined, 'HHHHHH', [{ line: 0, character: 0 }, { line: 0, character: 0 }], undefined]);
            assert.notStrictEqual(a, b);
        });
        test('all different', () => {
            const candidates = [
                null, undefined, {}, [], 0, false, true, '', ' ', [null], [undefined], [undefined, undefined], { '': undefined }, { [' ']: undefined },
                'ab', 'ba', ['ab']
            ];
            const hashes = candidates.map(hash_2.hash);
            for (let i = 0; i < hashes.length; i++) {
                assert.strictEqual(hashes[i], (0, hash_2.hash)(candidates[i])); // verify that repeated invocation returns the same hash
                for (let k = i + 1; k < hashes.length; k++) {
                    assert.notStrictEqual(hashes[i], hashes[k], `Same hash ${hashes[i]} for ${JSON.stringify(candidates[i])} and ${JSON.stringify(candidates[k])}`);
                }
            }
        });
        async function checkSHA1(str, expected) {
            // Test with StringSHA1
            const hash = new hash_2.StringSHA1();
            hash.update(str);
            let actual = hash.digest();
            assert.strictEqual(actual, expected);
            // Test with crypto.subtle
            actual = await (0, hash_1.sha1Hex)(str);
            assert.strictEqual(actual, expected);
        }
        test('sha1-1', () => {
            return checkSHA1('\udd56', '9bdb77276c1852e1fb067820472812fcf6084024');
        });
        test('sha1-2', () => {
            return checkSHA1('\udb52', '9bdb77276c1852e1fb067820472812fcf6084024');
        });
        test('sha1-3', () => {
            return checkSHA1('\uda02ꑍ', '9b483a471f22fe7e09d83f221871a987244bbd3f');
        });
        test('sha1-4', () => {
            return checkSHA1('hello', 'aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d');
        });
        (0, utils_1.ensureNoDisposablesAreLeakedInTestSuite)();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaC50ZXN0LmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9tb2QvbW9kL2J1aWxkdnNjb2RlL3ZzY29kZS9zcmMvIiwic291cmNlcyI6WyJ2cy9iYXNlL3Rlc3QvYnJvd3Nlci9oYXNoLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztnR0FHZ0c7Ozs7SUFPaEcsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLFdBQUksRUFBQyxPQUFPLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBQSxXQUFJLEVBQUMsT0FBTyxDQUFDLEVBQUUsSUFBQSxXQUFJLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUEsV0FBSSxFQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFBLFdBQUksRUFBQyxPQUFPLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBQSxXQUFJLEVBQUMsT0FBTyxDQUFDLEVBQUUsSUFBQSxXQUFJLEVBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUEsV0FBSSxFQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFBLFdBQUksRUFBQyxHQUFHLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDbkIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLFdBQUksRUFBQyxDQUFDLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBQSxXQUFJLEVBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBQSxXQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUEsV0FBSSxFQUFDLENBQUMsQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUEsV0FBSSxFQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRTtZQUNwQixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUEsV0FBSSxFQUFDLElBQUksQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFBLFdBQUksRUFBQyxJQUFJLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDbEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLFdBQUksRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBQSxXQUFJLEVBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFBLFdBQUksRUFBQyxFQUFFLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBQSxXQUFJLEVBQUMsRUFBRSxDQUFDLEVBQUUsSUFBQSxXQUFJLEVBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFBLFdBQUksRUFBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUEsV0FBSSxFQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBQSxXQUFJLEVBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RSxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUEsV0FBSSxFQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFBLFdBQUksRUFBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUEsV0FBSSxFQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0UsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFBLFdBQUksRUFB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