/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "assert", "vs/base/test/common/utils", "vs/editor/common/core/offsetRange", "vs/editor/common/model/textModelTokens"], function (require, exports, assert, utils_1, offsetRange_1, textModelTokens_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    suite('RangePriorityQueueImpl', () => {
        (0, utils_1.ensureNoDisposablesAreLeakedInTestSuite)();
        test('addRange', () => {
            const ranges = [];
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(0, 2), ranges);
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(10, 13), ranges);
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(20, 24), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 2)', '[10, 13)', '[20, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(2, 10), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 13)', '[20, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(14, 19), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 13)', '[14, 19)', '[20, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(10, 22), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[0, 24)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(-1, 29), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[-1, 29)']));
            offsetRange_1.OffsetRange.addRange(new offsetRange_1.OffsetRange(-10, -5), ranges);
            assert.deepStrictEqual(ranges.map(r => r.toString()), (['[-10, -5)', '[-1, 29)']));
        });
        test('addRangeAndResize', () => {
            const queue = new textModelTokens_1.RangePriorityQueueImpl();
            queue.addRange(new offsetRange_1.OffsetRange(0, 20));
            queue.addRange(new offsetRange_1.OffsetRange(100, 120));
            queue.addRange(new offsetRange_1.OffsetRange(200, 220));
            // disjoint
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(25, 27), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), (['[0, 20)', '[98, 118)', '[198, 218)']));
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(19, 20), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), (['[0, 19)', '[97, 117)', '[197, 217)']));
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(19, 97), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), (['[0, 39)', '[119, 139)']));
            queue.addRangeAndResize(new offsetRange_1.OffsetRange(-1000, 1000), 0);
            assert.deepStrictEqual(queue.getRanges().map(r => r.toString()), ([]));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dE1vZGVsVG9rZW5zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL21vZC9tb2QvYnVpbGR2c2NvZGUvdnNjb2RlL3NyYy8iLCJzb3VyY2VzIjpbInZzL2VkaXRvci90ZXN0L2NvbW1vbi9tb2RlbC90ZXh0TW9kZWxUb2tlbnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O2dHQUdnRzs7OztJQU9oRyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO1FBRXBDLElBQUEsK0NBQXVDLEdBQUUsQ0FBQztRQUUxQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtZQUNyQixNQUFNLE1BQU0sR0FBa0IsRUFBRSxDQUFDO1lBRWpDLHlCQUFXLENBQUMsUUFBUSxDQUFDLElBQUkseUJBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDcEQseUJBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSx5QkFBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN0RCx5QkFBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLHlCQUFXLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXRELE1BQU0sQ0FBQyxlQUFlLENBQ3JCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsRUFDN0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FDcEMsQ0FBQztZQUVGLHlCQUFXLENBQUMsUUFBUSxDQUFDLElBQUkseUJBQVcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFckQsTUFBTSxDQUFDLGVBQWUsQ0FDckIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMs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