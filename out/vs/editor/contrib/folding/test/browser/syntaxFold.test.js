define(["require", "exports", "assert", "vs/base/common/cancellation", "vs/editor/contrib/folding/browser/syntaxRangeProvider", "vs/editor/test/common/testTextModel", "vs/base/test/common/utils"], function (require, exports, assert, cancellation_1, syntaxRangeProvider_1, testTextModel_1, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class TestFoldingRangeProvider {
        constructor(model, ranges) {
            this.model = model;
            this.ranges = ranges;
        }
        provideFoldingRanges(model, context, token) {
            if (model === this.model) {
                return this.ranges;
            }
            return null;
        }
    }
    suite('Syntax folding', () => {
        (0, utils_1.ensureNoDisposablesAreLeakedInTestSuite)();
        function r(start, end) {
            return { start, end };
        }
        test('Limit by nesting level', async () => {
            const lines = [
                /* 1*/ '{',
                /* 2*/ '  A',
                /* 3*/ '  {',
                /* 4*/ '    {',
                /* 5*/ '      B',
                /* 6*/ '    }',
                /* 7*/ '    {',
                /* 8*/ '      A',
                /* 9*/ '      {',
                /* 10*/ '         A',
                /* 11*/ '      }',
                /* 12*/ '      {',
                /* 13*/ '        {',
                /* 14*/ '          {',
                /* 15*/ '             A',
                /* 16*/ '          }',
                /* 17*/ '        }',
                /* 18*/ '      }',
                /* 19*/ '    }',
                /* 20*/ '  }',
                /* 21*/ '}',
                /* 22*/ '{',
                /* 23*/ '  A',
                /* 24*/ '}',
            ];
            const r1 = r(1, 20); //0
            const r2 = r(3, 19); //1
            const r3 = r(4, 5); //2
            const r4 = r(7, 18); //2
            const r5 = r(9, 10); //3
            const r6 = r(12, 17); //4
            const r7 = r(13, 16); //5
            const r8 = r(14, 15); //6
            const r9 = r(22, 23); //0
            const model = (0, testTextModel_1.createTextModel)(lines.join('\n'));
            const ranges = [r1, r2, r3, r4, r5, r6, r7, r8, r9];
            const providers = [new TestFoldingRangeProvider(model, ranges)];
            async function assertLimit(maxEntries, expectedRanges, message) {
                let reported = false;
                const foldingRangesLimit = { limit: maxEntries, update: (computed, limited) => reported = limited };
                const syntaxRangeProvider = new syntaxRangeProvider_1.SyntaxRangeProvider(model, providers, () => { }, foldingRangesLimit, undefined);
                try {
                    const indentRanges = await syntaxRangeProvider.compute(cancellation_1.CancellationToken.None);
                    const actual = [];
                    if (indentRanges) {
                        for (let i = 0; i < indentRanges.length; i++) {
                            actual.push({ start: indentRanges.getStartLineNumber(i), end: indentRanges.getEndLineNumber(i) });
                        }
                        assert.equal(reported, 9 <= maxEntries ? false : maxEntries, 'limited');
                    }
                    assert.deepStrictEqual(actual, expectedRanges, message);
                }
                finally {
                    syntaxRangeProvider.dispose();
                }
            }
            await assertLimit(1000, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '1000');
            await assertLimit(9, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '9');
            await assertLimit(8, [r1, r2, r3, r4, r5, r6, r7, r9], '8');
            await assertLimit(7, [r1, r2, r3, r4, r5, r6, r9], '7');
            await assertLimit(6, [r1, r2, r3, r4, r5, r9], '6');
            await assertLimit(5, [r1, r2, r3, r4, r9], '5');
            await assertLimit(4, [r1, r2, r3, r9], '4');
            await assertLimit(3, [r1, r2, r9], '3');
            await assertLimit(2, [r1, r9], '2');
            await assertLimit(1, [r1], '1');
            await assertLimit(0, [], '0');
            model.dispose();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ludGF4Rm9sZC50ZXN0LmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vaG9tZS9ydW5uZXIvd29yay9tb2QvbW9kL2J1aWxkdnNjb2RlL3ZzY29kZS9zcmMvIiwic291cmNlcyI6WyJ2cy9lZGl0b3IvY29udHJpYi9mb2xkaW5nL3Rlc3QvYnJvd3Nlci9zeW50YXhGb2xkLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBa0JBLE1BQU0sd0JBQXdCO1FBQzdCLFlBQW9CLEtBQWlCLEVBQVUsTUFBcUI7WUFBaEQsVUFBSyxHQUFMLEtBQUssQ0FBWTtZQUFVLFdBQU0sR0FBTixNQUFNLENBQWU7UUFDcEUsQ0FBQztRQUVELG9CQUFvQixDQUFDLEtBQWlCLEVBQUUsT0FBdUIsRUFBRSxLQUF3QjtZQUN4RixJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzFCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNwQixDQUFDO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDYixDQUFDO0tBQ0Q7SUFFRCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQzVCLElBQUEsK0NBQXVDLEdBQUUsQ0FBQztRQUUxQyxTQUFTLENBQUMsQ0FBQyxLQUFhLEVBQUUsR0FBVztZQUNwQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDekMsTUFBTSxLQUFLLEdBQUc7Z0JBQ2IsTUFBTSxDQUFDLEdBQUc7Z0JBQ1YsTUFBTSxDQUFDLEtBQUs7Z0JBQ1osTUFBTSxDQUFDLEtBQUs7Z0JBQ1osTUFBTSxDQUFDLE9BQU87Z0JBQ2QsTUFBTSxDQUFDLFNBQVM7Z0JBQ2hCLE1BQU0sQ0FBQyxPQUFPO2dCQUNkLE1BQU0sQ0FBQyxPQUFPO2dCQUNkLE1BQU0sQ0FBQyxTQUFTO2dCQUNoQixNQUFNLENBQUMsU0FBUztnQkFD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QUUsR0FBRyxDQUFDLENBQUM7WUFDeEQsTUFBTSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwRCxNQUFNLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDaEQsTUFBTSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDNUMsTUFBTSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN4QyxNQUFNLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEMsTUFBTSxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDaEMsTUFBTSxXQUFXLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUU5QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQyJ9