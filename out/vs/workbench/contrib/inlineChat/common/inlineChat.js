/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/nls", "vs/platform/actions/common/actions", "vs/platform/configuration/common/configurationRegistry", "vs/platform/contextkey/common/contextkey", "vs/platform/instantiation/common/instantiation", "vs/platform/registry/common/platform", "vs/platform/theme/common/colorRegistry", "vs/workbench/common/configuration"], function (require, exports, nls_1, actions_1, configurationRegistry_1, contextkey_1, instantiation_1, platform_1, colorRegistry_1, configuration_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InlineChatConfigKeys = exports.EditMode = exports.overviewRulerInlineChatDiffRemoved = exports.inlineChatDiffRemoved = exports.overviewRulerInlineChatDiffInserted = exports.inlineChatDiffInserted = exports.inlineChatInputBackground = exports.inlineChatInputPlaceholderForeground = exports.inlineChatInputFocusBorder = exports.inlineChatInputBorder = exports.inlineChatRegionHighlight = exports.inlineChatShadow = exports.inlineChatBorder = exports.inlineChatBackground = exports.MENU_INLINE_CHAT_WIDGET_DISCARD = exports.MENU_INLINE_CHAT_WIDGET_FEEDBACK = exports.MENU_INLINE_CHAT_WIDGET_STATUS = exports.MENU_INLINE_CHAT_WIDGET = exports.ACTION_TOGGLE_DIFF = exports.ACTION_VIEW_IN_CHAT = exports.ACTION_REGENERATE_RESPONSE = exports.ACTION_ACCEPT_CHANGES = exports.CTX_INLINE_CHAT_EDIT_MODE = exports.CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF = exports.CTX_INLINE_CHAT_CHANGE_HAS_DIFF = exports.CTX_INLINE_CHAT_DOCUMENT_CHANGED = exports.CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING = exports.CTX_INLINE_CHAT_LAST_FEEDBACK = exports.CTX_INLINE_CHAT_USER_DID_EDIT = exports.CTX_INLINE_CHAT_DID_EDIT = exports.CTX_INLINE_CHAT_RESPONSE_TYPES = exports.CTX_INLINE_CHAT_LAST_RESPONSE_TYPE = exports.CTX_INLINE_CHAT_HAS_STASHED_SESSION = exports.CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST = exports.CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = exports.CTX_INLINE_CHAT_INNER_CURSOR_END = exports.CTX_INLINE_CHAT_INNER_CURSOR_START = exports.CTX_INLINE_CHAT_INNER_CURSOR_LAST = exports.CTX_INLINE_CHAT_INNER_CURSOR_FIRST = exports.CTX_INLINE_CHAT_EMPTY = exports.CTX_INLINE_CHAT_RESPONSE_FOCUSED = exports.CTX_INLINE_CHAT_FOCUSED = exports.CTX_INLINE_CHAT_VISIBLE = exports.CTX_INLINE_CHAT_HAS_PROVIDER = exports.INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID = exports.INLINE_CHAT_ID = exports.IInlineChatService = exports.InlineChatResponseFeedbackKind = exports.InlineChatResponseTypes = exports.InlineChatResponseType = void 0;
    var InlineChatResponseType;
    (function (InlineChatResponseType) {
        InlineChatResponseType["EditorEdit"] = "editorEdit";
        InlineChatResponseType["BulkEdit"] = "bulkEdit";
    })(InlineChatResponseType || (exports.InlineChatResponseType = InlineChatResponseType = {}));
    var InlineChatResponseTypes;
    (function (InlineChatResponseTypes) {
        InlineChatResponseTypes["Empty"] = "empty";
        InlineChatResponseTypes["OnlyEdits"] = "onlyEdits";
        InlineChatResponseTypes["OnlyMessages"] = "onlyMessages";
        InlineChatResponseTypes["Mixed"] = "mixed";
    })(InlineChatResponseTypes || (exports.InlineChatResponseTypes = InlineChatResponseTypes = {}));
    var InlineChatResponseFeedbackKind;
    (function (InlineChatResponseFeedbackKind) {
        InlineChatResponseFeedbackKind[InlineChatResponseFeedbackKind["Unhelpful"] = 0] = "Unhelpful";
        InlineChatResponseFeedbackKind[InlineChatResponseFeedbackKind["Helpful"] = 1] = "Helpful";
        InlineChatResponseFeedbackKind[InlineChatResponseFeedbackKind["Undone"] = 2] = "Undone";
        InlineChatResponseFeedbackKind[InlineChatResponseFeedbackKind["Accepted"] = 3] = "Accepted";
        InlineChatResponseFeedbackKind[InlineChatResponseFeedbackKind["Bug"] = 4] = "Bug";
    })(InlineChatResponseFeedbackKind || (exports.InlineChatResponseFeedbackKind = InlineChatResponseFeedbackKind = {}));
    exports.IInlineChatService = (0, instantiation_1.createDecorator)('IInlineChatService');
    exports.INLINE_CHAT_ID = 'interactiveEditor';
    exports.INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID = 'interactiveEditorAccessiblityHelp';
    exports.CTX_INLINE_CHAT_HAS_PROVIDER = new contextkey_1.RawContextKey('inlineChatHasProvider', false, (0, nls_1.localize)('inlineChatHasProvider', "Whether a provider for interactive editors exists"));
    exports.CTX_INLINE_CHAT_VISIBLE = new contextkey_1.RawContextKey('inlineChatVisible', false, (0, nls_1.localize)('inlineChatVisible', "Whether the interactive editor input is visible"));
    exports.CTX_INLINE_CHAT_FOCUSED = new contextkey_1.RawContextKey('inlineChatFocused', false, (0, nls_1.localize)('inlineChatFocused', "Whether the interactive editor input is focused"));
    exports.CTX_INLINE_CHAT_RESPONSE_FOCUSED = new contextkey_1.RawContextKey('inlineChatResponseFocused', false, (0, nls_1.localize)('inlineChatResponseFocused', "Whether the interactive widget's response is focused"));
    exports.CTX_INLINE_CHAT_EMPTY = new contextkey_1.RawContextKey('inlineChatEmpty', false, (0, nls_1.localize)('inlineChatEmpty', "Whether the interactive editor input is empty"));
    exports.CTX_INLINE_CHAT_INNER_CURSOR_FIRST = new contextkey_1.RawContextKey('inlineChatInnerCursorFirst', false, (0, nls_1.localize)('inlineChatInnerCursorFirst', "Whether the cursor of the iteractive editor input is on the first line"));
    exports.CTX_INLINE_CHAT_INNER_CURSOR_LAST = new contextkey_1.RawContextKey('inlineChatInnerCursorLast', false, (0, nls_1.localize)('inlineChatInnerCursorLast', "Whether the cursor of the iteractive editor input is on the last line"));
    exports.CTX_INLINE_CHAT_INNER_CURSOR_START = new contextkey_1.RawContextKey('inlineChatInnerCursorStart', false, (0, nls_1.localize)('inlineChatInnerCursorStart', "Whether the cursor of the iteractive editor input is on the start of the input"));
    exports.CTX_INLINE_CHAT_INNER_CURSOR_END = new contextkey_1.RawContextKey('inlineChatInnerCursorEnd', false, (0, nls_1.localize)('inlineChatInnerCursorEnd', "Whether the cursor of the iteractive editor input is on the end of the input"));
    exports.CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = new contextkey_1.RawContextKey('inlineChatOuterCursorPosition', '', (0, nls_1.localize)('inlineChatOuterCursorPosition', "Whether the cursor of the outer editor is above or below the interactive editor input"));
    exports.CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST = new contextkey_1.RawContextKey('inlineChatHasActiveRequest', false, (0, nls_1.localize)('inlineChatHasActiveRequest', "Whether interactive editor has an active request"));
    exports.CTX_INLINE_CHAT_HAS_STASHED_SESSION = new contextkey_1.RawContextKey('inlineChatHasStashedSession', false, (0, nls_1.localize)('inlineChatHasStashedSession', "Whether interactive editor has kept a session for quick restore"));
    exports.CTX_INLINE_CHAT_LAST_RESPONSE_TYPE = new contextkey_1.RawContextKey('inlineChatLastResponseType', undefined, (0, nls_1.localize)('inlineChatResponseType', "What type was the last response of the current interactive editor session"));
    exports.CTX_INLINE_CHAT_RESPONSE_TYPES = new contextkey_1.RawContextKey('inlineChatResponseTypes', "empty" /* InlineChatResponseTypes.Empty */, (0, nls_1.localize)('inlineChatResponseTypes', "What type was the responses have been receieved"));
    exports.CTX_INLINE_CHAT_DID_EDIT = new contextkey_1.RawContextKey('inlineChatDidEdit', undefined, (0, nls_1.localize)('inlineChatDidEdit', "Whether interactive editor did change any code"));
    exports.CTX_INLINE_CHAT_USER_DID_EDIT = new contextkey_1.RawContextKey('inlineChatUserDidEdit', undefined, (0, nls_1.localize)('inlineChatUserDidEdit', "Whether the user did changes ontop of the inline chat"));
    exports.CTX_INLINE_CHAT_LAST_FEEDBACK = new contextkey_1.RawContextKey('inlineChatLastFeedbackKind', '', (0, nls_1.localize)('inlineChatLastFeedbackKind', "The last kind of feedback that was provided"));
    exports.CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING = new contextkey_1.RawContextKey('inlineChatSupportIssueReporting', false, (0, nls_1.localize)('inlineChatSupportIssueReporting', "Whether the interactive editor supports issue reporting"));
    exports.CTX_INLINE_CHAT_DOCUMENT_CHANGED = new contextkey_1.RawContextKey('inlineChatDocumentChanged', false, (0, nls_1.localize)('inlineChatDocumentChanged', "Whether the document has changed concurrently"));
    exports.CTX_INLINE_CHAT_CHANGE_HAS_DIFF = new contextkey_1.RawContextKey('inlineChatChangeHasDiff', false, (0, nls_1.localize)('inlineChatChangeHasDiff', "Whether the current change supports showing a diff"));
    exports.CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF = new contextkey_1.RawContextKey('inlineChatChangeShowsDiff', false, (0, nls_1.localize)('inlineChatChangeShowsDiff', "Whether the current change showing a diff"));
    exports.CTX_INLINE_CHAT_EDIT_MODE = new contextkey_1.RawContextKey('config.inlineChat.mode', "live" /* EditMode.Live */);
    // --- (select) action identifier
    exports.ACTION_ACCEPT_CHANGES = 'inlineChat.acceptChanges';
    exports.ACTION_REGENERATE_RESPONSE = 'inlineChat.regenerate';
    exports.ACTION_VIEW_IN_CHAT = 'inlineChat.viewInChat';
    exports.ACTION_TOGGLE_DIFF = 'inlineChat.toggleDiff';
    // --- menus
    exports.MENU_INLINE_CHAT_WIDGET = actions_1.MenuId.for('inlineChatWidget');
    exports.MENU_INLINE_CHAT_WIDGET_STATUS = actions_1.MenuId.for('inlineChatWidget.status');
    exports.MENU_INLINE_CHAT_WIDGET_FEEDBACK = actions_1.MenuId.for('inlineChatWidget.feedback');
    exports.MENU_INLINE_CHAT_WIDGET_DISCARD = actions_1.MenuId.for('inlineChatWidget.undo');
    // --- colors
    exports.inlineChatBackground = (0, colorRegistry_1.registerColor)('inlineChat.background', { dark: colorRegistry_1.editorWidgetBackground, light: colorRegistry_1.editorWidgetBackground, hcDark: colorRegistry_1.editorWidgetBackground, hcLight: colorRegistry_1.editorWidgetBackground }, (0, nls_1.localize)('inlineChat.background', "Background color of the interactive editor widget"));
    exports.inlineChatBorder = (0, colorRegistry_1.registerColor)('inlineChat.border', { dark: colorRegistry_1.editorWidgetBorder, light: colorRegistry_1.editorWidgetBorder, hcDark: colorRegistry_1.editorWidgetBorder, hcLight: colorRegistry_1.editorWidgetBorder }, (0, nls_1.localize)('inlineChat.border', "Border color of the interactive editor widget"));
    exports.inlineChatShadow = (0, colorRegistry_1.registerColor)('inlineChat.shadow', { dark: colorRegistry_1.widgetShadow, light: colorRegistry_1.widgetShadow, hcDark: colorRegistry_1.widgetShadow, hcLight: colorRegistry_1.widgetShadow }, (0, nls_1.localize)('inlineChat.shadow', "Shadow color of the interactive editor widget"));
    exports.inlineChatRegionHighlight = (0, colorRegistry_1.registerColor)('inlineChat.regionHighlight', { dark: colorRegistry_1.editorHoverHighlight, light: colorRegistry_1.editorHoverHighlight, hcDark: colorRegistry_1.editorHoverHighlight, hcLight: colorRegistry_1.editorHoverHighlight }, (0, nls_1.localize)('inlineChat.regionHighlight', "Background highlighting of the current interactive region. Must be transparent."), true);
    exports.inlineChatInputBorder = (0, colorRegistry_1.registerColor)('inlineChatInput.border', { dark: colorRegistry_1.editorWidgetBorder, light: colorRegistry_1.editorWidgetBorder, hcDark: colorRegistry_1.editorWidgetBorder, hcLight: colorRegistry_1.editorWidgetBorder }, (0, nls_1.localize)('inlineChatInput.border', "Border color of the interactive editor input"));
    exports.inlineChatInputFocusBorder = (0, colorRegistry_1.registerColor)('inlineChatInput.focusBorder', { dark: colorRegistry_1.focusBorder, light: colorRegistry_1.focusBorder, hcDark: colorRegistry_1.focusBorder, hcLight: colorRegistry_1.focusBorder }, (0, nls_1.localize)('inlineChatInput.focusBorder', "Border color of the interactive editor input when focused"));
    exports.inlineChatInputPlaceholderForeground = (0, colorRegistry_1.registerColor)('inlineChatInput.placeholderForeground', { dark: colorRegistry_1.inputPlaceholderForeground, light: colorRegistry_1.inputPlaceholderForeground, hcDark: colorRegistry_1.inputPlaceholderForeground, hcLight: colorRegistry_1.inputPlaceholderForeground }, (0, nls_1.localize)('inlineChatInput.placeholderForeground', "Foreground color of the interactive editor input placeholder"));
    exports.inlineChatInputBackground = (0, colorRegistry_1.registerColor)('inlineChatInput.background', { dark: colorRegistry_1.inputBackground, light: colorRegistry_1.inputBackground, hcDark: colorRegistry_1.inputBackground, hcLight: colorRegistry_1.inputBackground }, (0, nls_1.localize)('inlineChatInput.background', "Background color of the interactive editor input"));
    exports.inlineChatDiffInserted = (0, colorRegistry_1.registerColor)('inlineChatDiff.inserted', { dark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, .5), light: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, .5), hcDark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, .5), hcLight: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, .5) }, (0, nls_1.localize)('inlineChatDiff.inserted', "Background color of inserted text in the interactive editor input"));
    exports.overviewRulerInlineChatDiffInserted = (0, colorRegistry_1.registerColor)('editorOverviewRuler.inlineChatInserted', { dark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, 0.6), light: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, 0.8), hcDark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, 0.6), hcLight: (0, colorRegistry_1.transparent)(colorRegistry_1.diffInserted, 0.8) }, (0, nls_1.localize)('editorOverviewRuler.inlineChatInserted', 'Overview ruler marker color for inline chat inserted content.'));
    exports.inlineChatDiffRemoved = (0, colorRegistry_1.registerColor)('inlineChatDiff.removed', { dark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, .5), light: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, .5), hcDark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, .5), hcLight: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, .5) }, (0, nls_1.localize)('inlineChatDiff.removed', "Background color of removed text in the interactive editor input"));
    exports.overviewRulerInlineChatDiffRemoved = (0, colorRegistry_1.registerColor)('editorOverviewRuler.inlineChatRemoved', { dark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, 0.6), light: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, 0.8), hcDark: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, 0.6), hcLight: (0, colorRegistry_1.transparent)(colorRegistry_1.diffRemoved, 0.8) }, (0, nls_1.localize)('editorOverviewRuler.inlineChatRemoved', 'Overview ruler marker color for inline chat removed content.'));
    // settings
    var EditMode;
    (function (EditMode) {
        EditMode["Live"] = "live";
        EditMode["Preview"] = "preview";
    })(EditMode || (exports.EditMode = EditMode = {}));
    platform_1.Registry.as(configuration_1.Extensions.ConfigurationMigration).registerConfigurationMigrations([{
            key: 'interactiveEditor.editMode', migrateFn: (value) => {
                return [['inlineChat.mode', { value: value }]];
            }
        }]);
    var InlineChatConfigKeys;
    (function (InlineChatConfigKeys) {
        InlineChatConfigKeys["Mode"] = "inlineChat.mode";
        InlineChatConfigKeys["FinishOnType"] = "inlineChat.finishOnType";
        InlineChatConfigKeys["AcceptedOrDiscardBeforeSave"] = "inlineChat.acceptedOrDiscardBeforeSave";
        InlineChatConfigKeys["HoldToSpeech"] = "inlineChat.holdToSpeech";
        InlineChatConfigKeys["AccessibleDiffView"] = "inlineChat.accessibleDiffView";
    })(InlineChatConfigKeys || (exports.InlineChatConfigKeys = InlineChatConfigKeys = {}));
    platform_1.Registry.as(configurationRegistry_1.Extensions.Configuration).registerConfiguration({
        id: 'editor',
        properties: {
            ["inlineChat.mode" /* InlineChatConfigKeys.Mode */]: {
                description: (0, nls_1.localize)('mode', "Configure if changes crafted with inline chat are applied directly to the document or are previewed first."),
                default: "live" /* EditMode.Live */,
                type: 'string',
                enum: ["live" /* EditMode.Live */, "preview" /* EditMode.Preview */],
                markdownEnumDescriptions: [
                    (0, nls_1.localize)('mode.live', "Changes are applied directly to the document, can be highlighted via inline diffs, and accepted/discarded by hunks. Ending a session will keep the changes."),
                    (0, nls_1.localize)('mode.preview', "Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes."),
                ],
                tags: ['experimental']
            },
            ["inlineChat.finishOnType" /* InlineChatConfigKeys.FinishOnType */]: {
                description: (0, nls_1.localize)('finishOnType', "Whether to finish an inline chat session when typing outside of changed regions."),
                default: false,
                type: 'boolean'
            },
            ["inlineChat.acceptedOrDiscardBeforeSave" /* InlineChatConfigKeys.AcceptedOrDiscardBeforeSave */]: {
                description: (0, nls_1.localize)('acceptedOrDiscardBeforeSave', "Whether pending inline chat sessions prevent saving."),
                default: true,
                type: 'boolean'
            },
            ["inlineChat.holdToSpeech" /* InlineChatConfigKeys.HoldToSpeech */]: {
                description: (0, nls_1.localize)('holdToSpeech', "Whether holding the inline chat keybinding will automatically enable speech recognition."),
                default: true,
                type: 'boolean'
            },
            ["inlineChat.accessibleDiffView" /* InlineChatConfigKeys.AccessibleDiffView */]: {
                description: (0, nls_1.localize)('accessibleDiffView', "Whether the inline chat also renders an accessible diff viewer for its changes."),
                default: 'auto',
                type: 'string',
                enum: ['auto', 'on', 'off'],
                markdownEnumDescriptions: [
                    (0, nls_1.localize)('accessibleDiffView.auto', "The accessible diff viewer is based screen reader mode being enabled."),
                    (0, nls_1.localize)('accessibleDiffView.on', "The accessible diff viewer is always enabled."),
                    (0, nls_1.localize)('accessibleDiffView.off', "The accessible diff viewer is never enabled."),
                ],
            }
        }
    });
});
//# sourceMappingURL=data:application/json;base64,