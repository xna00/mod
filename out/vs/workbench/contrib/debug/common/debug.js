/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/base/common/uri", "vs/nls", "vs/platform/contextkey/common/contextkey", "vs/platform/instantiation/common/instantiation"], function (require, exports, uri_1, nls, contextkey_1, instantiation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IDebugVisualization = exports.IDebugVisualizationTreeItem = exports.DebugTreeItemCollapsibleState = exports.DebugVisualizationType = exports.BreakpointWidgetContext = exports.IDebugService = exports.DebuggerString = exports.DebugConfigurationProviderTriggerKind = exports.DataBreakpointSetType = exports.DEBUG_MEMORY_SCHEME = exports.MemoryRangeType = exports.State = exports.INTERNAL_CONSOLE_OPTIONS_SCHEMA = exports.DEBUG_SCHEME = exports.BREAKPOINT_EDITOR_CONTRIBUTION_ID = exports.EDITOR_CONTRIBUTION_ID = exports.debuggerDisabledMessage = exports.CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE = exports.CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = exports.CONTEXT_DISASSEMBLY_VIEW_FOCUS = exports.CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED = exports.CONTEXT_MULTI_SESSION_DEBUG = exports.CONTEXT_MULTI_SESSION_REPL = exports.CONTEXT_EXCEPTION_WIDGET_VISIBLE = exports.CONTEXT_VARIABLE_EXTENSIONID = exports.CONTEXT_VARIABLE_LANGUAGE = exports.CONTEXT_VARIABLE_NAME = exports.CONTEXT_VARIABLE_INTERFACES = exports.CONTEXT_VARIABLE_TYPE = exports.CONTEXT_VARIABLE_VALUE = exports.CONTEXT_VARIABLE_IS_READONLY = exports.CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT = exports.CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED = exports.CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED = exports.CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED = exports.CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED = exports.CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED = exports.CONTEXT_SET_EXPRESSION_SUPPORTED = exports.CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED = exports.CONTEXT_SET_VARIABLE_SUPPORTED = exports.CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT = exports.CONTEXT_DEBUG_EXTENSION_AVAILABLE = exports.CONTEXT_DEBUGGERS_AVAILABLE = exports.CONTEXT_BREAKPOINTS_EXIST = exports.CONTEXT_STEP_INTO_TARGETS_SUPPORTED = exports.CONTEXT_JUMP_TO_CURSOR_SUPPORTED = exports.CONTEXT_STACK_FRAME_SUPPORTS_RESTART = exports.CONTEXT_RESTART_FRAME_SUPPORTED = exports.CONTEXT_STEP_BACK_SUPPORTED = exports.CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG = exports.CONTEXT_FOCUSED_SESSION_IS_ATTACH = exports.CONTEXT_LOADED_SCRIPTS_ITEM_TYPE = exports.CONTEXT_LOADED_SCRIPTS_SUPPORTED = exports.CONTEXT_BREAKPOINT_SUPPORTS_CONDITION = exports.CONTEXT_BREAKPOINT_HAS_MODES = exports.CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES = exports.CONTEXT_BREAKPOINT_ITEM_TYPE = exports.CONTEXT_CAN_VIEW_MEMORY = exports.CONTEXT_WATCH_ITEM_TYPE = exports.CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD = exports.CONTEXT_CALLSTACK_ITEM_STOPPED = exports.CONTEXT_CALLSTACK_SESSION_IS_ATTACH = exports.CONTEXT_CALLSTACK_ITEM_TYPE = exports.CONTEXT_BREAKPOINT_INPUT_FOCUSED = exports.CONTEXT_EXPRESSION_SELECTED = exports.CONTEXT_VARIABLES_FOCUSED = exports.CONTEXT_WATCH_EXPRESSIONS_EXIST = exports.CONTEXT_WATCH_EXPRESSIONS_FOCUSED = exports.CONTEXT_BREAKPOINTS_FOCUSED = exports.CONTEXT_IN_BREAKPOINT_WIDGET = exports.CONTEXT_BREAKPOINT_WIDGET_VISIBLE = exports.CONTEXT_IN_DEBUG_REPL = exports.CONTEXT_IN_DEBUG_MODE = exports.CONTEXT_HAS_DEBUGGED = exports.CONTEXT_DEBUG_UX = exports.CONTEXT_DEBUG_UX_KEY = exports.CONTEXT_DEBUG_STATE = exports.CONTEXT_DEBUG_CONFIGURATION_TYPE = exports.CONTEXT_DEBUG_TYPE = exports.REPL_VIEW_ID = exports.DEBUG_PANEL_ID = exports.DISASSEMBLY_VIEW_ID = exports.BREAKPOINTS_VIEW_ID = exports.LOADED_SCRIPTS_VIEW_ID = exports.CALLSTACK_VIEW_ID = exports.WATCH_VIEW_ID = exports.VARIABLES_VIEW_ID = exports.VIEWLET_ID = void 0;
    exports.getStateLabel = getStateLabel;
    exports.VIEWLET_ID = 'workbench.view.debug';
    exports.VARIABLES_VIEW_ID = 'workbench.debug.variablesView';
    exports.WATCH_VIEW_ID = 'workbench.debug.watchExpressionsView';
    exports.CALLSTACK_VIEW_ID = 'workbench.debug.callStackView';
    exports.LOADED_SCRIPTS_VIEW_ID = 'workbench.debug.loadedScriptsView';
    exports.BREAKPOINTS_VIEW_ID = 'workbench.debug.breakPointsView';
    exports.DISASSEMBLY_VIEW_ID = 'workbench.debug.disassemblyView';
    exports.DEBUG_PANEL_ID = 'workbench.panel.repl';
    exports.REPL_VIEW_ID = 'workbench.panel.repl.view';
    exports.CONTEXT_DEBUG_TYPE = new contextkey_1.RawContextKey('debugType', undefined, { type: 'string', description: nls.localize('debugType', "Debug type of the active debug session. For example 'python'.") });
    exports.CONTEXT_DEBUG_CONFIGURATION_TYPE = new contextkey_1.RawContextKey('debugConfigurationType', undefined, { type: 'string', description: nls.localize('debugConfigurationType', "Debug type of the selected launch configuration. For example 'python'.") });
    exports.CONTEXT_DEBUG_STATE = new contextkey_1.RawContextKey('debugState', 'inactive', { type: 'string', description: nls.localize('debugState', "State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'.") });
    exports.CONTEXT_DEBUG_UX_KEY = 'debugUx';
    exports.CONTEXT_DEBUG_UX = new contextkey_1.RawContextKey(exports.CONTEXT_DEBUG_UX_KEY, 'default', { type: 'string', description: nls.localize('debugUX', "Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet.") });
    exports.CONTEXT_HAS_DEBUGGED = new contextkey_1.RawContextKey('hasDebugged', false, { type: 'boolean', description: nls.localize('hasDebugged', "True when a debug session has been started at least once, false otherwise.") });
    exports.CONTEXT_IN_DEBUG_MODE = new contextkey_1.RawContextKey('inDebugMode', false, { type: 'boolean', description: nls.localize('inDebugMode', "True when debugging, false otherwise.") });
    exports.CONTEXT_IN_DEBUG_REPL = new contextkey_1.RawContextKey('inDebugRepl', false, { type: 'boolean', description: nls.localize('inDebugRepl', "True when focus is in the debug console, false otherwise.") });
    exports.CONTEXT_BREAKPOINT_WIDGET_VISIBLE = new contextkey_1.RawContextKey('breakpointWidgetVisible', false, { type: 'boolean', description: nls.localize('breakpointWidgetVisibile', "True when breakpoint editor zone widget is visible, false otherwise.") });
    exports.CONTEXT_IN_BREAKPOINT_WIDGET = new contextkey_1.RawContextKey('inBreakpointWidget', false, { type: 'boolean', description: nls.localize('inBreakpointWidget', "True when focus is in the breakpoint editor zone widget, false otherwise.") });
    exports.CONTEXT_BREAKPOINTS_FOCUSED = new contextkey_1.RawContextKey('breakpointsFocused', true, { type: 'boolean', description: nls.localize('breakpointsFocused', "True when the BREAKPOINTS view is focused, false otherwise.") });
    exports.CONTEXT_WATCH_EXPRESSIONS_FOCUSED = new contextkey_1.RawContextKey('watchExpressionsFocused', true, { type: 'boolean', description: nls.localize('watchExpressionsFocused', "True when the WATCH view is focused, false otherwsie.") });
    exports.CONTEXT_WATCH_EXPRESSIONS_EXIST = new contextkey_1.RawContextKey('watchExpressionsExist', false, { type: 'boolean', description: nls.localize('watchExpressionsExist', "True when at least one watch expression exists, false otherwise.") });
    exports.CONTEXT_VARIABLES_FOCUSED = new contextkey_1.RawContextKey('variablesFocused', true, { type: 'boolean', description: nls.localize('variablesFocused', "True when the VARIABLES views is focused, false otherwsie") });
    exports.CONTEXT_EXPRESSION_SELECTED = new contextkey_1.RawContextKey('expressionSelected', false, { type: 'boolean', description: nls.localize('expressionSelected', "True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise.") });
    exports.CONTEXT_BREAKPOINT_INPUT_FOCUSED = new contextkey_1.RawContextKey('breakpointInputFocused', false, { type: 'boolean', description: nls.localize('breakpointInputFocused', "True when the input box has focus in the BREAKPOINTS view.") });
    exports.CONTEXT_CALLSTACK_ITEM_TYPE = new contextkey_1.RawContextKey('callStackItemType', undefined, { type: 'string', description: nls.localize('callStackItemType', "Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'") });
    exports.CONTEXT_CALLSTACK_SESSION_IS_ATTACH = new contextkey_1.RawContextKey('callStackSessionIsAttach', false, { type: 'boolean', description: nls.localize('callStackSessionIsAttach', "True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view.") });
    exports.CONTEXT_CALLSTACK_ITEM_STOPPED = new contextkey_1.RawContextKey('callStackItemStopped', false, { type: 'boolean', description: nls.localize('callStackItemStopped', "True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view.") });
    exports.CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD = new contextkey_1.RawContextKey('callStackSessionHasOneThread', false, { type: 'boolean', description: nls.localize('callStackSessionHasOneThread', "True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view.") });
    exports.CONTEXT_WATCH_ITEM_TYPE = new contextkey_1.RawContextKey('watchItemType', undefined, { type: 'string', description: nls.localize('watchItemType', "Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'") });
    exports.CONTEXT_CAN_VIEW_MEMORY = new contextkey_1.RawContextKey('canViewMemory', undefined, { type: 'boolean', description: nls.localize('canViewMemory', "Indicates whether the item in the view has an associated memory refrence.") });
    exports.CONTEXT_BREAKPOINT_ITEM_TYPE = new contextkey_1.RawContextKey('breakpointItemType', undefined, { type: 'string', description: nls.localize('breakpointItemType', "Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'") });
    exports.CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES = new contextkey_1.RawContextKey('breakpointItemBytes', undefined, { type: 'boolean', description: nls.localize('breakpointItemIsDataBytes', "Whether the breakpoint item is a data breakpoint on a byte range.") });
    exports.CONTEXT_BREAKPOINT_HAS_MODES = new contextkey_1.RawContextKey('breakpointHasModes', false, { type: 'boolean', description: nls.localize('breakpointHasModes', "Whether the breakpoint has multiple modes it can switch to.") });
    exports.CONTEXT_BREAKPOINT_SUPPORTS_CONDITION = new contextkey_1.RawContextKey('breakpointSupportsCondition', false, { type: 'boolean', description: nls.localize('breakpointSupportsCondition', "True when the focused breakpoint supports conditions.") });
    exports.CONTEXT_LOADED_SCRIPTS_SUPPORTED = new contextkey_1.RawContextKey('loadedScriptsSupported', false, { type: 'boolean', description: nls.localize('loadedScriptsSupported', "True when the focused sessions supports the LOADED SCRIPTS view") });
    exports.CONTEXT_LOADED_SCRIPTS_ITEM_TYPE = new contextkey_1.RawContextKey('loadedScriptsItemType', undefined, { type: 'string', description: nls.localize('loadedScriptsItemType', "Represents the item type of the focused element in the LOADED SCRIPTS view.") });
    exports.CONTEXT_FOCUSED_SESSION_IS_ATTACH = new contextkey_1.RawContextKey('focusedSessionIsAttach', false, { type: 'boolean', description: nls.localize('focusedSessionIsAttach', "True when the focused session is 'attach'.") });
    exports.CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG = new contextkey_1.RawContextKey('focusedSessionIsNoDebug', false, { type: 'boolean', description: nls.localize('focusedSessionIsNoDebug', "True when the focused session is run without debugging.") });
    exports.CONTEXT_STEP_BACK_SUPPORTED = new contextkey_1.RawContextKey('stepBackSupported', false, { type: 'boolean', description: nls.localize('stepBackSupported', "True when the focused session supports 'stepBack' requests.") });
    exports.CONTEXT_RESTART_FRAME_SUPPORTED = new contextkey_1.RawContextKey('restartFrameSupported', false, { type: 'boolean', description: nls.localize('restartFrameSupported', "True when the focused session supports 'restartFrame' requests.") });
    exports.CONTEXT_STACK_FRAME_SUPPORTS_RESTART = new contextkey_1.RawContextKey('stackFrameSupportsRestart', false, { type: 'boolean', description: nls.localize('stackFrameSupportsRestart', "True when the focused stack frame suppots 'restartFrame'.") });
    exports.CONTEXT_JUMP_TO_CURSOR_SUPPORTED = new contextkey_1.RawContextKey('jumpToCursorSupported', false, { type: 'boolean', description: nls.localize('jumpToCursorSupported', "True when the focused session supports 'jumpToCursor' request.") });
    exports.CONTEXT_STEP_INTO_TARGETS_SUPPORTED = new contextkey_1.RawContextKey('stepIntoTargetsSupported', false, { type: 'boolean', description: nls.localize('stepIntoTargetsSupported', "True when the focused session supports 'stepIntoTargets' request.") });
    exports.CONTEXT_BREAKPOINTS_EXIST = new contextkey_1.RawContextKey('breakpointsExist', false, { type: 'boolean', description: nls.localize('breakpointsExist', "True when at least one breakpoint exists.") });
    exports.CONTEXT_DEBUGGERS_AVAILABLE = new contextkey_1.RawContextKey('debuggersAvailable', false, { type: 'boolean', description: nls.localize('debuggersAvailable', "True when there is at least one debug extensions active.") });
    exports.CONTEXT_DEBUG_EXTENSION_AVAILABLE = new contextkey_1.RawContextKey('debugExtensionAvailable', true, { type: 'boolean', description: nls.localize('debugExtensionsAvailable', "True when there is at least one debug extension installed and enabled.") });
    exports.CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT = new contextkey_1.RawContextKey('debugProtocolVariableMenuContext', undefined, { type: 'string', description: nls.localize('debugProtocolVariableMenuContext', "Represents the context the debug adapter sets on the focused variable in the VARIABLES view.") });
    exports.CONTEXT_SET_VARIABLE_SUPPORTED = new contextkey_1.RawContextKey('debugSetVariableSupported', false, { type: 'boolean', description: nls.localize('debugSetVariableSupported', "True when the focused session supports 'setVariable' request.") });
    exports.CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED = new contextkey_1.RawContextKey('debugSetDataBreakpointAddressSupported', false, { type: 'boolean', description: nls.localize('debugSetDataBreakpointAddressSupported', "True when the focused session supports 'getBreakpointInfo' request on an address.") });
    exports.CONTEXT_SET_EXPRESSION_SUPPORTED = new contextkey_1.RawContextKey('debugSetExpressionSupported', false, { type: 'boolean', description: nls.localize('debugSetExpressionSupported', "True when the focused session supports 'setExpression' request.") });
    exports.CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED = new contextkey_1.RawContextKey('breakWhenValueChangesSupported', false, { type: 'boolean', description: nls.localize('breakWhenValueChangesSupported', "True when the focused session supports to break when value changes.") });
    exports.CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED = new contextkey_1.RawContextKey('breakWhenValueIsAccessedSupported', false, { type: 'boolean', description: nls.localize('breakWhenValueIsAccessedSupported', "True when the focused breakpoint supports to break when value is accessed.") });
    exports.CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED = new contextkey_1.RawContextKey('breakWhenValueIsReadSupported', false, { type: 'boolean', description: nls.localize('breakWhenValueIsReadSupported', "True when the focused breakpoint supports to break when value is read.") });
    exports.CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED = new contextkey_1.RawContextKey('terminateDebuggeeSupported', false, { type: 'boolean', description: nls.localize('terminateDebuggeeSupported', "True when the focused session supports the terminate debuggee capability.") });
    exports.CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED = new contextkey_1.RawContextKey('suspendDebuggeeSupported', false, { type: 'boolean', description: nls.localize('suspendDebuggeeSupported', "True when the focused session supports the suspend debuggee capability.") });
    exports.CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT = new contextkey_1.RawContextKey('variableEvaluateNamePresent', false, { type: 'boolean', description: nls.localize('variableEvaluateNamePresent', "True when the focused variable has an 'evalauteName' field set.") });
    exports.CONTEXT_VARIABLE_IS_READONLY = new contextkey_1.RawContextKey('variableIsReadonly', false, { type: 'boolean', description: nls.localize('variableIsReadonly', "True when the focused variable is read-only.") });
    exports.CONTEXT_VARIABLE_VALUE = new contextkey_1.RawContextKey('variableValue', false, { type: 'string', description: nls.localize('variableValue', "Value of the variable, present for debug visualization clauses.") });
    exports.CONTEXT_VARIABLE_TYPE = new contextkey_1.RawContextKey('variableType', false, { type: 'string', description: nls.localize('variableType', "Type of the variable, present for debug visualization clauses.") });
    exports.CONTEXT_VARIABLE_INTERFACES = new contextkey_1.RawContextKey('variableInterfaces', false, { type: 'array', description: nls.localize('variableInterfaces', "Any interfaces or contracts that the variable satisfies, present for debug visualization clauses.") });
    exports.CONTEXT_VARIABLE_NAME = new contextkey_1.RawContextKey('variableName', false, { type: 'string', description: nls.localize('variableName', "Name of the variable, present for debug visualization clauses.") });
    exports.CONTEXT_VARIABLE_LANGUAGE = new contextkey_1.RawContextKey('variableLanguage', false, { type: 'string', description: nls.localize('variableLanguage', "Language of the variable source, present for debug visualization clauses.") });
    exports.CONTEXT_VARIABLE_EXTENSIONID = new contextkey_1.RawContextKey('variableExtensionId', false, { type: 'string', description: nls.localize('variableExtensionId', "Extension ID of the variable source, present for debug visualization clauses.") });
    exports.CONTEXT_EXCEPTION_WIDGET_VISIBLE = new contextkey_1.RawContextKey('exceptionWidgetVisible', false, { type: 'boolean', description: nls.localize('exceptionWidgetVisible', "True when the exception widget is visible.") });
    exports.CONTEXT_MULTI_SESSION_REPL = new contextkey_1.RawContextKey('multiSessionRepl', false, { type: 'boolean', description: nls.localize('multiSessionRepl', "True when there is more than 1 debug console.") });
    exports.CONTEXT_MULTI_SESSION_DEBUG = new contextkey_1.RawContextKey('multiSessionDebug', false, { type: 'boolean', description: nls.localize('multiSessionDebug', "True when there is more than 1 active debug session.") });
    exports.CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED = new contextkey_1.RawContextKey('disassembleRequestSupported', false, { type: 'boolean', description: nls.localize('disassembleRequestSupported', "True when the focused sessions supports disassemble request.") });
    exports.CONTEXT_DISASSEMBLY_VIEW_FOCUS = new contextkey_1.RawContextKey('disassemblyViewFocus', false, { type: 'boolean', description: nls.localize('disassemblyViewFocus', "True when the Disassembly View is focused.") });
    exports.CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = new contextkey_1.RawContextKey('languageSupportsDisassembleRequest', false, { type: 'boolean', description: nls.localize('languageSupportsDisassembleRequest', "True when the language in the current editor supports disassemble request.") });
    exports.CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE = new contextkey_1.RawContextKey('focusedStackFrameHasInstructionReference', false, { type: 'boolean', description: nls.localize('focusedStackFrameHasInstructionReference', "True when the focused stack frame has instruction pointer reference.") });
    const debuggerDisabledMessage = (debugType) => nls.localize('debuggerDisabled', "Configured debug type '{0}' is installed but not supported in this environment.", debugType);
    exports.debuggerDisabledMessage = debuggerDisabledMessage;
    exports.EDITOR_CONTRIBUTION_ID = 'editor.contrib.debug';
    exports.BREAKPOINT_EDITOR_CONTRIBUTION_ID = 'editor.contrib.breakpoint';
    exports.DEBUG_SCHEME = 'debug';
    exports.INTERNAL_CONSOLE_OPTIONS_SCHEMA = {
        enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'],
        default: 'openOnFirstSessionStart',
        description: nls.localize('internalConsoleOptions', "Controls when the internal Debug Console should open.")
    };
    var State;
    (function (State) {
        State[State["Inactive"] = 0] = "Inactive";
        State[State["Initializing"] = 1] = "Initializing";
        State[State["Stopped"] = 2] = "Stopped";
        State[State["Running"] = 3] = "Running";
    })(State || (exports.State = State = {}));
    function getStateLabel(state) {
        switch (state) {
            case 1 /* State.Initializing */: return 'initializing';
            case 2 /* State.Stopped */: return 'stopped';
            case 3 /* State.Running */: return 'running';
            default: return 'inactive';
        }
    }
    var MemoryRangeType;
    (function (MemoryRangeType) {
        MemoryRangeType[MemoryRangeType["Valid"] = 0] = "Valid";
        MemoryRangeType[MemoryRangeType["Unreadable"] = 1] = "Unreadable";
        MemoryRangeType[MemoryRangeType["Error"] = 2] = "Error";
    })(MemoryRangeType || (exports.MemoryRangeType = MemoryRangeType = {}));
    exports.DEBUG_MEMORY_SCHEME = 'vscode-debug-memory';
    var DataBreakpointSetType;
    (function (DataBreakpointSetType) {
        DataBreakpointSetType[DataBreakpointSetType["Variable"] = 0] = "Variable";
        DataBreakpointSetType[DataBreakpointSetType["Address"] = 1] = "Address";
    })(DataBreakpointSetType || (exports.DataBreakpointSetType = DataBreakpointSetType = {}));
    var DebugConfigurationProviderTriggerKind;
    (function (DebugConfigurationProviderTriggerKind) {
        /**
         *	`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.
         */
        DebugConfigurationProviderTriggerKind[DebugConfigurationProviderTriggerKind["Initial"] = 1] = "Initial";
        /**
         * `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).
         */
        DebugConfigurationProviderTriggerKind[DebugConfigurationProviderTriggerKind["Dynamic"] = 2] = "Dynamic";
    })(DebugConfigurationProviderTriggerKind || (exports.DebugConfigurationProviderTriggerKind = DebugConfigurationProviderTriggerKind = {}));
    var DebuggerString;
    (function (DebuggerString) {
        DebuggerString["UnverifiedBreakpoints"] = "unverifiedBreakpoints";
    })(DebuggerString || (exports.DebuggerString = DebuggerString = {}));
    // Debug service interfaces
    exports.IDebugService = (0, instantiation_1.createDecorator)('debugService');
    // Editor interfaces
    var BreakpointWidgetContext;
    (function (BreakpointWidgetContext) {
        BreakpointWidgetContext[BreakpointWidgetContext["CONDITION"] = 0] = "CONDITION";
        BreakpointWidgetContext[BreakpointWidgetContext["HIT_COUNT"] = 1] = "HIT_COUNT";
        BreakpointWidgetContext[BreakpointWidgetContext["LOG_MESSAGE"] = 2] = "LOG_MESSAGE";
        BreakpointWidgetContext[BreakpointWidgetContext["TRIGGER_POINT"] = 3] = "TRIGGER_POINT";
    })(BreakpointWidgetContext || (exports.BreakpointWidgetContext = BreakpointWidgetContext = {}));
    var DebugVisualizationType;
    (function (DebugVisualizationType) {
        DebugVisualizationType[DebugVisualizationType["Command"] = 0] = "Command";
        DebugVisualizationType[DebugVisualizationType["Tree"] = 1] = "Tree";
    })(DebugVisualizationType || (exports.DebugVisualizationType = DebugVisualizationType = {}));
    var DebugTreeItemCollapsibleState;
    (function (DebugTreeItemCollapsibleState) {
        DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["None"] = 0] = "None";
        DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["Collapsed"] = 1] = "Collapsed";
        DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["Expanded"] = 2] = "Expanded";
    })(DebugTreeItemCollapsibleState || (exports.DebugTreeItemCollapsibleState = DebugTreeItemCollapsibleState = {}));
    var IDebugVisualizationTreeItem;
    (function (IDebugVisualizationTreeItem) {
        IDebugVisualizationTreeItem.deserialize = (v) => v;
        IDebugVisualizationTreeItem.serialize = (item) => item;
    })(IDebugVisualizationTreeItem || (exports.IDebugVisualizationTreeItem = IDebugVisualizationTreeItem = {}));
    var IDebugVisualization;
    (function (IDebugVisualization) {
        IDebugVisualization.deserialize = (v) => ({
            id: v.id,
            name: v.name,
            iconPath: v.iconPath && { light: uri_1.URI.revive(v.iconPath.light), dark: uri_1.URI.revive(v.iconPath.dark) },
            iconClass: v.iconClass,
            visualization: v.visualization,
        });
        IDebugVisualization.serialize = (visualizer) => visualizer;
    })(IDebugVisualization || (exports.IDebugVisualization = IDebugVisualization = {}));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL21vZC9tb2QvYnVpbGR2c2NvZGUvdnNjb2RlL3NyYy8iLCJzb3VyY2VzIjpbInZzL3dvcmtiZW5jaC9jb250cmliL2RlYnVnL2NvbW1vbi9kZWJ1Zy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O2dHQUdnRzs7Ozs7SUFvTWhHLHNDQU9DO0lBL0tZLFFBQUEsVUFBVSxHQUFHLHNCQUFzQixDQUFDO0lBRXBDLFFBQUEsaUJBQWlCLEdBQUcsK0JBQStCLENBQUM7SUFDcEQsUUFBQSxhQUFhLEdBQUcsc0NBQXNDLENBQUM7SUFDdkQsUUFBQSxpQkFBaUIsR0FBRywrQkFBK0IsQ0FBQztJQUNwRCxRQUFBLHNCQUFzQixHQUFHLG1DQUFtQyxDQUFDO0lBQzdELFFBQUEsbUJBQW1CLEdBQUcsaUNBQWlDLENBQUM7SUFDeEQsUUFBQSxtQkFBbUIsR0FBRyxpQ0FBaUMsQ0FBQztJQUN4RCxRQUFBLGNBQWMsR0FBRyxzQkFBc0IsQ0FBQztJQUN4QyxRQUFBLFlBQVksR0FBRywyQkFBMkIsQ0FBQztJQUMzQyxRQUFBLGtCQUFrQixHQUFHLElBQUksMEJBQWEsQ0FBUyxXQUFXLEVBQUUsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsK0RBQStELENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcE0sUUFBQSxnQ0FBZ0MsR0FBRyxJQUFJLDBCQUFhLENBQVMsd0JBQXdCLEVBQUUsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSx3RUFBd0UsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNyUCxRQUFBLG1CQUFtQixHQUFHLElBQUksMEJBQWEsQ0FBUyxZQUFZLEVBQUUsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFF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