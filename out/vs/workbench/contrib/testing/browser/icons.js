/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/base/common/codicons", "vs/nls", "vs/platform/theme/common/iconRegistry", "vs/platform/theme/common/themeService", "vs/base/common/themables", "vs/workbench/contrib/testing/browser/theme"], function (require, exports, codicons_1, nls_1, iconRegistry_1, themeService_1, themables_1, theme_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.testingStatesToIcons = exports.testingCoverageMissingBranch = exports.testingWasCovered = exports.testingCoverageReport = exports.testingCancelRefreshTests = exports.testingContinuousIsOn = exports.testingTurnContinuousRunOff = exports.testingTurnContinuousRunOn = exports.testingRefreshTests = exports.testingUpdateProfiles = exports.testingShowAsTree = exports.testingShowAsList = exports.testingHiddenIcon = exports.testingFilterIcon = exports.testingCancelIcon = exports.testingCoverageAllIcon = exports.testingCoverageIcon = exports.testingDebugIcon = exports.testingDebugAllIcon = exports.testingRunAllIcon = exports.testingRerunIcon = exports.testingRunIcon = exports.testingResultsIcon = exports.testingViewIcon = void 0;
    exports.testingViewIcon = (0, iconRegistry_1.registerIcon)('test-view-icon', codicons_1.Codicon.beaker, (0, nls_1.localize)('testViewIcon', 'View icon of the test view.'));
    exports.testingResultsIcon = (0, iconRegistry_1.registerIcon)('test-results-icon', codicons_1.Codicon.checklist, (0, nls_1.localize)('testingResultsIcon', 'Icons for test results.'));
    exports.testingRunIcon = (0, iconRegistry_1.registerIcon)('testing-run-icon', codicons_1.Codicon.run, (0, nls_1.localize)('testingRunIcon', 'Icon of the "run test" action.'));
    exports.testingRerunIcon = (0, iconRegistry_1.registerIcon)('testing-rerun-icon', codicons_1.Codicon.refresh, (0, nls_1.localize)('testingRerunIcon', 'Icon of the "rerun tests" action.'));
    exports.testingRunAllIcon = (0, iconRegistry_1.registerIcon)('testing-run-all-icon', codicons_1.Codicon.runAll, (0, nls_1.localize)('testingRunAllIcon', 'Icon of the "run all tests" action.'));
    // todo: https://github.com/microsoft/vscode-codicons/issues/72
    exports.testingDebugAllIcon = (0, iconRegistry_1.registerIcon)('testing-debug-all-icon', codicons_1.Codicon.debugAltSmall, (0, nls_1.localize)('testingDebugAllIcon', 'Icon of the "debug all tests" action.'));
    exports.testingDebugIcon = (0, iconRegistry_1.registerIcon)('testing-debug-icon', codicons_1.Codicon.debugAltSmall, (0, nls_1.localize)('testingDebugIcon', 'Icon of the "debug test" action.'));
    exports.testingCoverageIcon = (0, iconRegistry_1.registerIcon)('testing-coverage-icon', codicons_1.Codicon.runCoverage, (0, nls_1.localize)('testingCoverageIcon', 'Icon of the "run test with coverage" action.'));
    exports.testingCoverageAllIcon = (0, iconRegistry_1.registerIcon)('testing-coverage-all-icon', codicons_1.Codicon.runAllCoverage, (0, nls_1.localize)('testingRunAllWithCoverageIcon', 'Icon of the "run all tests with coverage" action.'));
    exports.testingCancelIcon = (0, iconRegistry_1.registerIcon)('testing-cancel-icon', codicons_1.Codicon.debugStop, (0, nls_1.localize)('testingCancelIcon', 'Icon to cancel ongoing test runs.'));
    exports.testingFilterIcon = (0, iconRegistry_1.registerIcon)('testing-filter', codicons_1.Codicon.filter, (0, nls_1.localize)('filterIcon', 'Icon for the \'Filter\' action in the testing view.'));
    exports.testingHiddenIcon = (0, iconRegistry_1.registerIcon)('testing-hidden', codicons_1.Codicon.eyeClosed, (0, nls_1.localize)('hiddenIcon', 'Icon shown beside hidden tests, when they\'ve been shown.'));
    exports.testingShowAsList = (0, iconRegistry_1.registerIcon)('testing-show-as-list-icon', codicons_1.Codicon.listTree, (0, nls_1.localize)('testingShowAsList', 'Icon shown when the test explorer is disabled as a tree.'));
    exports.testingShowAsTree = (0, iconRegistry_1.registerIcon)('testing-show-as-list-icon', codicons_1.Codicon.listFlat, (0, nls_1.localize)('testingShowAsTree', 'Icon shown when the test explorer is disabled as a list.'));
    exports.testingUpdateProfiles = (0, iconRegistry_1.registerIcon)('testing-update-profiles', codicons_1.Codicon.gear, (0, nls_1.localize)('testingUpdateProfiles', 'Icon shown to update test profiles.'));
    exports.testingRefreshTests = (0, iconRegistry_1.registerIcon)('testing-refresh-tests', codicons_1.Codicon.refresh, (0, nls_1.localize)('testingRefreshTests', 'Icon on the button to refresh tests.'));
    exports.testingTurnContinuousRunOn = (0, iconRegistry_1.registerIcon)('testing-turn-continuous-run-on', codicons_1.Codicon.eye, (0, nls_1.localize)('testingTurnContinuousRunOn', 'Icon to turn continuous test runs on.'));
    exports.testingTurnContinuousRunOff = (0, iconRegistry_1.registerIcon)('testing-turn-continuous-run-off', codicons_1.Codicon.eyeClosed, (0, nls_1.localize)('testingTurnContinuousRunOff', 'Icon to turn continuous test runs off.'));
    exports.testingContinuousIsOn = (0, iconRegistry_1.registerIcon)('testing-continuous-is-on', codicons_1.Codicon.eye, (0, nls_1.localize)('testingTurnContinuousRunIsOn', 'Icon when continuous run is on for a test ite,.'));
    exports.testingCancelRefreshTests = (0, iconRegistry_1.registerIcon)('testing-cancel-refresh-tests', codicons_1.Codicon.stop, (0, nls_1.localize)('testingCancelRefreshTests', 'Icon on the button to cancel refreshing tests.'));
    exports.testingCoverageReport = (0, iconRegistry_1.registerIcon)('testing-coverage', codicons_1.Codicon.coverage, (0, nls_1.localize)('testingCoverage', 'Icon representing test coverage'));
    exports.testingWasCovered = (0, iconRegistry_1.registerIcon)('testing-was-covered', codicons_1.Codicon.check, (0, nls_1.localize)('testingWasCovered', 'Icon representing that an element was covered'));
    exports.testingCoverageMissingBranch = (0, iconRegistry_1.registerIcon)('testing-missing-branch', codicons_1.Codicon.question, (0, nls_1.localize)('testingMissingBranch', 'Icon representing a uncovered block without a range'));
    exports.testingStatesToIcons = new Map([
        [6 /* TestResultState.Errored */, (0, iconRegistry_1.registerIcon)('testing-error-icon', codicons_1.Codicon.issues, (0, nls_1.localize)('testingErrorIcon', 'Icon shown for tests that have an error.'))],
        [4 /* TestResultState.Failed */, (0, iconRegistry_1.registerIcon)('testing-failed-icon', codicons_1.Codicon.error, (0, nls_1.localize)('testingFailedIcon', 'Icon shown for tests that failed.'))],
        [3 /* TestResultState.Passed */, (0, iconRegistry_1.registerIcon)('testing-passed-icon', codicons_1.Codicon.pass, (0, nls_1.localize)('testingPassedIcon', 'Icon shown for tests that passed.'))],
        [1 /* TestResultState.Queued */, (0, iconRegistry_1.registerIcon)('testing-queued-icon', codicons_1.Codicon.history, (0, nls_1.localize)('testingQueuedIcon', 'Icon shown for tests that are queued.'))],
        [2 /* TestResultState.Running */, iconRegistry_1.spinningLoading],
        [5 /* TestResultState.Skipped */, (0, iconRegistry_1.registerIcon)('testing-skipped-icon', codicons_1.Codicon.debugStepOver, (0, nls_1.localize)('testingSkippedIcon', 'Icon shown for tests that are skipped.'))],
        [0 /* TestResultState.Unset */, (0, iconRegistry_1.registerIcon)('testing-unset-icon', codicons_1.Codicon.circleOutline, (0, nls_1.localize)('testingUnsetIcon', 'Icon shown for tests that are in an unset state.'))],
    ]);
    (0, themeService_1.registerThemingParticipant)((theme, collector) => {
        for (const [state, icon] of exports.testingStatesToIcons.entries()) {
            const color = theme_1.testStatesToIconColors[state];
            const retiredColor = theme_1.testStatesToRetiredIconColors[state];
            if (!color) {
                continue;
            }
            collector.addRule(`.monaco-workbench ${themables_1.ThemeIcon.asCSSSelector(icon)} {
			color: ${theme.getColor(color)} !important;
		}`);
            if (!retiredColor) {
                continue;
            }
            collector.addRule(`
			.test-explorer .computed-state.retired${themables_1.ThemeIcon.asCSSSelector(icon)},
			.testing-run-glyph.retired${themables_1.ThemeIcon.asCSSSelector(icon)}{
				color: ${theme.getColor(retiredColor)} !important;
			}
		`);
        }
        collector.addRule(`
		.monaco-editor ${themables_1.ThemeIcon.asCSSSelector(exports.testingRunIcon)},
		.monaco-editor ${themables_1.ThemeIcon.asCSSSelector(exports.testingRunAllIcon)} {
			color: ${theme.getColor(theme_1.testingColorRunAction)};
		}
	`);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbnMuanMiLCJzb3VyY2VSb290IjoiZmlsZTovLy9ob21lL3J1bm5lci93b3JrL21vZC9tb2QvYnVpbGR2c2NvZGUvdnNjb2RlL3NyYy8iLCJzb3VyY2VzIjpbInZzL3dvcmtiZW5jaC9jb250cmliL3Rlc3RpbmcvYnJvd3Nlci9pY29ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O2dHQUdnRzs7Ozs7SUFVbkYsUUFBQSxlQUFlLEdBQUcsSUFBQSwyQkFBWSxFQUFDLGdCQUFnQixFQUFFLGtCQUFPLENBQUMsTUFBTSxFQUFFLElBQUEsY0FBUSxFQUFDLGNBQWMsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7SUFDMUgsUUFBQSxrQkFBa0IsR0FBRyxJQUFBLDJCQUFZLEVBQUMsbUJBQW1CLEVBQUUsa0JBQU8sQ0FBQyxTQUFTLEVBQUUsSUFBQSxjQUFRLEVBQUMsb0JBQW9CLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFDO0lBQ3JJLFFBQUEsY0FBYyxHQUFHLElBQUEsMkJBQVksRUFBQyxrQkFBa0IsRUFBRSxrQkFBTyxDQUFDLEdBQUcsRUFBRSxJQUFBLGNBQVEsRUFBQyxnQkFBZ0IsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7SUFDN0gsUUFBQSxnQkFBZ0IsR0FBRyxJQUFBLDJCQUFZLEVBQUMsb0JBQW9CLEVBQUUsa0JBQU8sQ0FBQyxPQUFPLEVBQUUsSUFBQSxjQUFRLEVBQUMsa0JBQWtCLEVBQUUsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO0lBQzFJLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLHNCQUFzQixFQUFFLGtCQUFPLENBQUMsTUFBTSxFQUFFLElBQUEsY0FBUSxFQUFDLG1CQUFtQixFQUFFLHFDQUFxQyxDQUFDLENBQUMsQ0FBQztJQUM1SiwrREFBK0Q7SUFDbEQsUUFBQSxtQkFBbUIsR0FBRyxJQUFBLDJCQUFZLEVBQUMsd0JBQXdCLEVBQUUsa0JBQU8sQ0FBQyxhQUFhLEVBQUUsSUFBQSxjQUFRLEVBQUMscUJBQXFCLEVBQUUsdUNBQXVDLENBQUMsQ0FBQyxDQUFDO0lBQzlKLFFBQUEsZ0JBQWdCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLG9CQUFvQixFQUFFLGtCQUFPLENBQUMsYUFBYSxFQUFFLElBQUEsY0FBUSxFQUFDLGtCQUFrQixFQUFFLGtDQUFrQyxDQUFDLENBQUMsQ0FBQztJQUMvSSxRQUFBLG1CQUFtQixHQUFHLElBQUEsMkJBQVksRUFBQyx1QkFBdUIsRUFBRSxrQkFBTyxDQUFDLFdBQVcsRUFBRSxJQUFBLGNBQVEsRUFBQyxxQkFBcUIsRUFBRSw4Q0FBOEMsQ0FBQyxDQUFDLENBQUM7SUFDbEssUUFBQSxzQkFBc0IsR0FBRyxJQUFBLDJCQUFZLEVBQUMsMkJBQTJCLEVBQUUsa0JBQU8sQ0FBQyxjQUFjLEVBQUUsSUFBQSxjQUFRLEVBQUMsK0JBQStCLEVBQUUsbURBQW1ELENBQUMsQ0FBQyxDQUFDO0lBQzNMLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLHFCQUFxQixFQUFFLGtCQUFPLENBQUMsU0FBUyxFQUFFLElBQUEsY0FBUSxFQUFDLG1CQUFtQixFQUFFLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztJQUMvSSxRQUFBLGlCQUFpQixHQUFHLElBQUEsMkJBQVksRUFBQyxnQkFBZ0IsRUFBRSxrQkFBTyxDQUFDLE1BQU0sRUFBRSxJQUFBLGNBQVEsRUFBQyxZQUFZLEVBQUUscURBQXFELENBQUMsQ0FBQyxDQUFDO0lBQ2xKLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLGdCQUFnQixFQUFFLGtCQUFPLENBQUMsU0FBUyxFQUFFLElBQUEsY0FBUSxFQUFDLFlBQVksRUFBRSwyREFBMkQsQ0FBQyxDQUFDLENBQUM7SUFFM0osUUFBQSxpQkFBaUIsR0FBRyxJQUFBLDJCQUFZLEVBQUMsMkJBQTJCLEVBQUUsa0JBQU8sQ0FBQyxRQUFRLEVBQUUsSUFBQSxjQUFRLEVBQUMsbUJBQW1CLEVBQUUsMERBQTBELENBQUMsQ0FBQyxDQUFDO0lBQzNLLFFBQUEsaUJBQWlCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLDJCQUEyQixFQUFFLGtCQUFPLENBQUMsUUFBUSxFQUFFLElBQUEsY0FBUSxFQUFDLG1CQUFtQixFQUFFLDBEQUEwRCxDQUFDLENBQUMsQ0FBQztJQUUzSyxRQUFBLHFCQUFxQixHQUFHLElBQUEsMkJBQVksRUFBQyx5QkFBeUIsRUFBRSxrQkFBTyxDQUFDLElBQUksRUFBRSxJQUFBLGNBQVEsRUFBQyx1QkFBdUIsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7SUFDeEosUUFBQSxtQkFBbUIsR0FBRyxJQUFBLDJCQUFZLEVBQUMsdUJBQXVCLEVBQUUsa0JBQU8sQ0FBQyxPQUFPLEVBQUUsSUFBQSxjQUFRLEVBQUMscUJBQXFCLEVBQUUsc0NBQXNDLENBQUMsQ0FBQyxDQUFDO0lBQ3RKLFFBQUEsMEJBQTBCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLGdDQUFnQyxFQUFFLGtCQUFPLENBQUMsR0FBRyxFQUFFLElBQUEsY0FBUSxFQUFDLDRCQUE0QixFQUFFLHVDQUF1QyxDQUFDLENBQUMsQ0FBQztJQUMxSyxRQUFBLDJCQUEyQixHQUFHLElBQUEsMkJBQVksRUFBQyxpQ0FBaUMsRUFBRSxrQkFBTyxDQUFDLFNBQVMsRUFBRSxJQUFBLGNBQVEsRUFBQyw2QkFBNkIsRUFBRSx3Q0FBd0MsQ0FBQyxDQUFDLENBQUM7SUFDcEwsUUFBQSxxQkFBcUIsR0FBRyxJQUFBLDJCQUFZLEVBQUMsMEJBQTBCLEVBQUUsa0JBQU8sQ0FBQyxHQUFHLEVBQUUsSUFBQSxjQUFRLEVBQUMsOEJBQThCLEVBQUUsaURBQWlELENBQUMsQ0FBQyxDQUFDO0lBQzNLLFFBQUEseUJBQXlCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLDhCQUE4QixFQUFFLGtCQUFPLENBQUMsSUFBSSxFQUFFLElBQUEsY0FBUSxFQUFDLDJCQUEyQixFQUFFLGdEQUFnRCxDQUFDLENBQUMsQ0FBQztJQUVoTCxRQUFBLHFCQUFxQixHQUFHLElBQUEsMkJBQVksRUFBQyxrQkFBa0IsRUFBRSxrQkFBTyxDQUFDLFFBQVEsRUFBRSxJQUFBLGNBQVEsRUFBQyxpQkFBaUIsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7SUFDM0ksUUFBQSxpQkFBaUIsR0FBRyxJQUFBLDJCQUFZLEVBQUMscUJBQXFCLEVBQUUsa0JBQU8sQ0FBQyxLQUFLLEVBQUUsSUFBQSxjQUFRLEVBQUMsbUJBQW1CLEVBQUUsK0NBQStDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZKLFFBQUEsNEJBQTRCLEdBQUcsSUFBQSwyQkFBWSxFQUFDLHdCQUF3QixFQUFFLGtCQUFPLENBQUMsUUFBUSxFQUFFLElBQUEsY0FBUSxFQUFDLHNCQUFzQixFQUFFLHFEQUFxRCxDQUFDLENBQUMsQ0FBQztJQUVqTCxRQUFBLG9CQUFvQixHQUFHLElBQUksR0FBRyxDQUE2QjtRQUN2RSxrQ0FBMEIsSUFBQSwyQkFBWSxFQUFDLG9CQUFvQixFQUFFLGtCQUFPLENBQUMsTUFBTSxFQUFFLElBQUEsY0FBUSxFQUFDLGtCQUFrQixFQUFFLDBDQUEwQyxDQUFDLENBQUMsQ0FBQztRQUN2SixpQ0FBeUIsSUFBQSwyQkFBWSxFQUFDLHFCQUFxQixFQUFFLGtCQUFPLENBQUMsS0FBSyxFQUFFLElBQUEsY0FBUSxFQUFDLG1CQUFtQixFQUFFLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztRQUNoSixpQ0FBeUIsSUFBQSwyQkFBWSxFQUFDLHFCQUFxQixFQUFFLGtCQUFPLENBQUMsSUFBSSxFQUFFLElBQUEsY0FBUSxFQUFDLG1CQUFtQixFQUFFLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztRQUMvSSxpQ0FBeUIsSUFBQSwyQkFBWSxFQUFDLHFCQUFxQixFQUFFLGtCQUFPLENBQUMsT0FBTyxFQUFFLElBQUEsY0FBUSxFQUFDLG1CQUFtQixFQUFFLHVDQUF1QyxDQUFDLENBQUMsQ0FBQztRQUN0SixrQ0FBMEIsOEJBQWUsQ0FBQztRQUMxQyxrQ0FBMEIsSUFBQSwyQkFBWSxFQUFDLHNCQUFzQixFQUFFLGtCQUFPLENBQUMsYUFBYSxFQUFFLElBQUEsY0FBUSxFQUFDLG9CQUFvQixFQUFFLHdDQUF3QyxDQUFDLENBQUMsQ0FBQztRQUNoSyxnQ0FBd0IsSUFBQSwyQkFBWSxFQUFDLG9CQUFvQixFQUFFLGtCQUFPLENBQUMsYUFBYSxFQUFFLElBQUEsY0FBUSxFQUFDLGtCQUFrQixFQUFFLGtEQUFrRCxDQUFDLENBQUMsQ0FBQztLQUNwSyxDQUFDLENBQUM7SUFFSCxJQUFBLHlDQUEwQixFQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQy9DLEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSw0QkFBb0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQzVELE1BQU0sS0FBSyxHQUFHLDhCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVDLE1BQU0sWUFBWSxHQUFHLHFDQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWixTQUFTO1lBQ1YsQ0FBQztZQUNELFNBQVMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLHFCQUFTLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztZQUMxRCxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDLENBQUM7WUFDSixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ25CLFNBQVM7WUFDVixDQUFDO1lBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQzsyQ0FDdUIscUJBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDOytCQUN6QyxxQkFBUyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7YUFDL0MsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUM7O0dBRXRDLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRCxTQUFTLENBQUMsT0FBTyxDQUFDO21CQUNBLHFCQUFTLENBQUMsYUFBYSxDQUFDLHNCQUFjLENBQUM7bUJBQ3ZDLHFCQUFTLENBQUMsYUFBYSxDQUFDLHlCQUFpQixDQUFDO1lBQ2pELEtBQUssQ0FBQyxRQUFRLENBQUMsNkJBQXFCLENBQUM7O0VBRS9DLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDIn0=