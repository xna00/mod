/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/editor/common/languages", "vs/editor/contrib/peekView/browser/peekView", "vs/nls", "vs/platform/theme/common/colorRegistry"], function (require, exports, languages, peekView_1, nls, colorRegistry_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.commentThreadStateBackgroundColorVar = exports.commentViewThreadStateColorVar = exports.commentThreadStateColorVar = exports.commentThreadRangeActiveBackground = exports.commentThreadRangeBackground = void 0;
    exports.getCommentThreadStateBorderColor = getCommentThreadStateBorderColor;
    exports.getCommentThreadStateIconColor = getCommentThreadStateIconColor;
    const resolvedCommentViewIcon = (0, colorRegistry_1.registerColor)('commentsView.resolvedIcon', { dark: colorRegistry_1.disabledForeground, light: colorRegistry_1.disabledForeground, hcDark: colorRegistry_1.contrastBorder, hcLight: colorRegistry_1.contrastBorder }, nls.localize('resolvedCommentIcon', 'Icon color for resolved comments.'));
    const unresolvedCommentViewIcon = (0, colorRegistry_1.registerColor)('commentsView.unresolvedIcon', { dark: colorRegistry_1.listFocusOutline, light: colorRegistry_1.listFocusOutline, hcDark: colorRegistry_1.contrastBorder, hcLight: colorRegistry_1.contrastBorder }, nls.localize('unresolvedCommentIcon', 'Icon color for unresolved comments.'));
    (0, colorRegistry_1.registerColor)('editorCommentsWidget.replyInputBackground', { dark: peekView_1.peekViewTitleBackground, light: peekView_1.peekViewTitleBackground, hcDark: peekView_1.peekViewTitleBackground, hcLight: peekView_1.peekViewTitleBackground }, nls.localize('commentReplyInputBackground', 'Background color for comment reply input box.'));
    const resolvedCommentBorder = (0, colorRegistry_1.registerColor)('editorCommentsWidget.resolvedBorder', { dark: resolvedCommentViewIcon, light: resolvedCommentViewIcon, hcDark: colorRegistry_1.contrastBorder, hcLight: colorRegistry_1.contrastBorder }, nls.localize('resolvedCommentBorder', 'Color of borders and arrow for resolved comments.'));
    const unresolvedCommentBorder = (0, colorRegistry_1.registerColor)('editorCommentsWidget.unresolvedBorder', { dark: unresolvedCommentViewIcon, light: unresolvedCommentViewIcon, hcDark: colorRegistry_1.contrastBorder, hcLight: colorRegistry_1.contrastBorder }, nls.localize('unresolvedCommentBorder', 'Color of borders and arrow for unresolved comments.'));
    exports.commentThreadRangeBackground = (0, colorRegistry_1.registerColor)('editorCommentsWidget.rangeBackground', { dark: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1), light: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1), hcDark: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1), hcLight: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1) }, nls.localize('commentThreadRangeBackground', 'Color of background for comment ranges.'));
    exports.commentThreadRangeActiveBackground = (0, colorRegistry_1.registerColor)('editorCommentsWidget.rangeActiveBackground', { dark: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1), light: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1), hcDark: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1), hcLight: (0, colorRegistry_1.transparent)(unresolvedCommentBorder, .1) }, nls.localize('commentThreadActiveRangeBackground', 'Color of background for currently selected or hovered comment range.'));
    const commentThreadStateBorderColors = new Map([
        [languages.CommentThreadState.Unresolved, unresolvedCommentBorder],
        [languages.CommentThreadState.Resolved, resolvedCommentBorder],
    ]);
    const commentThreadStateIconColors = new Map([
        [languages.CommentThreadState.Unresolved, unresolvedCommentViewIcon],
        [languages.CommentThreadState.Resolved, resolvedCommentViewIcon],
    ]);
    exports.commentThreadStateColorVar = '--comment-thread-state-color';
    exports.commentViewThreadStateColorVar = '--comment-view-thread-state-color';
    exports.commentThreadStateBackgroundColorVar = '--comment-thread-state-background-color';
    function getCommentThreadStateColor(state, theme, map) {
        const colorId = (state !== undefined) ? map.get(state) : undefined;
        return (colorId !== undefined) ? theme.getColor(colorId) : undefined;
    }
    function getCommentThreadStateBorderColor(state, theme) {
        return getCommentThreadStateColor(state, theme, commentThreadStateBorderColors);
    }
    function getCommentThreadStateIconColor(state, theme) {
        return getCommentThreadStateColor(state, theme, commentThreadStateIconColors);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudENvbG9ycy5qcyIsInNvdXJjZVJvb3QiOiJmaWxlOi8vL2hvbWUvcnVubmVyL3dvcmsvbW9kL21vZC9idWlsZHZzY29kZS92c2NvZGUvc3JjLyIsInNvdXJjZXMiOlsidnMvd29ya2JlbmNoL2NvbnRyaWIvY29tbWVudHMvYnJvd3Nlci9jb21tZW50Q29sb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHOzs7OztJQXFDaEcsNEVBRUM7SUFFRCx3RUFFQztJQWxDRCxNQUFNLHVCQUF1QixHQUFHLElBQUEsNkJBQWEsRUFBQywyQkFBMkIsRUFBRSxFQUFFLElBQUksRUFBRSxrQ0FBa0IsRUFBRSxLQUFLLEVBQUUsa0NBQWtCLEVBQUUsTUFBTSxFQUFFLDhCQUFjLEVBQUUsT0FBTyxFQUFFLDhCQUFjLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLG1DQUFtQyxDQUFDLENBQUMsQ0FBQztJQUMvUCxNQUFNLHlCQUF5QixHQUFHLElBQUEsNkJBQWEsRUFBQyw2QkFBNkIsRUFBRSxFQUFFLElBQUksRUFBRSxnQ0FBZ0IsRUFBRSxLQUFLLEVBQUUsZ0NBQWdCLEVBQUUsTUFBTSxFQUFFLDhCQUFjLEVBQUUsT0FBTyxFQUFFLDhCQUFjLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLHFDQUFxQyxDQUFDLENBQUMsQ0FBQztJQUVuUSxJQUFBLDZCQUFhLEVBQUMsMkNBQTJDLEVBQUUsRUFBRSxJQUFJLEVBQUUsa0NBQXVCLEVBQUUsS0FBSyxFQUFFLGtDQUF1QixFQUFFLE1BQU0sRUFBRSxrQ0FBdUIsRUFBRSxPQUFPLEVBQUUsa0NBQXVCLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLDZCQUE2QixFQUFFLCtDQUErQyxDQUFDLENBQUMsQ0FBQztJQUMvUixNQUFNLHFCQUFxQixHQUFHLElBQUEsNkJBQWEsRUFBQyxxQ0FBcUMsRUFBRSxFQUFFLElBQUksRUFBRSx1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